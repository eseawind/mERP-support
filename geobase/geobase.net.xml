<?xml version="1.0"?>
<doc>
    <assembly>
        <name>geobase.net</name>
    </assembly>
    <members>
        <member name="T:Telogis.GeoBase.Routing.SpeedLimitTable">
            <summary>
            Represents a table of speed limits associated with a given GBFS file.
            This is a mapping from SpeedCat to Speed.
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.Routing.RouteFlag">
            <summary>
            Represents a set of flags for a <see cref="T:Telogis.GeoBase.StreetLink"/>. These flags include access
            restrictions, the legal speed limit and the link type.
            </summary>
            <remarks><para><b>Related articles</b>: <a href="20a4ecb6-ef4a-4252-905b-2e4c89a6644f.htm">Modifying the Routing Strategy</a>.</para>
            </remarks>
        </member>
        <member name="M:Telogis.GeoBase.Routing.RouteFlag.#ctor">
            <summary>
            Parameterless constructor for deserialization
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.Routing.RouteFlag.GetFlag(Telogis.GeoBase.Routing.RouteFlag.LINK_BIT_FLAGS)">
            <summary>
            Tests a given <see cref="T:Telogis.GeoBase.Routing.RouteFlag.LINK_BIT_FLAGS"/> to see if it is set.
            </summary>
            <param name="flag"><see cref="T:Telogis.GeoBase.Routing.RouteFlag.LINK_BIT_FLAGS"/></param>
            <returns>Returns <b>true</b> if the given <see cref="T:Telogis.GeoBase.Routing.RouteFlag.LINK_BIT_FLAGS">flag</see>
            is set, otherwise <b>false</b>.</returns>
        </member>
        <member name="M:Telogis.GeoBase.Routing.RouteFlag.GetFlag(Telogis.GeoBase.Routing.RouteFlag.LINK_CHAR_FLAGS)">
            <summary>
            Gets the value of a <see cref="T:Telogis.GeoBase.Routing.RouteFlag.LINK_CHAR_FLAGS"/>.
            </summary>
            <param name="flag"><see cref="T:Telogis.GeoBase.Routing.RouteFlag.LINK_CHAR_FLAGS"/></param>
            <returns>The value of the specified <see cref="T:Telogis.GeoBase.Routing.RouteFlag.LINK_CHAR_FLAGS"/>.
            </returns>
        </member>
        <member name="M:Telogis.GeoBase.Routing.RouteFlag.SpeedToSpeedCat(System.UInt32)">
            <summary>
            Convert a given speed to a speed category (SPEED_CAT). A lower speed category represents
            a faster rate of travel.
            </summary>
            <param name="speed">The speed to convert. This is measured in SPEED_UNITS units</param>
            <returns></returns>
        </member>
        <member name="P:Telogis.GeoBase.Routing.RouteFlag.Number">
            <summary>
            The raw offset of this flag in the flags file
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Routing.RouteFlag.FUNC_CLASS">
             <summary>
             Get the functional class of this link. Used to determine optimal routes.
             </summary>
             <remarks><para>The functional class, generally, has no direct correlation with road attributes
             (such as speed or type). However every link has at least one connection to another link with the same
             (or higher) functionality.</para>
             <list type="table">
             <listheader><term>int value</term><description>Represents</description></listheader>
             <item>
             <term>1</term>
             <description>Roads with very few (if any) speed changes. High volume, maximum speed movement
             between or through major metropolitan area. Access is typically controlled
             </description>
             </item>
            
             <item>
             <term>2</term>
             <description>Roads with very few (if any) speed changes. High volume, high speed traffic movement,
             typically channeled to and from Class 1 roads
             </description>
             </item>
            
             <item>
             <term>3</term>
             <description>Interconnect Class 2 roads with a high volume of traffic at lower speeds
             </description>
             </item>
            
             <item>
             <term>4</term>
             <description>Traverse neighborhoods, carrying a high volume of traffic at moderate speeds
             </description>
             </item>
            
             <item>
             <term>5</term>
             <description>All other roads
             </description>
             </item>
            
             </list>
             </remarks>
        </member>
        <member name="P:Telogis.GeoBase.Routing.RouteFlag.SPEED_CAT">
             <summary>
             Get the speed classification of the link, based on posted or legal speed.
             </summary>
             <remarks>
             Values from this list are used in calculating optimum routes.
             <list type="table">
             <listheader><term>char value</term><description>represents</description></listheader>
            
             <item>
             <term>1</term>
             <description>Speeds greater than 130 kph / 80 mph.</description>
             </item>
            
             <item>
             <term>2</term>
             <description>101-130 kph / 65-80 mph.</description>
             </item>
            
             <item>
             <term>3</term>
             <description>91-100 kph / 55-64 mph.</description>
             </item>
            
             <item>
             <term>4</term>
             <description>71-90 kph / 41-54 mph.</description>
             </item>
            
             <item>
             <term>5</term>
             <description>51-70 kph / 31-40 mph.</description>
             </item>
            
             <item>
             <term>6</term>
             <description>31-50 kph / 21-30 mph.</description>
             </item>
            
             <item>
             <term>7</term>
             <description>11-30 kph / 6-20 mph.</description>
             </item>
            
             <item>
             <term>8</term>
             <description>Less than 11 kph / 6 mph.</description>
             </item>
            
             </list>
             </remarks>
        </member>
        <member name="P:Telogis.GeoBase.Routing.RouteFlag.SPEED_LIM">
            <summary>
            Speed limit on the street in local units.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Routing.RouteFlag.POSTED_SPEED">
            <summary>
            Gets whether or not the SPEED_LIM represents a posted speed limit or an estimate
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Routing.RouteFlag.SPEED_UNITS">
            <summary>
            The Units the speed limit is presented in.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Routing.RouteFlag.ImpliedSpeedLimit">
            <summary>
            Get a speed limit estimate that is determined by additional flag data if the
            actual speed limit is not known.
            </summary>
            <remarks>
            The value is returned in units specified by the SPEED_UNITS attribute.
            
            If the speed limit for this section of the route cannot be found then -1 is returned.
            </remarks>
        </member>
        <member name="P:Telogis.GeoBase.Routing.RouteFlag.LANE_CAT">
             <summary>
             Get character representing the number of lanes in this link.
             </summary>
             <remarks>
             <list type="table">
             <listheader><term>char value</term><description>represents</description></listheader>
            
             <item>
             <term>1</term>
             <description>1 lane.</description>
             </item>
            
             <item>
             <term>2</term>
             <description>2 or 3 lanes.</description>
             </item>
            
             <item>
             <term>3</term>
             <description>4 or more lanes.</description>
             </item>
             </list>
             </remarks>
        </member>
        <member name="P:Telogis.GeoBase.Routing.RouteFlag.DIVIDER">
             <summary>
             Get the effect of the divider (if present) on turning.
             </summary>
             <remarks>
             Descriptions given below are for right-side driving countries. For left-side driving
             countries simply reverse left and right.
             <list type="table">
             <listheader><term>char value</term><description>represents</description></listheader>
             <item>
             <term>L</term>
             <description><b>Line/Polyline only</b>. Turns are allowed at either end, but U-Turns are not allowed along the line/polyline.</description>
             </item>
            
             <item>
             <term>A</term>
             <description><b>Line/Polyline and the intersections at both ends</b>. Left-turns and u-turns are not allowed along the line/polyline. </description>
             </item>
            
             <item>
             <term>1</term>
             <description><b>Line/Polyline and the reference intersection</b>. Left turns and u-turns are not allowed at the reference intersection. U-turns are not allowed along the length of the divider.</description>
             </item>
            
             <item>
             <term>2</term>
             <description><b>Line/Polyline and the non-reference intersection</b>. Left turns and u-turns are not allowed at the non-reference intersection. U-turns are not allowed along the length of the divider.</description>
             </item>
            
             <item>
             <term>N</term>
             <description><b>No divider</b>. No restriction on turns.</description>
             </item>
            
             </list>
             </remarks>
        </member>
        <member name="P:Telogis.GeoBase.Routing.RouteFlag.DIR_TRAVEL">
            <summary>
            Get a <b>char</b> representing the direction of travel on the link.
            </summary>
            <remarks>
            Possible values:<br/>
            <list type="table">
            <listheader><term>char value</term><description>Represents</description></listheader>
            <item>
            <term>B</term>
            <description>Travel is allowed in both directions.
            </description>
            </item>
            <item>
            <term>F</term>
            <description>Direction of travel is one way from the reference end of the link to
            the non-reference end.
            </description>
            </item>
            <item>
            <term>T</term>
            <description>Direction of travel is one way from the non-reference end of the link to
            the reference end.
            </description>
            </item>
            </list>
            </remarks>
        </member>
        <member name="P:Telogis.GeoBase.Routing.RouteFlag.FERRY_TYPE">
            <summary>
            Get if the link is part of a ferry route. For display purposes only.
            </summary>
            <remarks>
            Possible values:<br/>
            <list type="table">
            <listheader><term>char value</term><description>Represents</description></listheader>
            <item>
            <term>B</term>
            <description>Link is a part of a boat ferry route</description>
            </item>
            <item>
            <term>R</term>
            <description>Link is a part of a rail ferry route</description>
            </item>
            <item>
            <term>H</term>
            <description>Link is a part of a street route</description>
            </item>
            </list>
            </remarks>
        </member>
        <member name="P:Telogis.GeoBase.Routing.RouteFlag.ROUTE_TYPE">
            <summary>
            Get whether this road is part of a larger route, where the road's name
            is actually a route number. The return value determines the type of the
            road. See remarks
            </summary>
            <remarks>
            Possible values:<br/>
            <list type="table">
            <listheader><term>char value</term><description>Represents</description></listheader>
            <item>
            <term>(space)</term>
            <description>Not applicable</description>
            </item>
            <item>
            <term>1</term>
            <description>U.S. interstate or European level 1 road</description>
            </item>
            <item>
            <term>2</term>
            <description>U.S. federal or European level 2 road</description>
            </item>
            <item>
            <term>3</term>
            <description>U.S. state or European level 3 road</description>
            </item>
            <item>
            <term>4</term>
            <description>U.S. county or European level 4 road </description>
            </item>
            <item>
            <term>5</term>
            <description>European level 5 road</description>
            </item>
            <item>
            <term>6</term>
            <description>European level 6 road</description>
            </item>
            </list>
            </remarks>
        </member>
        <member name="P:Telogis.GeoBase.Routing.RouteFlag.PARITY">
            <summary>
            Get the type of numbering this link uses
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Routing.RouteFlag.Country">
            <summary>
            Gets the country 
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Routing.RouteFlag.LADDR_MIXED">
            <summary>
            Get if the link has mixed numbering on the left side
            </summary>
            <remarks>
            Mixed numbering means that no all-odd or all-even numbering scheme is followed.
            </remarks>
        </member>
        <member name="P:Telogis.GeoBase.Routing.RouteFlag.RADDR_MIXED">
            <summary>
            Get if the link has mixed numbering on the right side
            </summary>
            <remarks>
            Mixed numbering means that no all-odd or all-even numbering scheme is followed.
            </remarks>
        </member>
        <member name="P:Telogis.GeoBase.Routing.RouteFlag.AR_AUTO">
            <summary>
            Get if automobiles are allowed on this link
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Routing.RouteFlag.AR_BUS">
            <summary>
            Get if buses are allowed on this link
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Routing.RouteFlag.AR_TAXIS">
            <summary>
            Get if taxis are allowed on this link
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Routing.RouteFlag.AR_CARPOOL">
            <summary>
            Get if carpooling vehicles are allowed on this link
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Routing.RouteFlag.AR_PEDEST">
            <summary>
            Get if pedestrians are allowed on this link
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Routing.RouteFlag.AR_TRUCK">
            <summary>
            Get if trucks are allowed on this link
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Routing.RouteFlag.AR_TRAFF">
            <summary>
            Get if through traffic is allowed on this link.
            False for links that are internal to a parking lot or are either on a
            military facility or privately maintained roads and do not allow public
            thoroughfare. Public streets with posted or legal restrictions such as
            "No Through Traffic" or "Residents Only" are also included in this class.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Routing.RouteFlag.AR_DELIV">
            <summary>
            Get if delivery vehicles are allowed on this link
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Routing.RouteFlag.AR_EMERVEH">
            <summary>
            Get if emergency vehicles are allowed on this link
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Routing.RouteFlag.PAVED">
            <summary>
            Get if the link is paved
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Routing.RouteFlag.PRIVATE">
            <summary>
            Get if the link is a private road
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Routing.RouteFlag.FRONTAGE">
            <summary>
            Get if the link is a frontage road
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Routing.RouteFlag.BRIDGE">
            <summary>
            Get if the link is a bridge
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Routing.RouteFlag.TUNNEL">
            <summary>
            Get if the link is a tunnel
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Routing.RouteFlag.RAMP">
            <summary>
            Get if the link is a ramp
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Routing.RouteFlag.TOLLWAY">
            <summary>
            Get if the link is a tollway
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Routing.RouteFlag.POIACCESS">
            <summary>
            Get if the link is an access road to a Point Of Interest
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Routing.RouteFlag.CONTRACC">
            <summary>
            Get if the link is a controlled-access road.
            Typically high-speed, high-volume roads with limited entries and exits
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Routing.RouteFlag.ROUNDABOUT">
            <summary>
            Get if link is part of a roundabout
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Routing.RouteFlag.INTERINTER">
            <summary>
            Get if this link is present within an intersection to maintain its structure,
            rather than as a part of any of the converging streets
            </summary>
            <remarks>
            The driver may perceive the intersection in a different way to that
            which the converging street links would imply. Thus additional
            or different instructions may need to be provided to drivers if INTERINTER
            for a link is set to true.
            </remarks>
        </member>
        <member name="P:Telogis.GeoBase.Routing.RouteFlag.UNDEFTRAFF">
            <summary>
            Get if link is an undefined traffic area. See remarks
            </summary>
            <remarks>
            An undefined traffic area is a paved area where a car can legally travel
            but there are no defined traffic patterns. For example, a carpark.
            </remarks>
        </member>
        <member name="P:Telogis.GeoBase.Routing.RouteFlag.MULTIDIGIT">
            <summary>
            Get if this link is one side of a multiply digitised street
            </summary>
            <remarks>
            Multiply digitised streets occur when opposing lanes of traffic
            are digitised as separate street links.
            </remarks>
        </member>
        <member name="P:Telogis.GeoBase.Routing.RouteFlag.MAXATTR">
            <summary>
            Get if the street has been encoded to include the maximum
            number of attributes for a link
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Routing.RouteFlag.SPECTRFIG">
            <summary>
            Get if there is a special traffic figure. See remarks
            </summary>
            <remarks>
            Indicates an intersection similar to a roundabout,
            where traffic flows are not consistent around the circle.
            Example: A roundabout where the number of lanes changes.
            </remarks>
        </member>
        <member name="P:Telogis.GeoBase.Routing.RouteFlag.INDESCRIB">
            <summary>
            Get if the intersection complexity is such that substantial
            guidance information will be required
            </summary>
            <remarks>
            This may occur in very complex intersection situations
            </remarks>
        </member>
        <member name="P:Telogis.GeoBase.Routing.RouteFlag.MANOEUVRE">
            <summary>
            Get if this link represents a single driving maneuver, for example "turn right".
            </summary>
            <remarks>
            If this value is false, this link may not be navigable in a single maneuver.
            </remarks>
        </member>
        <member name="P:Telogis.GeoBase.Routing.RouteFlag.DIVIDERLEG">
            <summary>
            Get if the divider on this link is a legal divider, not a physical barrier
            e.g. painted road lines.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Routing.RouteFlag.INPROCDATA">
            <summary>
            Get if the link has full geometry, but has an incomplete attribute specification
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Routing.RouteFlag.FULL_GEOM">
            <summary>
            Get if this link has a full geometry of the road network around it
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Routing.RouteFlag.URBAN">
            <summary>
            Get if this link is in a developed or built up urban area. Always <b>false</b> for US
            </summary>
            <remarks>
            For the US this always returns <b>false</b>.
            </remarks>
        </member>
        <member name="P:Telogis.GeoBase.Routing.RouteFlag.JUNCTIONNM">
            <summary>
            Get if the name of this link is applied to all
            ramps that make up a specific junction
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Routing.RouteFlag.EXITNUMBER">
            <summary>
            Get if the name of this link is an exit number, e.g. as on a freeway exit sign
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.Routing.RouteFlag.LINK_CHAR_FLAGS">
            <summary>
            Flags to describe a <see cref="T:Telogis.GeoBase.Link"/>.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Routing.RouteFlag.LINK_CHAR_FLAGS.FUNC_CLASS">
            <summary>
            Describes the functional class of this link.
            See <see cref="P:Telogis.GeoBase.Routing.RouteFlag.FUNC_CLASS"/>.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Routing.RouteFlag.LINK_CHAR_FLAGS.SPEED_CAT">
            <summary>
            Describes the general speed of this link, based on several factors besides the legal limit.
            See <see cref="P:Telogis.GeoBase.Routing.RouteFlag.SPEED_CAT"/>.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Routing.RouteFlag.LINK_CHAR_FLAGS.LANE_CAT">
            <summary>
            Describes the number of lanes in each direction of a road.
            See <see cref="P:Telogis.GeoBase.Routing.RouteFlag.LANE_CAT"/>.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Routing.RouteFlag.LINK_CHAR_FLAGS.DIVIDER">
            <summary>
            The effect of the divider (if any) on performing a turn.
            See <see cref="P:Telogis.GeoBase.Routing.RouteFlag.DIVIDER"/>.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Routing.RouteFlag.LINK_CHAR_FLAGS.DIR_TRAVEL">
            <summary>
            The allowed direction(s) of travel on this link.
            See <see cref="P:Telogis.GeoBase.Routing.RouteFlag.DIR_TRAVEL"/>.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Routing.RouteFlag.LINK_CHAR_FLAGS.FERRY_TYPE">
            <summary>
            Display purposes only. Describes if this link is a ferry link.
            See <see cref="P:Telogis.GeoBase.Routing.RouteFlag.FERRY_TYPE"/>.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Routing.RouteFlag.LINK_CHAR_FLAGS.ROUTE_TYPE">
            <summary>
            The route type.
            See <see cref="P:Telogis.GeoBase.Routing.RouteFlag.ROUTE_TYPE"/>.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Routing.RouteFlag.LINK_CHAR_FLAGS.PARITY">
            <summary>
            The type of numbering the link uses.
            See <see cref="P:Telogis.GeoBase.Routing.RouteFlag.PARITY"/>.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Routing.RouteFlag.LINK_CHAR_FLAGS.SPEED_LIM1">
            <summary>
            Describes (in conjunction with <see cref="F:Telogis.GeoBase.Routing.RouteFlag.LINK_CHAR_FLAGS.SPEED_LIM2"/>) the legal speed limit.
            See <see cref="P:Telogis.GeoBase.Routing.RouteFlag.SPEED_LIM"/>.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Routing.RouteFlag.LINK_CHAR_FLAGS.SPEED_LIM2">
            <summary>
            Describes (in conjunction with <see cref="F:Telogis.GeoBase.Routing.RouteFlag.LINK_CHAR_FLAGS.SPEED_LIM1"/>) the legal speed limit.
            See <see cref="P:Telogis.GeoBase.Routing.RouteFlag.SPEED_LIM"/>.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Routing.RouteFlag.LINK_CHAR_FLAGS.SPEED_UNITS">
            <summary>
            The units in which SPEED_LIMIT and SPEED_CAT are measured.
            See <see cref="P:Telogis.GeoBase.Routing.RouteFlag.SPEED_UNITS"/>.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Routing.RouteFlag.LINK_CHAR_FLAGS.POSTED_SPEED">
            <summary>
            Indicates whether the speed limit is verified
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.Routing.RouteFlag.LINK_BIT_FLAGS">
            <summary>
            Boolean flags describing a <see cref="T:Telogis.GeoBase.Link"/>.
            See <see cref="T:Telogis.GeoBase.Routing.RouteFlag"/> for a sorted list
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.StringsGBDVersion.major">
            <summary>
            Major version number
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.StringsGBDVersion.minor">
            <summary>
            Minor version number.
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.LocalGeoCoder">
            <summary>
            Forward and reverse geocoding services performed on the local machine.
            </summary>
            <remarks>
            <para>
            Forward geocoding takes physical address information in
            string form, and returns a <see cref="T:Telogis.GeoBase.LatLon"/> coordinate.
            </para>
            <para>
            Reverse geocoding takes a <see cref="T:Telogis.GeoBase.LatLon"/> coordinate
            and returns physical address information.
            </para>
            </remarks>
        </member>
        <member name="M:Telogis.GeoBase.LocalGeoCoder.#ctor">
            <summary>
            The default constructor.
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.LocalGeoCoder.#ctor(Telogis.GeoBase.Geocoding.IExternalGeocoders,Telogis.GeoBase.Internal.IGeoCoderIntDesktop)">
            <summary>
            Constructor used for dependency injection
            </summary>
            <param name="externalGeocoders">The <see cref="T:Telogis.GeoBase.Geocoding.IExternalGeocoders"/> implementation.</param>
            <param name="geoCoderIntDesktop">The <see cref="T:Telogis.GeoBase.Internal.IGeoCoderIntDesktop"/> implementation.</param>
        </member>
        <member name="M:Telogis.GeoBase.LocalGeoCoder.ReverseGeoCode(Telogis.GeoBase.LatLon)">
            <summary>
            Find an <see cref="T:Telogis.GeoBase.Address"/> from a given <see cref="T:Telogis.GeoBase.LatLon"/>.
            </summary>
            <param name="location">A <see cref="T:Telogis.GeoBase.LatLon"/> to resolve.</param>
            <returns><see cref="T:Telogis.GeoBase.Address"/></returns>
        </member>
        <member name="M:Telogis.GeoBase.LocalGeoCoder.ReverseGeoCodeFull(Telogis.GeoBase.LatLon)">
             <summary>
            
             Find a <see cref="T:Telogis.GeoBase.GeoCodeFull"/> from a given <see cref="T:Telogis.GeoBase.LatLon"/>.
             </summary>
             <remarks>This returns <see cref="T:Telogis.GeoBase.GeoCodeFull">detailed information</see> pertaining
             to the given <see cref="T:Telogis.GeoBase.LatLon">point</see>. See also <see cref="M:Telogis.GeoBase.LocalGeoCoder.ReverseGeoCode(Telogis.GeoBase.LatLon)"/>.
             </remarks>
             <param name="location">A <see cref="T:Telogis.GeoBase.LatLon"/> to resolve.</param>
             <returns><see cref="T:Telogis.GeoBase.GeoCodeFull"/></returns>
        </member>
        <member name="M:Telogis.GeoBase.LocalGeoCoder.ReverseGeoCodeFull(Telogis.GeoBase.LatLon,System.Double)">
            <summary>
            Find a <see cref="T:Telogis.GeoBase.GeoCodeFull"/> from a given <see cref="T:Telogis.GeoBase.LatLon"/> and <b>heading</b>.
            </summary>
            <param name="location">A <see cref="T:Telogis.GeoBase.LatLon"/> to resolve.</param>
            <param name="heading">A heading (bearing, measured in degrees).</param>
            <returns><see cref="T:Telogis.GeoBase.GeoCodeFull"/></returns>
        </member>
        <member name="M:Telogis.GeoBase.LocalGeoCoder.ReverseGeoCodeFull(Telogis.GeoBase.LatLon,System.String[])">
            <summary>
            Find a <see cref="T:Telogis.GeoBase.GeoCodeFull"/> from a given <see cref="T:Telogis.GeoBase.LatLon"/>
            and last known location.
            </summary>
            <remarks>This method uses the last known location (usually from a previous GeoCode)
            to improve the precision of the Reverse GeoCode. This method works well when a number
            of routes overlap and a decision must be made as to which route the
            <see cref="T:Telogis.GeoBase.LatLon">point</see> lies on.</remarks>
            <param name="location">A <see cref="T:Telogis.GeoBase.LatLon"/> to resolve.</param>
            <param name="lastNames">An array containing name(s) of the last known location.</param>
            <returns><see cref="T:Telogis.GeoBase.GeoCodeFull"/></returns>
        </member>
        <member name="M:Telogis.GeoBase.LocalGeoCoder.ReverseGeoCodeFull(Telogis.GeoBase.LatLon,System.String[],System.Double)">
            <summary>
            Find a <see cref="T:Telogis.GeoBase.GeoCodeFull"/> from a given <see cref="T:Telogis.GeoBase.LatLon"/>,
            last known location and distance from the last location.
            </summary>
            <param name="location">A <see cref="T:Telogis.GeoBase.LatLon"/> to resolve.</param>
            <param name="lastNames">An array containing name(s) of the last known location.</param>
            <param name="dist">The distance (measured in degrees) from the last known location to present location.</param>
            <returns><see cref="T:Telogis.GeoBase.GeoCodeFull"/></returns>
        </member>
        <member name="M:Telogis.GeoBase.LocalGeoCoder.ReverseGeoCodeFull(Telogis.GeoBase.LatLon,System.String[],System.Double,System.Boolean,Telogis.GeoBase.ReverseGeoCodeMode)">
            <summary>
            Find a <see cref="T:Telogis.GeoBase.GeoCodeFull"/> from a given <see cref="T:Telogis.GeoBase.LatLon"/>,
            last location and distance from the last location.
            </summary>
            <remarks>The <i>global</i> flag controls the fallback state of the query. If <i>global</i> is <b>true</b>
            and the location cannot be resolved to a street address then the nearest city within 10 degrees is returned.
            This means that a successful resolution is almost certainly guaranteed (unless the <see cref="T:Telogis.GeoBase.LatLon"/>
            is located in an ocean), however there is a significant performance hit in finding the nearest city.
            </remarks>
            <param name="location">A <see cref="T:Telogis.GeoBase.LatLon"/> to resolve.</param>
            <param name="lastNames">An array containing name(s) of the last known location.</param>
            <param name="dist">The distance (measured in degrees) from the last known location to present location.</param>
            <param name="global">If <b>true</b> and an address cannot be found a nearby city is returned. If <b>false</b> and
            an address cannot be found, the Reverse GeoCode will return a <b>null</b> <see cref="T:Telogis.GeoBase.GeoCodeFull"/>.
            See Remarks.</param>
            <param name="mode">The type of streets that should be returned by this geocode.</param>
            <returns><see cref="T:Telogis.GeoBase.GeoCodeFull"/></returns>
        </member>
        <member name="M:Telogis.GeoBase.LocalGeoCoder.ReverseGeoCodeFull(Telogis.GeoBase.LatLon,System.Double,System.Double,System.Boolean)">
            <summary>
            Find a <see cref="T:Telogis.GeoBase.GeoCodeFull"/> from a given <see cref="T:Telogis.GeoBase.LatLon"/>,
            last location and distance from the last location.
            </summary>
            <remarks>The <i>global</i> flag controls the fallback state of the query. If <i>global</i> is <b>true</b>
            and the location cannot be resolved to a street address then the nearest city within 10 degrees is returned.
            This means that a successful resolution is almost certainly guaranteed (unless the <see cref="T:Telogis.GeoBase.LatLon"/>
            is located in an ocean), however there is a significant performance hit in finding the nearest city.
            </remarks>
            <param name="location">A <see cref="T:Telogis.GeoBase.LatLon"/> to resolve.</param>
            <param name="dist">The distance (measured in degrees) from the last known location to present location.</param>
            <param name="global">If <b>true</b> and an address cannot be found a nearby city is returned. If <b>false</b> and
            an address cannot be found, the Reverse GeoCode will return a <b>null</b> <see cref="T:Telogis.GeoBase.GeoCodeFull"/>.
            See Remarks.</param>
            <param name="heading">Navigational heading, measured in <b>degrees</b>.</param>
            <returns><see cref="T:Telogis.GeoBase.GeoCodeFull"/></returns>
        </member>
        <member name="M:Telogis.GeoBase.LocalGeoCoder.ReverseGeoCodeFull(Telogis.GeoBase.LatLon,System.Double,System.Double,System.Boolean,System.Double)">
            <summary>
            Find a <see cref="T:Telogis.GeoBase.GeoCodeFull"/> from a given <see cref="T:Telogis.GeoBase.LatLon"/>,
            last location and distance from the last location.
            </summary>
            <remarks>The <i>global</i> flag controls the fallback state of the query. If <i>global</i> is <b>true</b>
            and the location cannot be resolved to a street address then the nearest city within 10 degrees is returned.
            This means that a successful resolution is almost certainly guaranteed (unless the <see cref="T:Telogis.GeoBase.LatLon"/>
            is located in an ocean), however there is a significant performance hit in finding the nearest city.
            </remarks>
            <param name="location">A <see cref="T:Telogis.GeoBase.LatLon"/> to resolve.</param>
            <param name="dist">The distance (measured in degrees) from the last known location to present location.</param>
            <param name="global">If <b>true</b> and an address cannot be found a nearby city is returned. If <b>false</b> and
            an address cannot be found, the Reverse GeoCode will return a <b>null</b> <see cref="T:Telogis.GeoBase.GeoCodeFull"/>.
            See Remarks.</param>
            <param name="heading">Navigational heading, measured in <b>degrees</b>.</param>
            <param name="crossStreetDist">The maximum distance in meters to search for a cross street.</param>
            <returns><see cref="T:Telogis.GeoBase.GeoCodeFull"/></returns>
        </member>
        <member name="M:Telogis.GeoBase.LocalGeoCoder.ReverseGeoCodeFull(Telogis.GeoBase.LatLon,System.String[],System.Double,System.Double,System.Boolean,Telogis.GeoBase.ReverseGeoCodeMode)">
            <summary>
            Find a <see cref="T:Telogis.GeoBase.GeoCodeFull"/> from a given location, name of last known location,
            distance from last known location and current heading.
            </summary>
            <remarks>The <i>global</i> flag controls the fallback state of the query. If <i>global</i> is <b>true</b>
            and the location cannot be resolved to a street address then the nearest city within 10 degrees is returned.
            This means that a successful resolution is almost certainly guaranteed (unless the <see cref="T:Telogis.GeoBase.LatLon"/>
            is located in an ocean), however there is a significant performance hit in finding the nearest city.
            </remarks>
            <param name="location">A <see cref="T:Telogis.GeoBase.LatLon"/> to resolve.</param>
            <param name="lastNames">An array containing name(s) of the last known location.</param>
            <param name="dist">The distance (measured in degrees) from the last known location to present location.</param>
            <param name="heading">A heading (measured in degrees).</param>
            <param name="global">If <b>true</b> and an address cannot be found a nearby city is returned. If <b>false</b> and
            an address cannot be found, the Reverse GeoCode will return a <b>null</b> <see cref="T:Telogis.GeoBase.GeoCodeFull"/>.
            See Remarks.</param>
            <param name="mode">The type of streets that should be returned by this geocode.</param>
            <returns><see cref="T:Telogis.GeoBase.GeoCodeFull"/></returns>
        </member>
        <member name="M:Telogis.GeoBase.LocalGeoCoder.ReverseGeoCodeFull(Telogis.GeoBase.LatLon,System.String[],System.Double,System.Double,System.Boolean,Telogis.GeoBase.ReverseGeoCodeMode,System.Double)">
            <summary>
            Find a <see cref="T:Telogis.GeoBase.GeoCodeFull"/> from a given location, name of last known location,
            distance from last known location and current heading.
            </summary>
            <remarks>The <i>global</i> flag controls the fallback state of the query. If <i>global</i> is <b>true</b>
            and the location cannot be resolved to a street address then the nearest city within 10 degrees is returned.
            This means that a successful resolution is almost certainly guaranteed (unless the <see cref="T:Telogis.GeoBase.LatLon"/>
            is located in an ocean), however there is a significant performance hit in finding the nearest city.
            </remarks>
            <param name="location">A <see cref="T:Telogis.GeoBase.LatLon"/> to resolve.</param>
            <param name="lastNames">An array containing name(s) of the last known location.</param>
            <param name="dist">The distance (measured in degrees) from the last known location to present location.</param>
            <param name="heading">A heading (measured in degrees).</param>
            <param name="global">If <b>true</b> and an address cannot be found a nearby city is returned. If <b>false</b> and
            an address cannot be found, the Reverse GeoCode will return a <b>null</b> <see cref="T:Telogis.GeoBase.GeoCodeFull"/>.
            See Remarks.</param>
            <param name="mode">The type of streets that should be returned by this geocode.</param>
            <param name="crossStreetDist">The maximum distance in degrees to search for a cross street.</param>
            <returns><see cref="T:Telogis.GeoBase.GeoCodeFull"/></returns>
        </member>
        <member name="M:Telogis.GeoBase.LocalGeoCoder.ReverseGeoCode(Telogis.GeoBase.LatLon,System.Double@,Telogis.GeoBase.DistanceUnit)">
            <summary>
            Find an <see cref="T:Telogis.GeoBase.Address"/> from a given <see cref="T:Telogis.GeoBase.LatLon"/>.
            </summary>
            <param name="location">A <see cref="T:Telogis.GeoBase.LatLon"/> to resolve.</param>
            <param name="distance">The distance (measured in degrees) from the last known location to present location.</param>
            <param name="units">Units in which the distance is measured, see <see cref="T:Telogis.GeoBase.DistanceUnit"/>.</param>
            <returns><see cref="T:Telogis.GeoBase.Address"/>.</returns>
        </member>
        <member name="M:Telogis.GeoBase.LocalGeoCoder.ReverseGeoCode(Telogis.GeoBase.Vector,Telogis.GeoBase.Vector,Telogis.GeoBase.Address)">
            <summary>
            Peform a Reverse GeoCode to resolve the current location and last known location to an <see cref="T:Telogis.GeoBase.Address"/>.
            </summary>
            <remarks>It is suggested that this method be called successively, using the results of the previous call in
            the next call. This will increase the precision of the search.</remarks>
            <param name="location"><see cref="T:Telogis.GeoBase.Vector"/> representing location to resolve.</param>
            <param name="lastLocation">A <see cref="T:Telogis.GeoBase.Vector"/> representing the last known location.</param>
            <param name="lastAddress">A <see cref="T:Telogis.GeoBase.Address"/> representing the last known address.</param>
            <returns></returns>
        </member>
        <member name="M:Telogis.GeoBase.LocalGeoCoder.TruncateResults(Telogis.GeoBase.GeocodeAddress[],System.Int32)">
            <summary>
            Truncates an array of GeocodeAddresses to the specified size.
            </summary>
            <param name="results"></param>
            <param name="maxResults"></param>
            <returns>
            </returns>
        </member>
        <member name="M:Telogis.GeoBase.LocalGeoCoder.GeoCode(System.String,Telogis.GeoBase.Country)">
            <summary>
            Use Forward GeoCoding to resolve an address and country to one or more
            <see cref="T:Telogis.GeoBase.GeocodeAddress">GeocodeAddresses</see>.
            </summary>
            <remarks></remarks>
            <param name="address">A string containing an address.</param>
            <param name="country">The <see cref="T:Telogis.GeoBase.Country"/> in which to perfom the GeoCoding.</param>
            <returns>An array of <see cref="T:Telogis.GeoBase.GeocodeAddress">GeocodeAddresses</see>.</returns>
        </member>
        <member name="M:Telogis.GeoBase.LocalGeoCoder.GeoCode(System.String,Telogis.GeoBase.Country,System.Int32)">
            <summary>
            Use Forward GeoCoding to resolve an address and country to one or more
            <see cref="T:Telogis.GeoBase.GeocodeAddress">GeocodeAddresses</see>.
            </summary>
            <remarks></remarks>
            <param name="address">A string containing an address.</param>
            <param name="country">The <see cref="T:Telogis.GeoBase.Country"/> in which to perfom the GeoCoding.</param>
            <param name="maxResults">The maximum number of results to return.</param>
            <returns>An array of <see cref="T:Telogis.GeoBase.GeocodeAddress">GeocodeAddresses</see>.</returns>
        </member>
        <member name="F:Telogis.GeoBase.LocalGeoCoder.crossSplitters">
            <summary>
            Strings that indicate cross street addresses.
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.LocalGeoCoder.HandleCrossStreetInput(System.String,Telogis.GeoBase.Country,Telogis.GeoBase.Internal.IGeoCoder,Telogis.GeoBase.Internal.gb_geocode_addr[]@,Telogis.GeoBase.Internal.StreetAddressMatch[]@)">
            <summary>
            Handle cross street addresses.
            </summary>
            <param name="address">Search string.</param>
            <param name="cntry">Country.</param>
            <param name="coder">GeoCoder.</param>
            <param name="addrs">Parsed addresses.</param>
            <param name="matches">Matches.</param>
        </member>
        <member name="M:Telogis.GeoBase.LocalGeoCoder.FixStateNames(System.Int32[],Telogis.GeoBase.Internal.gb_geocode_addr[],Telogis.GeoBase.Internal.StreetAddressMatch[])">
            <summary>
            Make it so that the statenames provided are long or short depending on whether they are
            long or short in the country file.
            </summary>
            <param name="searchArray"></param>
            <param name="addrs"></param>
            <param name="matches"></param>
        </member>
        <member name="M:Telogis.GeoBase.LocalGeoCoder.HandleCityState(System.String,Telogis.GeoBase.Internal.gb_geocode_addr[]@,Telogis.GeoBase.Internal.StreetAddressMatch[]@)">
            <summary>
            Handle cases where a state name on its own has been parsed as a city.
            </summary>
            <param name="address">Search address</param>
            <param name="addrs">Matched addresses</param>
            <param name="matches">Matches</param>
        </member>
        <member name="M:Telogis.GeoBase.LocalGeoCoder.GeoCode(System.String,System.String,System.String,System.String,Telogis.GeoBase.Country)">
            <summary>
            Use Forward GeoCoding to resolve an address, ciry, region, postal code and <see cref="T:Telogis.GeoBase.Country"/>
            to one or more <see cref="T:Telogis.GeoBase.GeocodeAddress">GeocodeAddresses</see>.
            </summary>
            <param name="address">A string representing an address.</param>
            <param name="city">A string representing the city.</param>
            <param name="region">A string representing the region.</param>
            <param name="postalCode">A string representing the postal code.</param>
            <param name="country">The <see cref="T:Telogis.GeoBase.Country"/> to perform the GeoCode in.</param>
            <returns>An array of <see cref="T:Telogis.GeoBase.GeocodeAddress">GeocodeAddresses</see>.</returns>
        </member>
        <member name="M:Telogis.GeoBase.LocalGeoCoder.GeoCode(System.String,System.String,System.String,System.String,Telogis.GeoBase.Country,System.Int32)">
            <summary>
            Use Forward GeoCoding to resolve an address, city, region, postal code and <see cref="T:Telogis.GeoBase.Country"/>
            to one or more <see cref="T:Telogis.GeoBase.GeocodeAddress">GeocodeAddresses</see>.
            </summary>
            <param name="address">A string representing an address.</param>
            <param name="city">A string representing the city.</param>
            <param name="region">A string representing the region.</param>
            <param name="postalCode">A string representing the postal code.</param>
            <param name="country">The <see cref="T:Telogis.GeoBase.Country"/> to perform the GeoCode in.</param>
            <param name="maxResults">The maximum number of results to return.</param>
            <returns>An array of <see cref="T:Telogis.GeoBase.GeocodeAddress">GeocodeAddresses</see>.</returns>
        </member>
        <member name="M:Telogis.GeoBase.LocalGeoCoder.GeoCode(System.Int32,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,Telogis.GeoBase.Country)">
            <summary>
            Use Forward GeoCoding to resolve an address (specified as separate fields), city, region, postal code and <see cref="T:Telogis.GeoBase.Country"/>
            to one or more <see cref="T:Telogis.GeoBase.GeocodeAddress">GeocodeAddresses</see>.
            </summary>
            <param name="number">An integer representing the street number.</param>
            <param name="prefix">A string representing the street prefix.</param>
            <param name="bf_type">A string representing the street type (before).</param>
            <param name="name">A string representing the street name.</param>
            <param name="af_type">A string representing the street type (after).</param>
            <param name="suffix">A string representing the street suffix.</param>
            <param name="city">A string representing the city.</param>
            <param name="region">A string representing the region.</param>
            <param name="postalCode">A string representing the postal code.</param>
            <param name="country">The <see cref="T:Telogis.GeoBase.Country"/> to perform the GeoCode in.</param>
            <returns>An array of <see cref="T:Telogis.GeoBase.GeocodeAddress">GeocodeAddresses</see>.</returns>
        </member>
        <member name="M:Telogis.GeoBase.LocalGeoCoder.GeoCode(System.Int32,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,Telogis.GeoBase.Country,System.Int32)">
            <summary>
            Use Forward GeoCoding to resolve an address (specified as separate fields), city, region, postal code and <see cref="T:Telogis.GeoBase.Country"/>
            to one or more <see cref="T:Telogis.GeoBase.GeocodeAddress">GeocodeAddresses</see>.
            </summary>
            <param name="number">An integer representing the street number.</param>
            <param name="prefix">A string representing the street prefix.</param>
            <param name="bf_type">A string representing the street type (before).</param>
            <param name="name">A string representing the street name.</param>
            <param name="af_type">A string representing the street type (after).</param>
            <param name="suffix">A string representing the street suffix.</param>
            <param name="city">A string representing the city.</param>
            <param name="region">A string representing the region.</param>
            <param name="postalCode">A string representing the postal code.</param>
            <param name="country">The <see cref="T:Telogis.GeoBase.Country"/> to perform the GeoCode in.</param>
            <param name="maxResults">The maximum number of results to return.</param>
            <returns>An array of <see cref="T:Telogis.GeoBase.GeocodeAddress">GeocodeAddresses</see>.</returns>
        </member>
        <member name="P:Telogis.GeoBase.LocalGeoCoder.Instance">
            <summary>
            Provides the single instance of ExternalGeocoders
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.ReverseGeoCodeArgs">
            <summary>
            Container for arguments to <see cref="M:Telogis.GeoBase.GeoCoder.ReverseGeoCodeFull(Telogis.GeoBase.ReverseGeoCodeArgs)"/>. 
            All arguments barring Location are optional.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.ReverseGeoCodeArgs.Location">
            <summary>
            The <see cref="T:Telogis.GeoBase.LatLon"/> to resolve.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.ReverseGeoCodeArgs.Speed">
            <summary>
            The vehicle's current speed in mp/h. Defaults to -1 (unused).
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.ReverseGeoCodeArgs.Global">
            <summary>
            This flag controls the fallback state of the query. If <i>global</i> is <b>true</b>
            and the location cannot be resolved to a street address then the nearest city within 10 degrees is returned.
            This means that a successful resolution is almost certainly guaranteed (unless the <see cref="T:Telogis.GeoBase.LatLon"/>
            is located in an ocean), however there is a significant performance hit in finding the nearest city.
            Defaults to true.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.ReverseGeoCodeArgs.Mode">
            <summary>
            The type of streets that should be returned by this geocode. 
            Defaults to <see cref="F:Telogis.GeoBase.ReverseGeoCodeMode.AllLinks"/>. 
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.ReverseGeoCodeArgs.CrossStreetDist">
            <summary>
            The maximum distance in degrees to search for a cross street.
            Defaults to 0.01 but this default my be changed through the
            get/set methods in Geocoder.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.ReverseGeoCodeArgs.Heading">
            <summary>
            A heading (measured in degrees). Defaults to infinity (unused).
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.ReverseGeoCodeArgs.LastNames">
            <summary>
            An array containing name(s) of the last known location. Defaults to null (unused).
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.ReverseGeoCodeArgs.MaxDistance">
            <summary>
            ReverseGeoCodeFull will return null if there are no results within MaxDistance degrees of the input location .
            Defaults to 1.0.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.ReverseGeoCodeArgs.AlignSearchLimit">
            <summary>
            The distance (in meters) after which vehicle alignment is not considered.
            Defaults to 30.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.ReverseGeoCodeArgs.UseRoadWidth">
            <summary>
            Whether to consider road width when reverse geocoding.
            Defaults to false.
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.ReverseGeoCodeArgs.SetSpeed(System.Double,Telogis.GeoBase.SpeedUnit)">
            <summary>
            Set the vehicle's speed using a specified <see cref="T:Telogis.GeoBase.SpeedUnit"/>.
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.ReverseGeoCodeArgs.SetAlignSearchLimit(System.Double,Telogis.GeoBase.DistanceUnit)">
            <summary>
            Set the aligned search limit using a specified <see cref="T:Telogis.GeoBase.DistanceUnit"/>.
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.ReverseGeoCodeArgs.#ctor(Telogis.GeoBase.LatLon)">
            <summary>
            Creates a parameter object for use with <see cref="M:Telogis.GeoBase.GeoCoder.ReverseGeoCodeFull(Telogis.GeoBase.ReverseGeoCodeArgs)"/>
            </summary>
            <param name="location">The location to resolve.</param>
        </member>
        <member name="T:Telogis.GeoBase.GeoCoder">
            <summary>
            The GeoCoder allows you to convert a map coordinate to/from an address.
            </summary>
            <remarks>
            <para>
            Forward geocoding takes physical address information in
            string form, and returns a <see cref="T:Telogis.GeoBase.LatLon"/> coordinate.
            Use an overload of the <see cref="M:Telogis.GeoBase.GeoCoder.GeoCode(System.String,Telogis.GeoBase.Country)"/> method to peform a forward geocode.
            </para>
            <para>
            Reverse geocoding takes a <see cref="T:Telogis.GeoBase.LatLon"/> coordinate
            and returns physical address information. Use an overload of the 
            <see cref="M:Telogis.GeoBase.GeoCoder.ReverseGeoCode(Telogis.GeoBase.LatLon)"/> method to obtain an <see cref="T:Telogis.GeoBase.Address"/>
            object (street name, suburb, city and other regional information). For more detailed
            information about the map coordinate consider using an overload of the 
            <see cref="M:Telogis.GeoBase.GeoCoder.ReverseGeoCodeFull(Telogis.GeoBase.LatLon)"/> method to obtain a <see cref="T:Telogis.GeoBase.GeoCodeFull"/>
            object (this includes an Address object, but also provides information about the nearest
            street section and the timezone of the map coordinate).
            </para>
            <para><b>Related articles</b>: <a href="243b2474-98eb-4087-902d-c206207674b3.htm">Geocoding Concept</a>, 
            <a href="00cee350-f9af-4050-8dcc-7baec54b4374.htm">Searching for a Location</a>, 
            <a href="ba99dd3e-b8bb-40e3-9e15-5aa9a6a2e6ff.htm">Common Concepts</a>, 
            <a href="14ad9e39-768a-4a15-9e0e-c7d3dd2b7d25.htm">Creating a Route</a>, 
            <a href="bca3b8a4-3b27-4fe9-ad1a-dab66a4e2831.htm">Routing and Directions</a>.</para>
            </remarks>
        </member>
        <member name="M:Telogis.GeoBase.GeoCoder.ReverseGeoCode(Telogis.GeoBase.LatLon)">
            <summary>
            Reverse geocode from a <see cref="T:Telogis.GeoBase.LatLon"/> to a street <see cref="T:Telogis.GeoBase.Address"/>. This
            method will return null if an address could not be found.
            </summary>
            <remarks>
            <para>The geocoder will find the nearest street to the given location, or the nearest location to the given street address.</para>
            <para>The street number is calculated using the nearest point on the street, and may be interpolated where data is unavailable.</para>
            <para>If this method returns null check that you have map data for the location (LatLon) you are reverse geocoding.</para>
            <para><b>Related articles</b>: <a href="243b2474-98eb-4087-902d-c206207674b3.htm">Geocoding Concept</a>, 
            <a href="6a56c30f-1c25-4a61-9413-3821d774a9df.htm">Reverse Geocoding</a>.</para>
            </remarks>
            <example>
            See <see cref="T:Telogis.GeoBase.MapCtrl"/> for an example of reverse geocode usage.
            </example>
            <param name="location">Location to find.</param>
            <returns>An <see cref="T:Telogis.GeoBase.Address"/> or null.</returns>
        </member>
        <member name="M:Telogis.GeoBase.GeoCoder.ReverseGeoCodeFull(Telogis.GeoBase.LatLon)">
            <summary>
            Reverse GeoCode a <see cref="T:Telogis.GeoBase.LatLon"/> to a street address
            and retrieve additional information specific to the
            <see cref="T:Telogis.GeoBase.StreetLink"/> the point was closest to.
            </summary>
            <param name="location">Location to find.</param>
            <returns>A <see cref="T:Telogis.GeoBase.GeoCodeFull"/> object or null</returns>
        </member>
        <member name="M:Telogis.GeoBase.GeoCoder.ReverseGeoCodeFull(Telogis.GeoBase.ReverseGeoCodeArgs)">
            <summary>
            Reverse GeoCode a <see cref="T:Telogis.GeoBase.ReverseGeoCodeArgs"/> to a street address
            and retrieve additional information specific to the
            <see cref="T:Telogis.GeoBase.StreetLink"/> the point was closest to.
            </summary>
            <param name="args">Location and optional parameters to reverse GC with.</param>
            <returns>A <see cref="T:Telogis.GeoBase.GeoCodeFull"/> object or null</returns>
        </member>
        <member name="M:Telogis.GeoBase.GeoCoder.ShortenState(System.String,Telogis.GeoBase.Country)">
            <summary>
            Convert a given state to its two-letter abbreviation. Given "Texas" <b>ShortenState</b> will return "TX".
            </summary>
            <remarks>Capitalisation of the state's full name is ignored. The abbreviation is always returned
            as upper-case.</remarks>
            <param name="state">Name of a state</param>
            <param name="country">See <see cref="T:Telogis.GeoBase.Country"/></param>
            <returns>Two-letter abbreviation for state</returns>
            <example><code lang="C#">
            string shortState = GeoCoder.ShortenState("New Carolina", Country.USA);
            // shortenState = "NC"
            </code></example>
        </member>
        <member name="M:Telogis.GeoBase.GeoCoder.LengthenState(System.String,Telogis.GeoBase.Country)">
            <summary>
            Convert a two-letter state abbreviation to the state's full name. Given "NC" <b>LengthenState</b> will return "North Carolina".
            </summary>
            <remarks>Capitalisation of the state's abbreviation is ignored.</remarks>
            <param name="state">Two-letter abreviation for a state</param>
            <param name="country">See <see cref="T:Telogis.GeoBase.Country"/></param>
            <returns>The state name associated with the given abbreviation.</returns>
            <example><code lang="C#">
            string stateName = GeoCoder.LengthenState("NC", Country.USA);
            // stateName = "New Carolina"
            stateName = GeoCoder.LengthenState("ny", Country.USA);
            // stateName = "New York"
            </code></example>
        </member>
        <member name="M:Telogis.GeoBase.GeoCoder.GetCrossStreetDistance(Telogis.GeoBase.DistanceUnit)">
            <summary>
            Return the maximum distance to search for a cross street when doing a reverse geocode full.
            </summary>
            <param name="units">The units to return the distance in</param>
            <returns>The maximum distance, in the units specified</returns>
            <remarks>
            Cross streets can be found by inspecting the <seealso cref="P:Telogis.GeoBase.GeoCodeFull.CrossStreet"/> member
            in the result of a reverse geocode full.
            </remarks>
        </member>
        <member name="M:Telogis.GeoBase.GeoCoder.SetCrossStreetDistance(System.Double,Telogis.GeoBase.DistanceUnit)">
            <summary>
            Set the maximum distance to search for a cross street when doing a full reverse GeoCode.
            </summary>
            <param name="dist">The maximum distance to search for a cross street, in the units specified</param>
            <param name="units">The units to return the distance in</param>
            <remarks>
            Cross streets can be found by inspecting the <seealso cref="P:Telogis.GeoBase.GeoCodeFull.CrossStreet"/> member
            in the result of a reverse geocode full. By setting this distance to a higher number, the street will
            be searched further to find a cross street. A longer search involves more processing, and subsequently
            takes longer to execute.
            </remarks>
        </member>
        <member name="M:Telogis.GeoBase.GeoCoder.ReverseGeoCodeFull(Telogis.GeoBase.LatLon,System.Double)">
            <summary>
            Reverse geocode a <see cref="T:Telogis.GeoBase.LatLon"/> to a street address
            and retrieve additional information specific to the
            <see cref="T:Telogis.GeoBase.StreetLink"/> the point was closest to. In addition,
            this method will try to find a nearby street that is aligned to the heading
            parameter.
            </summary>
            <param name="location">Location to find</param>
            <param name="heading">The GeoCoder will look for a street aligned with this heading.
            This should be a value between 0 and 360 degrees, with 0 degrees representing due north</param>
            <returns>A <see cref="T:Telogis.GeoBase.GeoCodeFull"/> object or null</returns>
        </member>
        <member name="M:Telogis.GeoBase.GeoCoder.ReverseGeoCodeFull(Telogis.GeoBase.LatLon,System.String[])">
            <summary>
            Reverse geocode a <see cref="T:Telogis.GeoBase.LatLon"/> to a street address
            and retrieve additional information specific to the
            <see cref="T:Telogis.GeoBase.StreetLink"/> the point was closest to.
            </summary>
            <param name="location">Location to find.</param>
            <param name="lastName">The name of the last street the vehicle was on. This is used as a hint to the geocoder.</param>
            <returns>A <see cref="T:Telogis.GeoBase.GeoCodeFull"/> object or null</returns>
        </member>
        <member name="M:Telogis.GeoBase.GeoCoder.ReverseGeoCodeFull(Telogis.GeoBase.LatLon,System.String[],System.Double)">
            <summary>
            Reverse geocode a <see cref="T:Telogis.GeoBase.LatLon"/> to a street address
            and retrieve additional information specific to the
            <see cref="T:Telogis.GeoBase.StreetLink"/> the point was closest to.
            </summary>
            <param name="location">Location to find.</param>
            <param name="lastName">The name of the last street the vehicle was on. This is used as a hint to the GeoCoder.</param>
            <param name="maxDist">The max distance, in degrees, to search for a street</param>
            <returns>A <see cref="T:Telogis.GeoBase.GeoCodeFull"/> object or null</returns>
        </member>
        <member name="M:Telogis.GeoBase.GeoCoder.ReverseGeoCodeFull(Telogis.GeoBase.LatLon,System.String[],System.Double,System.Boolean)">
            <summary>
            Reverse geocode a <see cref="T:Telogis.GeoBase.LatLon"/> to a street address
            and retrieve additional information specific to the
            <see cref="T:Telogis.GeoBase.StreetLink"/> the point was closest to.
            </summary>
            <param name="location">Location to find.</param>
            <param name="lastName">The name of the last street the vehicle was on. This is used as a hint to the GeoCoder.</param>
            <param name="maxDist">The max distance, in degrees, to search for a street</param>
            <param name="globalFallback">If a result can't be found in a country's data, should we fall-back to GeoCoding from global data?</param>
            <returns>A <see cref="T:Telogis.GeoBase.GeoCodeFull"/> object or null</returns>
        </member>
        <member name="M:Telogis.GeoBase.GeoCoder.ReverseGeoCodeFull(Telogis.GeoBase.LatLon,System.String[],System.Double,System.Boolean,Telogis.GeoBase.ReverseGeoCodeMode)">
            <summary>
            Reverse geocode a <see cref="T:Telogis.GeoBase.LatLon"/> to a street address
            and retrieve additional information specific to the
            <see cref="T:Telogis.GeoBase.StreetLink"/> the point was closest to.
            </summary>
            <param name="location">Location to find.</param>
            <param name="lastName">The name of the last street the vehicle was on. This is used as a hint to the GeoCoder.</param>
            <param name="maxDist">The max distance, in degrees, to search for a street</param>
            <param name="mode">Controls the type of streets that are returned by the search</param>
            <param name="globalFallback">If a result can't be found in a country's data, should we fall-back to GeoCoding from global data?</param>
            <returns>A <see cref="T:Telogis.GeoBase.GeoCodeFull"/> object or null</returns>
        </member>
        <member name="M:Telogis.GeoBase.GeoCoder.ReverseGeoCodeFull(Telogis.GeoBase.LatLon,System.String[],System.Double,System.Double,System.Boolean,Telogis.GeoBase.ReverseGeoCodeMode,System.Double)">
            <summary>
            Find a <see cref="T:Telogis.GeoBase.GeoCodeFull"/> from a given location, name of last known location,
            distance from last known location and current heading.
            </summary>
            <remarks>The <i>global</i> flag controls the fallback state of the query. If <i>global</i> is <b>true</b>
            and the location cannot be resolved to a street address then the nearest city within 10 degrees is returned.
            This means that a successful resolution is almost certainly guaranteed (unless the <see cref="T:Telogis.GeoBase.LatLon"/>
            is located in an ocean), however there is a significant performance hit in finding the nearest city.
            </remarks>
            <param name="location">A <see cref="T:Telogis.GeoBase.LatLon"/> to resolve.</param>
            <param name="lastNames">An array containing name(s) of the last known location.</param>
            <param name="maxDist">The distance (measured in degrees) from the last known location to present location.</param>
            <param name="heading">A heading (measured in degrees).</param>
            <param name="globalFallback">If <b>true</b> and an address cannot be found a nearby city is returned. If <b>false</b> and
            an address cannot be found, the Reverse GeoCode will return a <b>null</b> <see cref="T:Telogis.GeoBase.GeoCodeFull"/>.
            See Remarks.</param>
            <param name="mode">The type of streets that should be returned by this geocode.</param>
            <param name="crossStreetDist">The maximum distance in degrees to search for a cross street.</param>
            <returns><see cref="T:Telogis.GeoBase.GeoCodeFull"/></returns>
        </member>
        <member name="M:Telogis.GeoBase.GeoCoder.ReverseGeoCode(Telogis.GeoBase.LatLon,System.Double@,Telogis.GeoBase.DistanceUnit)">
            <summary>
            Reverse geocode a <see cref="T:Telogis.GeoBase.LatLon"/> to a street address and determine
            the distance from the LatLon to the street.
            </summary>
            <param name="location">Location to find.</param>
            <param name="distance">Outputs the distance to the street</param>
            <param name="units"><see cref="T:Telogis.GeoBase.DistanceUnit">units</see> to return the distance in.</param>
            <returns>An <see cref="T:Telogis.GeoBase.Address"/> or null</returns>
        </member>
        <member name="M:Telogis.GeoBase.GeoCoder.GeoCode(System.String,Telogis.GeoBase.Country,System.Int32)">
            <summary>
            Geocode a string address to one or more <see cref="T:Telogis.GeoBase.GeocodeAddress"/>es,
            within the given <see cref="T:Telogis.GeoBase.Country"/>
            </summary>
            <remarks>
            <para>The geocoder is capable of looking up street intersections when they
            are specified with the &amp; (ampersand) or @ characters. For example:</para>
            <list type="list">
            <item><term>18th &amp; placentia, costa mesa</term></item>
            <item><term>18th @ placentia, costa mesa</term></item>
            </list>
            <para>The address may also contain a lat, lon pair eg "34, -117"</para>
            <para><b>Related articles</b>: <a href="243b2474-98eb-4087-902d-c206207674b3.htm">Geocoding Concept</a>, 
            <a href="70746bb6-4c27-4ed5-a312-1faa1f86a3bf.htm">Map Control Tutorial</a>.</para>
            <para>
            This method is not available in geobase.mobile.net unless the current Repository is
            a <see cref="T:Telogis.GeoBase.Repositories.GeoStreamRepository"/>.
            </para>
            </remarks>
            <param name="address">Address to find</param>
            <param name="cntry"><see cref="T:Telogis.GeoBase.Country"/> to search</param>
            <param name="maxResults">Maximum number of results to return</param>
            <returns>Zero or more <see cref="T:Telogis.GeoBase.GeocodeAddress"/> results</returns>
        </member>
        <member name="M:Telogis.GeoBase.GeoCoder.GeoCode(System.String,Telogis.GeoBase.Country)">
            <summary>
            Geocode a string address to one or more <see cref="T:Telogis.GeoBase.GeocodeAddress"/>es, within the given <see cref="T:Telogis.GeoBase.Country"/>
            </summary>
            <remarks>
            <para>The geocoder is capable of looking up street intersections when they
            are specified with the &amp; (ampersand) or @ characters. For example:</para>
            <list type="list">
            <item><term>18th &amp; placentia, costa mesa</term></item>
            <item><term>18th @ placentia, costa mesa</term></item>
            </list>
            <para>The address may also contain a lat, lon pair eg "34, -117"</para>
            <para><b>Related articles</b>: <a href="243b2474-98eb-4087-902d-c206207674b3.htm">Geocoding Concept</a>.</para>
            <para>
            This method is not available in geobase.mobile.net unless the current Repository is
            a <see cref="T:Telogis.GeoBase.Repositories.GeoStreamRepository"/>.
            </para>
            </remarks>
            <param name="address">Address to find</param>
            <param name="cntry"><see cref="T:Telogis.GeoBase.Country"/> to search</param>
            <returns>Zero or more <see cref="T:Telogis.GeoBase.GeocodeAddress"/> results</returns>
        </member>
        <member name="M:Telogis.GeoBase.GeoCoder.GeoCode(System.String,System.String,System.String,System.String,Telogis.GeoBase.Country,System.Int32)">
            <summary>
            Geocode from address components.
            </summary>
            <remarks>
            <para>
            This form of geocode is likely to be more reliable than the free text geocode.
            </para>
            <para>
            This method is not available in geobase.mobile.net unless the current Repository is
            a <see cref="T:Telogis.GeoBase.Repositories.GeoStreamRepository"/>.
            </para>
            </remarks>
            <param name="Address">Street address - eg '1234 Main St', or a street intersection eg '18th &amp; placentia'.</param>
            <param name="City">City name or null blank if unknown.</param>
            <param name="Region">Region (state) or null.</param>
            <param name="PostalCode">Postal code or null.</param>
            <param name="maxResults">Maximum number of results to return</param>
            <param name="Country"><see cref="T:Telogis.GeoBase.Country"/>.</param>
            <returns>Zero or more <see cref="T:Telogis.GeoBase.GeocodeAddress"/> results.</returns>
        </member>
        <member name="M:Telogis.GeoBase.GeoCoder.GeoCode(System.String,System.String,System.String,System.String,Telogis.GeoBase.Country)">
            <summary>
            Geocode from address components.
            </summary>
            <remarks>
            <para>
            This form of geocode is likely to be more reliable than the free text Geocode.
            </para>
            <para>
            This method is not available in geobase.mobile.net unless the current Repository is
            a <see cref="T:Telogis.GeoBase.Repositories.GeoStreamRepository"/>.
            </para>
            </remarks>
            <param name="Address">Street address - eg '1234 Main St', or a street intersection eg '18th &amp; placentia'.</param>
            <param name="City">City name or null blank if unknown.</param>
            <param name="Region">Region (state) or null.</param>
            <param name="PostalCode">Postal code or null.</param>
            <param name="Country"><see cref="T:Telogis.GeoBase.Country"/>.</param>
            <returns>Zero or more <see cref="T:Telogis.GeoBase.GeocodeAddress"/> results.</returns>
        </member>
        <member name="M:Telogis.GeoBase.GeoCoder.GeoCode(System.Int32,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,Telogis.GeoBase.Country,System.Int32)">
            <summary>
            Use forward geocoding to resolve an address (specified as separate fields), city, region, postal code and <see cref="T:Telogis.GeoBase.Country"/> 
            to one or more <see cref="T:Telogis.GeoBase.GeocodeAddress">GeocodeAddresses</see>.
            </summary>
            <remarks>
            <para>
            This method is not available in geobase.mobile.net or if the current Repository is
            a <see cref="T:Telogis.GeoBase.Repositories.GeoStreamRepository"/>.
            </para>
            </remarks>
            <param name="number">An integer representing the street number.</param>
            <param name="prefix">A string representing the street prefix.</param>
            <param name="bf_type">A string representing the street type (before).</param>
            <param name="name">A string representing the street name.</param>
            <param name="af_type">A string representing the street type (after).</param>
            <param name="suffix">A string representing the street suffix.</param>
            <param name="city">A string representing the city.</param>
            <param name="region">A string representing the region.</param>
            <param name="postalCode">A string representing the postal code.</param>
            <param name="country">The <see cref="T:Telogis.GeoBase.Country"/> to perform the GeoCode in.</param>
            <param name="maxResults">The maximum number of results to return.</param>
            <returns>An array of <see cref="T:Telogis.GeoBase.GeocodeAddress">GeocodeAddresses</see>.</returns>
        </member>
        <member name="M:Telogis.GeoBase.GeoCoder.GeoCode(System.Int32,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,Telogis.GeoBase.Country)">
            <summary>
            Use forward geocoding to resolve an address (specified as separate fields), city, region, postal code and <see cref="T:Telogis.GeoBase.Country"/> 
            to one or more <see cref="T:Telogis.GeoBase.GeocodeAddress">GeocodeAddresses</see>.
            </summary>
            <remarks>
            <para>
            This method is not available in geobase.mobile.net or if the current Repository is
            a <see cref="T:Telogis.GeoBase.Repositories.GeoStreamRepository"/>.
            </para>
            </remarks>
            <param name="number">An integer representing the street number.</param>
            <param name="prefix">A string representing the street prefix.</param>
            <param name="bf_type">A string representing the street type (before).</param>
            <param name="name">A string representing the street name.</param>
            <param name="af_type">A string representing the street type (after).</param>
            <param name="suffix">A string representing the street suffix.</param>
            <param name="city">A string representing the city.</param>
            <param name="region">A string representing the region.</param>
            <param name="postalCode">A string representing the postal code.</param>
            <param name="country">The <see cref="T:Telogis.GeoBase.Country"/> to perform the GeoCode in.</param>
            <returns>An array of <see cref="T:Telogis.GeoBase.GeocodeAddress">GeocodeAddresses</see>.</returns>
        </member>
        <member name="M:Telogis.GeoBase.GeoCoder.ReverseGeoCode(Telogis.GeoBase.Vector,Telogis.GeoBase.Vector,Telogis.GeoBase.Address)">
            <summary>
            Generate a more accurate <see cref="T:Telogis.GeoBase.Address"/> by reverse geocoding
            based on the last known location, heading and speed.
            </summary>
            <remarks>
            <para>
            By providing additional location information it is possible for the geocoder to
            correct inaccuracies in the GPS data.</para>
            <para>
            An example: Imagine that the current reported vehicle location is on an
            underpass that runs perpendicular to a freeway. If the geocoder knows
            that the last known location of the vehicle was on the freeway, it can use this
            additional information to work out that the vehicle is in fact still on the freeway.
            This is useful when GPS inaccuracies would otherwise place the vehicle in
            a location that it could not logically be at. This information is provided
            by <b>LastLocation</b> and <b>LastAddress</b>.
            </para>
            </remarks>
            <param name="Location">The current location data.</param>
            <param name="LastLocation">Last know location <see cref="T:Telogis.GeoBase.Vector"/> (or <b>null</b>).</param>
            <param name="LastAddress">The last known <see cref="T:Telogis.GeoBase.Address"/> (probably returned by a previous call to this function).</param>
            <returns>An <see cref="T:Telogis.GeoBase.Address"/> or <b>null</b>.</returns>
        </member>
        <member name="T:Telogis.GeoBase.CountryUnavailableException">
            <summary>
            This exception will be thrown if data is not available for a requested country.
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.ConfidenceScores">
            <summary>
            Confidence that an Address found by geocoding is accurate. The score for each component
            of the address is between 0.0 and 1.0 inclusive, with 1.0 indicating a perfect match.
            </summary>
            <example>
            <code lang="C#">
            // Geocode an address...
            GeoCodeAddress addr = GeoCoder.GeoCode("85 Enterprise, Aliso Viejo, California", Country.USA)[0];
            
            if (addr == null) { 
                Console.WriteLine("Check you've got US map data installed!"); 
                return;
            }
            
            // How confident is the geocoder about this match?
            Console.WriteLine(String.Format("Overall confidence: {0}", addr.Confidence));
            
            // How confident is the geocoder that it found the right state?
            Console.WriteLine(String.Format("Region confidence: {0}", addr.ConfidenceScores.Region));
            </code>
            </example>
        </member>
        <member name="F:Telogis.GeoBase.ConfidenceScores.Number">
            <summary>
            Confidence that the street number is correct.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.ConfidenceScores.TypeBefore">
            <summary>
            Confidence that the prefixed-type is correct.
            e.g. In 'Rue Voltaire', 'Rue' is the type-before.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.ConfidenceScores.Prefix">
            <summary>
            Confidence that the street prefix is correct.
            e.g. 'North Main Street', 'North' is the prefix.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.ConfidenceScores.Name">
            <summary>
            Confidence that the street name is correct.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.ConfidenceScores.Suffix">
            <summary>
            Confidence that the street suffix is correct.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.ConfidenceScores.TypeAfter">
            <summary>
            Confidence that the street type is correct.
            The type-after refers to 'Street', 'Road', 'Drive', etc.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.ConfidenceScores.City">
            <summary>
            Confidence that the city is correct.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.ConfidenceScores.Region">
            <summary>
            Confidence that the region (or State) is correct.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.ConfidenceScores.Postcode">
            <summary>
            Confidence that the postcode is correct.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.ConfidenceScores.Subregion">
            <summary>
            Confidence that the subregion is correct.
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.Internal.GeoCoderInt.ShortenState(System.String,Telogis.GeoBase.Country)">
            <summary>
            Get the abbreviated state name.
            </summary>
            <remarks>Throws an exception if <b>state</b> is not a recognized state name.</remarks>
            <param name="state">A full state name (for example "New York"). Capitalization is unimportant.</param>
            <param name="country">The country in which the state is located.</param>
            <returns>The abbreviation for the state name (for example "NY").</returns>
        </member>
        <member name="M:Telogis.GeoBase.Internal.GeoCoderInt.Dress(System.String)">
            <summary>
            Dress a name for presentation. See remarks.
            </summary>
            <remarks>Converts all letters to lowercase, except for letters at the start of a word
            (immediately after a space, opening ellipse or hyphen).</remarks>
            <param name="name">Name, as a string, to dress.</param>
            <returns>The dressed string, see remarks.</returns>
        </member>
        <member name="T:Telogis.UI.Split">
            <summary>
            Describes a single split of a panel
            </summary>
        </member>
        <member name="T:Telogis.UI.ControlBase">
            <summary>
            Base Control allows XML creation and adds functionality missing from the compact framework
            </summary>
        </member>
        <member name="F:Telogis.UI.ControlBase.ClickSounder">
            <summary>
            Delegate to application providing click sound
            </summary>
        </member>
        <member name="M:Telogis.UI.ControlBase.DoClickSound">
            <summary>
            Sound a 'Click' for button pressing etc
            </summary>
        </member>
        <member name="M:Telogis.UI.ControlBase.AddChild(System.Windows.Forms.Control,Telogis.UI.ControlInfo)">
            <summary>
            Add a <see cref="T:System.Windows.Forms.Control">Control</see> to this ControlBase.
            </summary>
            <param name="child">The <see cref="T:System.Windows.Forms.Control">System.Windows.Forms.Control</see> to add</param>
            <param name="info">The <see cref="T:Telogis.UI.ControlInfo">ControlInfo</see> to set attributes (such as size and alignment 
            information) for <i>child</i></param>
        </member>
        <member name="M:Telogis.UI.ControlBase.GetInfo(System.Windows.Forms.Control)">
            <summary>
            Gets the <see cref="T:Telogis.UI.ControlInfo">ControlInfo</see> (such as size and alignment 
            information) for a specified <see cref="T:System.Windows.Forms.Control">Control</see>.
            </summary>
            <param name="c"><see cref="T:System.Windows.Forms.Control">System.Windows.Forms.Control</see></param>
            <returns><see cref="T:Telogis.UI.ControlInfo">ControlInfo</see></returns>
        </member>
        <member name="M:Telogis.UI.ControlBase.ReLayout">
            <summary>
            CE doesn't support layout events - so we need to do this manually
            </summary>
        </member>
        <member name="M:Telogis.UI.ControlBase.FindChild(System.String)">
            <summary>
            Search for the given child
            </summary>
            <param name="name">The name of the child to find</param>
            <returns>The found control or Null</returns>
        </member>
        <member name="M:Telogis.UI.ControlBase.ReadChildren(System.Xml.XmlReader,System.Windows.Forms.Control,Telogis.UI.ControlInfo)">
            <summary>
            Read the children of a node.  xRead should be pointing at the first
            child node.
            </summary>
            <param name="xRead">XML reader</param>
            <param name="context"></param>
            <param name="ci"></param>
        </member>
        <member name="M:Telogis.UI.ControlBase.FindType(System.String)">
            <summary>
            Given a fully qualified classname find its type
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Telogis.UI.ControlBase.AddSearchAssembly(System.Reflection.Assembly)">
            <summary>
            Add an assembly to the search list.
            </summary>
            <remarks>The search list contains a reference to assemblies (and 
            associated classes) which may be used to instantiate control objects.</remarks>
            <param name="asm"><see cref="T:System.Reflection.Assembly"/></param>
        </member>
        <member name="M:Telogis.UI.ControlBase.AddSearchAssembly(System.Type)">
            <summary>
            Add a class type to the search list.
            </summary>
            <remarks>The search list contains a reference to assemblies (and 
            associated classes) which may be used to instantiate control objects.</remarks>
            <param name="t"><see cref="T:System.Type"/></param>
        </member>
        <member name="M:Telogis.UI.ControlBase.CreateClass(System.String)">
            <summary>
            Instantiate a class (by classname) from a loaded assembly 
            (see <see cref="M:Telogis.UI.ControlBase.AddSearchAssembly(System.Type)">AddSearchAssembly()</see>
            </summary>
            <param name="className">The name of the class</param>
            <returns>The newly instantiated object</returns>
        </member>
        <member name="M:Telogis.UI.ControlBase.AddValueConverter(System.Type,Telogis.UI.ControlBase.ValConverter)">
            <summary>
            Add a delegate that can convert from a string to the given class type, used for XML parsing and conversion.
            </summary>
            <param name="t">The <see cref="T:System.Type">Type</see> that this delegate will convert the string to</param>
            <param name="converter">A function that perform the type conversion. <see cref="T:Telogis.UI.ControlBase.ValConverter"/></param>
        </member>
        <member name="P:Telogis.UI.ControlBase.Visible">
            <summary>
            Determines whether the control is visible
            </summary>
        </member>
        <member name="P:Telogis.UI.ControlBase.ControlShape">
            <summary>
            Gets the shape (see <see cref="T:Telogis.UI.ContainerShape">ContainerShape</see>) of the control.
            </summary>
            <remarks>The shape may be one of: Square, Wide, High.</remarks>
        </member>
        <member name="T:Telogis.UI.ControlBase.ValConverter">
            <summary>
            A delegate to convert from a string to a given class type. This is used for XML parsing and conversion.
            </summary>
            <param name="t">The <see cref="T:System.Type">Type</see> that this delegate will convert the string to</param>
            <param name="val">The XML data to convert</param>
            <returns>The converted <see cref="T:System.Object">System.Object</see></returns>
        </member>
        <member name="M:Telogis.UI.Split.AddChild(System.Windows.Forms.Control,Telogis.UI.ControlInfo)">
            <summary>
            This registers the child to the split
            </summary>
            <param name="child"></param>
            <param name="info"></param>
        </member>
        <member name="M:Telogis.UI.Split.OnLayout(System.Windows.Forms.LayoutEventArgs)">
            <summary>
            Handles a layout event.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Telogis.UI.Split.OnVisibleChanged(System.EventArgs)">
            <summary>
            Handles a change-of-visiblity event.
            </summary>
            <param name="e"></param>
        </member>
        <member name="P:Telogis.UI.Split.ContainerPanel">
            <summary>
            Returns the panel that this splits is attached to
            This is part of a hack to make panels the only containers
            in the Telogis UI without changing API semantics
            </summary>
        </member>
        <member name="P:Telogis.UI.Split.Format">
            <summary>
            Returns the split arrangement
            </summary>
        </member>
        <member name="P:Telogis.UI.Split.RowPixels">
            <summary>
            Gets or sets the height of a row in pixels.
            </summary>
            <remarks>When this property is set a row will be prevented from automatically expanding in height.</remarks>
        </member>
        <member name="P:Telogis.UI.Split.ColumnPixels">
            <summary>
            Gets or sets the width of a column in pixels.
            </summary>
            <remarks>When this property is set a column will be prevented from automatically expanding in width.</remarks>
        </member>
        <member name="P:Telogis.UI.Split.RowPercent">
            <summary>
            Gets or sets the width of a row as a percent.
            </summary>
            <remarks>When this property is set a row will be prevented from automatically expanding in height.</remarks>
        </member>
        <member name="P:Telogis.UI.Split.ColumnPercent">
            <summary>
            Gets or sets the height of a column as a percent.
            </summary>
            <remarks>When this property is set a row will be prevented from automatically expanding in height.</remarks>
        </member>
        <member name="P:Telogis.UI.Split.Expander">
            <summary>
            Gets or sets the expander state of this split.
            </summary>
            <remarks>When this property is set to true the row and column size values (both pixel and percent) 
            will be set to zero.</remarks>
        </member>
        <member name="P:Telogis.UI.Split.Percent">
            <summary>
            Gets or sets the row <b>and</b> column size as a percentage value.
            </summary>
        </member>
        <member name="P:Telogis.UI.Split.Pixels">
            <summary>
            Gets or sets the row <b>and</b> column size as a pixel value.
            </summary>
        </member>
        <member name="P:Telogis.UI.Split.AutoVisibility">
            <summary>
            Gets or sets the automatic visibility setting of the split.
            </summary>
        </member>
        <member name="T:Telogis.UI.Splits">
            <summary>
            
            </summary>
        </member>
        <member name="M:Telogis.UI.Splits.GetSplit(System.Int32)">
            <summary>
            Get a split specified by index
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Telogis.UI.Splits.AddChild(System.Windows.Forms.Control,Telogis.UI.ControlInfo)">
            <summary>
            Add a child control to this split
            </summary>
            <param name="child"></param>
            <param name="info"></param>
        </member>
        <member name="M:Telogis.UI.Splits.OnLayout(System.Windows.Forms.LayoutEventArgs)">
            <summary>
            Handles a layout event.
            </summary>
            <param name="e"></param>
        </member>
        <member name="P:Telogis.UI.Splits.ContainerPanel">
            <summary>
            Returns the panel that this splits is attached to
            This is part of a hack to make panels the only containers
            in the Telogis UI without changing API semantics
            </summary>
        </member>
        <member name="P:Telogis.UI.Splits.Format">
            <summary>
            
            </summary>
        </member>
        <member name="T:Telogis.UI.SplitVisibility">
            <summary>
            Describes the visibility when auto-hiding a Splits
            </summary>
        </member>
        <member name="F:Telogis.UI.SplitVisibility.Always">
            <summary>
            The split is always visible (never auto-hidden)
            </summary>
        </member>
        <member name="F:Telogis.UI.SplitVisibility.Wide">
            <summary>
            Visible when the control is wide
            </summary>
        </member>
        <member name="F:Telogis.UI.SplitVisibility.High">
            <summary>
            Visible when the control is high
            </summary>
        </member>
        <member name="F:Telogis.UI.SplitVisibility.Square">
            <summary>
            Visible when the control is square
            </summary>
        </member>
        <member name="F:Telogis.UI.SplitVisibility.WideOrSquare">
            <summary>
            Visible when the control is wide or square
            </summary>
        </member>
        <member name="F:Telogis.UI.SplitVisibility.HighOrSquare">
            <summary>
            Visible when the control is high or square
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.Compiler.Assembler.ParserBase.CheckVarObjType(System.Int32,System.Int32)">
            <summary>
            Check that you aren't reassigning a parameter to another type
            </summary>
            <param name="var"></param>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="T:Xheo.Licensing.ExternalLicenseServer.GBLicensingServer">
            <remarks/>
        </member>
        <member name="F:Xheo.Licensing.ExternalLicenseServer.GBLicensingServer.LicenseCultureSoapHeaderValue">
            <summary>
            
            </summary>
        </member>
        <member name="M:Xheo.Licensing.ExternalLicenseServer.GBLicensingServer.#ctor">
            <remarks/>
        </member>
        <member name="M:Xheo.Licensing.ExternalLicenseServer.GBLicensingServer.RenewLease(System.String,System.String,System.String)">
            <remarks/>
        </member>
        <member name="M:Xheo.Licensing.ExternalLicenseServer.GBLicensingServer.BeginRenewLease(System.String,System.String,System.String,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:Xheo.Licensing.ExternalLicenseServer.GBLicensingServer.EndRenewLease(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:Xheo.Licensing.ExternalLicenseServer.GBLicensingServer.GetTrialLicense(System.String,System.String,System.String)">
            <remarks/>
        </member>
        <member name="M:Xheo.Licensing.ExternalLicenseServer.GBLicensingServer.BeginGetTrialLicense(System.String,System.String,System.String,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:Xheo.Licensing.ExternalLicenseServer.GBLicensingServer.EndGetTrialLicense(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:Xheo.Licensing.ExternalLicenseServer.GBLicensingServer.ValidateEx(System.String,System.String,System.String,System.String,System.String)">
            <remarks/>
        </member>
        <member name="M:Xheo.Licensing.ExternalLicenseServer.GBLicensingServer.BeginValidateEx(System.String,System.String,System.String,System.String,System.String,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:Xheo.Licensing.ExternalLicenseServer.GBLicensingServer.EndValidateEx(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:Xheo.Licensing.ExternalLicenseServer.GBLicensingServer.Validate(System.String,System.String,System.String)">
            <remarks/>
        </member>
        <member name="M:Xheo.Licensing.ExternalLicenseServer.GBLicensingServer.BeginValidate(System.String,System.String,System.String,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:Xheo.Licensing.ExternalLicenseServer.GBLicensingServer.EndValidate(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:Xheo.Licensing.ExternalLicenseServer.GBLicensingServer.RegisterEx(System.String,System.String,System.String,System.Boolean,System.String)">
            <remarks/>
        </member>
        <member name="M:Xheo.Licensing.ExternalLicenseServer.GBLicensingServer.BeginRegisterEx(System.String,System.String,System.String,System.Boolean,System.String,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:Xheo.Licensing.ExternalLicenseServer.GBLicensingServer.EndRegisterEx(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:Xheo.Licensing.ExternalLicenseServer.GBLicensingServer.Register(System.String,System.String)">
            <remarks/>
        </member>
        <member name="M:Xheo.Licensing.ExternalLicenseServer.GBLicensingServer.BeginRegister(System.String,System.String,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:Xheo.Licensing.ExternalLicenseServer.GBLicensingServer.EndRegister(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:Xheo.Licensing.ExternalLicenseServer.GBLicensingServer.Unregister(System.String,System.String)">
            <remarks/>
        </member>
        <member name="M:Xheo.Licensing.ExternalLicenseServer.GBLicensingServer.BeginUnregister(System.String,System.String,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:Xheo.Licensing.ExternalLicenseServer.GBLicensingServer.EndUnregister(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="T:Xheo.Licensing.ExternalLicenseServer.LicenseCultureSoapHeader">
            <remarks/>
        </member>
        <member name="F:Xheo.Licensing.ExternalLicenseServer.LicenseCultureSoapHeader.CultureName">
            <remarks/>
        </member>
        <member name="T:Xheo.Licensing.OrLimit">
            <summary>
            Allows a group of limits to be declared where any one of them will grant
            access.
            </summary>
            <remarks>
            Use the OrLimit to group a collection of limits together. When validated if 
            any of the limits is valid, the whole collection is valid.
            </remarks>
        </member>
        <member name="T:Xheo.Licensing.ContainerLimit">
            <summary>
            Serves as a base class for limits that contain other limits.
            </summary>
        </member>
        <member name="T:Xheo.Licensing.Limit">
            <summary>
            Base class for all license limitations.
            </summary>
            <remarks>
            	Limits are used by the XHEO|Licensing framework to restrict a Component,
            	Class or Control to a specific set of runtime or designtime conditions. The
            	library contains over 15 built in limits that you can use to control the
            	use of your protected Type.
            </remarks>
        </member>
        <member name="M:Xheo.Licensing.Limit.Dispose">
            <summary>
            Releases any managed or unmangaged resources used by the limit.
            </summary>
        </member>
        <member name="M:Xheo.Licensing.Limit.Dispose(System.Boolean)">
            <summary>
            Releases any managed or unmanaged resources used by the Limit.
            </summary>
            <param name="disposing">
            	If true only unmanaged resources should be disposed.
            </param>
        </member>
        <member name="M:Xheo.Licensing.Limit.Finalize">
            <summary>
            Releases any resources during garbage collection.
            </summary>
        </member>
        <member name="M:Xheo.Licensing.Limit.Validate(System.ComponentModel.LicenseContext,System.Type,System.Object)">
            <summary>
            Validates that the license being granted is within the limits enforced by
            this object.
            </summary>
            <param name="context">
            	The LicenseContext passed to <see cref="M:System.ComponentModel.LicenseProvider.GetLicense(System.ComponentModel.LicenseContext,System.Type,System.Object,System.Boolean)"/>.
            </param>
            <param name="type">
            	The Type of the object being licensed.
            </param>
            <param name="instance">
            	The instance of the object being licensed.
            </param>
            <returns>
            	Returns true if the limits are valid, otherwise false.
            </returns>
            <remarks>
            	If validation fails, limits should set their parent <c>License</c>'s <see cref="P:Xheo.Licensing.ExtendedLicense.InvalidReason"/>
            	to a string explaining why it could not be validated.
            </remarks>
        </member>
        <member name="M:Xheo.Licensing.Limit.LoadFromXml(System.Xml.XmlNode)">
            <summary>
            Loads the contents of a Limit from an XmlNode.
            </summary>
            <param name="node">
            	The XmlNode to load from.
            </param>
            <returns>
            	Returns true if the load was successful, otherwise false.
            </returns>
        </member>
        <member name="M:Xheo.Licensing.Limit.SaveToXml(System.Xml.XmlNode)">
            <summary>
            Saves the contents of the Limit as an XmlNode.
            </summary>
            <param name="parent">
            	The parent XmlNode to add child nodes to.
            </param>
            <returns>
            	Returns the saved XML node.
            </returns>
        </member>
        <member name="M:Xheo.Licensing.Limit.BaseSaveToXml(System.Xml.XmlNode,System.String)">
            <summary>
            Performs the default xml node construction for the limit.
            </summary>
            <param name="parent">
            	The parent XmlNode to add child nodes to.
            </param>
            <param name="limitName">
            	 The name of the limit type.
            </param>
        </member>
        <member name="M:Xheo.Licensing.Limit.BaseLoadFromXml(System.Xml.XmlNode,System.String)">
            <summary>
            Performs the default loading from an xml node.
            </summary>
            <param name="node">
            	The node to load from.
            </param>
            <param name="limitName">
            	The name of the limit to verify.
            </param>
            <returns>
            	Returns true if the base requirements have been met, otherwise false.
            </returns>
        </member>
        <member name="M:Xheo.Licensing.Limit.GetDetailsDescription">
            <summary>
            Gets a description of the details of the limit.
            </summary>
            <returns>
            Returns the description.
            </returns>
        </member>
        <member name="M:Xheo.Licensing.Limit.Granted(System.ComponentModel.LicenseContext,System.Type,System.Object)">
            <summary>
            Called every time the limit is granted. Used to enforce limits that
            must be checked each time a Type is created. 
            </summary>
            <param name="context">
            	The LicenseContext used to determine the environment and settings
            	of the licensing.
            </param>
            <param name="instance">
            	The instance of the object being licensed.
            </param>
            <param name="type">
            	The Type of the object being licensed.
            </param>
            <remarks>
            Checks in this method should be very fast because they are called every time a 
            licensed object is created. The default implementation does nothing.
            </remarks>
        </member>
        <member name="M:Xheo.Licensing.Limit.Peek(System.ComponentModel.LicenseContext,System.Type,System.Object)">
            <summary>
            Allows a limit to communicate it's valid status without interacting with the user. Used
            with Or limits to pick limits that are valid before attempting to interact with the user.
            </summary>
            <param name="context">
            	The LicenseContext used to determine the environment and settings
            	of the licensing.
            </param>
            <param name="instance">
            	The instance of the object being licensed.
            </param>
            <param name="type">
            	The Type of the object being licensed.
            </param>
            <returns></returns>
        </member>
        <member name="M:Xheo.Licensing.Limit.AssertNotReadOnly">
            <summary>
            Asserts that the limit is not currently read only. Use before setting the value
            of a property.
            </summary>
        </member>
        <member name="M:Xheo.Licensing.Limit.InitDuration(System.Type,System.TimeSpan,System.String,System.DateTime@,System.DateTime@)">
            <summary>
            Initializes the start and end date for a given duration based on the first time
            the type is licensed on the machine.
            </summary>
            <param name="type">
            	The type to check.
            </param>
            <param name="duration">
            	The time allowed.
            </param>
            <param name="key">
            	Additional key information used to identify the value.
            </param>
            <param name="ends">
            	The date when the duration has expired.
            </param>
            <param name="started">
            	The date when the class was first licensed.
            </param>
            <remarks>
            	Returns a value that indicates if the initialization was successful.
            </remarks>
        </member>
        <member name="M:Xheo.Licensing.Limit.InitDuration(System.Type,System.Int32,System.DateTime@,System.DateTime@)">
            <summary>
            Initializes the start and end date for a given duration based on the first time
            the type is licensed on the machine.
            </summary>
            <param name="type">
            	The type to check.
            </param>
            <param name="duration">
            	The time allowed.
            </param>
            <param name="ends">
            	The date when the duration has expired.
            </param>
            <param name="started">
            	The date when the class was first licensed.
            </param>
            <remarks>
            	Returns a value that indicates if the initialization was successful.
            </remarks>
        </member>
        <member name="M:Xheo.Licensing.Limit.UpdateDuration(System.Type,System.String,System.DateTime,System.DateTime)">
            <summary>
            Updates the start and end date for a given duration.
            </summary>
            <param name="type">
            	The type to check.
            </param>
            <param name="key">
            	Additional key information used to identify the value.
            </param>
            <param name="ends">
            	The date when the duration has expired.
            </param>
            <param name="started">
            	The date when the class was first licensed.
            </param>
            <remarks>
            	Returns a value that indicates if the initialization was successful.
            </remarks>
        </member>
        <member name="M:Xheo.Licensing.Limit.InitCounter(System.Type,System.String,System.Int64@,System.Int64@)">
            <summary>
            Initializes a counter based on the first time the type is licensed on the machine.
            </summary>
            <param name="type">
            	The type to check.
            </param>
            <param name="key">
            	Additional key information used to identify the value.
            </param>
            <param name="count">
            	The current counter value.
            </param>
            <param name="maxCount">
            	The maximum count.
            </param>
            <remarks>
            	Returns a value that indicates if the initialization was successful.
            </remarks>
        </member>
        <member name="M:Xheo.Licensing.Limit.UpdateCounter(System.Type,System.String,System.Int64,System.Int64)">
            <summary>
            Initializes a counter based on the first time the type is licensed on the machine.
            </summary>
            <param name="type">
            	The type to check.
            </param>
            <param name="key">
            	Additional key information used to identify the value.
            </param>
            <param name="count">
            	The current counter value.
            </param>
            <param name="maxCount">
            	The maximum allowed for the count value.
            </param>
            <remarks>
            	Returns a value that indicates if the initialization was successful.
            </remarks>
        </member>
        <member name="M:Xheo.Licensing.Limit.GetPrivateRegistryKey(System.String,System.Boolean,System.Boolean@)">
            <summary>
            Gets a private registry key where values for the license can be stored for the given type.
            </summary>
            <param name="key">
            	A unique key to identify this registry section.
            </param>
            <param name="created">
            	Accepts a value that indicates if the key was created.
            </param>
            <param name="mustExist">
            	Indicates if the key must already exist.
            </param>
            <returns></returns>
        </member>
        <member name="M:Xheo.Licensing.Limit.SelectCulture(System.Globalization.CultureInfo)">
            <summary>
            Selects the given culture for the current thread, and returns the previous
            culture.
            </summary>
            <param name="culture">
            	The culture to select.
            </param>
            <returns>
            	Returns the previous culture.
            </returns>
        </member>
        <member name="M:Xheo.Licensing.Limit.SelectWebCulture">
            <summary>
            Selects the culture of the current web request into the current thread, and returns the previous
            culture.
            </summary>
            <returns>
            	Returns the previous culture.
            </returns>
        </member>
        <member name="M:Xheo.Licensing.Limit.GetLimitFromName(System.String)">
            <summary>
            Gets a Limit object based on the given name.
            </summary>
            <param name="name">
            	The name of the limit type to retrieve.
            </param>
            <returns>
            	Returns a new Limit object of the given type if available, otherwise
            	null.
            </returns>
        </member>
        <member name="M:Xheo.Licensing.Limit.ValidateIPAddress(System.String)">
            <summary>
            Validates the format of an IP address.
            </summary>
            <param name="address">
            	The IP Address to validate.
            </param>
            <returns>
            	Returns true if the format of the address is valid, otherwise false.
            </returns>
        </member>
        <member name="M:Xheo.Licensing.Limit.ValidateDomainName(System.String)">
            <summary>
            Validates the format of a domain name.
            </summary>
            <param name="domainName">
            	The domain name to validate.
            </param>
            <returns>
            	Returns true if the format of the domain name is valid, otherwise false.
            </returns>
        </member>
        <member name="M:Xheo.Licensing.Limit.ValidateUrl(System.String,System.Boolean)">
            <summary>
            Validates the url is correctly formatted.
            </summary>
            <param name="url">
            	The url to validate.
            </param>
            <param name="fullyQualified">
            	Indicates if the url must be fully qualified. Containing a host and optional protocol.
            </param>
            <returns>
            	Returns true if the url is valid, otherwise false.
            </returns>
        </member>
        <member name="M:Xheo.Licensing.Limit.ValidateEmail(System.String)">
            <summary>
            Validates if the email is correctly formatted.
            </summary>
            <param name="email">
            	The email address to validate.
            </param>
            <returns>
            	Returns true if the email is valid, otherwise false.
            </returns>
        </member>
        <member name="M:Xheo.Licensing.Limit.ParseIPAddress(System.Net.IPAddress)">
            <summary>
            Parses an IPAddress to it's actual long value.
            </summary>
            <param name="address">
            	IPAddress to parse.
            </param>
            <returns>
            	Returns the actual address of the IPAddress.
            </returns>
        </member>
        <member name="M:Xheo.Licensing.Limit.GetBitmapResource(System.String,Xheo.Licensing.Limit,System.String[])">
            <summary>
            Gets an Image for the requested resource. Resources can be defined as
            assembly resources or as remote resources. If the name is prefixed with
            http then it is assumed to be a remote resource and a <see cref="T:System.Net.WebRequest"/>
            is made to retrieve the bitmap, otherwise it is assumed to be embedded
            in the assembly.
            </summary>
            <param name="bitmapResource">
            	Name of the resource to retrieve, prefix with http to get a remote resource.
            </param>
            <param name="limit">
            	The limit requesting the resource.
            </param>
            <returns>
            	Returns the resource if found, otherwise null.
            </returns>
            <param name="parameters">
            	Collection of additional parameters to append to the URL for remote
            	images. Parameters should be in the format "key=value".
            </param>
            <remarks>
            	For remote resources the serial number, expiration date, and optional parameters
            	of the License will be appended to the request QueryString. You can use this
            	to provide alternate images based on the conditions of the license.
            </remarks>
        </member>
        <member name="M:Xheo.Licensing.Limit.OpenOrCreateRegistryKey(Microsoft.Win32.RegistryKey,System.String)">
            <summary>
            Opens or creates a registry key.
            </summary>
            <param name="key">
            	The parent key to open from.
            </param>
            <param name="subkey">
            	The path of the sub key to open. Sub key should be separated by \ characters.
            </param>
            <returns>
            	Returns the opened or created registry key.
            </returns>
        </member>
        <member name="M:Xheo.Licensing.Limit.MaskValue(System.String)">
            <summary>
            Performs a simple value obfuscation to make editing client side values 
            more difficult. This is by no means secure.
            </summary>
            <param name="source">
            	The original value.
            </param>
            <returns>
            	Returns the masked version of the value. Call UnmaskValue 
            	to obtain the original value.
            </returns>
        </member>
        <member name="M:Xheo.Licensing.Limit.UnmaskValue(System.String)">
            <summary>
            Reverses the simple value obfuscation performed by <see cref="M:Xheo.Licensing.Limit.MaskValue(System.String)"/>.
            </summary>
            <param name="source">
            	The original value.
            </param>
            <returns>
            	Returns the masked version of the value. Call UnmaskValue 
            	to obtain the original value.
            </returns>
        </member>
        <member name="M:Xheo.Licensing.Limit.MakeResourceString(System.String,System.Type)">
            <summary>
            Creates a resource string for loading an embedded resource based on the
            given type.
            </summary>
            <param name="resourceName">
            	The resource to load.
            </param>
            <param name="referenceType">
            	A reference type for scoping the resource.
            </param>
            <returns>
            	Returns a new string representing the requested resource.
            </returns>
        </member>
        <member name="P:Xheo.Licensing.Limit.IsRemote">
            <summary>
            Gets a value that indicates if this Limit uses remote processes (such as
            WebServices) for enforcement.
            </summary>
        </member>
        <member name="P:Xheo.Licensing.Limit.IsGui">
            <summary>
            Gets a value that indicates if this Limit uses a GUI to interact with the
            user.
            </summary>
        </member>
        <member name="P:Xheo.Licensing.Limit.Description">
            <summary>
            Gets the description of the limit.
            </summary>
        </member>
        <member name="P:Xheo.Licensing.Limit.Name">
            <summary>
            Gets the display name of the limit.
            </summary>
        </member>
        <member name="P:Xheo.Licensing.Limit.License">
            <summary>
            Gets or sets a reference to the <see cref="T:Xheo.Licensing.ExtendedLicense"/> that contains this Limit.
            </summary>
        </member>
        <member name="P:Xheo.Licensing.Limit.UnprotectedAttributes">
            <summary>
            Gets a comma separate list of XML attributes that should be ignored when creating and
            validating the license signature for the limit.
            </summary>
        </member>
        <member name="P:Xheo.Licensing.Limit.IsTimeSensitive">
            <summary>
            Gets a value that indicates if the limit is time sensitive and the clock
            should be protected.
            </summary>
        </member>
        <member name="P:Xheo.Licensing.Limit.QualifiedTypeName">
            <summary>
            Gets a string to be used for loading the custom limit. The defualt is the 
            fully qualified assembly name of the type.
            </summary>
        </member>
        <member name="M:Xheo.Licensing.ContainerLimit.#ctor">
            <summary>
            Initializes a new instance of the ContainerLimit class.
            </summary>
        </member>
        <member name="M:Xheo.Licensing.ContainerLimit.Dispose(System.Boolean)">
            <summary>
            Releases any managed or unmanged resources.
            </summary>
            <param name="disposing">
            	Indicates if Dispose was called directly.
            </param>
        </member>
        <member name="M:Xheo.Licensing.ContainerLimit.LoadFromXml(System.Xml.XmlNode)">
            <summary>
            Loads the contents of a Limit from an XmlNode.
            </summary>
            <param name="node">
            	The XmlNode to load from.
            </param>
            <returns>
            	Returns true if the load was successful, otherwise false.
            </returns>
        </member>
        <member name="M:Xheo.Licensing.ContainerLimit.LoadFromXml(System.Xml.XmlNode,System.String)">
            <summary>
            Loads the contents of the container limit from an XmlNode using the
            given name.
            </summary>
            <param name="node">
            	The XmlNode to load from.
            </param>
            <param name="limitName">
            	The name of the container type.
            </param>
            <returns>
            	Returns true if the load was successful, otherwise false.
            </returns>
        </member>
        <member name="M:Xheo.Licensing.ContainerLimit.SaveToXml(System.Xml.XmlNode)">
            <summary>
            Saves the contents of the Limit as an XmlNode.
            </summary>
            <param name="parent">
            	The parent node to save to.
            </param>
            <returns>
            	Returns the saved XmlNode.
            </returns>
        </member>
        <member name="M:Xheo.Licensing.ContainerLimit.SaveToXml(System.Xml.XmlNode,System.String)">
            <summary>
            Saves the contents of the Limit as an XmlNode using the given limit name.
            </summary>
            <param name="limitName">
            	The Name of the limit.
            </param>
            <param name="parent">
            	The parent node to save to.
            </param>
            <returns>
            	Returns the saved XmlNode.
            </returns>
        </member>
        <member name="P:Xheo.Licensing.ContainerLimit.Limits">
            <summary>
            Gets the collection of child limits.
            </summary>
        </member>
        <member name="P:Xheo.Licensing.ContainerLimit.IsGui">
            <summary>
            Gets a value that indicates if the limit may use a GUI interface.
            </summary>
        </member>
        <member name="P:Xheo.Licensing.ContainerLimit.IsRemote">
            <summary>
            Gets a value that indicates if the limit may use remote resources.
            </summary>
        </member>
        <member name="P:Xheo.Licensing.ContainerLimit.IsTimeSensitive">
            <summary>
            Determines if any contained limits are time sensitive.
            </summary>
        </member>
        <member name="M:Xheo.Licensing.OrLimit.#ctor">
            <summary>
            Initializes a new instance of the OrLimit class.
            </summary>
        </member>
        <member name="M:Xheo.Licensing.OrLimit.Granted(System.ComponentModel.LicenseContext,System.Type,System.Object)">
            <summary>
            Summary of Granted.
            </summary>
            <param name="context"></param>
            <param name="type"></param>
            <param name="instance"></param>
        </member>
        <member name="M:Xheo.Licensing.OrLimit.Validate(System.ComponentModel.LicenseContext,System.Type,System.Object)">
            <summary>
            Validates that the license being granted is within the limits enforced by
            this object.
            </summary>
            <param name="context">
            	The LicenseContext passed to <see cref="M:System.ComponentModel.LicenseProvider.GetLicense(System.ComponentModel.LicenseContext,System.Type,System.Object,System.Boolean)"/>.
            </param>
            <param name="type">
            	The Type of the object being licensed.
            </param>
            <param name="instance">
            	The instance of the object being licensed.
            </param>
            <returns>
            	Returns true if the limits are valid, otherwise false.
            </returns>
        </member>
        <member name="M:Xheo.Licensing.OrLimit.GetDetailsDescription">
            <summary>
            Overrides <see cref="M:Xheo.Licensing.Limit.GetDetailsDescription"/>.
            </summary>
        </member>
        <member name="P:Xheo.Licensing.OrLimit.Description">
            <summary>
            Gets the description of the limit.
            </summary>
        </member>
        <member name="P:Xheo.Licensing.OrLimit.Name">
            <summary>
            Gets the display name of the limit.
            </summary>
        </member>
        <member name="T:Xheo.Licensing.ExtendedLicenseProvider">
            <summary>
            Handles resolution of license and issues valid licenses at runtime and design time 
            to the <see cref="M:System.ComponentModel.LicenseManager.Validate(System.Type)"/> method.
            </summary>
            <remarks>
            To enable licensing for your component you must tag the class with the
            <seealso href="../Backgrounders/Probing.html">License File Probing</seealso>
            </remarks>
            <example>
            <code>
            [ LicenseProvider( Xheo.Licensing.ExtendedLicenseProvider ) ]
            public class MyLicensedControl : Component
            {
            	License _license	= null;
            	
            	/// &lt;summary&gt;
            	/// Initializes a new instance of a MyLicensedControl class.
            	/// &lt;/summary&gt;
            	public MyLicensedControl() : base()
            	{
            		_license = LicenseManager.Validate( typeof( MyLicensedControl ), this );
            	}
            	
            	/// &lt;summary&gt;
            	/// Implements &lt;see cref="IDisposable.Dispose"/&gt;.
            	/// &lt;/summary&gt;
            	public override void Dispose()
            	{
            		base.Dispose();
            		Dispose( true );
            		GC.SuppressFinalize( this );
            	}
            	
            	/// &lt;summary&gt;
            	/// Performs disposal of manage &amp; unmanged resources in the control
            	/// &lt;/summary&gt;
            	protected virtual void Dispose( bool disposing )
            	{
            		if( disposing )
            		{
            			if( _license != null )
            			{
            				_license.Dispose();
            				_license = null;
            			}
            		}
            	}
            }
            </code>
            </example>
        </member>
        <member name="M:Xheo.Licensing.ExtendedLicenseProvider.#ctor">
            <summary>
            Initializes a new instance of the ExtendedLicenseProvider class.
            </summary>
        </member>
        <member name="M:Xheo.Licensing.ExtendedLicenseProvider.#cctor">
            <summary>
            Initialize the library on first use.
            </summary>
        </member>
        <member name="M:Xheo.Licensing.ExtendedLicenseProvider.ResetCacheForType(System.Type)">
            <summary>
            Resets the cache for any licenses used by the given Type. Use to "unlock"
            an application/component when a license is selected manually.
            </summary>
            <param name="type">
            	The Type to reset.
            </param>
            <remarks>
            	After calling this method, the next time a license for the given Type
            	is requested, XHEO|Licensing will consider any new available license
            	even if a trial version was granted before.
            </remarks>
        </member>
        <member name="M:Xheo.Licensing.ExtendedLicenseProvider.ResetCacheForLicense(Xheo.Licensing.ExtendedLicense)">
            <summary>
            Any cached instance of the given license is removed and any Types that 
            were granted that license in the past may receive a new license.
            </summary>
            <param name="license">
            	The license to remove from the cache.
            </param>
            <remarks>
            	After calling this method, the next time a license for the given Type
            	is requested, XHEO|Licensing will consider any new available license
            	even if a trial version was granted before.
            </remarks>
        </member>
        <member name="M:Xheo.Licensing.ExtendedLicenseProvider.GetLicense(System.ComponentModel.LicenseContext,System.Type,System.Object,System.Boolean)">
            <summary>
            Overrides <see cref="M:System.ComponentModel.LicenseProvider.GetLicense(System.ComponentModel.LicenseContext,System.Type,System.Object,System.Boolean)"/>.
            </summary>
            <remarks>
            	Called by the <see cref="T:System.ComponentModel.LicenseManager"/> when validating a protected
            	Type. 
            </remarks>
        </member>
        <member name="M:Xheo.Licensing.ExtendedLicenseProvider.ProcessSurrogate(Xheo.Licensing.ExtendedLicense,Xheo.Licensing.LicenseSigningKey,System.ComponentModel.LicenseContext,System.Type,System.Object,System.Text.StringBuilder)">
            <summary>
            Summary of ProcessSurrogate.
            </summary>
            <param name="originalLicense"></param>
            <param name="key"></param>
            <param name="context"></param>
            <param name="type"></param>
            <param name="instance"></param>
            <param name="invalidReason"></param>
            <returns></returns>	
        </member>
        <member name="M:Xheo.Licensing.ExtendedLicenseProvider.GetCachedLicense(System.ComponentModel.LicenseContext,System.Type,System.Object)">
            <summary>
            Summary of GetCachedLicense.
            </summary>
            <param name="context"></param>
            <param name="type"></param>
            <param name="instance"></param>
            <returns></returns>	
        </member>
        <member name="M:Xheo.Licensing.ExtendedLicenseProvider.GrantLicense(System.ComponentModel.LicenseContext,System.Type,System.Object,Xheo.Licensing.ExtendedLicense)">
            <summary>
            Performs any caching of the license and update before it is returned to the caller.
            </summary>
            <param name="context">
            	The context from <see cref="M:Xheo.Licensing.ExtendedLicenseProvider.GetLicense(System.ComponentModel.LicenseContext,System.Type,System.Object,System.Boolean)"/>.
            </param>
            <param name="type">
            	The type from <see cref="M:Xheo.Licensing.ExtendedLicenseProvider.GetLicense(System.ComponentModel.LicenseContext,System.Type,System.Object,System.Boolean)"/>.
            </param>
            <param name="instance">
            	The instance from <see cref="M:Xheo.Licensing.ExtendedLicenseProvider.GetLicense(System.ComponentModel.LicenseContext,System.Type,System.Object,System.Boolean)"/>.
            </param>
            <param name="license">
            	The License to be granted.
            </param>
            <returns>
            	Returns a cached version of the license.
            </returns>
        </member>
        <member name="M:Xheo.Licensing.ExtendedLicenseProvider.GetPublicKey(System.Type)">
            <summary>
            Gets the Public key embedded in the assembly hosting the given type.
            </summary>
            <param name="type">
            	The reference type to use for obtaining the assembly.
            </param>
        </member>
        <member name="M:Xheo.Licensing.ExtendedLicenseProvider.GetEmbeddedLicense(System.Type)">
            <summary>
            Gets the runtime.lic embedded in the assembly hosting the given type.
            </summary>
            <param name="type">
            	The reference type to use for obtaining the assembly.
            </param>
        </member>
        <member name="M:Xheo.Licensing.ExtendedLicenseProvider.GetTrialServers(System.ComponentModel.LicenseContext,System.Type)">
            <summary>
            Gets a collection of trial servers to request licenses from.
            </summary>
        </member>
        <member name="M:Xheo.Licensing.ExtendedLicenseProvider.GetFiles(System.String)">
            <summary>
            Gets the license files in the given path.
            </summary>
        </member>
        <member name="M:Xheo.Licensing.ExtendedLicenseProvider.GetSearchPaths(System.ComponentModel.LicenseContext,System.Type)">
            <summary>
            Gets a collection of paths to search for licenses in.
            </summary>
        </member>
        <member name="M:Xheo.Licensing.ExtendedLicenseProvider.AddPath(System.Collections.Specialized.StringCollection,System.String)">
            <summary>
            Adds the path if doesn't already exist in the collection.
            </summary>
        </member>
        <member name="T:Xheo.Licensing.LicenseHelper">
            <summary>
            Serves as the base class for an assembly helper that can allow developers
            to offer unlock by serial number services where the serial number can not be
            provided by the user such as in an ASP.NET environment.
            </summary>
            <remarks>
            	Use LicenseHelperAttribute to set the helper for an assembly.
            </remarks>
        </member>
        <member name="M:Xheo.Licensing.LicenseHelper.#ctor">
            <summary>
            Initializes a new instance of the LicenseHelper class.
            </summary>
        </member>
        <member name="M:Xheo.Licensing.LicenseHelper.GetSerialNumber(Xheo.Licensing.ExtendedLicense)">
            <summary>
            When overriddedn in a derived class, gets a serial number for the given license.
            The license can be stored in any external source to provided by the host
            assembly (such as registry, configuration file, etc.)
            </summary>
            <param name="license">
            	The license to get the serial number for.
            </param>
            <returns>
            	Returns a serial number if found, otherwise null.
            </returns>
        </member>
        <member name="M:Xheo.Licensing.LicenseHelper.GetSupportInfo(Xheo.Licensing.ExtendedLicense)">
            <summary>
            When overridden in a derived class, gets additional support information for 
            the given license. 
            </summary>
            <param name="license">
            	The license to get support info for. Caution, may be null.
            </param>
            <returns>
            	Returns the SupportInfo for the given license if provided. Otherwise for
            	the current assembly.
            </returns>
        </member>
        <member name="M:Xheo.Licensing.LicenseHelper.GetIsolationKey(System.Type,System.Object)">
            <summary>
            When overridden in a derived class, gets a key that isolates the license
            for the given type when the type is used by more than one assembly in 
            the same process.
            </summary>
            <param name="type">
            	The type that requires a license.
            </param>
            <param name="instance">
            	The instance of that type (or a derived type) that is requesting the license.
            </param>
            <returns>
            	Returns a key that uniquely identifies the isolation level for the type
            	and assembly.
            </returns>
            <remarks>
            	Normally XHEO|Licensing will track validated licenses per assembly so that
            	a license granted for a given type in one assembly is not necessarily considered
            	valid for a different assembly in the same process. The isolation key is used
            	to uniquely identify the context for the type and instance. If the key returned
            	is null, then the default isolation rules will be applied.
            </remarks>
        </member>
        <member name="P:Xheo.Licensing.LicenseHelper.ProvidesSupportInfo">
            <summary>
            Gets a value that indicates if the helper provides <see cref="T:Xheo.Licensing.SupportInfo"/>
            for the assembly and overrides the <see cref="M:Xheo.Licensing.LicenseHelper.GetSupportInfo(Xheo.Licensing.ExtendedLicense)"/> method.
            </summary>
        </member>
        <member name="P:Xheo.Licensing.LicenseHelper.ProvidesSerialNumber">
            <summary>
            Gets a value that indicates if the helper can provide serial numbers for
            the assembly and overrides the <see cref="M:Xheo.Licensing.LicenseHelper.GetSerialNumber(Xheo.Licensing.ExtendedLicense)"/> method.
            </summary>
        </member>
        <member name="P:Xheo.Licensing.LicenseHelper.ProvidesIsolationHelp">
            <summary>
            Gets a value that indicates if the helper provides license isolation help
            for determining how licenses are shared between assemblies in the same
            process.
            </summary>
        </member>
        <member name="T:Xheo.Licensing.LicenseHelperAttribute">
            <summary>
            Provides the Type of the <see cref="T:Xheo.Licensing.LicenseHelper"/> that provides on demand
            support info and external serial number services.
            </summary>
        </member>
        <member name="M:Xheo.Licensing.LicenseHelperAttribute.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the LicenseHelpAttribute class.
            </summary>
        </member>
        <member name="P:Xheo.Licensing.LicenseHelperAttribute.HelperType">
            <summary>
            Gets the Type of the LicenseHelper for an the assembly.
            </summary>
        </member>
        <member name="T:Xheo.Licensing.SupportInfo">
            <summary>
            Support information for the assembly. Use <see cref="F:Telogis.GeoBase.Settings.ContactInfo"/>
            instead.
            </summary>
        </member>
        <member name="F:Xheo.Licensing.SupportInfo.Company">
            <summary>
            The company that released the assembly.
            </summary>
        </member>
        <member name="F:Xheo.Licensing.SupportInfo.Url">
            <summary>
            The URL where support information can be obtained.
            </summary>
        </member>
        <member name="F:Xheo.Licensing.SupportInfo.Phone">
            <summary>
             The phone number for additional support.
            </summary>
        </member>
        <member name="F:Xheo.Licensing.SupportInfo.Email">
            <summary>
            The e-mail address for additional support.
            </summary>
        </member>
        <member name="F:Xheo.Licensing.SupportInfo.ShowWindow">
            <summary>
            Indicates if the failure report window should be displayed when a license cannot
            be obtained.
            </summary>
        </member>
        <member name="F:Xheo.Licensing.SupportInfo.Product">
            <summary>
            The name of the product as it should appear in licensing forms. If empty it
            is filled by the AssemblyProductAttribute, AssemblyTitleAttribute or AssemblyName.
            </summary>
        </member>
        <member name="F:Xheo.Licensing.SupportInfo.IncludeDetails">
            <summary>
            Include a detailed report of the failure.
            </summary>
        </member>
        <member name="F:Xheo.Licensing.SupportInfo.IncludeAssemblies">
            <summary>
            Include listing of assemblies in the failure report.
            </summary>
        </member>
        <member name="F:Xheo.Licensing.SupportInfo.IncludeSystemInfo">
            <summary>
            Include information about the system in use.
            </summary>
        </member>
        <member name="T:Xheo.Licensing.PeriodicLicenseChecksAttribute">
            <summary>
            Allows a developer to declaritively limit the license validation check
            frequency of an <see cref="T:Xheo.Licensing.ExtendedLicense"/>.
            </summary>
            <remarks>
            	Often the validation process of a component license can be computationally 
            	expensive. To limit the impact of using licensed components they can be 
            	set to only check periodically.
            	<para>
            	There are two general types of license validations. <b>Local</b> checks
            	that the limits of the license are valid for the current process and that
            	the license has not yet expired. <b>Remote</b> checks to see if the license
            	has been revoked by the issuer. Not all license have a remote limit. If
            	not present, then the remote value has no meaning.
            	</para>
            	<para>
            	A value of -1 (the default) for either type indicates that that type should
            	be checked every time a license is requested for the component.
            	</para>
            </remarks>
        </member>
        <member name="M:Xheo.Licensing.PeriodicLicenseChecksAttribute.#ctor">
            <summary>
            Included for COM compliance, do not use.
            </summary>
        </member>
        <member name="M:Xheo.Licensing.PeriodicLicenseChecksAttribute.#ctor(System.Double)">
            <summary>
            Initializes a new instance of the PeriodicLicenseChecksAttribute class with
            the given period for both local and remote limits.
            </summary>
            <param name="period">
            	Time in milliseconds between checks.
            </param>
        </member>
        <member name="M:Xheo.Licensing.PeriodicLicenseChecksAttribute.#ctor(System.Double,System.Double)">
            <summary>
            Initializes a new instance of the PeriodicLicenseChecksAttribute class with
            the given periods for local and remote limits.
            </summary>
            <param name="localPeriod">
            	Time in milliseconds between local checks.
            </param>
            <param name="remotePeriod">
            	Time in milliseconds between remote checks.
            </param>
        </member>
        <member name="M:Xheo.Licensing.PeriodicLicenseChecksAttribute.Elapsed(Xheo.Licensing.ExtendedLicense)">
            <summary>
            Determines if either period has elapsed since the license was last validated.
            </summary>
            <returns>
            	Returns a combination of ElapsedResponse values indicating if any
            	periods have ellapsed.
            </returns>
        </member>
        <member name="P:Xheo.Licensing.PeriodicLicenseChecksAttribute.LocalPeriod">
            <summary>
            The periodic rate in milliseconds when the local limits should be 
            re-validated.
            </summary>
        </member>
        <member name="P:Xheo.Licensing.PeriodicLicenseChecksAttribute.RemotePeriod">
            <summary>
            The periodic rate in milliseconds when the remote limits should be 
            re-validated.
            </summary>
        </member>
        <member name="T:Xheo.Licensing.PeriodicLicenseChecksAttribute.ElapsedResponse">
            <summary>
            Valid responses from the <see cref="M:Xheo.Licensing.PeriodicLicenseChecksAttribute.Elapsed(Xheo.Licensing.ExtendedLicense)"/> method.
            </summary>
        </member>
        <member name="F:Xheo.Licensing.PeriodicLicenseChecksAttribute.ElapsedResponse.No">
            <summary>
            Neither the local or remote periods have ellapsed.
            </summary>
        </member>
        <member name="F:Xheo.Licensing.PeriodicLicenseChecksAttribute.ElapsedResponse.Local">
            <summary>
            The local period has ellapsed
            </summary>
        </member>
        <member name="F:Xheo.Licensing.PeriodicLicenseChecksAttribute.ElapsedResponse.Remote">
            <summary>
            The remote period has ellapsed.
            </summary>
        </member>
        <member name="F:Xheo.Licensing.PeriodicLicenseChecksAttribute.ElapsedResponse.Both">
            <summary>
            Both the remote and local periods have ellapsed.
            </summary>
        </member>
        <member name="T:Xheo.Licensing.ExtendedLicenseContext">
            <summary>
            Implements a private context used to track custom information during licensing.
            </summary>
        </member>
        <member name="M:Xheo.Licensing.ExtendedLicenseContext.#ctor(System.ComponentModel.LicenseContext)">
            <summary>
            Initializes a new instance of the ExtendedLicenseContext class.
            </summary>
            <param name="original">
            	The original context to pass commands through to.
            </param>
        </member>
        <member name="M:Xheo.Licensing.ExtendedLicenseContext.GetSavedLicenseKey(System.Type,System.Reflection.Assembly)">
            <summary>
            Gets the saved license key.
            </summary>
            <param name="type"></param>
            <param name="resourceAssembly"></param>
            <returns></returns>
        </member>
        <member name="M:Xheo.Licensing.ExtendedLicenseContext.SetSavedLicenseKey(System.Type,System.String)">
            <summary>
            Saves the license key.
            </summary>
            <param name="type"></param>
            <param name="key"></param>
        </member>
        <member name="M:Xheo.Licensing.ExtendedLicenseContext.GetService(System.Type)">
            <summary>
            Ges the designated service.
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="P:Xheo.Licensing.ExtendedLicenseContext.UsageMode">
            <summary>
            Gets the usage mode of the context.
            </summary>
        </member>
        <member name="P:Xheo.Licensing.ExtendedLicenseContext.Items">
            <summary>
            Gets a reference to a hashtable of items tracked during licensing.
            </summary>
        </member>
        <member name="P:Xheo.Licensing.ExtendedLicenseContext.IsTrialShown">
            <summary>
            Gets or sets a value that indicates if the trial window was shown.
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.ImageUtils.ImageCompressor">
            <summary>
            Utility class to save file space by compressing images.
            </summary>
            <remarks>
            The ImageCompressor can be used to reduce the file size of
            images by reducing their color count to 8 bits-per-pixel
            (256 colors). The most used colors are kept and other colors
            are mapped to the nearest kept color.
            </remarks>
        </member>
        <member name="M:Telogis.GeoBase.ImageUtils.ImageCompressor.QuantizeTo8bpp(System.Drawing.Image,System.Drawing.Color[])">
            <summary>
            Reduce file size by converting a 32bpp palletized map to an 8bpp indexed map.
            </summary>
            <remarks>Use of this method will generally give a 25-50 percent reduction in 
            file size when saved as a PNG. You should <see cref="M:System.Drawing.Image.Dispose"/> of the
            source image if you are no longer using it.<br/> 
            If your map has more than 256 colors the "best fit" pallette will be found.
            </remarks>  
            <param name="img">The 32bit source <see cref="T:System.Drawing.Image"/>.</param>
            <param name="remap">A list of colors to find nearest approximations for in the new image. These will be modified in place</param>
            <returns>A 8bit map.</returns>
        </member>
        <member name="M:Telogis.GeoBase.ImageUtils.ImageCompressor.QuantizeTo8bpp(System.Drawing.Image)">
            <summary>
            Reduce file size by converting a 32bpp palletized map to an 8bpp indexed map.
            </summary>
            <remarks>Use of this method will generally give a 25-50 percent reduction in 
            file size when saved as a PNG. You should <see cref="M:System.Drawing.Image.Dispose"/> of the
            source image if you are no longer using it.<br/> 
            If your map has more than 256 colors the "best fit" pallette will be found.
            </remarks>  
            <param name="img">The 32bit source <see cref="T:System.Drawing.Image"/>.</param>
            <returns>A 8bit map.</returns>
        </member>
        <member name="F:Telogis.GeoBase.ImageUtils.ImageCompressor.Color32.Blue">
            <summary>
            Holds the blue component of the color.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.ImageUtils.ImageCompressor.Color32.Green">
            <summary>
            Holds the green component of the color.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.ImageUtils.ImageCompressor.Color32.Red">
            <summary>
            Holds the red component of the color.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.ImageUtils.ImageCompressor.Color32.Alpha">
            <summary>
            Holds the alpha (transparency) component of the color.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.ImageUtils.ImageCompressor.Color32.ARGB">
            <summary>
            Permits the color32 to be treated as an int32.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.ImageUtils.ImageCompressor.Color32.Color">
            <summary>
            Get the <see cref="T:System.Drawing.Color"/> of this Color32 object.
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.Transactional.OperationOutsideTransactionException">
            <summary>
            This exception will be thrown when an operation is attempted outside a transaction.
            </summary>
            <remarks>
            Remember to call <see cref="M:Telogis.GeoBase.Transactional.TransactionalRepository.BeginTransaction"/> before you
            begin to manipulate the repository contents and <see cref="M:Telogis.GeoBase.Transactional.TransactionalRepository.EndTransaction"/> 
            after you have finished manipulating the repository contents.
            </remarks>
        </member>
        <member name="T:Telogis.GeoBase.Transactional.ReentrantTransactionException">
            <summary>
            This exception will be thrown when BeginTransaction is called within a transaction.
            </summary>
            <remarks>
            Remember to call <see cref="M:Telogis.GeoBase.Transactional.TransactionalRepository.BeginTransaction"/> before you
            begin to manipulate the repository contents and <see cref="M:Telogis.GeoBase.Transactional.TransactionalRepository.EndTransaction"/> 
            after you have finished manipulating the repository contents.
            </remarks>
        </member>
        <member name="T:Telogis.GeoBase.Transactional.ContainsFilter">
            <summary>
            This filter selects only records containing a specified string or LatLon.
            </summary>
            <example>
            <code lang="C#">
            // This filter returns records where the 'customer_name' column contains
            // the string 'Ch'. Matches would include both 'Charles' and 'Michal'.
            ContainsFilter cf = new ContainsFilter("customer_name", "Ch");
            </code>
            </example>
        </member>
        <member name="T:Telogis.GeoBase.Transactional.ColumnFilter">
            <summary>
            An abstract class that is implemented to filter records based on
            specified criteria.
            </summary>
            <remarks>
            You should use one of the following filter classes to filter records from a table.
            <ul>
                <li><see cref="T:Telogis.GeoBase.Transactional.ContainsFilter"/></li>
                <li><see cref="T:Telogis.GeoBase.Transactional.EqualFilter"/></li>
                <li><see cref="T:Telogis.GeoBase.Transactional.IntersectFilter"/></li>
                <li><see cref="T:Telogis.GeoBase.Transactional.RangeFilter"/></li>
            </ul>
            </remarks>
        </member>
        <member name="M:Telogis.GeoBase.Transactional.ColumnFilter.FilterRecord(Telogis.GeoBase.Transactional.Record)">
            <summary>
            Performs additional filtering not possible with a Where clause.
            </summary>
            <param name="record">The record to filter.</param>
            <returns>True if the record should be kept. False if it should be discarded.</returns>
        </member>
        <member name="M:Telogis.GeoBase.Transactional.ContainsFilter.#ctor(System.String,System.String)">
            <summary>
            Creates a ContainsFilter where the given column of a record should contain a particular 
            string. The string comparison is case insensitive.
            </summary>
            <param name="column">The column name</param>
            <param name="substring">The string that should be contained in the column</param>
        </member>
        <member name="M:Telogis.GeoBase.Transactional.ContainsFilter.#ctor(System.String,Telogis.GeoBase.LatLon)">
            <summary>
            Creates a ContainsFilter where the given column of a record should contain the specified 
            <see cref="T:Telogis.GeoBase.LatLon"/> .
            </summary>
            <remarks>
            This ContainsFilter is useful for finding polygon feature records that encompass
            a given <see cref="T:Telogis.GeoBase.LatLon"/>. To select only records with a column that 
            matches a given LatLon consider using an <see cref="T:Telogis.GeoBase.Transactional.EqualFilter"/>.
            </remarks>
            <param name="column">The column name</param>
            <param name="point">A point to test. See <see cref="T:Telogis.GeoBase.LatLon"/></param>
        </member>
        <member name="T:Telogis.GeoBase.ReverseGeoCodeMode">
            <summary>
            Used to control the types of streets that are returned from a <see cref="M:Telogis.GeoBase.GeoCoder.ReverseGeoCodeFull(Telogis.GeoBase.LatLon)"/> street search.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.ReverseGeoCodeMode.AllLinks">
            <summary>
            Search will return all streets.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.ReverseGeoCodeMode.MustHaveName">
            <summary>
            <para>Search will return only streets with names.</para>
            <para>
            Typically, a street without a name will be one of:
            </para>
            <ul>
            <li>A street that is internal to an intersection. These streets do not physically exist but
            are created to accurately describe an intersection (for example, a right-turn-only lane may be digitized
            as a separate street to maintain the validity of the intersection).</li>
            <li>A street that is in a remote location and genuinely has no name (such as a farm track, or a unsealed
            road following a river).</li>
            <li>Carparks.</li>
            </ul>
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.ReverseGeoCodeMode.RealLinksOnly">
            <summary>
            <para>Search will return only streets that are 'real'.</para>
            <para>
            Typically, a street that is not real will be a street that is internal to an intersection. These streets 
            do not physically exist but are created to accurately describe an intersection (for example, a 
            right-turn-only lane may be digitized as a separate street to maintain the validity of the intersection).
            </para>
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.Navigation.EnglishResources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Navigation.EnglishResources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Navigation.EnglishResources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Navigation.EnglishResources.en_US">
             <summary>
               Looks up a localized string similar to &lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
            &lt;Lang&gt;
              &lt;Desc&gt;English (US)&lt;/Desc&gt;
              &lt;Cultures&gt;
                &lt;Culture&gt;en-US&lt;/Culture&gt;
                &lt;Culture&gt;en&lt;/Culture&gt;
                &lt;Culture&gt;&lt;/Culture&gt;
              &lt;/Cultures&gt;
              &lt;Directions&gt;
                &lt;Phrases&gt;
                  &lt;Phrase Id=&quot;gb_depart&quot;&gt;Depart&lt;/Phrase&gt;
                  &lt;Phrase Id=&quot;gb_arrive&quot;&gt;Arrive&lt;/Phrase&gt;
                  &lt;Phrase Id=&quot;gb_continue_for&quot;&gt;
                    Continue for &lt;LookupGroup From=&quot;Distance&quot;/&gt;
                  &lt;/Phrase&gt;
                  &lt;Phrase Id=&quot;gb_now_entering&quot;&gt;
                    Now entering &lt;GetString From=&quot;NextState&quot;/&gt;
                  [rest of string was truncated]&quot;;.
             </summary>
        </member>
        <member name="T:Telogis.GeoBase.GBDiagnostics.MemoryTracker">
            <summary>
            Tracks IntPtrs to help identify leaks of memory allocated by managed code.  To use, call
            MemoryTracker.Dump() at a point during processing when you expect there to be no
            outstanding explicitly allocated memory.  If there is any outstanding explicitly allocated
            memory then the stack traces of the calls to allocate that memory will be output to the
            console.  You should also check that there are no direct calls to Marshal.AllocHGlobal,
            Marshal.AllocCoTaskMem, Marshal.FreeHGlobal, Marshal.FreeCoTaskMem and
            Marshal.StringToHGlobalAnsi.  All such calls should go via the appropriate methods in the
            GBMarshal class.  Memory tracking is enabled in debug mode and when MEMORY_TRACKING is
            #defined.
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.GBDiagnostics.MemoryTracker.StartTracking(System.IntPtr)">
            <summary>
            Starts tracking an IntPtr.
            </summary>
            <param name="ptr">The IntPtr to track.</param>
        </member>
        <member name="M:Telogis.GeoBase.GBDiagnostics.MemoryTracker.StopTracking(System.IntPtr)">
            <summary>
            Stops tracking an IntPtr.
            </summary>
            <param name="ptr">The IntPtr that was being tracked.</param>
        </member>
        <member name="M:Telogis.GeoBase.GBDiagnostics.MemoryTracker.Dump(System.Collections.Generic.KeyValuePair{System.IntPtr,System.String}[]@)">
            <summary>
            Dump details for all IntPtrs that are being tracked.
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.GBDiagnostics.MemoryTracker.Dump">
            <summary>
            Dump details for all IntPtrs that are being tracked.
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.Internal.Action_int">
            <summary>
            Corresponds to Action&lt;int&gt;
            </summary>
            <param name="value">Value</param>
        </member>
        <member name="T:Telogis.GeoBase.GeoStream.Authentication.LoginToken">
            <summary>
            This is sent back to the client in response to the
            initial login request to allow the second stage
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.GeoFence.IGeoFence">
            <summary>
            Implement to provide GeoFencing functions.
            </summary>
            <remarks>
            <para>A GeoFence allows the user to "draw a fence" around an area of the map,
            and monitor whether <see cref="T:Telogis.GeoBase.Vehicle"/>s pass in
            or out of that area.</para>
            <para>Fences which are to be displayed on an <see cref="T:Telogis.GeoBase.IMap"/>
            should implement <see cref="T:Telogis.GeoBase.IMapRenderer"/>.</para>
            <para>Fences that need to respond to mouse events should implement <see cref="T:Telogis.GeoBase.IMapMouseHandler"/>.</para>
            <para>Related articles: <a href="301bf297-670b-4b0d-8b89-6601fd8dca8f.htm">Geofences Concept</a>.</para>
            </remarks>
        </member>
        <member name="M:Telogis.GeoBase.GeoFence.IGeoFence.Contains(Telogis.GeoBase.LatLon)">
            <summary>
            Returns true if the point is inside this GeoFence.
            </summary>
            <param name="point">The <see cref="T:Telogis.GeoBase.LatLon">point</see> to be tested.</param>
            <returns><b>True</b> if the point lies within the GeoFence, false if it does not.</returns>
            <remarks>
            <para>Related articles: <a href="301bf297-670b-4b0d-8b89-6601fd8dca8f.htm">Geofences Concept</a>.</para>
            </remarks>
        </member>
        <member name="P:Telogis.GeoBase.GeoFence.IGeoFence.RenderPen">
            <summary>
            <see cref="T:System.Drawing.Pen"/> used to draw the border around the GeoFence, use <b>null</b> 
            for no border.
            </summary>
            <remarks>
            Default color is <see cref="P:System.Drawing.Color.Blue"/>, default width is 1.
            </remarks>
        </member>
        <member name="P:Telogis.GeoBase.GeoFence.IGeoFence.RenderBrush">
            <summary>
            <see cref="T:System.Drawing.Brush"/> used to fill the GeoFence, use <b>null</b> for no fill.
            </summary>
            <remarks>
            Default color is <see cref="P:System.Drawing.Color.Blue"/>. Default Brush is 
            <see cref="T:System.Drawing.SolidBrush"/>.
            </remarks>
        </member>
        <member name="P:Telogis.GeoBase.GeoFence.IGeoFence.BoundingBox">
             <summary>
             Return a <see cref="T:Telogis.GeoBase.BoundingBox"/> for this GeoFence.
             </summary>
             <remarks>
             Non-rectangular fences can create a <see cref="T:Telogis.GeoBase.BoundingBox"/> that contains all 
             the GeoFence's border points by sending those points to <see cref="M:Telogis.GeoBase.BoundingBox.AddPoint(Telogis.GeoBase.LatLon)"/>.
            </remarks>
        </member>
        <member name="T:Telogis.GeoBase.GeoFence.CircleFence">
            <summary>
            A circular-shaped geofence, defined by a center point and radius.
            </summary>
            <remarks>
            <img src="Media/geobase_circlefence.png"></img>
            <para><b>Related articles</b>: <a href="301bf297-670b-4b0d-8b89-6601fd8dca8f.htm">Geofences Concept</a>.</para>
            </remarks>
            <example>
            <para>
            
            </para>
            <code lang="C#">
            CircleFence cf = new CircleFence();
            
            // set the radius (in miles - we can use similar properties to set
            // the radius in meters and feet) and center location of the fence
            cf.RadiusMiles = 2;
            cf.Center = new LatLon(33.581353, -117.726979);
            
            // draw the CircleFence on our map
            myMap.Items.Add(cf);
            </code>
            <para>
            The same effect can be achieved using XAML code by placing the following code snippet
            inside a Map object.</para>
            <code lang="XAML">
            &lt;GeoFence:CircleFence x:Name="cf"
                Center="33.581353, -117.726979"
                RadiusMiles="2"
            /&gt;
            </code>
            <para>See also <see cref="T:Telogis.GeoBase.GeoFence.PolygonFence"/>.</para>
            </example>
        </member>
        <member name="T:Telogis.GeoBase.IMapRenderer">
            <summary>
            Supports rendering user-defined features onto a map.
            <seealso cref="T:Telogis.GeoBase.RendererList">RendererList class</seealso>
            <seealso cref="P:Telogis.GeoBase.IMap.Renderer">IMap.Renderer property</seealso>
            </summary>
            <remarks>
            This interface is implemented by types that are to draw additional
            features onto a map.
            <para>
            To use a renderer, assign an object that implements <see cref="T:Telogis.GeoBase.IMapRenderer"/>
            to the <see cref="P:Telogis.GeoBase.IMap.Renderer"/>
            property of an <see cref="T:Telogis.GeoBase.IMap"/> object. When the map is redrawn
            it will invoke the
            <see cref="M:Telogis.GeoBase.IMapRenderer.Render(System.Drawing.Graphics,Telogis.GeoBase.RenderContext)"/> method of the <see cref="T:Telogis.GeoBase.IMapRenderer"/>.
            </para>
            <para>
            Multiple renderers can be attached to a single <see cref="T:Telogis.GeoBase.IMap"/>
            by using a <see cref="T:Telogis.GeoBase.RendererList"/>.
            </para>
            <para><b>Related articles</b>: <a href="49fe38bf-ca0a-4750-af1b-5d814b172684.htm">Renderers Tutorial</a>, 
            <a href="226b0eb9-7333-4774-91db-b1f48e681968.htm">Renderer Walk-Through</a>, 
            <a href="fe19284f-8b0d-4ec7-a801-c1e70f3180ce.htm">Render Modes in Detail</a>, 
            <a href="7149832b-c202-4c69-9716-d4fc2876aaa4.htm">Routing Concept</a>, 
            <a href="f95ae961-f645-4c92-a609-ca5b873f1c48.htm">Using a Navigator</a>, 
            <a href="af08a594-7b79-4b54-be4e-a689c43788f5.htm">Using a LabelBox</a>, 
            <a href="685458eb-ffb4-4b03-b3fd-97997a647a7f.htm">How Renderers Work</a>, 
            <a href="21c94945-b858-44ef-a272-619f06783968.htm">Defining the Renderer</a>, 
            <a href="929e54d5-f994-4e7e-aa42-c3920a2d7c30.htm">Using Multiple Renderers</a>.</para>
            </remarks>
            <example>
            <code lang="C#">
            public class CenterRenderer : IMapRenderer {
            	public void Render(Graphics graphics, RenderContext rc) {
            		if (rc.Mode != RenderMode.PostLabelling) {
            			return;
            		}
            		
            		// Render a circle at the center of the map
            		Pen pen = new Pen(Color.Red, 3);
            		
            		int center_x, center_y;
            		int radius = 20;
            		rc.Map.LatLontoXY(out center_x, out center_y, rc.Map.Center);
            		
            		graphics.DrawEllipse(pen,
            		                     center_x - radius,
            		                     center_y - radius,
            		                     radius * 2,
            		                     radius * 2);
            	}
            }
            
            ...
            
            public class MyApplication {
            	IMap map;
            	
            	...
            	
            	public void InitApplication() {
            		...
            		map.Renderer = new CenterRenderer();
            		...
            	}
            	
            	...
            }
            </code>
            </example>
        </member>
        <member name="M:Telogis.GeoBase.IMapRenderer.Render(System.Drawing.Graphics,Telogis.GeoBase.RenderContext)">
             <summary>
             Called when this item should render itself on the map.
             </summary>
             <param name="graphics">The <see cref="T:System.Drawing.Graphics"/> object that can be used to draw on the map.</param>
             <param name="rc">The <see cref="T:Telogis.GeoBase.RenderContext"/> information for this call.</param>
             <remarks>
             The <see cref="M:Telogis.GeoBase.IMapRenderer.Render(System.Drawing.Graphics,Telogis.GeoBase.RenderContext)"/> method is called every time a map it is
             assigned to is redrawn, including when it is zoomed or panned.
             <para>
             The <see cref="T:Telogis.GeoBase.RenderContext"/> parameter supplies information to this method
             about the state of rendering, and also provides methods for:<br/>
             <list type="bullet">
             <item>
             Reserving space on the map for the rendering of this item.
             </item>
             <item>
             Testing whether rendering this item would cause a collision or overlap with space
             previously reserved by another item.
             </item>
             </list>
             The <see cref="P:Telogis.GeoBase.RenderContext.Map"/> property can be used to convert <see cref="T:Telogis.GeoBase.LatLon"/>
             coordinates to screen coordinates for rendering, using <see cref="M:Telogis.GeoBase.IMap.LatLontoXY(System.Int32@,System.Int32@,Telogis.GeoBase.LatLon)"/>
             </para>
             <para><b>Related articles</b>: <a href="9af7c41f-fabe-48be-9317-1e019cc19c33.htm">Map Concept</a>, 
             <a href="21c94945-b858-44ef-a272-619f06783968.htm">Defining the Renderer</a>.</para>
             </remarks>
             <example>
             The following example indicates how one might implement Render to draw
             a class 'Circle' with a given size at specified x/y co-ordinates on an <see cref="T:Telogis.GeoBase.IMap"/>.
             <code lang="C#">
             public void Render(System.Drawing.Graphics graphics, RenderContext rc) {
            	
            	//In this case, only draw after everything else has been drawn.
            	if (rc.Mode == RenderMode.Labelling) {
            		
            		//Create a pen to draw the outline of the circle.
            		System.Drawing.Pen RenderPen = new System.Drawing.Pen(Color.Red,1);
                 
            		//Create a brush with which to fill in the circle.
            		System.Drawing.Brush RenderBrush = new System.Drawing.SolidBrush(Color.FromArgb(80, Color.Blue));
            		
            		//Get the BoundingBox which encloses the circle.
            		//We assume this has already been created by the Circle class.
            		BoundingBox bb = this.BoundingBox;
            		
            		//Will store the x/y co-ordinates.
            		int x1,y1,x2,y2;
            
            		//Use the specified IMap to convert the BoundingBox's
            		//LatLon co-ordinates to x/y values.
            		rc.Map.LatLontoXY(out x1, out y1, bb.P1 );
            		rc.Map.LatLontoXY(out x2, out y2, bb.P2 );
            	
            		//Test whether there is space available for the circle
            		//to be rendered (this is not mandatory).
            		if (rc.Test(bb.Rectangle, 5, 0)) {
            	
            			//Reserve space for the circle by Placing it. Note that we
            			//have specified a 5 pixel buffer around the circle.
            			rc.Place(bb.Rectangle, 5, 0);
            	
            			//Draw the circle outline at the co-ordinates, with the
            			//specified x and y radii.
            			graphics.DrawEllipse(RenderPen,x1,y1,x2-x1,y2-y1);
            			
            			//Fill the circle using the same co-ordinate parameters.
            			graphics.FillEllipse(RenderBrush,x1,y1,x2-x1,y2-y1);
            		}
            	}
            }
            </code>
            </example>
        </member>
        <member name="P:Telogis.GeoBase.IMapRenderer.RequiredRendermodes">
             <summary>
             Specifies which stages of rendering should this renderer be called.
             </summary>
             <remarks>
             The RenderMode values are a set of flags that specify which stages of rendering should a renderer's
             Render method be called. For example, before the map draws its labels, it would call all its renderers
             whose RequiredRendermodes property returned RenderMode.Prelabelling.
             
             A renderer can also be called at multiple stages of the rendering process. This is achieved by using the 'or'
             operator (|) to specify any additional stages the renderer should be called.
             
             <code>return RenderMode.Prelabelling | RenderMode.Labelling;</code>
             
             Whenever a renderer is used in multiple stages of the rendering process, it is possible to find out which
             stage the renderer is currently in using the RenderContext.Mode property that is passed in to the Render() method.
             
             </remarks>
             <example>
             Since this is a breaking change to classes derived from IMapRenderer, existing classes can make use of the
             code below to implement this new property and will continue functioning normally.
             
             <code>
             public RenderMode RequiredRendermodes {
                 get { return RenderMode.PreLabelling | RenderMode.Labelling | RenderMode.PostLabelling; }
             }
            </code>
             
             In order to make a renderer that renders only after the labelling stage, a class that inherits from IMapRenderer
             should contain something like this:
             <code>
             
             public RenderMode RequiredRendermodes {
                 get { return RenderMode.Labelling; }
             }
             
             public void Render(Graphics graphics, RenderContext rc) {
                 if (rc.Mode != RenderMode.Labelling) {
                     Debug.Assert(false);
                 }
                 // Do some stuff
             }
             </code>
             
             </example>
        </member>
        <member name="M:Telogis.GeoBase.GeoFence.CircleFence.Render(System.Drawing.Graphics,Telogis.GeoBase.RenderContext)">
            <summary>
            Render the GeoFence on the specified <see cref="T:Telogis.GeoBase.IMap"/>.
            </summary>
            <param name="graphics"><see cref="T:System.Drawing.Graphics"/> that does the drawing.</param>
            <param name="rc"><see cref="T:Telogis.GeoBase.RenderContext"/> upon which the GeoFence is to be rendered.</param>
        </member>
        <member name="F:Telogis.GeoBase.GeoFence.CircleFence.Center">
            <summary>
            A <see cref="T:Telogis.GeoBase.LatLon"/> describing the center-point of the circle.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.GeoFence.CircleFence.Radius">
            <summary>
            The radius of the GeoFence (in Radians).
            </summary>
            <remarks>Use <see cref="M:Telogis.GeoBase.MathUtil.ToRadians(System.Double)"/> to convert to radians, or 
            consider using the <see cref="M:Telogis.GeoBase.GeoFence.CircleFence.SetRadius(System.Double,Telogis.GeoBase.DistanceUnit)">SetRadius(radius, units)</see> method.
            </remarks>
        </member>
        <member name="M:Telogis.GeoBase.GeoFence.CircleFence.Contains(Telogis.GeoBase.LatLon)">
            <summary>
            Determines whether the given <see cref="T:Telogis.GeoBase.LatLon">point</see> is within this GeoFence.
            </summary>
            <param name="point">The point to test.</param>
            <returns><b>true</b> if the point is within the GeoFence, <b>false</b> if it is not.</returns>
        </member>
        <member name="M:Telogis.GeoBase.GeoFence.CircleFence.SetRadius(System.Double,Telogis.GeoBase.DistanceUnit)">
            <summary>
            Sets the radius of the GeoFence in the specified <see cref="T:Telogis.GeoBase.DistanceUnit"/>.
            </summary>
            <param name="radius">The radius to set the GeoFence to.</param>
            <param name="units">The <see cref="T:Telogis.GeoBase.DistanceUnit">units</see> the specified radius is in.</param>
        </member>
        <member name="M:Telogis.GeoBase.GeoFence.CircleFence.GetRadius(Telogis.GeoBase.DistanceUnit)">
            <summary>
            Gets the radius of the GeoFence in the specified <see cref="T:Telogis.GeoBase.DistanceUnit"/>.
            </summary>
            <param name="units">The <see cref="T:Telogis.GeoBase.DistanceUnit"/> to return the radius of the circle.</param>
            <returns>The radius of the GeoFence in the units specified.</returns>
        </member>
        <member name="P:Telogis.GeoBase.GeoFence.CircleFence.RequiredRendermodes">
            <summary>
            Gets the <see cref="T:Telogis.GeoBase.RenderMode">RenderMode</see> required by this <b>CircleFence</b>
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.GeoFence.CircleFence.RenderPen">
            <summary>
            <see cref="T:System.Drawing.Pen"/> used to draw the border around the GeoFence, use <b>null</b> for no border.
            </summary>
            <remarks>
            Default color is <see cref="P:System.Drawing.Color.Blue"/>, default width is 1.
            </remarks>
        </member>
        <member name="P:Telogis.GeoBase.GeoFence.CircleFence.RenderBrush">
            <summary>
            <see cref="T:System.Drawing.Brush"/> used to fill the GeoFence, use <b>null</b> for no fill.
            </summary>
            <remarks>
            Default color is <see cref="P:System.Drawing.Color.Blue"/>. Default Brush is <see cref="T:System.Drawing.SolidBrush"/>
            </remarks>
        </member>
        <member name="P:Telogis.GeoBase.GeoFence.CircleFence.BoundingBox">
            <summary>
            Calculates and returns the <see cref="T:Telogis.GeoBase.BoundingBox"/> for this GeoFence.
            </summary>
            <remarks>
            The <see cref="T:Telogis.GeoBase.BoundingBox"/> will be the smallest square that contains 
            the circle defined by this GeoFence. 
            </remarks>
        </member>
        <member name="T:Telogis.GeoBase.GeoFence.RectangleFence">
            <summary>
            A rectangular GeoFence.
            </summary>
            <remarks>
            <img src="Media/geobase_rectfence.png"></img>
            <para><b>Related articles</b>: <a href="301bf297-670b-4b0d-8b89-6601fd8dca8f.htm">Geofences Concept</a>.</para>
            </remarks>
            <example>
            <code lang="C#">
            RectangleFence rf = new RectangleFence();
            
            // to set the boundaries of the rectangle fence,
            // we need to create a bounding box
            // and assign it to the Box field
            BoundingBox bb = new BoundingBox();
            bb.Add(new LatLon(33.581, -117.726));
            bb.Add(new LatLon(32.588, -117.728));
            rf.Box = bb;
            // Note: to edit the dimensions of the RectangleFence,
            // use the methods of rf.Box. (e.g. by calling AddPoint or InflateBy).
            
            // Now draw the RectangleFence on our map
            myMap.Renderer = rf;
            </code>
            <para>The example above uses RectangleBox.Box to set the dimensions
            of the RectangleFence. You can use RectangleBox.Box to manipulate
            the RectangleFence. Do not try to manipulate the RectangleFence using
            its BoundingBox property. RectangleBox.BoundingBox returns a copy
            of the RectangleFence, so changing its property has no effect on
            the RectangleFence.</para>
            <para>
            The same geofence can also be created using only XAML code. See 
            <see cref="T:Telogis.GeoBase.GeoFence.PolygonFence"/> for an example.
            </para>
            </example>
        </member>
        <member name="F:Telogis.GeoBase.GeoFence.RectangleFence.Box">
            <summary>
            The <see cref="T:Telogis.GeoBase.BoundingBox"/> representing the border of this GeoFence.
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.GeoFence.RectangleFence.Render(System.Drawing.Graphics,Telogis.GeoBase.RenderContext)">
            <summary>
            Render this GeoFence on the specified <see cref="T:Telogis.GeoBase.IMap"/>.
            </summary>
            <param name="graphics">The <see cref="T:System.Drawing.Graphics"/> responsible for drawing this GeoFence.</param>
            <param name="rc"><see cref="T:Telogis.GeoBase.RenderContext"/> on which the GeoFence is to be drawn.</param>
        </member>
        <member name="M:Telogis.GeoBase.GeoFence.RectangleFence.Contains(Telogis.GeoBase.LatLon)">
            <summary>
            Check whether the given <see cref="T:Telogis.GeoBase.LatLon"/> lies within the borders
            of this GeoFence.
            </summary>
            <param name="point">The <see cref="T:Telogis.GeoBase.LatLon"/> to be tested.</param>
            <returns><b>true</b> is the point lies within the GeoFence area, <b>false</b> if it does not.</returns>
        </member>
        <member name="P:Telogis.GeoBase.GeoFence.RectangleFence.BoundingBox">
            <summary>
            Gets a copy of the <see cref="T:Telogis.GeoBase.BoundingBox"/> that represents this GeoFence.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.GeoFence.RectangleFence.RenderPen">
            <summary>
            <see cref="T:System.Drawing.Pen"/> used to draw the border around the GeoFence, or <b>null</b> for no border.
            </summary>
            Default color is <see cref="P:System.Drawing.Color.Blue"/>, default width is 1.
        </member>
        <member name="P:Telogis.GeoBase.GeoFence.RectangleFence.RenderBrush">
            <summary>
            <see cref="T:System.Drawing.Brush"/> used to fill the GeoFence, or <b>null</b> for no fill.
            </summary>
            <remarks>
            Default color is <see cref="P:System.Drawing.Color.Blue"/>.
            </remarks>
        </member>
        <member name="P:Telogis.GeoBase.GeoFence.RectangleFence.RequiredRendermodes">
            <summary>
            Gets the <see cref="T:Telogis.GeoBase.RenderMode">RenderMode</see> required by this <b>RectangleFence</b>
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.GeoFence.GeoFenceCollection">
            <summary>
            A collection of one or more <see cref="T:Telogis.GeoBase.GeoFence.IGeoFence"/>s.
            </summary>
            <remarks>Implements an indexed collection of <see cref="T:Telogis.GeoBase.GeoFence.IGeoFence">GeoFences</see>.
            When a change to a GeoFence causes its <see cref="T:Telogis.GeoBase.BoundingBox"/> to change,
            the <see cref="M:Telogis.GeoBase.GeoFence.GeoFenceCollection.MembersUpdated"/> method should be called.
            <para><b>Related articles</b>: <a href="301bf297-670b-4b0d-8b89-6601fd8dca8f.htm">Geofences Concept</a>, 
            <a href="26a9c54b-02bb-43fa-89a9-b9150f2480d9.htm">Avoiding a Given Area</a>.</para>
            </remarks>
        </member>
        <member name="M:Telogis.GeoBase.GeoFence.GeoFenceCollection.#ctor">
            <summary>
            Creates a GeoFence collection.
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.GeoFence.GeoFenceCollection.MembersUpdated">
            <summary>
            Must be called after members are added, deleted or updated.
            </summary>
            <remarks>
            GeoFenceCollections index member fences to avoid having to do a brute-force search.
            To avoid this being recalculated all the time MembersUpdated must be manually called.
            </remarks>
        </member>
        <member name="M:Telogis.GeoBase.GeoFence.GeoFenceCollection.Add(System.Object)">
            <summary>
            Add a new <see cref="T:Telogis.GeoBase.GeoFence.IGeoFence"/> to this collection
            </summary>
            <param name="value">The <see cref="T:Telogis.GeoBase.GeoFence.IGeoFence"/> to add.</param>
            <returns>The index that <b>value</b> was added at.</returns>
        </member>
        <member name="M:Telogis.GeoBase.GeoFence.GeoFenceCollection.LookUp(Telogis.GeoBase.LatLon)">
            <summary>
            Find all GeoFences that contain the specified <see cref="T:Telogis.GeoBase.LatLon">point</see>.
            </summary>
            <param name="point">The <see cref="T:Telogis.GeoBase.LatLon">point</see> to be tested</param>
            <returns>An array of GeoFences which contain the specified <see cref="T:Telogis.GeoBase.LatLon">point</see>.</returns>
        </member>
        <member name="M:Telogis.GeoBase.GeoFence.GeoFenceCollection.LookUp(Telogis.GeoBase.BoundingBox)">
            <summary>
            Find all GeoFences that intersect with the specified <see cref="T:Telogis.GeoBase.BoundingBox"/>.
            </summary>
            <remarks>
            This tests only for intersection with the <see cref="T:Telogis.GeoBase.BoundingBox"/>. 
            </remarks>
            <param name="box">The <see cref="T:Telogis.GeoBase.BoundingBox"/> to be tested.</param>
            <returns><b>True</b> if there is an intersection, <b>false</b> if there is not.</returns>
        </member>
        <member name="M:Telogis.GeoBase.GeoFence.GeoFenceCollection.Contains(Telogis.GeoBase.LatLon)">
            <summary>
            Determine whether the given <see cref="T:Telogis.GeoBase.LatLon"/> lies within the borders
            of a GeoFence in this collection.
            </summary>
            <param name="point">The <see cref="T:Telogis.GeoBase.LatLon"/> to be tested.</param>
            <returns><b>true</b> if a GeoFence in this collection contains <b>point</b>, <b>false</b> if none do.</returns>
        </member>
        <member name="M:Telogis.GeoBase.GeoFence.GeoFenceCollection.Render(System.Drawing.Graphics,Telogis.GeoBase.RenderContext)">
            <summary>
            Render all the <see cref="T:Telogis.GeoBase.GeoFence.IGeoFence"/>s that
            implement <see cref="T:Telogis.GeoBase.IMapRenderer"/>.
            </summary>
            <param name="graphics">The <see cref="T:System.Drawing.Graphics"/> responsible for drawing the GeoFences.</param>
            <param name="rc">The <see cref="T:Telogis.GeoBase.RenderContext"/> onto which the GeoFences should be drawn.</param>
        </member>
        <member name="P:Telogis.GeoBase.GeoFence.GeoFenceCollection.RenderPen">
            <summary>
            Gets the <see cref="T:System.Drawing.Pen"/> for the collection object, and sets the <see cref="T:System.Drawing.Pen"/> for each GeoFence in the collection, as well as for the collection object.
            </summary>
            <remarks>
            <b>null</b> by default.
            </remarks>
        </member>
        <member name="P:Telogis.GeoBase.GeoFence.GeoFenceCollection.RenderBrush">
            <summary>
            Gets the <see cref="T:System.Drawing.Brush"/> for the collection object, and sets the <see cref="T:System.Drawing.Brush"/> for each GeoFence in the collection, as well as for the collection object.
            </summary>
            <remarks>
            <b>null</b> by default.
            </remarks>
        </member>
        <member name="P:Telogis.GeoBase.GeoFence.GeoFenceCollection.BoundingBox">
            <summary>
            Return a <see cref="T:Telogis.GeoBase.BoundingBox"/> containing all the fences in the collection.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.GeoFence.GeoFenceCollection.RequiredRendermodes">
            <summary>
            Gets the <see cref="T:Telogis.GeoBase.RenderMode">RenderMode</see> required by this <b>GeoFenceCollection</b>
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.GeoFence.StreetLinkFence">
            <summary>
            Create a GeoFence around the <see cref="T:Telogis.GeoBase.StreetLink"/>
            upon which the given point lies.
            </summary>
            <remarks>
            <para><img src="Art/geobase_streetfence.png"></img></para>
            <para>A street link GeoFence consists of the borders of the
            <see cref="T:Telogis.GeoBase.StreetLink"/>, and can be used to test whether a <see cref="T:Telogis.GeoBase.Vehicle"/>
            (or any <b>LatLon</b> point) is inside (traveling on) the street link.</para>
            <para><b>Related articles</b>: <a href="301bf297-670b-4b0d-8b89-6601fd8dca8f.htm">Geofences Concept</a>.</para>
            </remarks>
        </member>
        <member name="M:Telogis.GeoBase.GeoFence.StreetLinkFence.#ctor(Telogis.GeoBase.LatLon)">
            <summary>
            Construct a street link fence around the <see cref="T:Telogis.GeoBase.StreetLink"/> where a
            specified point lies. The constructor is
            passed a <b>LatLon</b> which should lie on the desired street.
            </summary>
            <param name="PointOnLink">A <see cref="T:Telogis.GeoBase.LatLon"/> used to specify the street link.</param>
            <exception cref="T:System.ArgumentException">Thrown if <b>PointOnLink</b> does not
            translate to a street address when reverse geocoded.</exception>
        </member>
        <member name="M:Telogis.GeoBase.GeoFence.StreetLinkFence.#ctor(Telogis.GeoBase.GeoCodeFull)">
            <summary>
            Construct a street link fence around the <see cref="T:Telogis.GeoBase.StreetLink"/> that 
            contains a specified address.
            </summary>
            <param name="gcf">The results from a reverse geocode of the address.</param>
        </member>
        <member name="F:Telogis.GeoBase.GeoFence.StreetLinkFence.RenderColor">
            <summary>
            The color to use when rendering this GeoFence. Default is <see cref="P:System.Drawing.Color.Blue"/>.
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.GeoFence.StreetLinkFence.Render(System.Drawing.Graphics,Telogis.GeoBase.RenderContext)">
            <summary>
            Renders this GeoFence. Should not be called directly.
            </summary>
            <param name="graphics">The <see cref="T:System.Drawing.Graphics"/> responsible for drawing this GeoFence.</param>
            <param name="rc">The <see cref="T:Telogis.GeoBase.RenderContext"/> upon which the GeoFence is to be drawn.</param>
        </member>
        <member name="M:Telogis.GeoBase.GeoFence.StreetLinkFence.Contains(Telogis.GeoBase.LatLon)">
            <summary>
            Determines whether the specified <see cref="T:Telogis.GeoBase.LatLon">point</see> is on this street.
            </summary>
            <param name="point">The <see cref="T:Telogis.GeoBase.LatLon"/> to be tested.</param>
            <returns><b>true</b> if the point lies within the boundaries of this street link, <b>false</b> if it does not.</returns>
        </member>
        <member name="P:Telogis.GeoBase.GeoFence.StreetLinkFence.Points">
            <summary>
            The points that define the corners of the Street Link Fence
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.GeoFence.StreetLinkFence.RequiredRendermodes">
            <summary>
            Gets the <see cref="T:Telogis.GeoBase.RenderMode">RenderMode</see> required by this <b>StreetLinkFence</b>
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.GeoFence.StreetLinkFence.RenderPen">
            <summary>
            <see cref="T:System.Drawing.Pen"/> used to draw the border around the GeoFence, or <b>null</b> for no border.
            </summary>
            Default color is <see cref="P:System.Drawing.Color.Blue"/>, default width is 1.
        </member>
        <member name="P:Telogis.GeoBase.GeoFence.StreetLinkFence.RenderBrush">
            <summary>
            <see cref="T:System.Drawing.Brush"/> used to fill the GeoFence, or <b>null</b> for no fill.
            </summary>
            <remarks>
            Default color is <see cref="P:System.Drawing.Color.Blue"/>.
            </remarks>
        </member>
        <member name="P:Telogis.GeoBase.GeoFence.StreetLinkFence.LaneWidth">
            <summary>
            Gets or sets the width of a single lane in meters. Defaults to five meters.
            </summary>
            <remarks>This is used in conjunction with <see cref="P:Telogis.GeoBase.GeoFence.StreetLinkFence.BaseWidth"/> to determine the actual width of the street</remarks>
        </member>
        <member name="P:Telogis.GeoBase.GeoFence.StreetLinkFence.BaseWidth">
            <summary>
            Gets or sets the total width of the dividers and side walks in meters. Defaults to ten meters.
            </summary>
            <remarks>This is used in conjunction with <see cref="P:Telogis.GeoBase.GeoFence.StreetLinkFence.LaneWidth"/> to determine the actual width of the street</remarks>
        </member>
        <member name="P:Telogis.GeoBase.GeoFence.StreetLinkFence.BoundingBox">
            <summary>
            Gets the <see cref="T:Telogis.GeoBase.BoundingBox"/> for this GeoFence.
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.GeoFence.PolygonFence">
            <summary>
            An irregularly shaped GeoFence connecting an arbitrary number of points.
            </summary>
            <remarks>
            <para><img src="Media/geobase_polygonfence.png"></img></para>
            <para>It is not necessary to specify the start and end points to the same co-ordinates to ensure that a 
            closed polygon is drawn. The <see cref="M:System.Drawing.Graphics.FillPolygon(System.Drawing.Brush,System.Drawing.PointF[])"/> 
            method will automatically close an open polygon by drawing a line between the start and end points.</para>
            <para><b>Related articles</b>: <a href="301bf297-670b-4b0d-8b89-6601fd8dca8f.htm">Geofences Concept</a>.</para>
            </remarks>
            <example>
            <para>
            The following example creates a large blue PolygonFence. When you create a PolygonFence
            you will typically set the opacity so that the PolygonFence is translucent (i.e. opacity &lt;&lt; 1).
            This ensures that the map below the PolygonFence is still visible.
            </para>
            <code lang="C#">
            PolygonFence pf = new PolygonFence();
            
            // define the vertices of the polygon
            pf.Add(new LatLon(33.1, -117.6));
            pf.Add(new LatLon(33.8, -117.8));
            pf.Add(new LatLon(33.5, -117.0));
            
            // set the color and opacity of the polygon
            pf.Opacity = 0.5;
            pf.Fill = new SolidColorBrush(Colors.Blue);
            
            // draw the PolygonFence as an item on a map
            myMap.Items.Add(pf);
            </code>
            <para>
            You can clear all the points from a PolygonFence using the <see cref="M:Telogis.GeoBase.GeoFence.PolygonFence.Clear">PolygonFence.Clear()</see> method.
            </para>
            <code lang="C#">
            pf.Clear();
            </code>
            <para>
            If you retain a reference to the PolygonFence you can add and remove it from a map as you wish.
            </para>
            <code lang="C#">
            myMap.Items.Remove(pf); // no longer shown on map
            ...
            myMap.Items.Add(pf); // show it on the map again
            </code>
            <para>
            The exact same effect can be achieved in XAML code by placing the following code
            snippet inside a Map object.</para>
            <code lang="XAML">
            &lt;GeoFence:PolygonFence 
                x:Name="pf"
                Points="33.581,-117.726 33.588,-117.728 33.585,-117.730"
            /&gt;
            </code>
            <para>
            Note that the points are latitude,longitude coordinates delimited by whitespace.
            </para>
            After you create a PolygonFence you'll often want to add it to a <see cref="T:Telogis.GeoBase.MapCtrl"/>'s 
            <see cref="T:Telogis.GeoBase.RendererList"/> so that the PolygonFence will be drawn on the map.
            <code lang="C#">
            PolygonFence fence = new PolygonFence();
            myMapsRendererList.Add(fence);
            </code>
            This code snippet could be used in conjunction with a <see cref="T:Telogis.GeoBase.MapCtrl"/>'s
            mouse-click event to add a new vertex to the PolygonFence. Note that we redraw the map to 
            reflect the changes made to the geofence.
            <code lang="C#">
            private void myMap_MouseClick(object sender, MouseEventArgs e)
            {
                if (e.button == MouseButtons.Right)
                    fence.Add(myMap.Map.XYtoLatLon(e.X, e.Y));
               
                myMap.Refresh();
            }
            </code>
            
            The following code snippet could be used in conjunction with a mouse-move 
            event to determine whether the cursor is inside or outside the geofence.
            <code lang="C#">
            private void myMap_MouseMove(object sender, MouseEventArgs e)
            {
                if (fence.Contains(myMap.Map.XYtoLatLon(e.X, e.Y)) {
                    // the mouse cursor is inside the PolygonFence
                }
                else {
                    // the mouse cursor is *not* inside the PolygonFence
                }
            }
            </code>
            </example>
        </member>
        <member name="M:Telogis.GeoBase.GeoFence.PolygonFence.#ctor">
            <summary>
            Construct a new, empty PolygonFence.
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.GeoFence.PolygonFence.Clear">
            <summary>
            Clears all points stored in this <see cref="T:Telogis.GeoBase.GeoFence.PolygonFence"/> and clears
            the <see cref="P:Telogis.GeoBase.GeoFence.PolygonFence.BoundingBox"/>.
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.GeoFence.PolygonFence.SnapToStreets">
            <summary>
            Create a new PolygonFence that includes only those streets that
            lie entirely within the area of this fence.
            </summary>
            <returns>A new <see cref="T:Telogis.GeoBase.GeoFence.GeoFenceCollection"/>.</returns>
        </member>
        <member name="M:Telogis.GeoBase.GeoFence.PolygonFence.Render(System.Drawing.Graphics,Telogis.GeoBase.RenderContext)">
            <summary>
            Renders this PolygonFence on the given <see cref="T:Telogis.GeoBase.IMap"/>.
            </summary>
            <param name="graphics">The <see cref="T:System.Drawing.Graphics"/> responsible for drawing this GeoFence.</param>
            <param name="rc">The <see cref="T:Telogis.GeoBase.RenderContext"/> upon which this GeoFence is to be drawn.</param>
        </member>
        <member name="M:Telogis.GeoBase.GeoFence.PolygonFence.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            For serialization of the PolygonFence.
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:Telogis.GeoBase.GeoFence.PolygonFence.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            For serialization of the PolygonFence.
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:Telogis.GeoBase.GeoFence.PolygonFence.Add(Telogis.GeoBase.LatLon)">
            <summary>
            Add the specified <see cref="T:Telogis.GeoBase.LatLon">point</see> to
            this PolygonFence.
            </summary>
            <param name="point">The <see cref="T:Telogis.GeoBase.LatLon">point</see> to be added to this PolygonFence.</param>
        </member>
        <member name="M:Telogis.GeoBase.GeoFence.PolygonFence.Contains(Telogis.GeoBase.LatLon)">
            <summary>
            Determine whether the specified point falls inside this PolygonFence.
            </summary>
            <remarks>Points on the edge of the PolygonFence are considered to be outside the PolygonFence.</remarks>
            <param name="point">The <see cref="T:Telogis.GeoBase.LatLon">point</see> to test.</param>
            <returns><b>true</b> if the point lies inside the border of this PolygonFence, <b>false</b> if it does not. See remarks.</returns>
        </member>
        <member name="M:Telogis.GeoBase.GeoFence.PolygonFence.IndexOf(Telogis.GeoBase.LatLon)">
            <summary>
            Searches the <see cref="T:Telogis.GeoBase.LatLon">points</see> that make up this GeoFence 
            and returns the index of the point.
            </summary>
            <param name="value"></param>
            <returns>Index of the <see cref="T:Telogis.GeoBase.LatLon">point</see>, or -1 if the
            point is not in this GeoFence.</returns>
        </member>
        <member name="M:Telogis.GeoBase.GeoFence.PolygonFence.Insert(System.Int32,Telogis.GeoBase.LatLon)">
            <summary>
            Inserts a new <see cref="T:Telogis.GeoBase.LatLon">point</see> to the GeoFence, at the
            specified index.
            </summary>
            <remarks>
            <para>Points are not overwritten by an Insert() - thus if an insert is made at an 
            occupied index, the existing elements above that index will be shifted up to 
            accomodate the new element.</para>
            <para>See <see cref="P:Telogis.GeoBase.GeoFence.PolygonFence.Points"/> to get an
            array of all points in the GeoFence.</para></remarks>
            <param name="index">Index at which to add the point.</param>
            <param name="value">The <see cref="T:Telogis.GeoBase.LatLon">point</see> to add.</param>
        </member>
        <member name="M:Telogis.GeoBase.GeoFence.PolygonFence.Remove(System.Object)">
            <summary>
            Removes a point from the GeoFence.
            </summary>
            <param name="value">A <see cref="T:Telogis.GeoBase.LatLon">point</see> to remove.</param>
        </member>
        <member name="M:Telogis.GeoBase.GeoFence.PolygonFence.RemoveAt(System.Int32)">
            <summary>
            Removes a point from a given index of the GeoFence.
            </summary>
            <remarks>Also see <see cref="M:Telogis.GeoBase.GeoFence.PolygonFence.Remove(System.Object)"/> and <see cref="M:Telogis.GeoBase.GeoFence.PolygonFence.IndexOf(Telogis.GeoBase.LatLon)"/>.</remarks>
            <param name="index">The index of the point to remove.</param>
        </member>
        <member name="M:Telogis.GeoBase.GeoFence.PolygonFence.CopyTo(System.Array,System.Int32)">
            <summary>
            Copy the array of points (of which this GeoFence is comprised) to
            a given array.
            </summary>
            <param name="array">The destination array.</param>
            <param name="index">The index (in the array of points) where copying begins.</param>
        </member>
        <member name="M:Telogis.GeoBase.GeoFence.PolygonFence.GetEnumerator">
            <summary>
            Get an enumerator for iteration through the points describing the PolygonFence.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Telogis.GeoBase.GeoFence.PolygonFence.RecalculateBoundingBox">
            <summary>
            After points have been removed from a PolygonFence, the Bounding Box may be larger than is required
            to encompass the remaining points. This function recalculates a minimal bounding box that encompasses
            all the remaining points.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.GeoFence.PolygonFence.Points">
            <summary>
            Gets the <see cref="T:Telogis.GeoBase.LatLon"/> points that make up this GeoFence.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.GeoFence.PolygonFence.BoundingBox">
            <summary>
            Gets the minimum <see cref="T:Telogis.GeoBase.BoundingBox"/> for this GeoFence.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.GeoFence.PolygonFence.RenderPen">
            <summary>
            <see cref="T:System.Drawing.Pen"/> used to draw the border around the GeoFence, use <b>null</b> for no border.
            </summary>
            <remarks>
            Default color is <see cref="P:System.Drawing.Color.Blue"/>, default width is 2.
            </remarks>
        </member>
        <member name="P:Telogis.GeoBase.GeoFence.PolygonFence.RenderBrush">
            <summary>
            <see cref="T:System.Drawing.Brush"/> used to fill the internal area of this GeoFence,
            use <b>null</b> for no fill.
            </summary>
            <remarks>
            Default color is <see cref="P:System.Drawing.Color.Blue"/>.
            </remarks>
        </member>
        <member name="P:Telogis.GeoBase.GeoFence.PolygonFence.RequiredRendermodes">
            <summary>
            Gets the <see cref="T:Telogis.GeoBase.RenderMode">RenderMode</see> required by this <b>PolygonFence</b>
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.GeoFence.PolygonFence.IsFixedSize">
            <summary>
            Gets whether the <see cref="T:Telogis.GeoBase.GeoFence.PolygonFence"/> is a fixed size. Always returns <b>false</b>.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.GeoFence.PolygonFence.IsReadOnly">
            <summary>
            Gets whether the <see cref="T:Telogis.GeoBase.GeoFence.PolygonFence"/> is read-only. Always returns <b>false</b>.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.GeoFence.PolygonFence.Item(System.Int32)">
            <summary>
            Enables the PolygonFence to be treated as an array of <see cref="T:Telogis.GeoBase.LatLon">LatLons</see>.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="P:Telogis.GeoBase.GeoFence.PolygonFence.Count">
            <summary>
            Gets the number of points that describe this GeoFence.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.GeoFence.PolygonFence.IsSynchronized">
            <summary>
            If <b>true</b>, then this array is synchronized (thread-safe).
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.GeoFence.PolygonFence.SyncRoot">
            <summary>
            Gets the <see cref="P:System.Collections.ArrayList.SyncRoot"/> to allow synchronized access to the array of points.
            </summary>
            <remarks>See <see cref="P:Telogis.GeoBase.GeoFence.PolygonFence.IsSynchronized"/>.</remarks>
        </member>
        <member name="F:Telogis.GeoBase.IndividualDrillDownGeoCoder.MAX_STREETS_SEARCHED">
            <summary>
            The maximum number of streets returned from a database search.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.IndividualDrillDownGeoCoder.MAX_STREETS_TO_AVOID_NEIGHBOUR_SEARCH">
            <summary>
            When this number of streets was searched (and filtered out) in the main search,
            the neighbour search is skipped.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.IndividualDrillDownGeoCoder.MAX_STREETS_RESULT">
            <summary>
            The street search is stopped after finding this number of results.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.IndividualDrillDownGeoCoder.QUERY_LIMIT">
            <summary>
            Number of streets requested from the db at one time.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.IndividualDrillDownGeoCoder.m_psList">
            <summary>
            List of PreparedStatements that are to be disposed when we are disposed.
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.IndividualDrillDownGeoCoder.CheckNotDisposed">
            <summary>
            Throws an exception if the object has been disposed.
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.IndividualDrillDownGeoCoder.intToArray(System.UInt32)">
            <summary>
            Takes a uint and retrns an array of strings that represent the bit
            number that is set
            </summary>
            <param name="a"></param>
            <returns>
            0 -> []
            1 -> ["0"]
            2 -> [null, "1"]
            3 -> ["0", "1"]
            4 -> [null, null, "2"]
            </returns>
        </member>
        <member name="M:Telogis.GeoBase.IndividualDrillDownGeoCoder.FixDisplayNameForOldData(System.String)">
            <summary>
            Old versions of the data before 2010 have no displayname column.
            So we just use the name column instead
            </summary>
            <param name="sql"></param>
            <returns></returns>
        </member>
        <member name="M:Telogis.GeoBase.IndividualDrillDownGeoCoder.CanGetStreet">
            <summary>
            Can we search for a street now?
            </summary>
            <returns>true if you can, false if you cannot</returns>
        </member>
        <member name="M:Telogis.GeoBase.IndividualDrillDownGeoCoder.SmartStreetTrim(System.String)">
            <summary>
            removes whitespace before the name and removes multiple spaces within the name.
            keeps whitespaces at the end of the name.
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Telogis.GeoBase.IndividualDrillDownGeoCoder.Prepare(System.String)">
            <summary>
            Generates a PreparedStatement, adding it to m_psList so that it is disposed when we are
            disposed.
            </summary>
            <param name="sql">The SQL to prepare.</param>
            <returns>The prepared statement.</returns>
        </member>
        <member name="M:Telogis.GeoBase.IndividualDrillDownGeoCoder.SearchWord.GetSearchString">
            <summary>
            Formats the string to search. Replaces accents and convers to lower case. 
            </summary>
            <returns></returns>
        </member>
        <member name="T:Telogis.GeoBase.Repositories.LocalRepository">
            <summary>
            An abstract class representing one or more local data sources providing
            GeoBase services (such as routing and mapping). To provide a local data source use either a 
            <see cref="T:Telogis.GeoBase.Repositories.SimpleRepository"/> or a <see cref="T:Telogis.GeoBase.Repositories.MultiRepository"/>.
            </summary>
            <remarks>
            <para>Use a <see cref="T:Telogis.GeoBase.Repositories.MultiRepository"/> to represent multiple local data sources (GBFS files) and a 
            <see cref="T:Telogis.GeoBase.Repositories.SimpleRepository"/> to represent a single local data source (one GBFS file).</para> 
            <para>Both <b>MultiRepository</b> and <b>SimpleRepository</b> inherit from <b>LocalRepository</b>, 
            so may be used in place of a <b>LocalRepository</b>.</para>
            <para><b>Related articles</b>: <a href="5a8e7c38-67e2-47fe-8bb0-2cd0b1a6547a.htm">Using Repositories to manage data</a>.</para>
            </remarks>
        </member>
        <member name="T:Telogis.GeoBase.Repositories.Repository">
            <summary>
            A <see cref="T:Telogis.GeoBase.Repositories.Repository">Repository</see> is used to manage GeoBase data. This data is required to support
            GeoBase services (such as routing and mapping). Each thread in your application
            may have its own <see cref="T:Telogis.GeoBase.Repositories.Repository">Repository</see>. See remarks.
            </summary>
            <remarks>
            <para>The default repository used for this application should be set using the 
            <see cref="P:Telogis.GeoBase.Repositories.Repository.Default"/> method.</para>
            <para>The current thread's Repository may be set using the <see cref="P:Telogis.GeoBase.Repositories.Repository.CurrentThreadRepository"/> 
            method to one of:  <see cref="T:Telogis.GeoBase.Repositories.GeoStreamRepository"/>, <see cref="T:Telogis.GeoBase.Repositories.MultiRepository"/> or 
            <see cref="T:Telogis.GeoBase.Repositories.SimpleRepository"/>.</para>
            <para>A default Repository may be set for all newly-created threads using the <see cref="P:Telogis.GeoBase.Repositories.Repository.Default"/> 
            property. You may then use the <see cref="P:Telogis.GeoBase.Repositories.Repository.CurrentThreadRepository"/> property to override the 
            Repository used on a per-thread basis.</para>
            <para>The Repository may be changed on-the-fly.</para>
            <para><b>Related articles</b>: <a href="5a8e7c38-67e2-47fe-8bb0-2cd0b1a6547a.htm">Using Repositories to manage data</a>.</para>
            </remarks>
        </member>
        <member name="M:Telogis.GeoBase.Repositories.Repository.HasCountry(Telogis.GeoBase.Country)">
            <summary>
            Implemented by derived classes to determine whether a repository contains a given <see cref="T:Telogis.GeoBase.Country"/>.
            </summary>
            <param name="country">The <see cref="T:Telogis.GeoBase.Country"/> to test.</param>
            <returns><b>true</b> if <i>country</i> is in the repository.</returns>
        </member>
        <member name="M:Telogis.GeoBase.Repositories.Repository.Dispose">
            <summary>
            Disposes of this LocalRepository. See remarks.
            </summary>
            <remarks>
            Because a LocalRepository may be used by MultiRepository objects,
            this Repository may not be disposable until the MultiRepository objects
            have been disposed of.</remarks>
        </member>
        <member name="P:Telogis.GeoBase.Repositories.Repository.IsCurrentRepositoryGeoStream">
            <summary>
            Whether the CurrentThreadRepository is a GeoStreamRepository.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Repositories.Repository.Default">
            <summary>
            Gets or Sets the default repository used by all threads to support GeoBase 
            services.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Repositories.Repository.CurrentThreadRepository">
            <summary>
            Gets or Sets the repository used to support GeoBase services. The repository 
            may be one of: <see cref="T:Telogis.GeoBase.Repositories.GeoStreamRepository"/> or <see cref="T:Telogis.GeoBase.Repositories.LocalRepository"/>
            (either a <see cref="T:Telogis.GeoBase.Repositories.SimpleRepository"/> or <see cref="T:Telogis.GeoBase.Repositories.MultiRepository"/>).
            </summary>
            <remarks>
            <para>If the repository has not yet been set and an attempt to retrieve 
            the repository using <b>CurrentThreadRepository</b> is made, then 
            a new <see cref="T:Telogis.GeoBase.Repositories.LocalRepository"/> will be created and returned.</para>
            </remarks>
        </member>
        <member name="P:Telogis.GeoBase.Repositories.Repository.DatasetHashCode">
            <summary>
            Implemented by derived classes to retrieve the hash code for a repository's data set.
            </summary>
            <remarks>
            The hash code may be used to identify the data provided by the repository.
            </remarks>
        </member>
        <member name="P:Telogis.GeoBase.Repositories.Repository.HasGlobalData">
            <summary>
            Implemented by derived classes to determine whether a repository contains global data.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Repositories.Repository.CopyrightString">
            <summary>
            Implemented by derived classes to retrieve a repository's copyright information.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Repositories.Repository.Countries">
            <summary>
            Implemented by derived classes to retrive an array of <see cref="T:Telogis.GeoBase.Country"/>s present in a repository.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Repositories.Repository.Regions">
            <summary>
            Implemented by derived classes to retrive an array of Regions present in a repository.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Repositories.Repository.IsDisposed">
            <summary>
            Gets whether the repository has been Disposed.
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.Repositories.LocalRepository.GetRepositoriesForCountry(Telogis.GeoBase.Country)">
            <summary>
            Returns a list of all repositories or sub-repositories of this repository that contain data about the specified country.
            </summary>
            <param name="Country">The country for which sub-repositories are desired.</param>
            <returns>A list of simple repositories with data for the specified country.</returns>
        </member>
        <member name="M:Telogis.GeoBase.Repositories.LocalRepository.HasCountry(Telogis.GeoBase.Country)">
            <summary>
            Indicates whether this repository contains data for the given <see cref="T:Telogis.GeoBase.Country"/>.
            </summary>
            <param name="country">The <see cref="T:Telogis.GeoBase.Country"/> to test for.</param>
            <returns><b>true</b> if data for the given <i>country</i> is available in this LocalRepository.</returns>
        </member>
        <member name="P:Telogis.GeoBase.Repositories.LocalRepository.DatasetHashCode">
            <summary>
            Gets the hashcode for this Repository's dataset. The hashcode may be used to identify the dataset.
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.GeoStream.Server.RepositoryList">
            <summary>
            Retrieves a list of repositories available across all loaded datasets.
            Repositories are formatted in html by default. To return filenames
            in a comma separated list open the page with the format=csv 
            
            For the html (pretty printed) view you may set which attributes of a 
            repository are displayed. Set vendor, name, country or file to yes to make visible
            or no to hide. Default columns are vendor, name and file
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.Traffic.HistoricalTrafficSource">
            <summary>
            This class supports historical traffic data, contained within GBHB files.
            </summary>
            <remarks>
            <para><b>Related articles</b>: <a href="dd01ee79-8c26-469b-a24f-c1e5a842b56d.htm">Adding a Traffic Layer</a>, 
            <a href="60998f81-efa9-4743-afcc-6e6f943a4fa1.htm">Routing with Traffic</a>.</para>
            </remarks>
        </member>
        <member name="T:Telogis.GeoBase.Traffic.ITrafficSource">
             <summary>
             Implemented to resolve a given TMC code and <see cref="T:System.DateTime">DateTime</see>
             to a <see cref="T:Telogis.GeoBase.Traffic.TrafficInfo">TrafficInfo</see>.
             </summary>
             <remarks>
             <para>The ITrafficSource interface is implemented to resolve a given TMC (Traffic Message Channel) code and <see cref="T:System.DateTime">DateTime</see> 
             to a <see cref="T:Telogis.GeoBase.Traffic.TrafficInfo">TrafficInfo</see>. A <see cref="N:Telogis.GeoBase.Traffic">Traffic</see> object will have one or more 
             traffic sources which will be implemented with the ITrafficSource interface. Telogis GeoBase provides classes with implementations of this interface in support 
             of the following traffic data:<br/><list type="bullet"><item>INRIX - incident, predictive, real</item><item>NAVTEQ - incident, predictive, real</item></list> 
             For more information, see: <br/><list type="bullet"><item><see cref="T:Telogis.GeoBase.Traffic.InrixIncidentTrafficSource"></see></item><item><see cref="T:Telogis.GeoBase.Traffic.InrixPredictiveRealTimeTrafficSource"></see></item><item><see cref="T:Telogis.GeoBase.Traffic.InrixRealTimeTrafficSource"></see></item>
             <item><see cref="T:Telogis.GeoBase.Traffic.NavteqIncidentTrafficSource"></see></item><item><see cref="T:Telogis.GeoBase.Traffic.NavteqPredictiveRealTimeTrafficSource"></see></item><item><see cref="T:Telogis.GeoBase.Traffic.NavteqRealTimeTrafficSource"></see></item></list></para>
             <para>Additional traffic data sources can be added with the ITrafficSource interface. The interface exposes the <see cref="M:Telogis.GeoBase.Traffic.ITrafficSource.GetTrafficInfo(System.String,System.DateTime)">GetTrafficInfo</see> 
             method, and the <see cref="P:Telogis.GeoBase.Traffic.ITrafficSource.CreatedTime"></see> property. To implement this interface, code must be provided for both GetTrafficInfo, and CreatedTime.</para>
             <para><see cref="P:Telogis.GeoBase.Traffic.ITrafficSource.CreatedTime">CreatedTime</see> - gets <see cref="T:System.DateTime">DateTime</see> when the traffic data was created.</para>
             <para><see cref="M:Telogis.GeoBase.Traffic.ITrafficSource.GetTrafficInfo(System.String,System.DateTime)">GetTrafficInfo</see> - this method returns the <see cref="T:Telogis.GeoBase.Traffic.TrafficInfo"></see> for the given TMC code at the specified DateTime. The speed can be 
             found from the traffic source data by searching for the given TMC code with the given time, and then extracting the speed from the found TMC code.</para>
             <para><b>Related articles</b>: <a href="60998f81-efa9-4743-afcc-6e6f943a4fa1.htm">Routing with Traffic</a>.</para>
             </remarks>
             <example>
             <code lang="C#">
             class MyTrafficSource : ITrafficSource {
                private DateTime createdTime;
                private Dictionary&lt;string, int&gt; speeds;
            
             
                //Constructor
                public MyTrafficSource(string src) {
                       speeds = new Dictionary&lt;string, int&gt;();
            
                       // Populate speeds with traffic information from "src"
                       LoadTrafficFile(src);
                }
                 
                // Fill in createdTime and speeds based on the contents of src.
                private void LoadTrafficFile(string src) {    
                        // Set createdTime from a timestamp contained within src    
                        createdTime = ...    
            
                        // Scan through remainder of src, populating speeds as we go.
                        ...
                }
                
                //ITrafficSource members
                public TrafficInfo GetTrafficInfo(string tmc, DateTime time) {
                       return GetTrafficInfo(tmc, time, null);
                }
            
                //Get TrafficInfo for the specified TMC code and time
                public TrafficInfo GetTrafficInfo(string tmc, DateTime time, Telogis.GeoBase.TimeZone? timezone) {
                   int speed;
            
                   if (timezone != null) {
                       time = ((Telogis.GeoBase.TimeZone)timezone).ConvertTime(time);
                   }
                    
                   //Check if data is still valid  
                   if (createdTime.AddMinutes(15) &lt; time) {
                       return null;
                   }
            
                   if (speeds.TryGetValue(tmc, out speed)) {
                       return new TrafficInfo(speed);
                   }
            
                   return null;
                }
            
                public DateTime CreatedTime {
                   get { return createdTime; }
                }
             }
             
             </code>
             </example>
        </member>
        <member name="T:Telogis.GeoBase.Traffic.IGenericTrafficSource">
            <summary>
            Provides a common ancestor for all Traffic Source interfaces. Traffic Source interfaces are implemented
            to resolve a source of traffic data and a <see cref="T:System.DateTime">DateTime</see> value
            to a <see cref="T:Telogis.GeoBase.Traffic.TrafficInfo">TrafficInfo</see>. 
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.Traffic.ITrafficSource.GetTrafficInfo(System.String,System.DateTime)">
            <summary>
            Implemented by derived classes to resolve a given TMC and <see cref="T:System.DateTime">DateTime</see>
            to a <see cref="T:Telogis.GeoBase.Traffic.TrafficInfo">TrafficInfo</see>.
            </summary>
            <param name="tmc">the TMC code to resolve</param>
            <param name="time">the <see cref="T:System.DateTime">DateTime</see> to get the <see cref="T:Telogis.GeoBase.Traffic.TrafficInfo"/> for</param>
            <returns>The <see cref="T:Telogis.GeoBase.Traffic.TrafficInfo">TrafficInfo</see> for the given TMC code at the specified DateTime</returns>
            <remarks><para>The TMC codes supplied to an ITrafficSource in the GetTrafficInfo call have the format <b>ABCCDEEEEE</b> (for example: -126N04295) where:</para>
            <table>
            <tr>
            <td><para>A</para></td>
            <td><para>direction of travel on link</para></td>
            <td><para>+ = from reference end</para><para>- = to reference end</para></td>
            </tr>
            <tr>
            <td><para>B</para></td>
            <td><para>country code</para></td>
            <td></td>
            </tr>
            <tr>
            <td><para>C</para></td>
            <td><para>location table number</para></td>
            <td></td>
            </tr>
            <tr>
            <td><para>D</para></td>
            <td><para>direction</para></td>
            <td><para>+ = in the positive direction and external to the problem location</para>
            <para>- = in the negative direction and external to the problem location</para>
            <para>P = in the positive direction and internal to the problem location</para>
            <para>N = in the negative direction and internal to the problem location</para></td>
            </tr>
            <tr>
            <td><para>E</para></td>
            <td><para>location code</para></td>
            <td></td>
            </tr>
            </table>
            <para>For many sources of traffic data, the initial + or - (labeled A above) will not be present and so can be stripped off.</para>
            </remarks>
        </member>
        <member name="M:Telogis.GeoBase.Traffic.ITrafficSource.GetTrafficInfo(System.String,System.DateTime,Telogis.GeoBase.TimeZone)">
            <summary>
            Implemented by derived classes to resolve a given TMC code and <see cref="T:System.DateTime">DateTime</see>
            to a <see cref="T:Telogis.GeoBase.Traffic.TrafficInfo">TrafficInfo</see>.
            </summary>
            <param name="tmc">the TMC code to resolve</param>
            <param name="time">the <see cref="T:System.DateTime">DateTime</see> to get the <see cref="T:Telogis.GeoBase.Traffic.TrafficInfo"/> for. This will be UTC</param>
            <param name="timezone">The timezone this TMC code exists in. This can be used to convert the UTC time passed in to the local time for that TMC code</param>
            <returns>The <see cref="T:Telogis.GeoBase.Traffic.TrafficInfo">TrafficInfo</see> for the given TMC code at the specified DateTime</returns>
            <remarks><para>The TMC codes supplied to an ITrafficSource in the GetTrafficInfo call have the format <b>ABCCDEEEEE</b> (for example: -126N04295) where:</para>
            <table>
            <tr>
            <td><para>A</para></td>
            <td><para>direction of travel on link</para></td>
            <td><para>+ = from reference end</para><para>- = to reference end</para></td>
            </tr>
            <tr>
            <td><para>B</para></td>
            <td><para>country code</para></td>
            <td></td>
            </tr>
            <tr>
            <td><para>C</para></td>
            <td><para>location table number</para></td>
            <td></td>
            </tr>
            <tr>
            <td><para>D</para></td>
            <td><para>direction</para></td>
            <td><para>+ = in the positive direction and external to the problem location</para>
            <para>- = in the negative direction and external to the problem location</para>
            <para>P = in the positive direction and internal to the problem location</para>
            <para>N = in the negative direction and internal to the problem location</para></td>
            </tr>
            <tr>
            <td><para>E</para></td>
            <td><para>location code</para></td>
            <td></td>
            </tr>
            </table>
            <para>For many sources of traffic data, the initial + or - (labeled A above) will not be present and so can be stripped off.</para>
            </remarks>
        </member>
        <member name="P:Telogis.GeoBase.Traffic.ITrafficSource.CreatedTime">
            <summary>
            The <see cref="T:System.DateTime">DateTime</see> when the traffic data was created.
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.Traffic.HistoricalTrafficSource.#ctor">
            <summary>
            Create a new <see cref="T:Telogis.GeoBase.Traffic.ITrafficSource">TrafficSource</see> based on historical data. This will search for
            GBHB files in the current working directory.
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.Traffic.HistoricalTrafficSource.#ctor(System.String[])">
            <summary>
            Create a new <see cref="T:Telogis.GeoBase.Traffic.HistoricalTrafficSource"/> using the data from the given GBHB files.
            </summary>
            <param name="files">A list of filenames for files containing GBHB data.</param>
            <exception cref="T:Telogis.GeoBase.Exceptions.InvalidLicenseException">No valid license could be found that allows use of traffic data.</exception>
        </member>
        <member name="M:Telogis.GeoBase.Traffic.HistoricalTrafficSource.GetTrafficInfo(System.String,System.DateTime)">
            <summary>
            Get <see cref="T:Telogis.GeoBase.Traffic.TrafficInfo">TrafficInfo</see> for the specified TMC code and time.
            </summary>
            <param name="tmc">the TMC code to resolve</param>
            <param name="time">the <see cref="T:System.DateTime">DateTime</see> to get the <see cref="T:Telogis.GeoBase.Traffic.TrafficInfo"/> for. This will be UTC</param>
            <returns>The <see cref="T:Telogis.GeoBase.Traffic.TrafficInfo">TrafficInfo</see> for the given TMC code at the specified DateTime</returns>
        </member>
        <member name="M:Telogis.GeoBase.Traffic.HistoricalTrafficSource.GetTrafficInfo(System.String,System.DateTime,Telogis.GeoBase.TimeZone)">
            <summary>
            Get <see cref="T:Telogis.GeoBase.Traffic.TrafficInfo">TrafficInfo</see> for the specified TMC code and time.
            </summary>
            <param name="tmc">the TMC code to resolve</param>
            <param name="time">the <see cref="T:System.DateTime">DateTime</see> to get the <see cref="T:Telogis.GeoBase.Traffic.TrafficInfo"/> for. This will be UTC</param>
            <param name="timeZone">The timezone this TMC code exists in. This can be used to convert the UTC time passed in to the local time for that TMC code</param>
            <returns>The <see cref="T:Telogis.GeoBase.Traffic.TrafficInfo">TrafficInfo</see> for the given TMC code at the specified DateTime</returns>
        </member>
        <member name="P:Telogis.GeoBase.Traffic.HistoricalTrafficSource.DataFiles">
            <summary>
            Reload traffic source using the data from the given GBHB files.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Traffic.HistoricalTrafficSource.CreatedTime">
            <summary>
            Gets the <see cref="T:System.DateTime">DateTime</see> when the traffic data was created. Currently gets the smallest value of DateTime (<see cref="F:System.DateTime.MinValue"/>)
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.Routing.OptimizedStop">
            <summary>
            Describes an optimized route stop.
            </summary>
            <remarks>
            <para>Related articles: <a href="a73972ff-629b-4c51-b1d4-6c096d75b1b2.htm">Delivery Time Windows</a>.</para>
            </remarks>
        </member>
        <member name="P:Telogis.GeoBase.Routing.OptimizedStop.RouteStop">
            <summary>
            The RouteStop object of this optimized stop
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Routing.OptimizedStop.ArrivalTime">
            <summary>
            The arrival time at the stop.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Routing.OptimizedStop.LeavingTime">
            <summary>
            The departure time at the stop.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Routing.OptimizedStop.TimeWaiting">
            <summary>
            The time to wait at this stop until the WindowStart time of the stop. For 
            <see cref="T:Telogis.GeoBase.Break"/>s, there is no waiting time even if
            there is a <see cref="F:Telogis.GeoBase.Routing.RouteStopWindowViolation.TooEarly"/> violation
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Routing.OptimizedStop.TimeDelay">
            <summary>
            The delay for this stop.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Routing.OptimizedStop.Violation">
            <summary>
            Indicate, whether the time window of this stop has been violated.
            None - No violation.
            TooEarly - This stop has been scheduled too early. There is some waiting time. 
            TooLate - This stop has been scheduled too late. 
            </summary>
            
        </member>
        <member name="T:Telogis.GeoBase.Routing.OptimizeResult">
            <summary>
            A class used to determine if the time windows on a route can be achieved.
            </summary>
            <remarks><para><b>Related articles</b>: <a href="a73972ff-629b-4c51-b1d4-6c096d75b1b2.htm">Delivery Time Windows</a>.</para></remarks>
        </member>
        <member name="M:Telogis.GeoBase.Routing.OptimizeResult.GetStops">
            <summary>
            Retrieve all the stops in the route in optimized order. This can be used to
            examine the expected arrival time for each stop, regardless of whether the time
            windows are satisfied.
            </summary>
            <returns>All the stops in the route in optimized order.</returns>
        </member>
        <member name="M:Telogis.GeoBase.Routing.OptimizeResult.GetViolatedStops">
            <summary>
            The Stops with a violated time window.
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.Routing.LinkEdit.LinkEditDatabase">
            <summary>
            A database of LinkEdits. A LinkEditDatabase represents a special GeoBase Transactional 
            Database (.gbtx file) that contains information for customizing the properties of 
            Street links.
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.Routing.LinkEdit.LinkEditDatabase.#ctor">
            <summary>
            Creates a new blank LinkEditDatabase that will be stored in memory.  It will not be
            saved to disk.
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.Routing.LinkEdit.LinkEditDatabase.#ctor(System.String)">
            <summary>
            Creates a LinkEditDatabase from a file.  If the file doesn't exist then a new
            file will be created.
            </summary>
            <param name="databaseFilename">The database filename.</param>
        </member>
        <member name="M:Telogis.GeoBase.Routing.LinkEdit.LinkEditDatabase.Finalize">
            <summary>
            Disposes of the LinkEditDatabase.
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.Routing.LinkEdit.LinkEditDatabase.Dispose">
            <summary>
            Disposes of the LinkEditDatabase.
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.Routing.LinkEdit.LinkEditDatabase.Dispose(System.Boolean)">
            <summary>
            Disposes of the LinkEditDatabase.
            </summary>
            <param name="disposing">Whether the LinkEditDatabase is being disposed.</param>
        </member>
        <member name="M:Telogis.GeoBase.Routing.LinkEdit.LinkEditDatabase.CommitChanges">
            <summary>
            Commits the edits that were made since the previous commit.  Until edits are committed
            they can be rolled back by calling DiscardChanges.
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.Routing.LinkEdit.LinkEditDatabase.DiscardChanges">
            <summary>
            Discards the edits that were made since the previous call to CommitChanges.
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.Routing.LinkEdit.LinkEditDatabase.CreateLinkEdit(Telogis.GeoBase.Routing.LinkEdit.ILinkEditSelection,System.Int32,Telogis.GeoBase.SpeedUnit)">
            <summary>
            Adds a new link edit to the database, and returns it.
            </summary>
            <remarks>
            <para>
            When applied, speeds will be converted into miles per hour and rounded down to the
            largest integer value that is no larger than the specified speed.  A negative speed
            can be applied, and indicates that the original speed from strategy's
            <see cref="T:Telogis.GeoBase.Routing.RoutingProfile">RoutingProfile</see> will be
            used.  The maximum speed that can be specified is 254mph.
            </para>
            <para>
            If the returned LinkEdit object is changed, the change will only be applied to the
            database if UpdateLinkEdit is called.
            </para>
            </remarks>
            <param name="selection">The ILinkEditSelection that selects the links to be
            edited.</param>
            <param name="speed">The speed to apply.</param>
            <param name="unit">The units for speed.</param>
            <returns>The LinkEdit that was added to the database.</returns>
        </member>
        <member name="M:Telogis.GeoBase.Routing.LinkEdit.LinkEditDatabase.GetLinkEdits">
            <summary>
            Gets all of the link edits in the database.
            </summary>
            <returns>All of the link edits in the database.</returns>
        </member>
        <member name="M:Telogis.GeoBase.Routing.LinkEdit.LinkEditDatabase.UpdateLinkEdit(Telogis.GeoBase.Routing.LinkEdit.LinkEdit)">
            <summary>
            Updates an existing link edit in the database.
            </summary>
            <param name="edit">The LinkEdit to update.</param>
        </member>
        <member name="M:Telogis.GeoBase.Routing.LinkEdit.LinkEditDatabase.DiscardLinkEditChanges(Telogis.GeoBase.Routing.LinkEdit.LinkEdit)">
            <summary>
            Refreshes the supplied LinkEdit with the data that has been stored in the database.
            Any changes that were made since the last call to CreateLinkEdit or UpdateLinkEdit will
            be lost.
            </summary>
            <param name="edit">The LinkEdit to refresh.</param>
        </member>
        <member name="M:Telogis.GeoBase.Routing.LinkEdit.LinkEditDatabase.DeleteLinkEdit(Telogis.GeoBase.Routing.LinkEdit.LinkEdit)">
            <summary>
            Deletes a link edit from the database.
            </summary>
            <param name="edit">The LinkEdit to delete.</param>
        </member>
        <member name="M:Telogis.GeoBase.Routing.LinkEdit.LinkEditDatabase.Compile">
            <summary>
            Compiles the database into a CompiledLinkEdits object that can be set on a
            RoutingStrategy object.
            </summary>
            <returns>A CompiledLinkEdits object representing the edits in the database.</returns>
        </member>
        <member name="P:Telogis.GeoBase.Routing.LinkEdit.LinkEditDatabase.DatabaseName">
            <summary>
            Gets the LinkEditDatabase name.
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.Internal.IGeoCoderIntDesktop.SplitStreetName(System.String,System.Boolean,System.Boolean,Telogis.GeoBase.Country)">
            <summary>
            Split up the street name
            </summary>
            <param name="address">The address to be parsed.</param>
            If a <see cref="T:Telogis.GeoBase.Internal.IGeoCoder"/> can be found in our <see cref="T:Telogis.GeoBase.Repositories.Repository"/>,
            <param name="need_rest"></param>
            <param name="allowNumber"></param>
            <param name="country"></param>
        </member>
        <member name="M:Telogis.GeoBase.Internal.IGeoCoderIntDesktop.AddBackupCrossMatches(Telogis.GeoBase.Internal.StreetAddressMatch,Telogis.GeoBase.Country,System.Collections.Generic.List{Telogis.GeoBase.Internal.StreetAddressMatch},System.Collections.Generic.List{Telogis.GeoBase.Internal.gb_geocode_addr})">
            <summary>
            Adds backup matches for the two cross streets in the opposite order, in case the first
            street is hard to find.
            </summary>
            <param name="match">Match containing a cross street.</param>
            <param name="country">Country.</param>
            <param name="matches">List of matches.</param>
            <param name="addrs">List of parsed addresses.</param>
        </member>
        <member name="M:Telogis.GeoBase.Geocoding.IExternalGeocoder.Geocode(System.String,Telogis.GeoBase.Country)">
            <summary>
            Implemented by derived classes to perform a forward geocode on the given free-form address. The results
            of the forward geocode (if any) should be returned as an array of LatLon objects. The array should be
            sorted so that the results with the highest confidence appear first in the array.
            </summary>
            <param name="address"></param>
            <param name="cntry"></param>
            <returns></returns>
        </member>
        <member name="M:Telogis.GeoBase.Geocoding.IExternalGeocoder.Geocode(System.String,System.String,System.String,System.String,Telogis.GeoBase.Country)">
            <summary>
            Implemented by derived classes to perform a forward geocode using the given address components.
            The results of the forward geocode (if any) should be returned as an array of LatLon objects. The array
            should be sorted so that the results with the highest confidence appear first in the array.
            </summary>
            <param name="address"></param>
            <param name="city"></param>
            <param name="region"></param>
            <param name="postalCode"></param>
            <param name="country"></param>
            <returns></returns>
        </member>
        <member name="P:Telogis.GeoBase.Geocoding.IExternalGeocoder.Arguments">
            <summary>
            The collection of arguments used to make calls to the external geocoder.
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.Navigation.Announcement">
            <summary>
            Describes the type of an announcement. See remarks.
            </summary>
            <remarks>An Announcement is a discrete phrase or sound. Announcements are combined by
            the <see cref="T:Telogis.GeoBase.Navigation.EnglishWaveAnnouncer">EnglishWaveAnnouncer</see>
            to create a phrase (used for an audible announcement).
            </remarks>
        </member>
        <member name="F:Telogis.GeoBase.Navigation.Announcement.ReachDest">
            <summary>
            Destination has been reached
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Navigation.Announcement.DestIn">
            <summary>
            Destination is in <i>(distance)</i>
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Navigation.Announcement.DestLeft">
            <summary>
            Destination is on the left
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Navigation.Announcement.DestRight">
            <summary>
            Destination is on the right
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Navigation.Announcement.Bell">
            <summary>
            Bell sound
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Navigation.Announcement.Click">
            <summary>
            Click sound
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Navigation.Announcement.Continue">
            <summary>
            "Continue..."
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Navigation.Announcement.In">
            <summary>
            "In..."
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Navigation.Announcement.Then">
            <summary>
            "Then..."
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Navigation.Announcement.Point">
            <summary>
            "Point"
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Navigation.Announcement.About">
            <summary>
            "About"
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Navigation.Announcement.To">
            <summary>
            "To"
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Navigation.Announcement.Meters">
            <summary>
            "...meters"
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Navigation.Announcement.Kilometer">
            <summary>
            "...kilometer"
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Navigation.Announcement.Kilometers">
            <summary>
            "...kilometers"
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Navigation.Announcement.Q_Mile">
            <summary>
            "Quarter-mile"
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Navigation.Announcement.H_Mile">
            <summary>
            "Half-mile"
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Navigation.Announcement.TQ_Mile">
            <summary>
            "Three-quarter mile"
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Navigation.Announcement.Mile">
            <summary>
            "Mile"
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Navigation.Announcement.Miles">
            <summary>
            "...Miles"
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Navigation.Announcement.Feet">
            <summary>
            "...Feet"
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Navigation.Announcement.Yards">
            <summary>
            "...Yards"
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Navigation.Announcement.North">
            <summary>
            Heading: North
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Navigation.Announcement.East">
            <summary>
            Heading: East
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Navigation.Announcement.South">
            <summary>
            Heading: South
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Navigation.Announcement.West">
            <summary>
            Heading: West
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Navigation.Announcement.AtEndOfStreet">
            <summary>
            Instruction: "at the end of the street..."
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Navigation.Announcement.AtTrafficLight">
            <summary>
            Instruction: "at the traffic lights..."
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Navigation.Announcement.AtRoundaboutTakeThe">
            <summary>
            Instruction: "at the roundabout, take the..."
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Navigation.Announcement.TurnL">
            <summary>
            Instruction: "turn left..."
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Navigation.Announcement.TurnR">
            <summary>
            Instruction: "turn right..."
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Navigation.Announcement.KeepLLane">
            <summary>
            Instruction: "keep in the left lane"
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Navigation.Announcement.KeepRLane">
            <summary>
            Instruction: "keep in the right lane"
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Navigation.Announcement.Exit1">
            <summary>
            Label: First exit
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Navigation.Announcement.Exit2">
            <summary>
            Label: Second exit
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Navigation.Announcement.Exit3">
            <summary>
            Label: Third exit
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Navigation.Announcement.Exit4">
            <summary>
            Label: Fourth exit
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Navigation.Announcement.Exit5">
            <summary>
            Label: Fifth exit
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Navigation.Announcement.TakeThe">
            <summary>
            Instruction: "take the..."
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Navigation.Announcement.TakeTheFreeway">
            <summary>
            Instruction: "take the freeway"
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Navigation.Announcement.TakeTheExit">
            <summary>
            Instruction: "take the exit"
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Navigation.Announcement.TakeExit">
            <summary>
            Instruction: "take exit..."
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Navigation.Announcement.TakeTheRamp">
             <summary>
            Instruction: "take the ramp"
             </summary>
        </member>
        <member name="F:Telogis.GeoBase.Navigation.Announcement.UTurn">
            <summary>
            Instruction to make a u-turn
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Navigation.Announcement.Route">
            <summary>
            Route
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Navigation.Announcement.A">
            <summary>
            The letter A
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Navigation.Announcement.B">
            <summary>
            The letter B
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Navigation.Announcement.C">
            <summary>
            The letter C
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Navigation.Announcement.D">
            <summary>
            The letter D
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Navigation.Announcement.E">
            <summary>
            The letter E
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Navigation.Announcement.F">
            <summary>
            The letter F
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Navigation.Announcement.G">
            <summary>
            The letter G
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Navigation.Announcement.H">
            <summary>
            The letter H
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Navigation.Announcement.I">
            <summary>
            The letter I
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Navigation.Announcement.J">
            <summary>
            The letter J
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Navigation.Announcement.K">
            <summary>
            The letter K
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Navigation.Announcement.L">
            <summary>
            The letter L
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Navigation.Announcement.M">
            <summary>
            The letter M
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Navigation.Announcement.N">
            <summary>
            The letter N
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Navigation.Announcement.O">
            <summary>
            The letter O
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Navigation.Announcement.P">
            <summary>
            The letter P
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Navigation.Announcement.Q">
            <summary>
            The letter Q
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Navigation.Announcement.R">
            <summary>
            The letter R
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Navigation.Announcement.S">
            <summary>
            The letter S
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Navigation.Announcement.T">
            <summary>
            The letter T
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Navigation.Announcement.U">
            <summary>
            The letter U
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Navigation.Announcement.V">
            <summary>
            The letter V
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Navigation.Announcement.W">
            <summary>
            The letter W
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Navigation.Announcement.X">
            <summary>
            The letter X
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Navigation.Announcement.Y">
            <summary>
            The letter Y
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Navigation.Announcement.Z">
            <summary>
            The letter Z
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Navigation.Announcement.Num0">
            <summary>
            "Zero"
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Navigation.Announcement.Num1">
            <summary>
            "One"
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Navigation.Announcement.Num2">
            <summary>
            "Two"
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Navigation.Announcement.Num3">
            <summary>
            "Three"
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Navigation.Announcement.Num4">
            <summary>
            "Four"
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Navigation.Announcement.Num5">
            <summary>
            "Five"
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Navigation.Announcement.Num6">
            <summary>
            "Six"
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Navigation.Announcement.Num7">
            <summary>
            "Seven"
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Navigation.Announcement.Num8">
            <summary>
            "Eight"
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Navigation.Announcement.Num9">
            <summary>
            "Nine"
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Navigation.Announcement.Num10">
            <summary>
            "Ten"
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Navigation.Announcement.Num11">
            <summary>
            "Eleven"
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Navigation.Announcement.Num12">
            <summary>
            "Twelve"
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Navigation.Announcement.Num13">
            <summary>
            "Thirteen"
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Navigation.Announcement.Num14">
            <summary>
            "Fourteen"
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Navigation.Announcement.Num15">
            <summary>
            "Fifteen"
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Navigation.Announcement.Num16">
            <summary>
            "Sixteen"
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Navigation.Announcement.Num17">
            <summary>
            "Seventeen"
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Navigation.Announcement.Num18">
            <summary>
            "Eighteen"
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Navigation.Announcement.Num19">
            <summary>
            "Nineteen"
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Navigation.Announcement.Num20">
            <summary>
            "Twenty"
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Navigation.Announcement.Num30">
            <summary>
            "Thirty"
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Navigation.Announcement.Num40">
            <summary>
            "Fourty"
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Navigation.Announcement.Num50">
            <summary>
            "Fifty"
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Navigation.Announcement.Num60">
            <summary>
            "Sixty"
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Navigation.Announcement.Num70">
            <summary>
            "Seventy"
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Navigation.Announcement.Num80">
            <summary>
            "Eighty"
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Navigation.Announcement.Num90">
            <summary>
            "Ninety"
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Navigation.Announcement.Num100">
            <summary>
            "One-hundred"
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Navigation.Announcement.Num200">
            <summary>
            "Two-hundred"
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Navigation.Announcement.Num300">
            <summary>
            "Three-hundred"
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Navigation.Announcement.Num400">
            <summary>
            "Four-hundred"
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Navigation.Announcement.Num500">
            <summary>
            "Five-hundred"
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Navigation.Announcement.Num600">
            <summary>
            "Six-hundred"
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Navigation.Announcement.Num700">
            <summary>
            "Seven-hundred"
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Navigation.Announcement.Num800">
            <summary>
            "Eight-hundred"
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Navigation.Announcement.Num900">
            <summary>
            "Nine-hundred"
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Navigation.Announcement.Num1000">
            <summary>
            "One-thousand"
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.Navigation.WaveAnnouncer">
            <summary>
            Announces <see cref="T:Telogis.GeoBase.Navigation.NavigationEvent"/>s using a set of
            customizable sound files.
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.Navigation.WaveAnnouncer.Finalize">
            <summary>
            Cancels all pending announcements.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Navigation.WaveAnnouncer.TimeLastSoundFinished">
            <summary>
            Records the time that the last announcement finished playing.
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.Navigation.WaveAnnouncer.AbortPlay">
            <summary>
            Allow the currently playing phrase to finish, then abort the announcement.
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.Navigation.WaveAnnouncer.#ctor(System.String,System.String,System.Boolean)">
            <summary>
            Create a WaveAnnouncer that will play .wav files in the supplied directory.
            </summary>
            <param name="path">Path to the directory containing the .wav files.</param>
            <param name="threadName">Name to use for the thread that will play the .wav
            files.</param>
            <param name="printFiles">Whether to print the names of files as they are played, useful
            for identifying missing sound files.</param>
        </member>
        <member name="M:Telogis.GeoBase.Navigation.WaveAnnouncer.Play(Telogis.GeoBase.Navigation.WaveAnnouncer.PlayItem)">
            <summary>
            Add a <see cref="T:Telogis.GeoBase.Navigation.WaveAnnouncer.PlayItem">PlayItem</see> to the play list.
            </summary>
            <param name="p"><see cref="T:Telogis.GeoBase.Navigation.WaveAnnouncer.PlayItem"/></param>
        </member>
        <member name="F:Telogis.GeoBase.Navigation.WaveAnnouncer.units">
            <summary>
            The unit system to use in announcing the directions.
            </summary>
            <remarks>Defaults to <see cref="F:Telogis.GeoBase.Navigation.UnitSystem.Metric"/>.</remarks>
        </member>
        <member name="M:Telogis.GeoBase.Navigation.WaveAnnouncer.IsItemScheduled">
            <summary>
            Is a <see cref="T:Telogis.GeoBase.Navigation.WaveAnnouncer.PlayItem"/> scheduled?
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.Navigation.WaveAnnouncer.SayMovement(Telogis.GeoBase.Navigation.NavigationEvent,Telogis.GeoBase.Navigation.NavigationEvent)">
            <summary>
            Announce the next (pending) navigation movement to the user.
            </summary>
            <remarks><para>If the pending movement is within 500 meters and the next movement is within 300m
            then both movements are announced, eg "Turn left at the traffic lights <i>then</i> turn
            sharp right at the end of the street" is played.</para>
            <para>If we are within 3 seconds or 30 meters of an event, or the movement has already been
            announced we play a bell.</para>
            </remarks>
            <param name="mvmt">The current (pending) <see cref="T:Telogis.GeoBase.Navigation.NavigationEvent">navigation event</see>.</param>
            <param name="mvmt2">The <see cref="T:Telogis.GeoBase.Navigation.NavigationEvent">navigation event</see> after the current event.</param>
        </member>
        <member name="M:Telogis.GeoBase.Navigation.WaveAnnouncer.SayMovement(Telogis.GeoBase.Navigation.NavigationEvent,Telogis.GeoBase.Navigation.NavigationEvent,System.Boolean)">
            <summary>
            Announce the next (pending) navigation movement to the user.
            </summary>
            <remarks><para>If the pending movement is within 500 meters and the next movement is within 300m
            then both movements are announced, eg "Turn left at the traffic lights <i>then</i> turn
            sharp right at the end of the street" is played.</para>
            <para>If we are within 3 seconds or 30 meters of an event, or the movement has already been
            announced we play a bell.</para>
            </remarks>
            <param name="mvmt">The current (pending) <see cref="T:Telogis.GeoBase.Navigation.NavigationEvent">navigation event</see>.</param>
            <param name="mvmt2">The <see cref="T:Telogis.GeoBase.Navigation.NavigationEvent">navigation event</see> after the current event.</param>
            <param name="force">Force the movement to be announced even if it was recently
            announced.</param>
        </member>
        <member name="F:Telogis.GeoBase.Navigation.WaveAnnouncer.MinTimeBetweenCloseDirections">
            <summary>
            The minimum time between which consecutive directions are played, if the directions are close (within 200 meters)
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Navigation.WaveAnnouncer.MinTimeBetweenDirections">
            <summary>
            The minimum time between which consecutive directions are played
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.Navigation.WaveAnnouncer.Bell">
            <summary>
            Play a 'bell' sound.
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.Navigation.WaveAnnouncer.Click">
            <summary>
            Play a 'click' sound
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.Navigation.WaveAnnouncer.Play(Telogis.GeoBase.Navigation.WaveAnnouncer.PlayItem,System.String)">
            <summary>
            Add a sound file to a PlayItem.
            </summary>
            <param name="playItem">The PlayItem.</param>
            <param name="fname">The name of the sound file to play, excluding .wav
            extension.</param>
        </member>
        <member name="M:Telogis.GeoBase.Navigation.WaveAnnouncer.PlayFiles(Telogis.GeoBase.Navigation.WaveAnnouncer.PlayItem,System.String)">
            <summary>
            Add a series of sound files to a PlayItem.
            </summary>
            <param name="play">The PlayItem.</param>
            <param name="files">String containing the names of the sound file to play, excluding
            .wav extensions and separated by spaces.</param>
        </member>
        <member name="M:Telogis.GeoBase.Navigation.WaveAnnouncer.SayMovement(Telogis.GeoBase.Navigation.WaveAnnouncer.PlayItem,Telogis.GeoBase.Navigation.NavigationEvent,System.Boolean)">
            <summary>
            Add an announcement for a navigation event to a PlayItem.
            </summary>
            <param name="play">The PlayItem.</param>
            <param name="mvmt">The <see cref="T:Telogis.GeoBase.Navigation.NavigationEvent">navigation event</see>.</param>
            <param name="playDist">Whether to announce the distance to the announcement.</param>
        </member>
        <member name="M:Telogis.GeoBase.Navigation.WaveAnnouncer.GetMovementString(Telogis.GeoBase.Navigation.NavigationEvent,System.Boolean)">
            <summary>
            Get the string of sound file names, excluding .wav extensions and separated by spaces,
            for a navigation event.
            </summary>
            <param name="mvmt">The <see cref="T:Telogis.GeoBase.Navigation.NavigationEvent">navigation event</see>.</param>
            <param name="playDist">Whether to announce the distance to the event.</param>
        </member>
        <member name="M:Telogis.GeoBase.Navigation.WaveAnnouncer.SayMovement(Telogis.GeoBase.Navigation.WaveAnnouncer.PlayItem,Telogis.GeoBase.Navigation.NavigationEvent,System.Boolean,Telogis.GeoBase.Navigation.NavigationEvent,System.Boolean)">
            <summary>
            Method that subclasses should override to add the strings for two navigation events to
            a PlayItem.
            </summary>
            <param name="play">The PlayItem.</param>
            <param name="mvmt">The first <see cref="T:Telogis.GeoBase.Navigation.NavigationEvent">navigation event</see>.</param>
            <param name="playDist">Whether to announce the distance to the first event.</param>
            <param name="mvmt2">The second <see cref="T:Telogis.GeoBase.Navigation.NavigationEvent">navigation event</see>.</param>
            <param name="playDist2">Whether to announce the distance to the second event.</param>
        </member>
        <member name="M:Telogis.GeoBase.Navigation.WaveAnnouncer.Dispose">
            <summary>
            Disposes of the announcement or sound.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Navigation.WaveAnnouncer.FilesPlayed">
            <summary>
            List of all the files played since the previous instruction.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Navigation.WaveAnnouncer.Volume">
            <summary>
            Gets or sets the volume at which announcements are played.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Navigation.WaveAnnouncer.LongWay">
            <summary>
            Gets or sets the maximum distance to announce the instruction for the next turn.
            If the distance to the next turn is greater than this distance, the driver will
            simply be told to 'continue'
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.Navigation.WaveAnnouncer.PlayItem">
            <summary>
            A complete phrase to be played (comprised of sound files)
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.Navigation.WaveAnnouncer.PlayItem.#ctor">
            <summary>
            An ordered list of component sound files of which this PlayItem is comprised
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Navigation.WaveAnnouncer.InstructionType.None">
            <summary>
            No instruction.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Navigation.WaveAnnouncer.InstructionType.ReachedDest">
            <summary>
            You have reached your destination.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Navigation.WaveAnnouncer.InstructionType.ContinueDist">
            <summary>
            Continue (dist)
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Navigation.WaveAnnouncer.InstructionType.DestInDist">
            <summary>
            Destination in (dist)
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Navigation.WaveAnnouncer.InstructionType.DestDirDist">
            <summary>
            Destination on the left/right (dist)
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Navigation.WaveAnnouncer.InstructionType.Turn">
            <summary>
            [In (dist) | At the end of the street | At the traffic lights | (nothing) ]
            turn left/right
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Navigation.WaveAnnouncer.InstructionType.KeepLane">
            <summary>
            [In (dist) | At the end of the street | At the traffic lights | (nothing) ]
            keep in the left/right lane
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Navigation.WaveAnnouncer.InstructionType.ContinueDir">
            <summary>
            Continue N/NE/E etc
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Navigation.WaveAnnouncer.InstructionType.RoundaboutNthExit">
            <summary>
            [In (dist) | (nothing) ] at the roundabout take the nth exit
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Navigation.WaveAnnouncer.InstructionType.TakeNthExit">
            <summary>
            [In (dist) | (nothing) ] take the nth exit
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Navigation.WaveAnnouncer.InstructionType.TakeExitN">
            <summary>
            [In (dist) | (nothing) ] take exit n [then turn left/right]
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Navigation.WaveAnnouncer.InstructionType.TakeTheFreeway">
            <summary>
            [In (dist) | (nothing) ] take the freeway
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Navigation.WaveAnnouncer.InstructionType.TakeTheExit">
            <summary>
            [In (dist) | (nothing) ] take the exit [then turn left/right]
            Parameters: Dist?, Exit?, TurnDirection?
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Navigation.WaveAnnouncer.InstructionType.TakeTheRamp">
            <summary>
            [In (dist) | (nothing) ] take the ramp
            Parameters: Dist?
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Navigation.WaveAnnouncer.InstructionType.UTurn">
            <summary>
            [In (dist) | (nothing) ] make a U-turn
            Parameters: Dist?
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Navigation.WaveAnnouncer.InstructionType.TakeTheFerry">
            <summary>
            [In (dist) | (nothing) ] take the ferry
            UNSUPPORTED
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Navigation.WaveAnnouncer.InstructionType.DisembarkTheFerry">
            <summary>
            [In (dist) | (nothing) ] disembark the ferry
            Parameters: Dist?
            UNSUPPORTED
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.Navigation.XmlWaveAnnouncer">
            <summary>
            Announces <see cref="T:Telogis.GeoBase.Navigation.NavigationEvent"/>s using a set of
            customizable sound files, supporting different cultures through configurable XML files.
            </summary>
            <remarks><para><b>Related articles</b>: <a href="7d529a6b-15f5-4cba-8dab-5f21cfbbdbd7.htm">Using an XmlWaveAnnouncer</a>, 
            <a href="b60eb5b5-243d-455a-b8ac-bd33b46e510e.htm">Using Languages and Cultures</a>.</para>
            </remarks>
        </member>
        <member name="F:Telogis.GeoBase.Navigation.XmlWaveAnnouncer.bundle">
            <summary>
            MessagesBundle used to generate strings containing the names of wav files to be played.
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.Navigation.XmlWaveAnnouncer.#ctor">
            <summary>
            Create an XmlWaveAnnouncer that uses a sounds directory set to the default "langs"
            directory in the GeoBase system's <see cref="M:Telogis.GeoBase.Settings.GeoBasePath(System.String)">data path</see> and
            a culture set to <see cref="P:System.Globalization.CultureInfo.CurrentCulture"/>.
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.Navigation.XmlWaveAnnouncer.#ctor(System.String)">
            <summary>
            Create an XmlWaveAnnouncer that uses the specified languages directory and a culture
            set to <see cref="P:System.Globalization.CultureInfo.CurrentCulture"/>.
            </summary>
            <param name="path">Path to languages directory.</param>
        </member>
        <member name="M:Telogis.GeoBase.Navigation.XmlWaveAnnouncer.#ctor(System.String,System.Globalization.CultureInfo)">
            <summary>
            Create an XmlWaveAnnouncer that uses the specified sounds directory and culture.
            </summary>
            <param name="path">Path to languages directory.</param>
            <param name="culture"><see cref="T:System.Globalization.CultureInfo"/></param>
        </member>
        <member name="M:Telogis.GeoBase.Navigation.XmlWaveAnnouncer.#ctor(System.String,System.String,System.Boolean)">
            <summary>
            Create an XmlWaveAnnouncer that uses the specified sounds directory and culture, with
            the option to turn debug mode on.  In debug mode,
            <see cref="T:Telogis.GeoBase.Exceptions.MessagesBundleException"/>s will be thrown when
            errors are encountered in the culture's configuration file.
            </summary>
            <param name="path">Path to languages directory.</param>
            <param name="cultureName">The name of the culture, eg en-US.</param>
            <param name="debugMode">Whether to use debug mode.</param>
        </member>
        <member name="M:Telogis.GeoBase.Navigation.XmlWaveAnnouncer.#ctor(System.String,System.Globalization.CultureInfo,System.Boolean)">
            <summary>
            Create an XmlWaveAnnouncer that uses the specified sounds directory and culture, with
            the option to turn debug mode on.  In debug mode,
            <see cref="T:Telogis.GeoBase.Exceptions.MessagesBundleException"/>s will be thrown when
            errors are encountered in the culture's configuration file.
            </summary>
            <param name="path">Path to languages directory.</param>
            <param name="culture"><see cref="T:System.Globalization.CultureInfo"/></param>
            <param name="debugMode">Whether to use debug mode.</param>
        </member>
        <member name="M:Telogis.GeoBase.Navigation.XmlWaveAnnouncer.GetAvailableCultures">
            <summary>
            Get a Dictionary containing details of the available cultures.  The keys in the
            Dictionary are the formal names of the cultures, for example "en-US".  The values in
            the dictionary are their descriptions, for example "US English".  The sounds directory
            used is the default "langs" directory in the GeoBase system's
            <see cref="M:Telogis.GeoBase.Settings.GeoBasePath(System.String)">data path</see>.
            </summary>
            <returns>Dictionary containing details of the available cultures.</returns>
        </member>
        <member name="M:Telogis.GeoBase.Navigation.XmlWaveAnnouncer.GetAvailableCultures(System.String)">
            <summary>
            Get a Dictionary containing details of the available cultures.  The keys in the
            Dictionary are the formal names of the cultures, for example "en-US".  The values in
            the dictionary are their descriptions, for example "US English".
            </summary>
            <param name="path">Path to the sounds directory.</param>
            <returns>Dictionary containing details of the available cultures.</returns>
        </member>
        <member name="M:Telogis.GeoBase.Navigation.XmlWaveAnnouncer.GetDefaultCulture">
            <summary>
            Get the full name of the default culture.  The sounds directory used is the default
            "langs" directory in the GeoBase system's
            <see cref="M:Telogis.GeoBase.Settings.GeoBasePath(System.String)">data path</see>.
            </summary>
            <returns>The full name of the default culture, for example "en-US".</returns>
        </member>
        <member name="M:Telogis.GeoBase.Navigation.XmlWaveAnnouncer.GetDefaultCulture(System.String)">
            <summary>
            Get the full name of the default culture.
            </summary>
            <param name="path">Path to the sounds directory.</param>
            <returns>The full name of the default culture, for example "en-US".</returns>
        </member>
        <member name="M:Telogis.GeoBase.Navigation.XmlWaveAnnouncer.SayMovement(Telogis.GeoBase.Navigation.WaveAnnouncer.PlayItem,Telogis.GeoBase.Navigation.NavigationEvent,System.Boolean,Telogis.GeoBase.Navigation.NavigationEvent,System.Boolean)">
            <summary>
            Say two separate movements.
            </summary>
            <param name="play">Play item to append to</param>
            <param name="mvmt">First movement</param>
            <param name="playDist">Say the distance to the first movement?</param>
            <param name="mvmt2">Second movement</param>
            <param name="playDist2">Say the distance to the second movement?</param>
        </member>
        <member name="M:Telogis.GeoBase.Navigation.XmlWaveAnnouncer.Bell">
            <summary>
            Play a 'bell' sound.
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.Navigation.XmlWaveAnnouncer.Click">
            <summary>
            Play a 'click' sound.
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.Navigation.XmlWaveAnnouncer.CreateInstruction">
            <summary>
            Create a subclass of the abstract Instruction class that is appropriate for this
            WaveAnnouncer.
            </summary>
            <returns>Subclass instance.</returns>
        </member>
        <member name="M:Telogis.GeoBase.Navigation.XmlWaveAnnouncer.GetAnnouncement(System.String,System.Object)">
            <summary>
            Get the string of WAV files for an announcement.
            </summary>
            <param name="phrase">The announcement's phrase name.</param>
            <param name="obj">Object supplying data for the announcement.</param>
            <returns>The string of WAV files for the announcement.</returns>
        </member>
        <member name="M:Telogis.GeoBase.Navigation.XmlWaveAnnouncer.ListAllFiles">
            <summary>
            List all Announcements files used by this XmlWaveAnnouncer.  Used to generate new
            language scripts.
            </summary>
            <returns>List of all the files used by this XmlWaveAnnouncer.</returns>
        </member>
        <member name="T:Telogis.GeoBase.Navigation.XmlWaveAnnouncer.XmlInstruction">
            <summary>
            Subclass of the abstract Instruction class that contains additional data for this
            XmlWaveAnnouncer.
            </summary>
            <returns>Subclass instance.</returns>
        </member>
        <member name="M:Telogis.GeoBase.Navigation.XmlWaveAnnouncer.XmlInstruction.#ctor(Telogis.GeoBase.Navigation.XmlWaveAnnouncer)">
            <summary>
            Construct a new XmlInstruction instance.
            </summary>
            <param name="xwa">Instance to clone</param>
        </member>
        <member name="M:Telogis.GeoBase.Navigation.XmlWaveAnnouncer.XmlInstruction.#ctor(Telogis.GeoBase.Navigation.XmlWaveAnnouncer.XmlInstruction)">
            <summary>
            Construct a new XmlInstruction instance that clones the supplied instance.
            </summary>
            <param name="clone">Instance to clone</param>
        </member>
        <member name="M:Telogis.GeoBase.Navigation.XmlWaveAnnouncer.XmlInstruction.Clone">
            <summary>
            Construct a new XmlInstruction instance that clones the current instance.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Navigation.XmlWaveAnnouncer.XmlInstruction.InstructionString">
            <summary>
            Generate a string for this Instruction that contains the names of the wav files
            that should be played.
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.Navigation.EnglishWaveAnnouncer">
            <summary>
            Announces <see cref="T:Telogis.GeoBase.Navigation.NavigationEvent"/>s in English using a set
            of customizable sound files.
            </summary>
            <remarks>
            The <see cref="T:Telogis.GeoBase.Navigation.EnglishWaveAnnouncer"/> class remains for
            back-compatibility with code written against GeoBase 3.0.5 or earlier.  Code written
            against GeoBase 3.0.7 or later should use the
            <see cref="T:Telogis.GeoBase.Navigation.XmlWaveAnnouncer"/> class instead.
            </remarks>
        </member>
        <member name="M:Telogis.GeoBase.Navigation.EnglishWaveAnnouncer.#ctor">
            <summary>
            Paramaterless constructor. Uses the default "voices" directory in the
            GeoBase system's <see cref="M:Telogis.GeoBase.Settings.GeoBasePath(System.String)">data path</see>.
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.Navigation.EnglishWaveAnnouncer.#ctor(System.String)">
            <summary>
            Used to specify a custom "voices" directory, specified as a path.
            </summary>
            <param name="path">The base path to the WAV files.</param>
        </member>
        <member name="M:Telogis.GeoBase.Navigation.EnglishWaveAnnouncer.Play(Telogis.GeoBase.Navigation.WaveAnnouncer.PlayItem,Telogis.GeoBase.Navigation.Announcement)">
            <summary>
            Add an Announcement to a PlayItem
            </summary>
            <param name="p"><see cref="T:Telogis.GeoBase.Navigation.WaveAnnouncer.PlayItem"/></param>
            <param name="file"><see cref="T:Telogis.GeoBase.Navigation.Announcement"/></param>
        </member>
        <member name="T:Xheo.Licensing.InstanceBroker">
            <summary>
            Implements a broker for tracking licenses applications on a single machine.
            <seealso cref="T:Xheo.Licensing.ApplicationLimit"/>
            </summary>
        </member>
        <member name="M:Xheo.Licensing.InstanceBroker.#ctor">
            <summary>
            Initializes a new instance of the InstanceBroker class.
            </summary>
        </member>
        <member name="M:Xheo.Licensing.InstanceBroker.GetCookie">
            <summary>
            Gets a new cookie for an application. The application must store this cookie
            for later use in registering and unregistering licenses.
            </summary>
            <returns>
            	Returns a new cookie for an application.
            </returns>
        </member>
        <member name="M:Xheo.Licensing.InstanceBroker.Register(System.String,System.String)">
            <summary>
            Registers an application's desire for a license on a given type.
            <seealso cref="M:Xheo.Licensing.InstanceBroker.GetCookie"/>
            </summary>
            <param name="cookie">
            	Unique cookie returned by the first call to <see cref="M:Xheo.Licensing.InstanceBroker.GetCookie"/>.
            </param>
            <param name="type">
            	The type of the object requesting a license.
            </param>
            <returns>
            	Returns true if the request was registered successfully, otherwise false.
            </returns>
        </member>
        <member name="M:Xheo.Licensing.InstanceBroker.Unregister(System.String)">
            <summary>
            Unregisters an application's interest in all types. Should only be called
            when the application is ending.
            </summary>
            <param name="cookie">
            	Unique cookie returned by the first call to <see cref="M:Xheo.Licensing.InstanceBroker.GetCookie"/>.
            </param>
        </member>
        <member name="M:Xheo.Licensing.InstanceBroker.GetCountRegistered(System.String)">
            <summary>
            Returns the number of applications registered for the given type.
            </summary>
            <param name="type">
            	The type of object being licensed.
            </param>
            <returns>
            	Returns the total count of applications registered for the given type.
            </returns>
        </member>
        <member name="M:Xheo.Licensing.InstanceBroker.Ping">
            <summary>
            Ensures that the server is alive.
            </summary>
        </member>
        <member name="M:Xheo.Licensing.InstanceBroker.InitializeLifetimeService">
            <summary>
            Summary of InitializeLifetimeService.
            </summary>
            <returns></returns>	
        </member>
        <member name="M:Xheo.Licensing.InstanceBroker.GetBroker(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Gets the InstanceBroker for the current AppDomain.
            </summary>
            <param name="allowedInstances">
            	If a new broker is created, the number of application instances 
            	it should allow.
            </param>
            <param name="port">
            	The port to look for the server on.
            </param>
            <param name="create">
            	Indicates if a broker should be created if it doesn't already exist.
            </param>
            <returns>
            	Returns the broker for the given AppDomain. If not found an
            	exception is thrown.
            </returns>
            <remarks>
            	If no broker exists on the machine, a new broker is created and
            	registered for other clients.
            </remarks>
        </member>
        <member name="M:Xheo.Licensing.InstanceBroker.GetBroker(System.Int32,System.Int32)">
            <summary>
            Gets the InstanceBroker for the current machine. If the broker doesn't
            exist a new one is created.
            </summary>
            <param name="allowedInstances">
            	If a new broker is created, the number of application instances 
            	it should allow.
            </param>
            <param name="port">
            	The port to look for the server on.
            </param>
            <returns>
            	Returns the broker for the given AppDomain. If not found an
            	exception is thrown.
            </returns>
            <remarks>
            	If no broker exists on the machine, a new broker is created and
            	registered for other clients.
            </remarks>
        </member>
        <member name="P:Xheo.Licensing.InstanceBroker.AllowedInstances">
            <summary>
            Gets or sets the number of allowed applications per type.
            </summary>
        </member>
        <member name="T:Xheo.Licensing.BrandedLimit">
            <summary>
            Introduces branded HTML into the output stream. The component being licensed
            must derive from System.Web.UI.Control so that the limit can gain access
            to the page hierarchy.
            </summary>
        </member>
        <member name="M:Xheo.Licensing.BrandedLimit.#ctor">
            <summary>
            Initializes a new instance of the BrandedLimit class.
            </summary>
        </member>
        <member name="M:Xheo.Licensing.BrandedLimit.#ctor(System.String)">
            <summary>
            Initializes a new instance of the BrandedLimit class.
            </summary>
            <param name="html">
            	The HTML to include in the output stream.
            </param>
        </member>
        <member name="M:Xheo.Licensing.BrandedLimit.Validate(System.ComponentModel.LicenseContext,System.Type,System.Object)">
            <summary>
            Validates that the license being granted is within the limits enforced by
            this object.
            </summary>
            <param name="context">
            	The LicenseContext passed to <see cref="M:System.ComponentModel.LicenseProvider.GetLicense(System.ComponentModel.LicenseContext,System.Type,System.Object,System.Boolean)"/>.
            </param>
            <param name="type">
            	The Type of the object being licensed.
            </param>
            <param name="instance">
            	The instance of the object being licensed.
            </param>
            <returns>
            	Returns true if the limits are valid, otherwise false.
            </returns>
        </member>
        <member name="M:Xheo.Licensing.BrandedLimit.InsertHtml(System.Object,System.EventArgs)">
            <summary>
            Inserts the HTML into the page.
            </summary>
        </member>
        <member name="M:Xheo.Licensing.BrandedLimit.Granted(System.ComponentModel.LicenseContext,System.Type,System.Object)">
            <summary>
            Summary of Granted.
            </summary>
            <param name="context"></param>
            <param name="type"></param>
            <param name="instance"></param>
        </member>
        <member name="M:Xheo.Licensing.BrandedLimit.LoadFromXml(System.Xml.XmlNode)">
            <summary>
            Loads the contents of a Limit from an XML string.
            </summary>
            <param name="node">
            	The XML string to load from.
            </param>
            <returns>
            	Returns true if the load was successful, otherwise false.
            </returns>
        </member>
        <member name="M:Xheo.Licensing.BrandedLimit.SaveToXml(System.Xml.XmlNode)">
            <summary>
            Saves the contents of the Limit as an XML string.
            </summary>
            <returns>
            	Returns the saved XML.
            </returns>
        </member>
        <member name="M:Xheo.Licensing.BrandedLimit.GetDetailsDescription">
            <summary>
            Overrides <see cref="M:Xheo.Licensing.Limit.GetDetailsDescription"/>.
            </summary>
        </member>
        <member name="P:Xheo.Licensing.BrandedLimit.Html">
            <summary>
            Gets or sets the HTML to include in the output stream.
            </summary>
        </member>
        <member name="P:Xheo.Licensing.BrandedLimit.Description">
            <summary>
            Gets the description of the limit.
            </summary>
        </member>
        <member name="P:Xheo.Licensing.BrandedLimit.Name">
            <summary>
            Gets the display name of the limit.
            </summary>
        </member>
        <member name="P:Xheo.Licensing.BrandedLimit.IsGui">
            <summary>
            Gets a value that indicates if the limit uses a GUI to enforce the limit
            or communicate with the user.
            </summary>
        </member>
        <member name="T:Xheo.Licensing.AndLimit">
            <summary>
            Allows a group of limits to be declared using branch logic when used in 
            combination with the <see cref="T:Xheo.Licensing.AndLimit"/>.
            </summary>
        </member>
        <member name="M:Xheo.Licensing.AndLimit.#ctor">
            <summary>
            Initializes a new instance of the AndLimit class.
            </summary>
        </member>
        <member name="M:Xheo.Licensing.AndLimit.Granted(System.ComponentModel.LicenseContext,System.Type,System.Object)">
            <summary>
            Summary of Granted.
            </summary>
            <param name="context"></param>
            <param name="type"></param>
            <param name="instance"></param>
        </member>
        <member name="M:Xheo.Licensing.AndLimit.Validate(System.ComponentModel.LicenseContext,System.Type,System.Object)">
            <summary>
            Validates that the license being granted is within the limits enforced by
            this object.
            </summary>
            <param name="context">
            	The LicenseContext passed to <see cref="M:System.ComponentModel.LicenseProvider.GetLicense(System.ComponentModel.LicenseContext,System.Type,System.Object,System.Boolean)"/>.
            </param>
            <param name="type">
            	The Type of the object being licensed.
            </param>
            <param name="instance">
            	The instance of the object being licensed.
            </param>
            <returns>
            	Returns true if the limits are valid, otherwise false.
            </returns>
        </member>
        <member name="M:Xheo.Licensing.AndLimit.GetDetailsDescription">
            <summary>
            Overrides <see cref="M:Xheo.Licensing.Limit.GetDetailsDescription"/>.
            </summary>
        </member>
        <member name="P:Xheo.Licensing.AndLimit.Description">
            <summary>
            Gets the description of the limit.
            </summary>
        </member>
        <member name="P:Xheo.Licensing.AndLimit.Name">
            <summary>
            Gets the display name of the limit.
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.Transactional.DataType">
            <summary>
            Describes the type of data stored in a column.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Transactional.DataType.Unknown">
            <summary>
            Unknown
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Transactional.DataType.String">
            <summary>
            String value
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Transactional.DataType.Time">
            <summary>
            Time
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Transactional.DataType.Integer">
            <summary>
            Integer value
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Transactional.DataType.Polygon">
            <summary>
            Polygon
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Transactional.DataType.LatLon">
            <summary>
            Latitude/Longitude coordinates
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.Repositories.MultiRepository">
            <summary>
            A <see cref="T:Telogis.GeoBase.Repositories.MultiRepository">MultiRepository</see> supports local GeoBase services by pulling data either from one or more
            <see cref="T:Telogis.GeoBase.Repositories.LocalRepository"/> objects, or by loading all GBFS files in a specified directory.
            LocalRepository objects used by this MultiRepository may be added or removed on-the-fly.
            </summary>
            <remarks><para><b>Related articles</b>: <a href="5a8e7c38-67e2-47fe-8bb0-2cd0b1a6547a.htm">Using Repositories to manage data</a>.</para></remarks>
        </member>
        <member name="M:Telogis.GeoBase.Repositories.MultiRepository.ToString">
            <summary>
            Returns a string representation of this repository.
            </summary>
            <returns>A comma-delimited list of sub-repository names.</returns>
        </member>
        <member name="M:Telogis.GeoBase.Repositories.MultiRepository.GetEnumerator">
            <summary>
            Returns an IEnumerator for accessing the sub-repositories of this MultiRepository.
            </summary>
            <returns>An IEnumerator interface for accessing sub-repositories.</returns>
        </member>
        <member name="M:Telogis.GeoBase.Repositories.MultiRepository.GetRepositoriesForCountry(Telogis.GeoBase.Country)">
            <summary>
            Returns a list of sub-repositories that contain data for the specified country.
            </summary>
            <param name="Country">The country for which sub-repositories are desired.</param>
            <returns>A list of simple repositories that contain data about the specified country.</returns>
        </member>
        <member name="M:Telogis.GeoBase.Repositories.MultiRepository.#ctor(Telogis.GeoBase.Repositories.LocalRepository[])">
            <summary>
            Creates a new MultiRepository from an array of
            <see cref="T:Telogis.GeoBase.Repositories.LocalRepository">LocalRepository</see>s.
            </summary>
            <param name="repository">An array of <see cref="T:Telogis.GeoBase.Repositories.LocalRepository"/>s.</param>
        </member>
        <member name="M:Telogis.GeoBase.Repositories.MultiRepository.#ctor">
            <summary>
            Creates a new empty MultiRepository.
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.Repositories.MultiRepository.AddRepository(Telogis.GeoBase.Repositories.LocalRepository)">
            <summary>
            Add a given <see cref="T:Telogis.GeoBase.Repositories.LocalRepository"/> to this MultiRepository. Once a LocalRepository
            is added to this MultiRepository, the data available in any of the LocalRepository's
            SimpleRepository or MultiRepository objects become available for use by this MultiRepository.
            </summary>
            <param name="repos">The <see cref="T:Telogis.GeoBase.Repositories.LocalRepository"/> to add.</param>
        </member>
        <member name="M:Telogis.GeoBase.Repositories.MultiRepository.CheckRegions(Telogis.GeoBase.Repositories.LocalRepository)">
            <summary>
             Throws an exception if two GBFS files in the given <see cref="T:Telogis.GeoBase.Repositories.LocalRepository"/>
             cover the same geographical region.
            </summary>
            <remarks>
            This method is designed for use with <see cref="T:Telogis.GeoBase.Repositories.MultiRepository"/> objects, which may
            contain references to multiple GBFS files or other <see cref="T:Telogis.GeoBase.Repositories.LocalRepository"/> objects.</remarks>
            <param name="repos">LocalRepository</param>
        </member>
        <member name="M:Telogis.GeoBase.Repositories.MultiRepository.RemoveRepository(Telogis.GeoBase.Repositories.LocalRepository)">
            <summary>
            Remove a <see cref="T:Telogis.GeoBase.Repositories.LocalRepository"/> from this MultiRepository. Once a LocalRepository is
            removed, any of the LocalRepository's SimpleRepository or MultiRepository objects may no longer
            be used by this MultiRepository to obtain data.
            </summary>
            <param name="repos">The <see cref="T:Telogis.GeoBase.Repositories.LocalRepository"/> to remove.</param>
        </member>
        <member name="M:Telogis.GeoBase.Repositories.MultiRepository.#ctor(System.String)">
            <summary>
            Creates a new MultiRepository from a number of GBFS files. This is done by loading
            all GBFS files from the specified directory. The MultiRepository will not recurse
            down the directory structure.
            </summary>
            <param name="path">The path to the directory containing GBFS files</param>
        </member>
        <member name="P:Telogis.GeoBase.Repositories.MultiRepository.Count">
            <summary>
            Gets the number of Repository objects encapsulated within this MultiRepository
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Repositories.MultiRepository.Item(System.Int32)">
            <summary>
            Returns the sub-repository at the indexed location in the list of sub-repositories. 
            </summary>
            <param name="index">A zero-offset index into the list of sub-repositories.</param>
            <returns>The specified repository.</returns>
        </member>
        <member name="P:Telogis.GeoBase.Repositories.MultiRepository.HasGlobalData">
            <summary>
            Indicates whether this MultiRepository contains global data.
            </summary>
            <returns>
            <b>true</b> if global data is available in this MultiRepository.
            Otherwise <b>false</b>.
            </returns>
        </member>
        <member name="P:Telogis.GeoBase.Repositories.MultiRepository.CopyrightString">
            <summary>
            Gets a string representing copyright information for the data contained in this MultiRepository.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Repositories.MultiRepository.Countries">
            <summary>
            Gets an array of <see cref="T:Telogis.GeoBase.Country"/>s for which data in this MultiRepository is available.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Repositories.MultiRepository.Regions">
            <summary>
            Gets an array of Regions for which data in this MultiRepository is available
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.GeoStream.SuperTileParams">
            <summary>
            Very similar to the TileParams class, SuperX and SuperY are in the supertile coordinate
            space.
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.GeoStream.SuperTile">
            <summary>
            Represents a supertile - a bitmap rendering of a section of map, which can be divided up
            into a number of tiles.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.GeoStream.SuperTile.ErrorMessage">
            <summary>
            An error message to display when an exception occurs.
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.GeoStream.SuperTile.#ctor(Telogis.GeoBase.GeoStream.SuperTileParams,Telogis.GeoBase.GeoStream.MapType,Telogis.GeoBase.IMapRenderer)">
            <summary>
            Creates and renders a new supertile.
            </summary>
            <param name="superParams">The tile request parameters, transformed into supertile space.</param>
            <param name="mapType">If set to LocalMap, draws the map. If false, just draws the renderer(s)</param>
            <param name="renderer">The renderer to draw on the map</param>
        </member>
        <member name="M:Telogis.GeoBase.GeoStream.SuperTile.Render(Telogis.GeoBase.MapStyle)">
            <summary>
            Render the supertile using the supplied map style.
            </summary>
            <param name="Style">The map style to use when rendering the supertile.</param>
        </member>
        <member name="F:Telogis.GeoBase.GeoStream.SuperTile.Map">
            <summary>
            The map that is the source of the supertile.
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.GeoStream.SuperTile.#ctor(Telogis.GeoBase.GeoStream.SuperTileParams)">
            <summary>
            Creates a new supertile, drawing it without a renderer.
            </summary>
            <param name="superParams"></param>
        </member>
        <member name="M:Telogis.GeoBase.GeoStream.SuperTile.GetTile(System.Int32,System.Int32)">
            <summary>
            Fetches a tile from the supertile.
            </summary>
            <param name="tilex">The x coordinate of this tile in the supertile</param>
            <param name="tiley">The y coordinate of this tile in the supertile</param>
        </member>
        <member name="M:Telogis.GeoBase.GeoStream.SuperTile.GetTile(System.Int32,System.Int32,System.Int32)">
            <summary>
            Fetches a tile from the supertile for either the base layer or an auxiliary layer.
            </summary>
            <param name="tilex">The x coordinate of this tile in the supertile</param>
            <param name="tiley">The y coordinate of this tile in the supertile</param>
            <param name="auxiliaryLayer">Index of the auxiliary layer.  0 means the base layer, 1
            and above means the appropriate auxiliary layer.</param>
        </member>
        <member name="M:Telogis.GeoBase.GeoStream.SuperTile.GetCountries">
            <summary>
            Finds all <see cref="T:Telogis.GeoBase.Country">countries</see> represented on this SuperTile.
            </summary>
            <returns>An array of <see cref="T:Telogis.GeoBase.Country">countries</see>.</returns>
        </member>
        <member name="F:Telogis.GeoBase.GeoStream.SuperTile.bDisposed">
            <summary>
            If <b>true</b> then this SuperTile has been disposed of. Otherwise <b>false</b>.
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.GeoStream.SuperTile.Dispose">
            <summary>
            Disposes of the SuperTile.
            </summary>
            <remarks>Releases all resources used by this SuperTile.</remarks>
        </member>
        <member name="P:Telogis.GeoBase.GeoStream.SuperTile.Rendered">
            <summary>
            Indicates whether the supertile has been rendered.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.GeoStream.SuperTile.RequiredRendermodes">
            <summary>
            Gets the <see cref="T:Telogis.GeoBase.RenderMode">RenderMode</see> required by this <b>SuperTile</b>
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.GeoStream.LocalMapSuperTile.Render(Telogis.GeoBase.MapStyle)">
            <summary>
            Renders the SuperTile. Must be called before GetTile() or GetTileCountries().
            </summary>
            <param name="style">The map style to use when rendering.</param>
        </member>
        <member name="T:Telogis.GeoBase.GeoStream.Server.IWorkerPoolRequest">
            <summary>
            A request that can be inserted into a worker pool
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.GeoStream.Server.IFailable">
            <summary>
            Provide a common interface for handling failure
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.GeoStream.Server.IWorkerPoolRequest.DoJob">
            <summary>
            The work to be done to service the request
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.GeoStream.Server.IWorkerPoolRequest.LastUpdate">
            <summary>
            The last time the request has been updated and gotten closer to being
            responded to
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.GeoStream.Server.IWorkerPoolRequest.RequestKey">
            <summary>
            An unique identifier for the request.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.GeoStream.Server.IWorkerPoolRequest.Status">
            <summary>
            The status of the request (set by the worker pool)
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.GeoStream.Server.IWorkerPoolRequest.Logger">
            <summary>
            The logger associated with this request.
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.GeoStream.ImageCache.insertImage(System.String,System.Drawing.Image)">
            <summary>
            Inserts an image into the cache with the specified string identifier
            </summary>
            <param name="id">The unique identifier for this image</param>
            <param name="i">The image to store in the cache</param>
        </member>
        <member name="M:Telogis.GeoBase.GeoStream.ImageCache.insertImage(System.String,System.Drawing.Image,System.Int32,System.TimeSpan)">
            <summary>
            Inserts an image into the cache with the specified string identifier
            </summary>
            <param name="id">The unique identifier for this image</param>
            <param name="i">The image to store in the cache</param>
            <param name="deep">How many layers of backing cache to insert into</param>
            <param name="expiry">The TTL (time to live) for the image in the cache</param>
        </member>
        <member name="M:Telogis.GeoBase.GeoStream.ImageCache.fetchImage(System.String)">
            <summary>
            Fetches the image with the specified identifier from the cache.
            If an image with that id does not exist in the cache, returns null.
            </summary>
            <param name="id">The unique identifier for the image to fetch</param>
            <returns></returns>
        </member>
        <member name="M:Telogis.GeoBase.GeoStream.ImageCache.Clear">
            <summary>
            Clears all items from the cache.
            
            Does not clear the backing cache, if any.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.GeoStream.ImageCache.backingCache">
            <summary>
            Specifies another 'backing' ImageCache. All inserts to this cache
            result in inserts to the backing cache, and any time this cache
            does not have an image it is asked for, it first checks the
            backing cache for it.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.GeoStream.CompressedMemoryImageCache.maxImages">
            <summary>
            The maximum number of images to store in the cache before we start
            throwing images out.
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.GeoStream.Authentication.LoginRequest">
            <summary>
            This is held on the serverside between steps one and two of the 
            login handshake in order to remember what was learnt in the
            first stage.
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.Geometry.Polygon">
             <summary>
             Represents a closed polygonal area such as a lake or national park.
             </summary>
             <remarks>
             <para>A polygon feature is made up of a number of <see cref="T:Telogis.GeoBase.Geometry.Polygon.Ring"/>s.
             The OuterRing property forms the external boundary of the polygon.
             One or more InnerRings may be specified to add holes or islands within the polygon.</para>
             
             <para>A ring must contain at least 4 points. The first and last points must be equal.</para>
             
             <para>A simple polygon like a lake might only have an OuterRing, which describes the outline
             of the lake. A lake with an island in the middle of it is represented by
             a polygon with an OuterRing and an a single InnerRing for the island.
             Furthermore, A lake with an island with a lake would be represented by a polygon with
             an OuterRing and two InnerRings.</para>
             
             <para>The winding of polygons is irrelevant, however by convention filled areas are oriented
             clockwise while holes are oriented counter-clockwise.</para>
            
             <para>Intersecting InnerRings must be merged into a single Ring.</para>
             <para>Related articles: <a href="154a60d1-c146-49bc-a913-3e4c067ae8c6.htm">Data Query Concept</a>.</para>
             </remarks>
        </member>
        <member name="T:Telogis.GeoBase.Geometry.Geometry">
            <summary>
            An abstract base class from which geometries are derived.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Geometry.Geometry.WKT">
            <summary>
            Implemented by derived classes to convert a given geometry to well-known text (WKT) format
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Geometry.Geometry.BoundingBox">
            <summary>
            Implemented by derived classes to return a minimum-sized <see cref="T:Telogis.GeoBase.BoundingBox"/>
            that encapsulates the entire geometric feature.
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.Geometry.Polygon.#ctor(System.String)">
            <summary>
            Construct a Polygon from WKT.
            </summary>
            <param name="wkt">Well-known text (WKT) containing polygon geometry.</param>
        </member>
        <member name="M:Telogis.GeoBase.Geometry.Polygon.#ctor">
            <summary>
            Construct a Polygon. Used for Serialization.
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.Geometry.Polygon.#ctor(Telogis.GeoBase.Geometry.LineString[])">
            <summary>
            Construct a polygon from one or more LineStrings.
            </summary>
            <param name="rings">
            The Rings the polygon is composed of. The first LineString is the OuterRing, all others
            are InnerRings. See <see cref="T:Telogis.GeoBase.Geometry.Polygon"/> for more information on how to represent
            various polygon types.
            </param>
        </member>
        <member name="M:Telogis.GeoBase.Geometry.Polygon.Intersects(Telogis.GeoBase.BoundingBox)">
            <summary>
            Determines whether the Polygon intersects, contains, or touches a BoundingBox.
            </summary>
            <param name="bbox">The BoundingBox to test against.</param>
            <returns>True if the Polygon intersects, contains, or touches the given BoundingBox.</returns>
        </member>
        <member name="M:Telogis.GeoBase.Geometry.Polygon.Intersects(Telogis.GeoBase.LatLon[])">
            <summary>
            Determines whether the Polygon intersects, contains, or touches a line.
            </summary>
            <param name="line">The line to test against.</param>
            <returns>True if the Polygon intersects, contains, or touches the given line.</returns>
        </member>
        <member name="M:Telogis.GeoBase.Geometry.Polygon.Contains(Telogis.GeoBase.LatLon)">
            <summary>
            Determines whether the Polygon contains or touches a point.
            </summary>
            <param name="point">The point to test against.</param>
            <returns>True if the Polygon contains or touches the given point.</returns>
        </member>
        <member name="M:Telogis.GeoBase.Geometry.Polygon.PythagoreanDistanceTo(Telogis.GeoBase.LatLon,Telogis.GeoBase.DistanceUnit)">
            <summary>
            Returns the Pythagorean distance from the given location to the edge of this Polygon,
            in the specified units. If the given location is inside this Polygon, the distance 
            returned will be zero. See remarks for comments on the accuracy of this method.
            </summary>
            <remarks>The Pythagorean distance assumes that the world is flat between the edge 
            of this Polygon and the given location. This assumption is safe when the Polygon 
            and location are near each other. If the Polygon and location are a significant 
            distance apart the straight line between the Polygon and the point will pass
            through the interior of the world. To calculate the true shortest distance consider 
            using the DistanceTo method. The DistanceTo method calculates the distance using a 
            great circle which traces an arc over the surface of the earth.
            </remarks>
            <param name="loc">The location whose distance from the polygon you want to know.</param>
            <param name="units">The result will be measured in these units</param>
            <returns>Shortest distance from <i>loc</i> to the edge of this Polygon in <i>units</i> units,
            or zero if <i>loc</i> is inside the Polygon.</returns>
        </member>
        <member name="M:Telogis.GeoBase.Geometry.Polygon.DistanceTo(Telogis.GeoBase.LatLon,Telogis.GeoBase.DistanceUnit)">
            <summary>
            Returns the shortest distance from the given location to the edge of this Polygon,
            in the specified units. If the given location is inside this Polygon, the distance 
            returned will be zero. This is calculated using the 
            <see cref="M:Telogis.GeoBase.MathUtil.GreatCircle(System.Double,System.Double,System.Double,System.Double)">great circle</see> distance.
            </summary>
            <param name="loc">The location whose distance from the polygon you want to know.</param>
            <param name="units">The result will be measured in these units</param>
            <returns>Shortest distance from <i>loc</i> to the edge of this Polygon in <i>units</i> units,
            or zero if <i>loc</i> is inside the Polygon.</returns>
        </member>
        <member name="M:Telogis.GeoBase.Geometry.Polygon.GetPythagoreanArea">
            <summary>
            Calculates a pythagorean approximation of the area.
            </summary>
            <returns>Area in Degrees^2</returns>
        </member>
        <member name="P:Telogis.GeoBase.Geometry.Polygon.OuterRing">
            <summary>
            The shell of the polygon. Must be clockwise.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Geometry.Polygon.InnerRings">
            <summary>
            The holes and islands of a polygon.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Geometry.Polygon.WKT">
            <summary>
            The WKT representation of the polygon.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Geometry.Polygon.BoundingBox">
            <summary>
            Calculates the bounding-box of the polygon.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Geometry.Polygon.AllRings">
            <summary>
            Get all rings which form this Polygon.
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.Geometry.Polygon.Ring">
            <summary>
            Represents a closed curve that forms part of a polygon. This may be the outer perimeter or a ring around a "gap" such as an island in a lake. 
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.Geometry.Polygon.Ring.#ctor">
            <summary>
            Constructs a ring. Used for serialization.
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.Geometry.Polygon.Ring.#ctor(Telogis.GeoBase.Geometry.LineString)">
            <summary>
             Constructs a ring from a LineString.
            </summary>
            <param name="points">The points that form the ring.
            The first and last points should be equal.</param>
        </member>
        <member name="M:Telogis.GeoBase.Geometry.Polygon.Ring.#ctor(Telogis.GeoBase.LatLon[])">
            <summary>
             Constructs a ring from an array of points.
            </summary>
            <param name="points">The points that form the ring.
            The first and last points should be equal.</param>
        </member>
        <member name="M:Telogis.GeoBase.Geometry.Polygon.Ring.Contains(Telogis.GeoBase.LatLon)">
            <summary>
            Determines whether the Ring contains a given point.
            </summary>
            <param name="point">The point to be tested for inclusion.</param>
            <returns>True if the Polygon contains the given point.</returns>
        </member>
        <member name="M:Telogis.GeoBase.Geometry.Polygon.Ring.BoundaryIntersects(Telogis.GeoBase.BoundingBox)">
            <summary>
            Determines whether the Ring boundary touches or intersects with the specified
            BoundingBox.
            </summary>
            <param name="bbox">The BoundingBox to test against.</param>
            <returns>True if the Polygon and BoundingBox share touching lines.</returns>
        </member>
        <member name="M:Telogis.GeoBase.Geometry.Polygon.Ring.BoundaryIntersects(Telogis.GeoBase.LatLon[])">
            <summary>
            Determines whether the Ring boundary touches or intersects with the specified
            line.
            </summary>
            <param name="line">The line to test against.</param>
            <returns></returns>
        </member>
        <member name="M:Telogis.GeoBase.Geometry.Polygon.Ring.Area">
            <summary>
            Calculates a pythagorean approximation the area of the given ring.
            Holes will have a negative area.
            </summary>
            <returns>Area in Degrees^2</returns>
        </member>
        <member name="M:Telogis.GeoBase.Geometry.Polygon.Ring.PythagoreanDistanceTo(Telogis.GeoBase.LatLon,Telogis.GeoBase.DistanceUnit)">
            <summary>
            Gets the shortest distance from the given location to the edge of this Ring. If
            the given location is inside this Ring, the distance returned will be zero.
            </summary>
            <param name="loc">Location</param>
            <param name="units">Units to return the distance in</param>
            <returns>Shortest distance from <i>loc</i> to the edge of this Ring measured 
            in <i>units</i>, or zero if <i>loc</i> is inside this Ring.</returns>
        </member>
        <member name="M:Telogis.GeoBase.Geometry.Polygon.Ring.DistanceTo(Telogis.GeoBase.LatLon,Telogis.GeoBase.DistanceUnit)">
            <summary>
            Gets the shortest distance from the given location to the edge of this Ring. If
            the given location is inside this Ring, the distance returned will be zero.
            </summary>
            <param name="loc">Location</param>
            <param name="units">Units to return the distance in</param>
            <returns>Shortest distance from <i>loc</i> to the edge of this Ring measured 
            in <i>units</i>, or zero if <i>loc</i> is inside this Ring.</returns>
        </member>
        <member name="P:Telogis.GeoBase.Geometry.Polygon.Ring.Points">
            <summary>
            Gets the points as a <see cref="T:Telogis.GeoBase.Geometry.LineString"/>
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Geometry.Polygon.Ring.BoundingBox">
            <summary>
            Calculates the BoundingBox of the Ring.
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.DrillDownGeocoderSchema">
            <summary>
            This class implements all the database queries for the DrillDownGeocoder.
            The revision string is automagically changed every time an SVN change/commit is
            performed on this file, so deal with it carefully.
            </summary>
            
        </member>
        <member name="T:Telogis.GeoBase.ImageUtils.PngCache">
            <summary>
            A cache of PNG images.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.ImageUtils.PngCache.s_requiredThreadId">
            <summary>
            The managed thread ID of the thread that created the first CachedPngImage and therefore
            the thread that must perform all operations on CachedPngImages.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.ImageUtils.PngCache.s_requiredThreadLock">
            <summary>
            Padlock for s_requiredThreadId.
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.ImageUtils.PngCache.Load(System.String)">
            <summary>
            Loads a PNG into memory so that it can be decoded into a BMP later.  The PNG is loaded
            into a page (on mobile devices all GeoBase pages come from high memory).
            </summary>
            <param name="filename">The filename of the PNG.</param>
        </member>
        <member name="M:Telogis.GeoBase.ImageUtils.PngCache.CreateBitmap(System.String)">
            <summary>
            Decodes a PNG into a Bitmap.  The pixel data is owned by the PngCache to minimize
            memory usage, and will be overwritten on the next PngCache operation.
            </summary>
            <param name="filename"></param>
            <returns>A bitmap that corresponds to the PNG image.</returns>
        </member>
        <member name="M:Telogis.GeoBase.ImageUtils.PngCache.ToSystemImage(System.String)">
            <summary>
            Decodes a PNG into an Image.  The pixel data is owned by the Image, and will not be
            overwritten on the next PngCache operation.
            </summary>
            <param name="filename"></param>
            <returns></returns>
        </member>
        <member name="T:Telogis.GeoBase.Traffic.LinkIdToTMC">
            <summary>
            This class is used to retrieve TMC codes specific to a given link ID
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.Traffic.LinkIdToTMC.#ctor">
            <summary>
            Construct a new <b>LinkIdToTMC</b>.
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.Traffic.LinkIdToTMC.GetTMC(System.UInt64)">
            <summary>
            Gets all TMC codes for a given link.
            </summary>
            <param name="link_id">The link ID</param>
            <returns>An array of strings, each string representing a TMC code for the given link</returns>
        </member>
        <member name="M:Telogis.GeoBase.Traffic.LinkIdToTMC.GetTMCForLink(System.UInt64)">
            <summary>
            Gets all TMC codes for a given link.
            </summary>
            <param name="link_id">The link ID</param>
            <returns>An array of strings, each string representing a TMC code for the given link</returns>
        </member>
        <member name="M:Telogis.GeoBase.Traffic.LinkIdToTMC.ReverseTMCCode(System.UInt32)">
            <summary>
            Reverses the to/from reference on the tmc code.
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.Traffic.InrixRealTimeTrafficSource">
            <summary>
            This class supports INRIX V1 real-time traffic data. 
            </summary>
            <remarks>
            <para><b>Related articles</b>: <a href="html/ecb16ee8-6223-40bc-a4bb-a3c03c73c13a.htm">Configuring the server</a>.</para>
            </remarks>
        </member>
        <member name="T:Telogis.GeoBase.Traffic.TMCTrafficBase">
            <summary>
            Implemented by derived classes to support INRIX traffic data and prediction.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Traffic.TMCTrafficBase.m_CreatedTime">
            <summary>
            The time that the data feed was created
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.Traffic.TMCTrafficBase.GetTrafficInfo(System.String,System.DateTime)">
            <summary>
            Get <see cref="T:Telogis.GeoBase.Traffic.TrafficInfo">TrafficInfo</see> for the specified TMC code and time.
            </summary>
            <param name="tmc">the TMC code to resolve</param>
            <param name="date">the <see cref="T:System.DateTime">DateTime</see> to get the <see cref="T:Telogis.GeoBase.Traffic.TrafficInfo"/> for. This will be UTC</param>
            <returns>The <see cref="T:Telogis.GeoBase.Traffic.TrafficInfo">TrafficInfo</see> for the given TMC code at the specified DateTime</returns>
        </member>
        <member name="M:Telogis.GeoBase.Traffic.TMCTrafficBase.GetTrafficInfo(System.String,System.DateTime,Telogis.GeoBase.TimeZone)">
            <summary>
            Get <see cref="T:Telogis.GeoBase.Traffic.TrafficInfo">TrafficInfo</see> for the specified TMC code and time.
            </summary>
            <param name="tmc">the TMC code to resolve</param>
            <param name="date">the <see cref="T:System.DateTime">DateTime</see> to get the <see cref="T:Telogis.GeoBase.Traffic.TrafficInfo"/> for. This will be UTC</param>
            <param name="timeZone">The timezone this TMC code exists in. This can be used to convert the UTC time passed in to the local time for that TMC code</param>
            <returns>The <see cref="T:Telogis.GeoBase.Traffic.TrafficInfo">TrafficInfo</see> for the given TMC code at the specified DateTime</returns>
        </member>
        <member name="P:Telogis.GeoBase.Traffic.TMCTrafficBase.CreatedTime">
            <summary>
            Get the time that the data feed was created
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Traffic.InrixRealTimeTrafficSource.validtime">
            <summary>
            The timespan after which the data source is no longer valid.
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.Traffic.InrixRealTimeTrafficSource.#ctor(System.Xml.XmlReader)">
            <summary>
            Create a new <see cref="T:Telogis.GeoBase.Traffic.ITrafficSource">TrafficSource</see> from a given 
            INRIX V1 real-time traffic data source.
            </summary>
            <param name="reader">An XML data stream containing INRIX realtime traffic data. <see cref="T:System.Xml.XmlReader"/></param>
        </member>
        <member name="T:Telogis.GeoBase.Traffic.GeostreamTraffic">
            <summary>
            A GeoStreamTraffic is a Traffic designed for use over GeoStream.
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.Traffic.Traffic">
             <summary>
             A <see cref="T:Telogis.GeoBase.Traffic.Traffic">Traffic</see> is a collection of traffic sources which may be queried to determine the speed of traffic along a given link.
             </summary>
             <remarks>
             <para>A Traffic is a collection of traffic sources, implemented using the <see cref="T:Telogis.GeoBase.Traffic.ITrafficSource"/> interface, which may be queried to 
             determine the speed of traffic along a given link.</para>
             <para>See <see cref="M:Telogis.GeoBase.Traffic.Traffic.GetSpeed(System.UInt64,System.DateTime,Telogis.GeoBase.SpeedUnit)"/> to query the speed of traffic along a link.</para>
             <para>The speed value returned using <see cref="M:Telogis.GeoBase.Traffic.Traffic.GetSpeed(System.UInt64,System.DateTime,Telogis.GeoBase.SpeedUnit)"/> will be the lowest value 
             found for the given link ID and time. If more than one traffic source 
             is specified, the traffic sources will be searched in order of priority. The order of priority is simply the order in which the 
             traffic sources are listed when implementing the <see cref="T:Telogis.GeoBase.Traffic.ITrafficSource"/> collection.</para>
             <para>See the Traffic tutorial for more detailed information on using the Traffic class.</para>
             <para><b>Related articles</b>: <a href="60998f81-efa9-4743-afcc-6e6f943a4fa1.htm">Routing with Traffic</a>.</para>
             </remarks>
             <example>
             In this example, a Traffic object is created using NAVTEQ Historical Traffic data. 
             The <see cref="M:Telogis.GeoBase.Traffic.Traffic.GetSpeed(System.UInt64,System.DateTime,Telogis.GeoBase.SpeedUnit)"/> method is then used to find out the speed along a link, at a specified time. 
             
            
             <code lang="C#">
                 //Set units for returned speed
                 SpeedUnit spd_unit = SpeedUnit.MilesPerHour;
                 ulong link_id;
                 double speed;
                 
                 //Location to look for speed
                 LatLon location = new LatLon(33.58132, -117.72695);
                 
                 //Set file path to traffic data
                 string dataFile = @"C:\data\NavteqHistoricalTraffic.gbhb";
                 
                 //Create collection of traffic sources - just one in this case
                 ITrafficSource[] srcs = new ITrafficSource[] { new HistoricalTrafficSource(dataFile) };
                 
                 //Create traffic using the collection of traffic sources
                 Traffic myTraffic = new Traffic(srcs);
            
                 //Create a GeoCodeFull object, so that the link_id can be found from the location
                 GeoCodeFull gcFull = GeoCoder.ReverseGeoCodeFull(location);
                 link_id = gcFull.StreetLink.LinkId;
                 
                 //Get the speed
                 speed = myTraffic.GetSpeed(link_id, DateTime.Now, gcFull.StreetLink.TimeZone, spd_unit);
             </code>
             </example>
        </member>
        <member name="F:Telogis.GeoBase.Traffic.Traffic.LinkId2TMC">
            <summary>
            Converts a link id to a TMC code
            </summary>        
        </member>
        <member name="F:Telogis.GeoBase.Traffic.Traffic.traffics">
            <summary>
            An array of traffic sources.
            </summary>					
        </member>
        <member name="M:Telogis.GeoBase.Traffic.Traffic.#ctor(Telogis.GeoBase.Traffic.IGenericTrafficSource[])">
            <summary>
            Construct a new <b>Traffic</b> using the given <see cref="T:Telogis.GeoBase.Traffic.ITrafficSource">Traffic Sources</see>.
            </summary>
            <param name="sources">Data sources (implementations of <see cref="T:Telogis.GeoBase.Traffic.ITrafficSource"/>), which will be queried to determine the nature of traffic at a specified time.</param>
            <remarks>Expiry time is <see cref="F:System.DateTime.MaxValue"/> to indicate it never expires.</remarks>
        </member>
        <member name="M:Telogis.GeoBase.Traffic.Traffic.#ctor(Telogis.GeoBase.Traffic.IGenericTrafficSource[],System.DateTime)">
            <summary>
            Construct a new <b>Traffic</b> using the given <see cref="T:Telogis.GeoBase.Traffic.ITrafficSource">Traffic Sources</see>.
            </summary>
            <param name="sources">Data sources (implementations of <see cref="T:Telogis.GeoBase.Traffic.ITrafficSource"/>), which will be queried to determine the nature of traffic at a specified time.</param>
            <param name="expires">The expiry time for this traffic data.</param>
        </member>
        <member name="M:Telogis.GeoBase.Traffic.Traffic.GetSpeed(System.UInt64,System.DateTime,Telogis.GeoBase.SpeedUnit)">
            <summary>
            Query each of this <b>Traffic</b>'s <b>TrafficSource</b>s to get the speed along a given link at a given time.
            </summary>
            <param name="link_id">The link to get the speed of, specified as a <i>link ID</i></param>
            <param name="time">The time of day, as a <see cref="T:System.DateTime">DateTime</see></param>
            <param name="units">The <see cref="T:Telogis.GeoBase.SpeedUnit">units</see> in which to return the speed</param>
            <returns>-1 if the link could not be resolved to a speed, otherwise the traffic speed</returns>
            <remarks>The speed along a link may vary at different times (for example, rush-hour traffic).</remarks>
        </member>
        <member name="M:Telogis.GeoBase.Traffic.Traffic.GetSpeed(System.UInt64,System.DateTime,Telogis.GeoBase.TimeZone,Telogis.GeoBase.SpeedUnit)">
            <summary>
            Query each of this <b>Traffic</b>'s <b>TrafficSource</b>s to get the speed along a given link at a given time.
            </summary>
            <param name="link_id">The link to get the speed of, specified as a <i>link ID</i></param>
            <param name="time">The time of day, as a <see cref="T:System.DateTime">DateTime</see></param>
            <param name="timeZone">The timezone that the link exists in.</param>
            <param name="units">The <see cref="T:Telogis.GeoBase.SpeedUnit">units</see> in which to return the speed</param>
            <returns>-1 if the link could not be resolved to a speed, otherwise the traffic speed</returns>
            <remarks>The speed along a link may vary at different times (for example, rush-hour traffic).</remarks>
        </member>
        <member name="P:Telogis.GeoBase.Traffic.Traffic.DeserializedDetectionProperty">
            <summary>
            Do not use this property from code! This will and should only be used by the
            JSONFormatter when serializing or deserializing.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Traffic.Traffic.Expires">
            <summary>
            The expiry time for this traffic data.
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.Traffic.GeostreamTraffic.#ctor(System.String)">
            <summary>
            Constructor to set the traffic source to use that are available on the GeoStream server
            </summary>
            <param name="trafficSource"></param>
        </member>
        <member name="T:Telogis.GeoBase.ZipCodes.ZipcodePolygonRenderer">
             <summary>
             Allows zipcode polygons to be rendered on a map.
             </summary>
             <para> Zipcode polygons are drawn on top of the map. Thus, if another renderer includes
             instructions for rendering features that are already rendered by this zipcode renderer
             those features will be drawn twice.</para>
             <example>
             In this example, a zipcode renderer is used to draw custom map data on top of a
             map that uses the default map style for rendering the other map features.
            
             <code lang="C#">
                 public MyForm() {
                     InitializeComponent();
                   
                     // Use a multirepository to ensure that we use the same repository for
                     // custom data that we use for the map data.
                     SimpleRepository usa = new SimpleRepository(@"..\Data\USA.gbfs");
                     SimpleRepository customData = new SimpleRepository(@"..\Data\MyCustomData.gbfs");
                     MultiRepository mr = new MultiRepository();
                     mr.AddRepository(usa);
                     mr.AddRepository(customData);
            
                     // set our current thread to use our MultiRepository
                     Repository.CurrentThreadRepository = mr;
            
                     // Create a ZipcodePolygonRenderer to draw the custom data on top of the map data
                     ZipcodePolygonRenderer renderer = new ZipCodePolygonRenderer();
            
                     // Set the style of the zipcode polygons by setting the renderer parameters.
                     renderer.RequiredRendermodes = RenderMode.Labelling;
                     renderer.BorderPen = Pens.Gold;
            
                     // Apply the renderer to the map.
                     mapCtrl1.Renderer = renderer;
                 }
             </code>
             </example>
        </member>
        <member name="M:Telogis.GeoBase.ZipCodes.ZipcodePolygonRenderer.FilterZipCodes(System.Collections.Generic.List{System.String})">
            <summary>
            Only renders the ZipCodes in the given list, a maximum of 200 zipCodes can be filtered.
            This replaces any exisiting filter.
            </summary>
            <param name="zipCodes"></param>
        </member>
        <member name="M:Telogis.GeoBase.ZipCodes.ZipcodePolygonRenderer.FilterZipCodes(Telogis.GeoBase.ZipCodes.ZipCodeType)">
            <summary>
            Only render ZipCodes with the specified ZipCodeType. 
            This replaces any exisiting filter.
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.ZipCodes.ZipcodePolygonRenderer.ClearFilter">
            <summary>
            Clears filters that are applied to the renderer.
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.ZipCodes.ZipcodePolygonRenderer.Render(System.Drawing.Graphics,Telogis.GeoBase.RenderContext)">
            <summary>
            Called when this item should render itself on the map. 
            </summary>
            <param name="graphics">The <see cref="T:System.Drawing.Graphics"/> object that can be used to draw on the map.</param>
            <param name="rc">The <see cref="T:Telogis.GeoBase.RenderContext"/> information for this call.</param>
        </member>
        <member name="P:Telogis.GeoBase.ZipCodes.ZipcodePolygonRenderer.BorderPen">
            <summary>
            Sets the ZipCode polygon border stlye.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.ZipCodes.ZipcodePolygonRenderer.FillColor">
            <summary>
            Sets the ZipCode polygon fill color.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.ZipCodes.ZipcodePolygonRenderer.ShowLabels">
            <summary>
            Set to true to display labels
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.ZipCodes.ZipcodePolygonRenderer.BackgroundColor">
            <summary>
            Sets the background color, usually transparent
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.ZipCodes.ZipcodePolygonRenderer.FontColor">
            <summary>
            Sets the font color
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.ZipCodes.ZipcodePolygonRenderer.HaloColor">
            <summary>
            Sets the color of the text glow
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.ZipCodes.ZipcodePolygonRenderer.HaloWidth">
            <summary>
            Sets the size of the text halo
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.ZipCodes.ZipcodePolygonRenderer.Font">
            <summary>
            Sets the font
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.ZipCodes.ZipcodePolygonRenderer.RequiredRendermodes">
            <summary>
            Specifies which stages of rendering this renderer should be called.
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.ZipCodes.ZipCodeType">
            <summary>
            Specifies the zipcode type.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.ZipCodes.ZipCodeType.NON_UNIQUE">
            <summary>
            A general delivery postal code.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.ZipCodes.ZipCodeType.UNIQUE_ORGANIZATION">
            <summary>
            An individual company's post code
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.ZipCodes.ZipCodeType.PO_BOX">
            <summary>
            Post Office box postal code.
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.Routing.SplitMovement">
            <summary>
            A movement describing how to maneuver a split road.
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.Routing.Movement">
            <summary>
            A driving direction that instructs the driver to turn at an intersection.
            </summary>
            <remarks><para><b>Related articles</b>: <a href="d2cbdf1c-bc58-48bb-9d33-e29e6c7ca27a.htm">Using Directions</a>.</para></remarks>
        </member>
        <member name="T:Telogis.GeoBase.Routing.Direction">
            <summary>
            Abstract base class representing a driving direction (instruction) in a route. The direction may
            be either a <see cref="T:Telogis.GeoBase.Routing.Note"/> or a <see cref="T:Telogis.GeoBase.Routing.Movement"/>.
            </summary>
            <remarks><para><b>Related articles</b>: <a href="7149832b-c202-4c69-9716-d4fc2876aaa4.htm">Routing Concept</a>, 
            <a href="bca3b8a4-3b27-4fe9-ad1a-dab66a4e2831.htm">Routing and Directions</a>, 
            <a href="d2cbdf1c-bc58-48bb-9d33-e29e6c7ca27a.htm">Using Directions</a>.</para></remarks>
        </member>
        <member name="M:Telogis.GeoBase.Routing.Direction.#ctor">
            <summary>
            Constructor.
            </summary>
            <remarks>Colors the direction <see cref="P:System.Drawing.Color.GreenYellow"/> 8px wide, rounded start, rounded
            corners and an arrow on one end.</remarks>
        </member>
        <member name="M:Telogis.GeoBase.Routing.Direction.ToString">
            <summary>
            Returns the text representation of the directions.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Telogis.GeoBase.Routing.Direction.GetDistance(Telogis.GeoBase.DistanceUnit)">
            <summary>
            Gets the distance to travel before the instruction is executed.
            e.g. "After (x) units, turn left onto Main St".
            </summary>
            <remarks>
            <para><b>Related articles</b>: <a href="d2cbdf1c-bc58-48bb-9d33-e29e6c7ca27a.htm">Using Directions</a>.</para>
            </remarks>
            <param name="units"><see cref="T:Telogis.GeoBase.DistanceUnit">Unit</see> to use when returning distance.</param>
            <returns>Distance in the specified units.</returns>
        </member>
        <member name="M:Telogis.GeoBase.Routing.Direction.ZoomTo(Telogis.GeoBase.IMap)">
            <summary>
            Ensures that routing directions are visible on the current map. See remarks.
            </summary>
            <remarks>
            Rather than always zooming to the direction, this method ensures that
            the direction is visible on the map. Thus for zoomed-out views (&gt; 20) the map
            will not zoom in. Further, the map will only recenter if the direction
            isn't visible on the current map.
            </remarks>
            <param name="aMap">The <see cref="T:Telogis.GeoBase.IMap"/> to zoom.</param>
        </member>
        <member name="M:Telogis.GeoBase.Routing.Direction.ZoomTo(Telogis.GeoBase.IMap,System.Boolean)">
            <summary>
            Forces the map to zoom and center on the routing direction.
            </summary>
            <param name="aMap">The <see cref="T:Telogis.GeoBase.IMap"/> to zoom.</param>
            <param name="force">Set <b>true</b> to force zooming and centering. If <b>false</b> acts like above ZoomTo(IMap) method.</param>
        </member>
        <member name="M:Telogis.GeoBase.Routing.Direction.Render(System.Drawing.Graphics,Telogis.GeoBase.RenderContext)">
            <summary>
            Draws an arrow on a map indicating the flow of this <see cref="T:Telogis.GeoBase.Routing.Direction"/>
            </summary>
            <param name="graphics">The <see cref="T:System.Drawing.Graphics"/> object to use for drawing</param>
            <param name="aMap">The <see cref="T:Telogis.GeoBase.IMap"/> to render onto</param>
        </member>
        <member name="P:Telogis.GeoBase.Routing.Direction.Location">
            <summary>
            Gets the <see cref="T:Telogis.GeoBase.LatLon">location</see> of this direction.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Routing.Direction.Instructions">
            <summary>
            Gets a string containing driving instructions.
            </summary>
            <remarks><para><b>Related articles</b>: <a href="d2cbdf1c-bc58-48bb-9d33-e29e6c7ca27a.htm">Using Directions</a>, 
            <a href="bf5c75e3-e740-4ca6-9aa1-22fd3714bd63.htm">Internationalization</a>.</para>
            </remarks>
        </member>
        <member name="P:Telogis.GeoBase.Routing.Direction.BeginAppearance">
            <summary>
            Gets the intersection appearance at the start of this Direction (where a movement starts).
            </summary>
            <remarks><para><b>Related articles</b>: <a href="7149832b-c202-4c69-9716-d4fc2876aaa4.htm">Routing Concept</a>.</para></remarks>
        </member>
        <member name="P:Telogis.GeoBase.Routing.Direction.EndAppearance">
            <summary>
            Gets the intersection appearance at the end of this Direction (where a movement ends).
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Routing.Direction.Time">
            <summary>
            Gets a <see cref="T:System.TimeSpan"/> indicating how long to drive
            from this <see cref="T:Telogis.GeoBase.Routing.Direction"/> to the next.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Routing.Direction.Duration">
            <summary>
            Gets a <see cref="T:System.TimeSpan"/> indicating how long to drive
            this direction.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Routing.Direction.Heading">
            <summary>
            Gets the <see cref="T:Telogis.GeoBase.Routing.Direction.CompassDirection">CompassDirection</see> that this <see cref="T:Telogis.GeoBase.Routing.Direction"/>
            sends the driver.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Routing.Direction.Distance">
            <summary>
            The distance to travel before the instruction is executed.
            e.g. "After (x.Value) (x.Units), turn left onto Main St".
            </summary>
            <remarks>
            <para><b>Related articles</b>: <a href="d2cbdf1c-bc58-48bb-9d33-e29e6c7ca27a.htm">Using Directions</a>.</para>
            </remarks>
        </member>
        <member name="P:Telogis.GeoBase.Routing.Direction.HeadingString">
            <summary>
            Gets a string representing the compass direction this <see cref="T:Telogis.GeoBase.Routing.Direction"/>
            will send the driver. eg "North-East".
            </summary>
            <remarks><para><b>Related articles</b>: <a href="d2cbdf1c-bc58-48bb-9d33-e29e6c7ca27a.htm">Using Directions</a>.</para></remarks>
        </member>
        <member name="P:Telogis.GeoBase.Routing.Direction.Notes">
            <summary>
            Gets an <see cref="T:System.Collections.ArrayList"/> of <see cref="T:Telogis.GeoBase.Routing.Note"/>s attached to this
            <see cref="T:Telogis.GeoBase.Routing.Direction"/>
            </summary>
            <remarks><para><b>Related articles</b>: <a href="7149832b-c202-4c69-9716-d4fc2876aaa4.htm">Routing Concept</a>.</para></remarks>
        </member>
        <member name="P:Telogis.GeoBase.Routing.Direction.Street">
            <summary>
            Gets the name of the street the <see cref="T:Telogis.GeoBase.Routing.Direction"/> will put the driver on to.
            </summary>
            <remarks><para><b>Related articles</b>: <a href="d2cbdf1c-bc58-48bb-9d33-e29e6c7ca27a.htm">Using Directions</a>.</para></remarks>
        </member>
        <member name="P:Telogis.GeoBase.Routing.Direction.IsArrival">
            <summary>
            Gets a <b>bool</b> indicating whether this <see cref="T:Telogis.GeoBase.Routing.Direction"/>
            indicates arrival at a stop.
            </summary>
            <remarks><para><b>Related articles</b>: <a href="d2cbdf1c-bc58-48bb-9d33-e29e6c7ca27a.htm">Using Directions</a>.</para></remarks>
        </member>
        <member name="P:Telogis.GeoBase.Routing.Direction.IsDeparture">
            <summary>
            Gets a <b>bool</b> indicating whether this <see cref="T:Telogis.GeoBase.Routing.Direction"/>
            indicates departure from a stop.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Routing.Direction.Points">
            <summary>
            Gets an array of <see cref="T:Telogis.GeoBase.LatLon"/>s representing
            this <see cref="T:Telogis.GeoBase.Routing.Direction"/>.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Routing.Direction.RenderPen">
            <summary>
            The pen used to draw the direction on the map.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Routing.Direction.RequiredRendermodes">
            <summary>
            Gets the <see cref="T:Telogis.GeoBase.RenderMode">RenderMode</see> required by this <see cref="T:Telogis.GeoBase.Routing.Direction"/>
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.Routing.Direction.CompassDirection">
            <summary>
            An enumeration of points on a compass
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Routing.Direction.CompassDirection.NORTH">
            <summary>
            Represents the North direction.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Routing.Direction.CompassDirection.NORTHEAST">
            <summary>
            Represents the North-East direction.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Routing.Direction.CompassDirection.EAST">
            <summary>
            Represents the East direction.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Routing.Direction.CompassDirection.SOUTHEAST">
            <summary>
            Represents the South-East direction.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Routing.Direction.CompassDirection.SOUTH">
            <summary>
            Represents the South direction.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Routing.Direction.CompassDirection.SOUTHWEST">
            <summary>
            Represents the South-West direction.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Routing.Direction.CompassDirection.WEST">
            <summary>
            Represents the West direction.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Routing.Direction.CompassDirection.NORTHWEST">
            <summary>
            Represents the North-West direction.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Routing.Direction.CompassDirection.NONE">
            <summary>
            Represents no direction.
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.Routing.Movement.#ctor">
            <summary>
            Parameter-less constructor.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Routing.Movement.RouteStop">
            <summary>
            This gets the position of the direction (as a <see cref="T:Telogis.GeoBase.RouteStop"/>).
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Routing.Movement.MovementType">
            <summary>
            Gets the <see cref="P:Telogis.GeoBase.Routing.Movement.MovementType"/> of this direction.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Routing.Movement.Dir">
            <summary>
            Returns a description of this movement, as a <see cref="T:Telogis.GeoBase.Routing.DrivingEvent"/>.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Routing.Movement.TurnNumber">
            <summary>
            The turn number of this movement.
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.Routing.DrivingEvent">
            <summary>
            Abstract class that describes a driving event such as a driving direction
            or movement
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.Routing.RouteCostUnits">
            <summary>
            The cost units used for a given route strategy
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Routing.RouteCostUnits.Seconds">
            <summary>
            Cost is in seconds - used by the RouteStrategyFastest.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Routing.RouteCostUnits.Meters">
            <summary>
            Cost is in meters - user by the RouteStrategyShortest.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Routing.RouteCostUnits.Kilometers">
            <summary>
            Kilometers.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Routing.RouteCostUnits.Yards">
            <summary>
            Yards.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Routing.RouteCostUnits.Miles">
            <summary>
            Miles.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Routing.RouteCostUnits.Currency">
            <summary>
            A monetary unit.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Routing.RouteCostUnits.Custom">
            <summary>
            Your own units - for custom Strategies.
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.Routing.RoadCrossingBehavior">
            <summary>
            The permitted type of road crossing behavior
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.Routing.RoutingProfile">
            <summary>
            Used to determine the speed profile (based on functional class and speed category) when routing. See remarks.
            </summary>
            <remarks>
            Travel speed is often a function of both functional class and speed category.
            </remarks>
        </member>
        <member name="M:Telogis.GeoBase.Routing.RoutingProfile.#ctor">
            <summary>
            Parameterless constructor. Creates a default routing profile where travel speed is only a function
            of the speed category.
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.Routing.RoutingProfile.#ctor(System.Double[],Telogis.GeoBase.SpeedUnit)">
            <summary>
            Constructs a custom speed routing profile.
            </summary>
            <param name="speeds"><para>A one-dimensional array of 48 doubles representing the travel speed
            for each functional class and speed category combination.</para>
            <para>The array is constructed in six consecutive blocks of eight elements. Each block represents
            a functional class (1-6), the first block represents functional class 1, the second block functional
            class 2, etc.</para>
            <para>The first element in the each block corresponds to speed category 1, the second element
            speed category 2, etc.</para>
            </param>
            <param name="units"><see cref="F:Telogis.GeoBase.SpeedUnit.MilesPerHour"/></param>
        </member>
        <member name="M:Telogis.GeoBase.Routing.RoutingProfile.Finalize">
            <summary>
            Destroys a RoutingProfile instance and releases its unmanaged resources.
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.Routing.RoutingProfile.Dispose">
            <summary>
            Releases managed and unmanaged resources being used by this RoutingProfile.
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.Routing.RoutingProfile.Dispose(System.Boolean)">
            <summary>
            Releases resources being used by this RoutingProfile.
            </summary>
            <param name="disposing">Whether a complete disposal of the profile is being performed. If
            this is set to <code>true</code>, managed resources are disposed as well as unmanaged ones;
            if this is <code>false</code>, only unmanaged resources are disposed.</param>
        </member>
        <member name="M:Telogis.GeoBase.Routing.RoutingProfile.SetSpeed(System.Int32,System.Int32,System.Double,Telogis.GeoBase.SpeedUnit)">
            <summary>
            Set the travel speed for a given speed category and functional class.
            </summary>
            <param name="speedCat">Speed category. Values: 1-8. A lower value indicates a higher speed</param>
            <param name="funcClass">Functional class (of the link)</param>
            <param name="speed">Speed, measured in <i>units</i></param>
            <param name="units"><see cref="T:Telogis.GeoBase.SpeedUnit"/></param>
        </member>
        <member name="M:Telogis.GeoBase.Routing.RoutingProfile.GetSpeed(System.Int32,System.Int32,Telogis.GeoBase.SpeedUnit)">
            <summary>
            Get the travel speed for a given speed category and functional class.
            </summary>
            <param name="speedCat">Speed category of the link, values: 1-8</param>
            <param name="funcClass">Functional class of the link, values: 1-6</param>
            <param name="units">Units in which to return the speed</param>
            <returns>Travel speed (as defined by this <b>Routing Profile</b>), in the given <i>units</i></returns>
        </member>
        <member name="M:Telogis.GeoBase.Routing.RoutingProfile.GetIndex(System.Int32,System.Int32)">
            <summary>
            Gets the index in the routing profile's speeds array of the item corresponding to a given
            speed category and functional class.
            </summary>
            <param name="speedCat">The speed category to find an index for.</param>
            <param name="funcClass">The functional class to find an index for.</param>
            <returns>The index in the <code>mph</code> array of the entry corresponding to the specified
            speed category and functional class.</returns>
        </member>
        <member name="F:Telogis.GeoBase.Routing.RoutingProfile.unmanagedProfile">
            <summary>
            A pointer to the unmanaged profile object to which this RoutingProfile corresponds.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Routing.RoutingProfile.mph">
            <summary>
            An array of the speeds that constitute this routing profile, in miles per hour. This is ordered
            first by functional class, then by speed category.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Routing.RoutingProfile.UnmanagedProfile">
            <summary>
            Gets a pointer to the unmanaged profile object to which this RoutingProfile corresponds. If 
            none is available (i.e. the RoutingProfile has been disposed), a new one is created (with
            <code>useAllSuperLinks</code> set to false).
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.Routing.RoutingStrategy">
            <summary>
            A collection of routing settings that can be used to control routing priorities.
            Can be set per route or per link.</summary>
            <remarks>
            <para><b>Related articles</b>: <a href="7149832b-c202-4c69-9716-d4fc2876aaa4.htm">Routing Concept</a>, 
            <a href="60b7ec5d-a96d-4143-a76b-2231d01dd002.htm">Using a RouteMatrix</a>, 
            <a href="20a4ecb6-ef4a-4252-905b-2e4c89a6644f.htm">Modifying the Routing Strategy</a>.</para>
            </remarks>
        </member>
        <member name="F:Telogis.GeoBase.Routing.RoutingStrategy.allowUTurns">
            <summary>
            When true, allows the routing engine to instruct a U turn. When false, generated
            routes will not contain U turns if possible. True by default.
            </summary>
            <remarks><para><b>Related articles</b>: <a href="60b7ec5d-a96d-4143-a76b-2231d01dd002.htm">Using a RouteMatrix</a>, 
            <a href="20a4ecb6-ef4a-4252-905b-2e4c89a6644f.htm">Modifying the Routing Strategy</a>.</para></remarks>
        </member>
        <member name="F:Telogis.GeoBase.Routing.RoutingStrategy.roadCrossingBehavior">
            <summary>
            Indicates whether routing can go directly from targets on different sides of the road
            if the targets are on the same link
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Routing.RoutingStrategy.m_enhancedShortestRouting">
            <summary>
            Field that caches unmanaged value of EnhancedShortestRouting
            </summary>		
        </member>
        <member name="F:Telogis.GeoBase.Routing.RoutingStrategy.m_keepOut">
            <summary>
            Internal representation of a 'keep-out' area for the router. See <see cref="P:Telogis.GeoBase.Routing.RoutingStrategy.KeepOut"/>.
            </summary>        
        </member>
        <member name="M:Telogis.GeoBase.Routing.RoutingStrategy.CalculateTimeAfter(System.DateTime,Telogis.GeoBase.Routing.LinkCost)">
            <summary>
            Calculate the time after passing through the link.
            </summary>
            <param name="start">The start time. <see cref="T:System.DateTime"/></param>
            <param name="cost">The <see cref="T:Telogis.GeoBase.Routing.LinkCost">LinkCost</see>, in seconds</param>
            <returns>The sum of <i>start</i> and the calculated <b>LinkCost</b>, as
            a <see cref="T:System.DateTime">DateTime</see></returns>
        </member>
        <member name="M:Telogis.GeoBase.Routing.RoutingStrategy.Dispose">
            <summary>
            Dispose this RoutingStrategy.
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.Routing.RoutingStrategy.#ctor">
            <summary>
            Initialize the default routing strategy.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Telogis.GeoBase.Routing.RoutingStrategy.SetProfile(Telogis.GeoBase.Routing.RoutingProfile)">
            <summary>
            Sets the default <see cref="T:Telogis.GeoBase.Routing.RoutingProfile">RoutingProfile</see> for
            all countries. This profile will be overridden if a profile has been set for another country
            </summary>
            <param name="profile">The routing profile to apply as a default</param>
        </member>
        <member name="M:Telogis.GeoBase.Routing.RoutingStrategy.SetProfile(Telogis.GeoBase.Country[],Telogis.GeoBase.Routing.RoutingProfile)">
            <summary>
            Sets the <see cref="T:Telogis.GeoBase.Routing.RoutingProfile">RoutingProfile</see> for all the countries
            in an array.
            </summary>
            <param name="countries">An array of countries to apply the routing profile to</param>
            <param name="profile">The routing profile to apply to the countries</param>
        </member>
        <member name="M:Telogis.GeoBase.Routing.RoutingStrategy.SetProfile(Telogis.GeoBase.Country,Telogis.GeoBase.Routing.RoutingProfile)">
            <summary>
            Sets the <see cref="T:Telogis.GeoBase.Routing.RoutingProfile">RoutingProfile</see>
            for a certain country.
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.Routing.RoutingStrategy.GetProfile(Telogis.GeoBase.Country)">
            <summary>
            Gets the <see cref="T:Telogis.GeoBase.Routing.RoutingProfile">RoutingProfile</see>
            for a certain country for this <b>RoutingStrategy</b>.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Routing.RoutingStrategy.EnhancedShortestRouting">
            <summary>
            Property that sets EnhancedShortestRouting on the native object, for internal use and
            during deserialization.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Routing.RoutingStrategy.ExtraProcessingRatio">
            <summary>
            Used to increase the area of the bounding boxes for querying the network. 
            </summary>
            <remarks>
            This value represents the multiplier for the size of the area that routing will
            look at when locating the optimum path. Valid values are 1 to 100; the default is 1. 
            100 means the area looked at is 100 times larger than the default. 
            <para>It should be noted that increasing the search area will also increase the 
            memory requirements and the amount of time it takes to create a route.</para></remarks>
        </member>
        <member name="P:Telogis.GeoBase.Routing.RoutingStrategy.LinkEdits">
            <summary>
            A set of link edits that, for selected links, will override the default speed that is
            used when calculating a route.
            </summary>
            <remarks>
            <para>
            To use this feature, create a LinkEditDatabase and create appropriate LinkEdit objects
            using the CreateLinkEdit method.  Once ready, call Compile to create a
            CompiledLinkEdits object that can be assigned to this property.
            </para>
            <para>
            Alternatively, a CompiledLinkEdits can be created from a pre-existing LinkEditDatabase
            file by calling CompiledLinkEdits.Create.
            </para>
            </remarks>
        </member>
        <member name="P:Telogis.GeoBase.Routing.RoutingStrategy.KeepOut">
            <summary>
            Sets a <see cref="N:Telogis.GeoBase.GeoFence">GeoFence</see> area where the router will
            not send vehicles. You can use this to keep the route from going through a specific
            area.
            </summary>
            <remarks><para><b>Related articles</b>: <a href="301bf297-670b-4b0d-8b89-6601fd8dca8f.htm">Geofences Concept</a>.</para>
            </remarks>
        </member>
        <member name="P:Telogis.GeoBase.Routing.RoutingStrategy.CostUnits">
            <summary>
            Returns the units that the costs are calculated in.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Routing.RoutingStrategy.Profile">
            <summary>
            Get or set the default <see cref="T:Telogis.GeoBase.Routing.RoutingProfile">RoutingProfile</see>
            for this <b>RoutingStrategy</b>.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Routing.RoutingStrategy.AllowUTurns">
            <summary>
            When true, allows the routing engine to instruct a U turn. When false, generated
            routes will not contain U turns if possible. True by default.
            </summary>
            <remarks><para><b>Related articles</b>: <a href="60b7ec5d-a96d-4143-a76b-2231d01dd002.htm">Using a RouteMatrix</a>, 
            <a href="20a4ecb6-ef4a-4252-905b-2e4c89a6644f.htm">Modifying the Routing Strategy</a>.</para>
            </remarks>
        </member>
        <member name="P:Telogis.GeoBase.Routing.RoutingStrategy.RoadCrossingBehavior">
            <summary>
            Set the permitted type of road crossing behavior (Allowed, Discouraged, Forbidden)
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Routing.RoutingStrategy.UseTollRoads">
            <summary>
            Gets or set if this route is allowed to use toll roads. Default is <b>true</b>.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Routing.RoutingStrategy.CustomEvalFunction">
            <summary>
            Gets or sets a custom function to evaluate the costs associated with different <see cref="T:Telogis.GeoBase.Routing.RouteFlag"/>.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Routing.RoutingStrategy.CustomCostFunction">
            <summary>
            Gets or sets a custom function used to adjust the cost associated with a particular Link
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Routing.RoutingStrategy.Traffic">
            <summary>
            The TrafficRouting used to apply traffic data to this strategy.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Routing.RoutingStrategy.InternalUTurnPenalty">
            <summary>
            The penalty as applied to the routing cost in 100ths of a second.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Routing.RoutingStrategy.InternalCrossingTurnPenalty">
            <summary>
            The penalty as applied to the routing cost in 100ths of a second.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Routing.RoutingStrategy.CrossAtTrafficSignalsUnpenalized">
            <summary>
            Crossing traffic at traffic signals is unpenalized.
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.Routing.LinkCost">
            <summary>
            A structure representing the cost of traversing a link or a
            set of links in a route.
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.Routing.LinkCost.ToString">
            <summary>
            Gets the link costs as a string.
            </summary>
            <returns>Link cost, formatted as: "Cost:<see cref="P:Telogis.GeoBase.Routing.LinkCost.Cost"/> Meters:<see cref="P:Telogis.GeoBase.Routing.LinkCost.Meters"/> Time:<see cref="P:Telogis.GeoBase.Routing.LinkCost.Time"/>"</returns>
        </member>
        <member name="M:Telogis.GeoBase.Routing.LinkCost.Add(Telogis.GeoBase.Routing.LinkCost)">
            <summary>
            Add the cost of another link to the cost of this link.
            </summary>
            <param name="cost"><see cref="T:Telogis.GeoBase.Routing.LinkCost"/></param>
        </member>
        <member name="M:Telogis.GeoBase.Routing.LinkCost.addCost(System.UInt32)">
            <summary>
            Increase the cost of this link by the specified amount.
            </summary>
            <param name="cost"></param>
        </member>
        <member name="M:Telogis.GeoBase.Routing.LinkCost.addCost(System.Int32)">
             <summary>
             Increase the cost of this link by the specified amount.
             </summary>
             <remarks>
             Using this method you can also decrease the cost of traveling the link, for example:
             <code>
             // suppose lc is some LinkCost given to us...
            
             Console.WriteLine(lc.Cost); // outputs 60 -- so our link has a cost of 60
            
             if ( /* we decide to reduce cost by 100, arbitrarily */ ) {
                 lc.addCost(-100);
                 Console.WriteLine("Decreased by 100, new cost:" + lc.Cost);
                 // ^^ outputs 1 -- GeoBase has forced the cost to remain &gt;= 1
             }
            
             else { /* we decide to increase cost */
                 lc.addCost(300);
                 Console.WriteLine("Increased by 300, new cost:" + lc.Cost);
                 // ^^ outputs 360
             }
             </code>
             <para>Because negative link costs are nonsensical GeoBase will never let the cost for a link
             drop below 1.</para>
             <para>If you'd like to strongly discourage GeoBase from routing along a particular link use the
             <see cref="P:Telogis.GeoBase.Routing.LinkCost.UndesirableLink"/> property. Use of this property is preferable to setting a high
             link cost using the addCost(int cost) method.</para>
             <para>If you'd like to prevent GeoBase from routing along a particular link use the 
             <see cref="P:Telogis.GeoBase.Routing.LinkCost.ProhibitedLink"/> property.</para>
             </remarks>
             <param name="cost"></param>
        </member>
        <member name="M:Telogis.GeoBase.Routing.LinkCost.addMeters(System.UInt32)">
            <summary>
            Increase the length of this link by the specified number of meters.
            </summary>
            <param name="meters"></param>
        </member>
        <member name="M:Telogis.GeoBase.Routing.LinkCost.addMeters(System.Int32)">
            <summary>
            Increase the length of this link by the specified number of meters.
            </summary>
            <param name="meters"></param>
        </member>
        <member name="M:Telogis.GeoBase.Routing.LinkCost.addTime(System.UInt32)">
            <summary>
            Increase the time required to travel this link by the specified number of 1/100th seconds.
            </summary>
            <param name="time">the increase in time desired: seconds * 100</param>
        </member>
        <member name="M:Telogis.GeoBase.Routing.LinkCost.addTime(System.Int32)">
            <summary>
            Increase the time required to travel this link by the specified number of 1/100th seconds.
            </summary>
            <param name="time">the increase in time desired: seconds * 100</param>
        </member>
        <member name="M:Telogis.GeoBase.Routing.LinkCost.#ctor(System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Create a new RoutingCost object
            </summary>
            <param name="cost">The cost of traversing the link</param>
            <param name="meters">The distance of the link</param>
            <param name="time">The time to traverse the link in 1/100 seconds</param>
        </member>
        <member name="F:Telogis.GeoBase.Routing.LinkCost.Free">
            <summary>
            A <see cref="T:Telogis.GeoBase.Routing.LinkCost"/> representing a zero cost
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Routing.LinkCost.Never">
            <summary>
            A <see cref="T:Telogis.GeoBase.Routing.LinkCost"/> representing a cost for a link that should
            never be taken
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.Routing.LinkCost.op_Equality(Telogis.GeoBase.Routing.LinkCost,Telogis.GeoBase.Routing.LinkCost)">
            <summary>
            Indicates whether two link costs are the same.
            </summary>
            <param name="rc1">The first link cost.</param>
            <param name="rc2">The second link cost.</param>
            <returns>True if the link costs are identical (all properties are the same), false otherwise.</returns>
        </member>
        <member name="M:Telogis.GeoBase.Routing.LinkCost.op_Inequality(Telogis.GeoBase.Routing.LinkCost,Telogis.GeoBase.Routing.LinkCost)">
             <summary>
            Indicates whether two link costs are different.
             </summary>
             <param name="rc1">The first link cost.</param>
             <param name="rc2">The second link cost.</param>
             <returns>True if the link costs differ (have one or more properties with different values), false if they are identical.</returns>
        </member>
        <member name="M:Telogis.GeoBase.Routing.LinkCost.Equals(System.Object)">
            <summary>
            Indicates whether a specified object is a link cost identical to this one.
            </summary>
            <param name="obj">The object to check.</param>
            <returns>True if the specified object is a link cost identical to this one, false otherwise. </returns>
        </member>
        <member name="M:Telogis.GeoBase.Routing.LinkCost.GetHashCode">
            <summary>
            Returns a hash value for this link cost
            </summary>
            <returns>A unique integer representing this link cost.</returns>
        </member>
        <member name="P:Telogis.GeoBase.Routing.LinkCost._Cost_xd83e7fb7c6f7f176">
            <summary>
            Before 3.5.2.18, _Cost was obfuscated so we must serialize it with its obfuscated name.
            This property is only for serialization.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Routing.LinkCost.Cost">
            <summary>
            The cost for this link or links
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Routing.LinkCost._Meters_x3f75ad3d03ae6c5b">
            <summary>
            Before 3.5.2.18, _Meters was obfuscated so we must serialize it with its obfuscated
            name.  This property is only for serialization.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Routing.LinkCost.Meters">
            <summary>
            The distance of this link.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Routing.LinkCost.Time">
            <summary>
            The time to traverse this link or set of links. (1/100 second).
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Routing.LinkCost._Time_xa6342b350e917726">
            <summary>
            Before 3.5.2.18, _Time was obfuscated so we must serialize it with its obfuscated name.
            This property is only for serialization.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Routing.LinkCost.UndesirableLink">
            <summary>
            Gets or sets a value indicating whether this link should be avoided.
            </summary>
            <remarks>
            If this is true, the routing engine may still traverse this link, but
            only if all other options have been exhausted.
            <para><b>Related articles</b>: <a href="20a4ecb6-ef4a-4252-905b-2e4c89a6644f.htm">Modifying the Routing Strategy</a>.</para>
            </remarks>
        </member>
        <member name="P:Telogis.GeoBase.Routing.LinkCost.ProhibitedLink">
            <summary>
            Gets or sets whether this link must be avoided unless no other route exists
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.Routing.RouteCustomEval">
            <summary>
            A function that can evaluate the link flags and return an additional
            cost for travel on a link with those flags.
            It is passed the start and end points of the link, the length of the
            link in meters and the flags
            for the current link as well as the flags for the link the route is
            just coming off.
            </summary>
            <remarks>
            Supply a delegate with this signature in order to perform custom routing.
            The <paramref name="linkCost"/> parameter will have the routing strategy's
            estimate of the cost for the link when your method is called. You should make
            any <see cref="M:Telogis.GeoBase.Routing.LinkCost.addCost(System.Int32)">relevant adjustments to this value</see>
            before you return that represent the cost of traversing this link.
            <para><b>Related articles</b>: <a href="20a4ecb6-ef4a-4252-905b-2e4c89a6644f.htm">Modifying the Routing Strategy</a>.</para>
            </remarks>
            <param name="LinkStart">The <see cref="T:Telogis.GeoBase.LatLon"/> of the start of the candidate link</param>
            <param name="LinkEnd">The <see cref="T:Telogis.GeoBase.LatLon"/> of the end of the candidate link</param>
            <param name="length">The length of the candidate link in meters</param>
            <param name="flags">The <see cref="T:Telogis.GeoBase.Routing.RouteFlag"/>s for the candidate link</param>
            <param name="lastFlags">The <see cref="T:Telogis.GeoBase.Routing.RouteFlag"/>s for the previous link. This may be null if this is the first link</param>
            <param name="link_id">The LinkId for the candidate link. When routing on Navteq data, this is the Navteq Link ID</param>
            <param name="cumulativeCost">The total cost of the route so far, up to the start of this link</param>
            <param name="linkCost">The cost of the candidate link. This will be populated when this delegate is called, and the delegate should adjust it as necessary</param>
            <param name="strat">The <see cref="T:Telogis.GeoBase.Routing.RoutingStrategy"/> used to evaluate the cost of the route.</param>
            <param name="dateTime">The time (always UTC) at which the routing is performed.</param>
            <param name="timeZone">The timezone in which the routing along the link is performed. This value should be used to convert 
            dateTime (UTC) to local time.</param>
        </member>
        <member name="T:Telogis.GeoBase.Routing.RouteCustomCostFunc">
            <summary>
            A function that can evaluate information about a link and return an additional
            cost for travel on that link.
            </summary>
            <remarks>
            Supply a delegate with this signature in order to perform custom routing.
            The <paramref name="linkCost"/> parameter will have the routing strategy's
            estimate of the cost for the link when your method is called. You should make
            any <see cref="M:Telogis.GeoBase.Routing.LinkCost.addCost(System.Int32)">relevant adjustments to this value</see>
            before you return that represent the cost of traversing this link.
            <para><b>Related articles</b>: <a href="20a4ecb6-ef4a-4252-905b-2e4c89a6644f.htm">Modifying the Routing Strategy</a>.</para>
            </remarks>
            <param name="linkInfo">A <see cref="T:Telogis.GeoBase.Routing.CustomRoutingInfo"/> containing the flags for a link.</param>
            <param name="linkCost">The cost of the candidate link. This will be populated when this delegate is called, and the delegate should adjust it as necessary</param>
        </member>
        <member name="T:Telogis.GeoBase.Routing.RoutingStrategyFastest">
             <summary>
            A <see cref="T:Telogis.GeoBase.Routing.RoutingStrategy"/> which calculates the fastest route between <see cref="T:Telogis.GeoBase.RouteStop"/>s.
             </summary>
             <remarks><para><b>Related articles</b>: <a href="7149832b-c202-4c69-9716-d4fc2876aaa4.htm">Routing Concept</a>, 
             <a href="60b7ec5d-a96d-4143-a76b-2231d01dd002.htm">Using a RouteMatrix</a>.</para>
             </remarks>
        </member>
        <member name="M:Telogis.GeoBase.Routing.RoutingStrategyFastest.Dispose">
            <summary>
            Frees all (managed &amp; unmanaged) resources associated with this <see cref="T:Telogis.GeoBase.Routing.RoutingStrategy"/>.
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.Routing.RoutingStrategyFastest.Finalize">
            <summary>
            The destructor frees all unmanaged resources associated with this <see cref="T:Telogis.GeoBase.Routing.RoutingStrategy"/>.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Routing.RoutingStrategyFastest.UTurnPenalty">
            <summary>
            The penalty applied during routing for performing a u-turn. The default cost is 20 seconds.
            </summary>
            <remarks>
            This is detrimental to the performance of routing so has max value of 300 seconds.</remarks>
        </member>
        <member name="P:Telogis.GeoBase.Routing.RoutingStrategyFastest.CrossingTurnPenalty">
            <summary>
            The penalty applied during routing for making a turn that crosses traffic. So in a country
            that drives on the right side of the road, left turns will be penalised if they cross 
            a lane of traffic. Default is no penalty.
            </summary>
            <remarks>
            This is detrimental to the performance of routing so has max value of 300 seconds.</remarks>
        </member>
        <member name="P:Telogis.GeoBase.Routing.RoutingStrategyFastest.CrossAtTrafficSignalsUnpenalized">
            <summary>
            If traffic signal data is available and a crossing turn is being performed at an intersection
            controlled by traffic lights, allow a crossing turn to be performed with no penalty.
            </summary>
            <remarks>
            This means the 
            <see cref="P:Telogis.GeoBase.Routing.RoutingStrategyFastest.CrossingTurnPenalty">Crossing Turn Penalty</see>, 
            if there is one, will not be applied.
            This is a best effort feature as we are limited to the traffic signal data supplied to us.
            </remarks>
        </member>
        <member name="T:Telogis.GeoBase.Routing.RoutingStrategyShortest">
            <summary>
            A <see cref="T:Telogis.GeoBase.Routing.RoutingStrategy"/> that calculates the shortest route between <see cref="T:Telogis.GeoBase.RouteStop"/>s.
            </summary>
            <remarks><para><b>Related articles</b>: <a href="7149832b-c202-4c69-9716-d4fc2876aaa4.htm">Routing Concept</a>, 
            <a href="60b7ec5d-a96d-4143-a76b-2231d01dd002.htm">Using a RouteMatrix</a>.</para>
            </remarks>
        </member>
        <member name="M:Telogis.GeoBase.Routing.RoutingStrategyShortest.Dispose">
            <summary>
            Frees all (managed &amp; unmanaged) resources associated with this <see cref="T:Telogis.GeoBase.Routing.RoutingStrategy"/>.
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.Routing.RoutingStrategyShortest.Finalize">
            <summary>
            The destructor frees all unmanaged resources associated with this <see cref="T:Telogis.GeoBase.Routing.RoutingStrategy"/>.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Routing.RoutingStrategyShortest.CostUnits">
            <summary>
            Gets the units in which the cost for this strategy is calculated in (always returns meters).
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Routing.RoutingStrategyShortest.EnhanceRoute">
            <summary>
            When true, routing will consider more minor streets close to the direct line between two
            consecutive route stops.  This is likely to improve the quality of shortest routes, but at
            the price of some impact on performance and memory usage.
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.Routing.RoutingStrategyForPedestrian">
            <summary>
            A <see cref="T:Telogis.GeoBase.Routing.RoutingStrategy"/> that calculates the shortest route between <see cref="T:Telogis.GeoBase.RouteStop"/>s.
            </summary>
            <remarks>
            <para>The routing strategy for pedestrians assumes an average walking speed (3 mph/5 kph), allows a route to traverse
            one-way streets in either direction, checks the <see cref="P:Telogis.GeoBase.Routing.RouteFlag.AR_PEDEST"/> flag, and avoids streets with a <see cref="P:Telogis.GeoBase.Routing.RouteFlag.FUNC_CLASS"/> of 1 or 2.</para>
            <para><b>Related articles</b>: <a href="7149832b-c202-4c69-9716-d4fc2876aaa4.htm">Routing Concept</a>, 
            <a href="60b7ec5d-a96d-4143-a76b-2231d01dd002.htm">Using a RouteMatrix</a>.</para>
            </remarks>
        </member>
        <member name="M:Telogis.GeoBase.Routing.RoutingStrategyForPedestrian.Dispose">
            <summary>
            Frees all (managed &amp; unmanaged) resources associated with this <see cref="T:Telogis.GeoBase.Routing.RoutingStrategy"/>.
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.Routing.RoutingStrategyForPedestrian.Finalize">
            <summary>
            The destructor frees all unmanaged resources associated with this <see cref="T:Telogis.GeoBase.Routing.RoutingStrategy"/>.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Routing.RoutingStrategyForPedestrian.CostUnits">
            <summary>
            Gets the units in which the cost for this strategy is calculated in (always returns meters).
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.Routing.NameChangeNote">
            <summary>
            A Note informing that the link name has changed.
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.Routing.Note">
            <summary>
            An incidental note that doesn't affect the route but provides information to
            assist the driver in navigating the route (such as street name changes).
            </summary>
            <remarks><para><b>Related articles</b>: <a href="d2cbdf1c-bc58-48bb-9d33-e29e6c7ca27a.htm">Using Directions</a>.</para></remarks>
        </member>
        <member name="F:Telogis.GeoBase.Routing.Note.noteType">
            <summary>
            The gets the <see cref="T:Telogis.GeoBase.Routing.NoteType">type</see> of a <see cref="T:Telogis.GeoBase.Routing.Note">Note</see>.
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.Routing.Note.#ctor">
            <summary>
            Constructs a new note. Required by derivation from an abstract class (<see cref="T:Telogis.GeoBase.Routing.Direction"/>).
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Routing.Note.NoteType">
            <summary>
            Gets the <see cref="T:Telogis.GeoBase.Routing.NoteType">NoteType</see> of this <see cref="T:Telogis.GeoBase.Routing.Note">Note</see>.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Routing.Note.NoteDistance">
            <summary>
            The distance associated with this note.  For example, a TollwayEndsNote has a
            NoteDistance that indicates how long the route travels along the tollway.  Not
            applicable to all Note types.
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.Routing.LinkEdit.LinkIdSelection">
            <summary>
            Selects a link for editing based on its Link ID.
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.Routing.LinkEdit.ILinkEditSelection">
            <summary>
            Interface that is implemented by classes that select links for editing.
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.Routing.LinkEdit.LinkIdSelection.#ctor(Telogis.GeoBase.LatLon,System.UInt64)">
            <summary>
            Creates a LinkIdSelection that will select a link with the specified Link ID.
            </summary>
            <remarks>
            The location of the link is not used internally by GeoBase, but it can be used by the
            user to easily find the intended link if the edit is read from the database.
            </remarks>
            <param name="loc">The location of the link.</param>
            <param name="linkId">The link's Link ID.</param>
        </member>
        <member name="M:Telogis.GeoBase.Routing.LinkEdit.LinkIdSelection.ToString">
            <summary>
            Display the LatLon and LinkId of this LinkIdSelection.
            </summary>
            <returns>The LatLon and LinkId of this LinkIdSelection.</returns>
        </member>
        <member name="P:Telogis.GeoBase.Routing.LinkEdit.LinkIdSelection.Location">
            <summary>
            The location of the link.  This is not used internally by GeoBase, but it is present to
            allow the user to easily find the intended link.  This could be used, for example, when
            rendering the edits in a LinkEditDatabase.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Routing.LinkEdit.LinkIdSelection.LinkId">
            <summary>
            The link's Link ID.
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.Routing.ArrivalMovement">
            <summary>
            A movement that occurs on arrival at the destination. 
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Routing.ArrivalMovement.Destination">
            <summary>
            A description of the destination. This can either be the <see cref="P:Telogis.GeoBase.RouteStop.Description"/>
            of a RouteStop, or it can be the name of the last street followed to arrive at the destination.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Routing.ArrivalMovement.Number">
            <summary>
            The street number of the destination when it is given as a street name. If the destination is given as a RouteStop
            description, or if the street number does not exist or
            is unknown, this value is null.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Routing.ArrivalMovement.Direction">
            <summary>
            If the final movement when arriving at the destination is to turn off the street,
            this is the direction to turn. Otherwise, this is TurnDirection.None.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Routing.ArrivalMovement.PrevDistance">
            <summary>
            The amount of distance to travel after leaving the final street in the directions. 
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Routing.ArrivalMovement.PrevStreet">
            <summary>
            If the final movement when arriving at the destination is to turn off a street,
            this is the name of the street to exit. Otherwise, this is an empty string.
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.Geocoding.IExternalGeocoders.SetDefaultExternalGeocoder(Telogis.GeoBase.Geocoding.IExternalGeocoder)">
            <summary>
            A default geocoder can provide geocoding services for any country. Only one default 
            geocoder can be set at a time. When a default geocoder is already set any calls to
            this method will have no effect. To change the default geocoder you must first call 
            <see cref="M:Telogis.GeoBase.Geocoding.IExternalGeocoders.RemoveAllExternalGeocoders"/>, then set the desired default geocoder and
            any other external geocoders.
            </summary>
            <remarks>External geocoders are used by GeoBase as a fall-back when the GeoBase geocoder 
            does not return any results.</remarks>
            <param name="defaultGeocoder"></param>
        </member>
        <member name="M:Telogis.GeoBase.Geocoding.IExternalGeocoders.SetExternalGeocoderForCountry(Telogis.GeoBase.Geocoding.IExternalGeocoder,Telogis.GeoBase.Country)">
            <summary>
            Use this method to set an external geocoder to provide geocoding services for only one 
            country. Of course you can call this method with multiple countries, but the same
            external geocoder, to use that external geocoder to provide geocoding services for 
            multiple selected countries. Use the <see cref="M:Telogis.GeoBase.Geocoding.IExternalGeocoders.SetDefaultExternalGeocoder(Telogis.GeoBase.Geocoding.IExternalGeocoder)"/> method to
            set an external geocoder to provide geocoding services for all countries.
            </summary>
            <remarks>External geocoders are used by GeoBase as a fall-back when the GeoBase geocoder 
            does not return any results.</remarks>
            <param name="externalGeocoder"></param>
            <param name="country"></param>
        </member>
        <member name="F:Telogis.GeoBase.Geocoding.ExternalGeocoders.m_externalGeocoderCountryMapping">
            <summary>
            Mapping from country to external geocoder.  Must be locked during all accesses.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Geocoding.ExternalGeocoders.Instance">
            <summary>
            Provides the single instance of ExternalGeocoders
            </summary>
        </member>
        <member name="T:Xheo.Licensing.SessionsLimit">
            <summary>
            Enforces a certain number of concurrent sessions. Valid only for web
            components.
            </summary>
            <remarks>
            	The limit applies to all components in the license.
            </remarks>
        </member>
        <member name="M:Xheo.Licensing.SessionsLimit.#ctor">
            <summary>
            Initializes a new instance of the sessionsLimit class.
            </summary>
        </member>
        <member name="M:Xheo.Licensing.SessionsLimit.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the SessionsLimit class.
            </summary>
            <param name="allowed">
            	Max number of sessions allowed
            </param>
            <param name="timeout">
            	Duration of a session in seconds. MIN( timeout, HttpSessionState.Timeout ) 
            	determines the effective timeout.
            </param>
        </member>
        <member name="M:Xheo.Licensing.SessionsLimit.Validate(System.ComponentModel.LicenseContext,System.Type,System.Object)">
            <summary>
            Validates that the license being granted is within the limits enforced by
            this object.
            </summary>
            <param name="context">
            	The LicenseContext passed to <see cref="M:System.ComponentModel.LicenseProvider.GetLicense(System.ComponentModel.LicenseContext,System.Type,System.Object,System.Boolean)"/>.
            </param>
            <param name="type">
            	The Type of the object being licensed.
            </param>
            <param name="instance">
            	The instance of the object being licensed.
            </param>
            <returns>
            	Returns true if the limits are valid, otherwise false.
            </returns>
        </member>
        <member name="M:Xheo.Licensing.SessionsLimit.Granted(System.ComponentModel.LicenseContext,System.Type,System.Object)">
            <summary>
            Summary of Granted.
            </summary>
            <param name="context"></param>
            <param name="type"></param>
            <param name="instance"></param>
        </member>
        <member name="M:Xheo.Licensing.SessionsLimit.LoadFromXml(System.Xml.XmlNode)">
            <summary>
            Loads the contents of a Limit from an XML string.
            </summary>
            <param name="node">
            	The XML string to load from.
            </param>
            <returns>
            	Returns true if the load was successful, otherwise false.
            </returns>
        </member>
        <member name="M:Xheo.Licensing.SessionsLimit.SaveToXml(System.Xml.XmlNode)">
            <summary>
            Saves the contents of the Limit as an XML string.
            </summary>
            <returns>
            	Returns the saved XML.
            </returns>
        </member>
        <member name="M:Xheo.Licensing.SessionsLimit.GetDetailsDescription">
            <summary>
            Overrides <see cref="M:Xheo.Licensing.Limit.GetDetailsDescription"/>.
            </summary>
        </member>
        <member name="P:Xheo.Licensing.SessionsLimit.Allowed">
            <summary>
            Gets or sets the number of allowed sessions.
            </summary>
        </member>
        <member name="P:Xheo.Licensing.SessionsLimit.Timeout">
            <summary>
            Gets or sets the duration of a session in seconds. MIN( timeout, HttpSessionState.Timeout ) 
            determines the effective timeout.
            </summary>
        </member>
        <member name="P:Xheo.Licensing.SessionsLimit.Description">
            <summary>
            Gets the description of the limit.
            </summary>
        </member>
        <member name="P:Xheo.Licensing.SessionsLimit.Name">
            <summary>
            Gets the display name of the limit.
            </summary>
        </member>
        <member name="T:Xheo.Licensing.RegistrationLimit">
            <summary>
            Displays a form where the user can register the license.
            </summary>
        </member>
        <member name="M:Xheo.Licensing.RegistrationLimit.#ctor">
            <summary>
            Initializes a new instance of the RegistrationLimit class.
            </summary>
        </member>
        <member name="M:Xheo.Licensing.RegistrationLimit.Validate(System.ComponentModel.LicenseContext,System.Type,System.Object)">
            <summary>
            Validates that the license being granted is within the limits enforced by
            this object.
            </summary>
            <param name="context">
            	The LicenseContext passed to <see cref="M:System.ComponentModel.LicenseProvider.GetLicense(System.ComponentModel.LicenseContext,System.Type,System.Object,System.Boolean)"/>.
            </param>
            <param name="type">
            	The Type of the object being licensed.
            </param>
            <param name="instance">
            	The instance of the object being licensed.
            </param>
            <returns>
            	Returns true if the limits are valid, otherwise false.
            </returns>
        </member>
        <member name="M:Xheo.Licensing.RegistrationLimit.LoadFromXml(System.Xml.XmlNode)">
            <summary>
            Loads the contents of a Limit from an XML string.
            </summary>
            <param name="node">
            	The XML string to load from.
            </param>
            <returns>
            	Returns true if the load was successful, otherwise false.
            </returns>
        </member>
        <member name="M:Xheo.Licensing.RegistrationLimit.SaveToXml(System.Xml.XmlNode)">
            <summary>
            Saves the contents of the Limit as an XML string.
            </summary>
            <returns>
            	Returns the saved XML.
            </returns>
        </member>
        <member name="M:Xheo.Licensing.RegistrationLimit.GetDetailsDescription">
            <summary>
            Overrides <see cref="M:Xheo.Licensing.Limit.GetDetailsDescription"/>.
            </summary>
        </member>
        <member name="P:Xheo.Licensing.RegistrationLimit.IsMandatory">
            <summary>
            Gets or sets a value that indicates if the registration is mandatory.
            </summary>
        </member>
        <member name="P:Xheo.Licensing.RegistrationLimit.ReminderPeriod">
            <summary>
            Gets or sets the number of days between registration reminders.
            </summary>
        </member>
        <member name="P:Xheo.Licensing.RegistrationLimit.CustomFields">
            <summary>
            Gets a collection of <see cref="T:Xheo.Licensing.CustomRegistrationField"/> fields to
            display on the form.
            </summary>
        </member>
        <member name="P:Xheo.Licensing.RegistrationLimit.FollowUpUrl">
            <summary>
            Gets the URL to open when the registration is complete.
            </summary>
        </member>
        <member name="P:Xheo.Licensing.RegistrationLimit.PrivacyPolicyUrl">
            <summary>
            Gets the URL where privacy polciy information can be read.
            </summary>
        </member>
        <member name="P:Xheo.Licensing.RegistrationLimit.LicenseServerUrl">
            <summary>
            Gets the URL where the license will be registered. 
            </summary>
        </member>
        <member name="P:Xheo.Licensing.RegistrationLimit.Alternates">
            <summary>
            Gets a collection of alternate server URLs to use in case a connection to the primary
            server cannot be established. If the license is read only then a copy of the collection
            is returned and any changes made are lost.
            </summary>
        </member>
        <member name="P:Xheo.Licensing.RegistrationLimit.LogoBitmapResource">
            <summary>
            Gets or sets the assembly qualified name of a resource to display in the Logo Bitmap
            area of the form. Should be 88 x 88. You can also specify a remote JPEG or GIF
            image by using a fully qualified URL.
            </summary>
            <remarks>
            Only URLs beginning with http or https can be used.
            </remarks>
        </member>
        <member name="P:Xheo.Licensing.RegistrationLimit.RequiredFields">
            <summary>
            Gets or sets a comma separated list of required fields.
            </summary>
        </member>
        <member name="P:Xheo.Licensing.RegistrationLimit.ShowDetails">
            <summary>
            Gets or sets a value that indicates if the additional information
            should be shown expanded initially.
            </summary>
        </member>
        <member name="P:Xheo.Licensing.RegistrationLimit.SerialNumberRegex">
            <summary>
            Gets or sets a regular expression to use when validating the serial number. This
            is not used to protect the license, only help the user from entering a badly
            formatted serial number.
            </summary>
        </member>
        <member name="P:Xheo.Licensing.RegistrationLimit.SerialNumberMask">
            <summary>
            Gets or sets an input mask to use when formatting the serial number text box. An
            X is a value placeholder. Ex: XXXX-XXXX-XXXX-XXXX. The special value * indicates
            that any format is valid.
            </summary>
        </member>
        <member name="P:Xheo.Licensing.RegistrationLimit.SerialNumberIsAllCaps">
            <summary>
            Gets or sets a value that indicates whether the serial number entered should be
            converted to all caps automatically.
            </summary>
        </member>
        <member name="P:Xheo.Licensing.RegistrationLimit.Description">
            <summary>
            Gets the description of the limit.
            </summary>
        </member>
        <member name="P:Xheo.Licensing.RegistrationLimit.Name">
            <summary>
            Gets the display name of the limit.
            </summary>
        </member>
        <member name="P:Xheo.Licensing.RegistrationLimit.IsGui">
            <summary>
            Gets a value that indicates if a GUI is displayed to interact with the user.
            </summary>
        </member>
        <member name="P:Xheo.Licensing.RegistrationLimit.IsRemote">
            <summary>
            Gets a value that indicates if this Limit uses remote processes (such as
            WebServices) for enforcement.
            </summary>
        </member>
        <member name="T:Xheo.Licensing.CustomRegistrationField">
            <summary>
            Represents an entry in the <see cref="P:Xheo.Licensing.RegistrationLimit.CustomFields"/> collection.
            </summary>
        </member>
        <member name="M:Xheo.Licensing.CustomRegistrationField.#ctor">
            <summary>
            Initializes a new instance of the CustomRegistrationField class.
            </summary>
        </member>
        <member name="M:Xheo.Licensing.CustomRegistrationField.#ctor(System.String,System.String,Xheo.Licensing.CustomFieldType)">
            <summary>
            Initializes a new instance of the CustomRegistrationField class.
            </summary>
            <param name="displayName">
            	The label or display name for the field. If null uses name.
            </param>
            <param name="name">
            	The field name used when sending data to the license server.
            </param>
            <param name="fieldType">
            	The CustomFieldType to use.
            </param>
        </member>
        <member name="M:Xheo.Licensing.CustomRegistrationField.ToString">
            <summary>
            Overrides the base implementation to return the field name instead.
            </summary>
        </member>
        <member name="P:Xheo.Licensing.CustomRegistrationField.Name">
            <summary>
            Gets or sets the field name of the custom field. When <see cref="P:Xheo.Licensing.CustomRegistrationField.FieldType"/>
            is <see cref="F:Xheo.Licensing.CustomFieldType.Custom"/> this should be the assembly 
            qualified name of a control that implements <see cref="T:Xheo.Licensing.ICustomFormControl"/>.
            </summary>
        </member>
        <member name="P:Xheo.Licensing.CustomRegistrationField.DisplayName">
            <summary>
            Gets or sets the display name of the custom field. When null uses <see cref="P:Xheo.Licensing.CustomRegistrationField.Name"/>.
            </summary>
        </member>
        <member name="P:Xheo.Licensing.CustomRegistrationField.FieldType">
            <summary>
            Gets or sets the type of the custom field.
            </summary>
        </member>
        <member name="T:Xheo.Licensing.CustomRegistrationFieldCollection">
            <summary>
            Implements a strongly typed collection of <see cref="T:Xheo.Licensing.CustomRegistrationField"/>
            entries.
            </summary>
        </member>
        <member name="T:Xheo.Licensing.TransientReadOnlyCollection">
            <summary>
            Implements a transient read only collection. Values can be added, removed
            and	changed until the <see cref="M:Xheo.Licensing.TransientReadOnlyCollection.SetReadOnly"/> method is called thus
            forcing the collection to a read only state.
            </summary>
        </member>
        <member name="M:Xheo.Licensing.TransientReadOnlyCollection.#ctor">
            <summary>
            Initializes a new instance of the TransientReadOnlyCollectionBase class.
            </summary>
        </member>
        <member name="M:Xheo.Licensing.TransientReadOnlyCollection.SetReadOnly">
            <summary>
            Sets the collection to a read only state. This cannot be reversed.
            </summary>
        </member>
        <member name="M:Xheo.Licensing.TransientReadOnlyCollection.OnInsert(System.Int32,System.Object)">
            <summary>
            Overrides the base functionality to ensure the class is read only.
            </summary>
        </member>
        <member name="M:Xheo.Licensing.TransientReadOnlyCollection.OnSet(System.Int32,System.Object,System.Object)">
            <summary>
            Overrides the base functionality to ensure the class is read only.
            </summary>
        </member>
        <member name="M:Xheo.Licensing.TransientReadOnlyCollection.OnRemove(System.Int32,System.Object)">
            <summary>
            Overrides the base functionality to ensure the class is read only.
            </summary>
        </member>
        <member name="M:Xheo.Licensing.TransientReadOnlyCollection.OnClear">
            <summary>
            Overrides the base functionality to ensure the class is read only.
            </summary>
        </member>
        <member name="P:Xheo.Licensing.TransientReadOnlyCollection.IsReadOnly">
            <summary>
            Gets a value indicating if the collection is read only.
            </summary>
        </member>
        <member name="M:Xheo.Licensing.CustomRegistrationFieldCollection.#ctor">
            <summary>
            Initializes a new instance of the CustomRegistrationFieldCollection class.
            </summary>
        </member>
        <member name="M:Xheo.Licensing.CustomRegistrationFieldCollection.Add(Xheo.Licensing.CustomRegistrationField)">
            <summary>
            Adds a new CustomRegistrationField to the collection.
            </summary>
            <param name="customField">
            	The CustomRegistrationField to add.
            	</param>
        </member>
        <member name="M:Xheo.Licensing.CustomRegistrationFieldCollection.Insert(System.Int32,Xheo.Licensing.CustomRegistrationField)">
            <summary>
            Inserts the CustomRegistrationField at the given index.
            </summary>
            <param name="index">
            	The index to insert the CustomRegistrationField.
            	</param>
            	<param name="customField">
            		The CustomRegistrationField to insert.
            		</param>
        </member>
        <member name="M:Xheo.Licensing.CustomRegistrationFieldCollection.Remove(Xheo.Licensing.CustomRegistrationField)">
            <summary>
            Removes the given index from the list.
            </summary>
            <param name="customField">
            	The customField to remove.
            	</param>
        </member>
        <member name="M:Xheo.Licensing.CustomRegistrationFieldCollection.CopyTo(Xheo.Licensing.CustomRegistrationField[],System.Int32)">
            <summary>
            Copies the collection to an array.
            </summary>
            <param name="array">
            	The array to copy to.
            	</param>
            	<param name="index">
            		The index in the array to begin copying.
            		</param>
        </member>
        <member name="M:Xheo.Licensing.CustomRegistrationFieldCollection.IndexOf(Xheo.Licensing.CustomRegistrationField)">
            <summary>
            Gets the index of the given customField.
            </summary>
            <param name="customField">
            	The customField to look for.
            	</param>
            	<returns>
            		Returns the index of the given CustomRegistrationField if found, otherwise -1.
            		</returns>
        </member>
        <member name="M:Xheo.Licensing.CustomRegistrationFieldCollection.Contains(Xheo.Licensing.CustomRegistrationField)">
            <summary>
            Determines if the collection contains the given CustomRegistrationField.
            </summary>
            <param name="customField">
            	The CustomRegistrationField to look for.
            	</param>
            	<returns>
            		Returns true if the CustomRegistrationField is found, otherwise false.
            		</returns>
        </member>
        <member name="P:Xheo.Licensing.CustomRegistrationFieldCollection.Item(System.Int32)">
            <summary>
            Gets or sets a CustomRegistrationField at the given index.
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.GBMarshal.StringToHGlobalAnsi(System.String)">
            <summary>
            Copies the contents of a managed System.String into unmanaged memory, converting into
            ANSI format as it copies.  When memory tracking is enabled, tracks the unmanaged memory
            to make it easier to identify leaks.
            </summary>
            <param name="p">The managed string to be copied.</param>
            <returns>The address, in unmanaged memory, to where the string was copied.  The
            unmanaged memory must be freed with GBMarshal.FreeHGlobal.</returns>
        </member>
        <member name="M:Telogis.GeoBase.GBMarshal.AllocHGlobal(System.Int32)">
            <summary>
            Allocates memory from the unmanaged memory of the process and, when memory tracking is
            enabled, tracks it to make it easier to identify leaks.  Use this method rather than
            calling Marshal.AllocHGlobal directly.
            </summary>
            <param name="size">The number of bytes in memory required.</param>
            <returns>An IntPtr to the newly allocated memory. This memory must be released using
            GBMarshal.FreeHGlobal(IntPtr).</returns>
        </member>
        <member name="M:Telogis.GeoBase.GBMarshal.FreeHGlobal(System.IntPtr)">
            <summary>
            Frees memory previously allocated from the unmanaged memory of the process and, when
            memory tracking is enabled, stops tracking it.  Use this method rather than calling
            Marshal.FreeHGlobal directly.
            </summary>
            <param name="ptr">The handle to the allocated memory.</param>
        </member>
        <member name="M:Telogis.GeoBase.GBMarshal.AllocCoTaskMem(System.Int32)">
            <summary>
            Allocates memory from the COM task memory allocator and, when memory tracking is
            enabled, tracks it to make it easier to identify leaks.  Use this method rather than
            calling Marshal.AllocCoTaskMem directly.
            </summary>
            <param name="size">The number of bytes in memory required.</param>
            <returns>An IntPtr to the newly allocated memory. This memory must be released using
            GBMarshal.FreeCoTaskMem(IntPtr).</returns>
        </member>
        <member name="M:Telogis.GeoBase.GBMarshal.FreeCoTaskMem(System.IntPtr)">
            <summary>
            Frees memory previously allocated from the COM task memory allocator and, when memory
            tracking is enabled, stops tracking it.  Use this method rather than calling 
            Marshal.FreeCoTaskMem directly.
            </summary>
            <param name="ptr">The handle to the allocated memory.</param>
        </member>
        <member name="T:Telogis.GeoBase.GeoBaseUtil">
            <summary>
            Contains a single method to calculate a rectangular bounding box to encompass an array of points.
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.GeoBaseUtil.CalcBoundingBox(Telogis.GeoBase.Rectangle@,Telogis.GeoBase.LatLon[])">
            <summary>
            Creates a rectangular 'bounding box' that encompasses all given <see cref="T:Telogis.GeoBase.LatLon"/>
            points.
            </summary>
            <param name="rect">A <see cref="T:Telogis.GeoBase.Rectangle"/> that will encompass all points.</param>
            <param name="points">An array of <see cref="T:Telogis.GeoBase.LatLon"/>s for which to create the bounding box.</param>
        </member>
        <member name="T:Telogis.GeoBase.Repositories.WithRepository">
            <summary>
            A WithRepository object is used to temporarily set Repository.CurrentThreadRepository
            within a using block.  At the end of the using block, when the WithRepository is disposed,
            Repository.CurrentThreadRepository is returned to its value before the using block.
            </summary>
            <example>
            <code lang="C#">
            Repository usaRepo = new SimpleRepository("USA.gbfs");
            Repository canadaRepo = new SimpleRepository("Canada.gbfs");
            
            Repository.CurrentThreadRepository = usaRepo;
            
            // Perform operations using USA.gbfs
            Debug.Assert(Repository.CurrentThreadRepository == usaRepo);
            
            using (new WithRepository(canadaRepo)) {
            	// Perform operations using Canada.gbfs
                Debug.Assert(Repository.CurrentThreadRepository == canadaRepo);
            }
            
            // Perform operations using USA.gbfs
            Debug.Assert(Repository.CurrentThreadRepository == usaRepo);
            </code>
            </example>
        </member>
        <member name="M:Telogis.GeoBase.Repositories.WithRepository.#ctor(Telogis.GeoBase.Repositories.Repository)">
            <summary>
            Remembers Repository.CurrentThreadRepository and then sets it to the given repository.
            </summary>
            <param name="repo">The repository to assign to
            Repository.CurrentThreadRepository.</param>
        </member>
        <member name="M:Telogis.GeoBase.Repositories.WithRepository.Dispose">
            <summary>
            Reverts Repository.CurrentThreadRepository to its value when the WithRepository was
            created.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Navigation.DynamicZoomer.ZoomState.ZoomModifier">
            <summary>
            This value indicates how much the current zoom will be modified by. A value greater
            than one indicates that the map will zoom out for a more broad view.
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.GeoStream.TileProjection">
            <summary>
            We model the world as a bitmap of m_WorldSizePixels * m_WorldSizePixels
            And use this to translate latlons, we fixup points from the top-left of the map.
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.GeoStream.TileProjection.CreateLocalTransform">
            <summary>
            Create a matrix that describes the the current transform of the map.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Telogis.GeoBase.GeoStream.TileProjection.GetLatLon(System.Drawing.Point)">
            <summary>
            Get the latlon of the given point on the map
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.GeoStream.TileProjection.GetPoint(Telogis.GeoBase.LatLon)">
            <summary>
            Get the x,y of the given latitude and longitude
            </summary>
            <param name="location"></param>
            <returns></returns>
        </member>
        <member name="M:Telogis.GeoBase.GeoStream.TileProjection.GetTileNumber(System.Int32,System.Int32)">
            <summary>
            Get which tile to draw (serverside coordinates)
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.GeoStream.TileProjection.WorldCenterOffset">
            <summary>
            The offset from the true world center.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.GeoStream.JSONRequest.m_requestUncompressedJson">
            <summary>
            If this is set to true then the server will not compress JSON responses, regardless
            of the request's Accept-Encoding HTTP header.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.GeoStream.JSONRequest.m_ClientVersion">
            <summary>
            Version of the client who does this request.
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.GeoStream.JSONRequest.getClientVersion">
            <summary>
            Returns the GeoBase Version.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Telogis.GeoBase.GeoStream.ServerObjectExpiredException">
            <summary>
            Thrown when a GeoStream client attempts to access an object on the server that has expired.
            </summary>
            <remarks>
            <para><b>Related articles</b>: <a href="716a13bd-a586-4062-ad0c-6d48b15b72da.htm">GeoStream</a>.</para>
            </remarks>
        </member>
        <member name="M:Telogis.GeoBase.GeoStream.ServerObjectExpiredException.#ctor">
            <summary>
            An exception to be thrown when the server object requested has expired.
            </summary>
            <remarks><i>Message: "The server object has expired".</i></remarks>
        </member>
        <member name="M:Telogis.GeoBase.GeoStream.ServerObjectExpiredException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            For serialization.
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="T:Telogis.GeoBase.GeoStream.JSONCall">
            <summary>
            Executes JSON-RPC calls to the GeoStream server
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.GeoStream.Authentication.FriendNetwork">
            <summary>
            Maps networks to users to allow auto-authentication
            based on IP address
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.DataSources.IPointFeatureSource">
            <summary>
            A data source used to get the IPointFeatures that are to be clustered.
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.DataSources.IPointFeatureSource.BeginQuery(Telogis.GeoBase.BoundingBox,System.AsyncCallback,System.Object)">
            <summary>
            Begins a query for all features from a data source.
            
            IPointFeatureSource objects are not expected to implement caching.
            
            The caller should not call BeginQuery at a rate more frequent than the refresh rate.
            </summary>
            <returns>An IAsyncResult that will be passed by the caller to EndQuery.</returns>
        </member>
        <member name="M:Telogis.GeoBase.DataSources.IPointFeatureSource.EndQuery(System.IAsyncResult)">
            <summary>
            Ends a query for all features from a data source.
            </summary>
            <param name="asyncResult">The IAsyncResult returned by BeginQuery.</param>
            <returns>The query results.</returns>
        </member>
        <member name="P:Telogis.GeoBase.DataSources.IPointFeatureSource.RefreshRate">
            <summary>
            The amount of time for which items returned by EndQuery are valid for.
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.Navigation.MovementDescription">
            <summary>
            Used to describe different types of <see cref="T:Telogis.GeoBase.Routing.Movement"/>s.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Navigation.MovementDescription.Arrival">
            <summary>
            Describes an arrival at a stop or the final destination.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Navigation.MovementDescription.BearLeft">
            <summary>
            Describes a slight left turn.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Navigation.MovementDescription.BearRight">
            <summary>
            Describes a slight right turn.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Navigation.MovementDescription.ChangeFreeway">
            <summary>
            Describes changing from one freeway/highway/motorway to another.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Navigation.MovementDescription.ChangeLaneLeft">
            <summary>
            Describes a lane change to the left.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Navigation.MovementDescription.ChangeLaneRight">
            <summary>
            Describes a lane change to the right.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Navigation.MovementDescription.Departure">
            <summary>
            Describes a departure from a stop or the start or a route.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Navigation.MovementDescription.EnterFreeway">
            <summary>
            Describes joining a freeway/highway/motorway.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Navigation.MovementDescription.ExitFreeway">
            <summary>
            Describes leaving a freeway/highway/motorway.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Navigation.MovementDescription.RoundAboutLeft">
            <summary>
            Describes a left turn at a roundabout.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Navigation.MovementDescription.RoundAboutRight">
            <summary>
            Describes a right turn at a roundabout.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Navigation.MovementDescription.RoundAboutStraight">
            <summary>
            Descibes continuing straight at a roundabout.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Navigation.MovementDescription.RoundAboutUTurn">
            <summary>
            Describes a U-turn at a roundabout.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Navigation.MovementDescription.SharpLeft">
            <summary>
            Describes a sharp left turn.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Navigation.MovementDescription.SharpRight">
            <summary>
            Describes a sharp right turn.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Navigation.MovementDescription.Straight">
            <summary>
            Describes continuing straight on the road.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Navigation.MovementDescription.TurnLeft">
            <summary>
            Describes a left turn.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Navigation.MovementDescription.TurnRight">
            <summary>
            Decribes a right turn.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Navigation.MovementDescription.UTurn">
            <summary>
            Describes a U-turn.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Navigation.MovementDescription.Unknown">
            <summary>
            Describes an unknown movement.
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.Navigation.MovementCategorizer">
             <summary>
             MovementCategorizer provides a description, in the form of a <see cref="T:Telogis.GeoBase.Navigation.MovementDescription"/>
             or an image showing a schematic of the movement, given a <see cref="T:Telogis.GeoBase.Routing.Movement"/>.
             </summary>
             <example>
             <code lang="C#">
             MovementCategorizer mc = new MovementCategorizer();
             // ^^ creates a new MovementCategorizer with default settings
             
             /// MovementCategorizer mc = new MovementCategorizer(path);
             // ^^ creates a new MovementCategorizer that uses images from the 
             // specified path. Images should be in PNG, BMP, GIF or JPG format
             
             // If a path is specified, the required images with their correct filenames must be present.
             
             // You can obtain schematic information from a Movement, mv, using
             MovementDescription md = mc.GetMovementDescription(mv);
             String filename = mc.GetFilename(mv);
             Image img = mc.GetImage(mv);
             
             </code>
             
             The following working example illustrates the use of 
             <see cref="T:Telogis.GeoBase.Navigation.MovementCategorizer"/>'s 
             <see cref="M:Telogis.GeoBase.Navigation.MovementCategorizer.GetImage(Telogis.GeoBase.Routing.Movement)"/>, 
             <see cref="M:Telogis.GeoBase.Navigation.MovementCategorizer.GetFilename(Telogis.GeoBase.Routing.Movement)"/> 
             and <see cref="M:Telogis.GeoBase.Navigation.MovementCategorizer.GetMovementDescription(Telogis.GeoBase.Routing.Movement)"/> 
             methods.
             <code lang="C#">
             
             // Create a MovementCategorizer with defaults and look for images in the
             // Program Files\Telogis\GeoBase\GeoBaseResources\TurnIcons folder.
             MovementCategorizer mc = new MovementCategorizer();
            
             // Create a MovementCategorizer that points to the specified image folder.
             // This folder must contain all images with their correct file names.
             // MovementCategorizer mc = new MovementCategorizer(@"C:\path_to_folder\TurnIcons");
            
             Route tr = new Route();
             tr.Start = new RouteStop(33.903187, -118.225697);
             tr.AddStopAtEnd(new RouteStop(33.903457, -118.225756));
             tr.End = new RouteStop(33.903178, -118.225835);
            
             Directions myDirections = tr.GetDirections();
            
             foreach (Direction d in myDirections)
                {
                    // Used to build the instructions for display.
                    StringBuilder instruction = new StringBuilder();
            
                    // Use only Movements. Ignore Notes.
                    if (d is Movement)
            
                        {
                            // Retrieve an image in PNG, BMP, GIF or JPEG format 
                            // that represents the movement. For UI use.
                            Image img = mc.GetImage(d as Movement);
            
                            // Retrieve the image file name as text 
                            // eg. 'destination.png' or 'uturn_rhd.png'.
                            String filename = mc.GetFilename(d as Movement);
            
                            // Retrieve a text description of the movement
                            // eg. 'UTurn' or 'SharpLeft'.
                            MovementDescription ddesc = mc.GetMovementDescription(d as Movement);
            
                            // Retrieve the natural language direction as text.
                            String instr = d.Instructions;
            
                            instruction.AppendFormat("Instructions: " + instr + "\n");
                            instruction.AppendFormat("UI image: " + filename + "\n");
                            instruction.AppendFormat("Plain text: " + ddesc + "\n");
                        }
            
                        // Output the generated instruction
                        Console.WriteLine(instruction);
                }
             </code>
             
             </example>
        </member>
        <member name="M:Telogis.GeoBase.Navigation.MovementCategorizer.#ctor">
            <summary>
            Creates a MovementCategorizer that uses the default images. Images should be 
            available in your TurnIcons folder.
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.Navigation.MovementCategorizer.#ctor(System.String)">
             <summary>
             Creates a MovementCategorizer that uses images from a specified folder. The images
             should be in PNG format.
             </summary>
             <param name="imagesPath">The path for the folder that contains the
             images for displaying different movements.</param>
             <remarks><para>The images folder should contain the following images (in png, bmp,
             gif, or jpeg format):</para>
             <list type="table">
             <listheader>
             <term>File</term>
             <description>Represents</description>
             </listheader>
             <item>
             <term>around_round_lhd.png</term>
             <description>Uturn by going around a traffic circle in left-hand traffic.</description>
             </item>
             <item>
             <term>around_round_rhd.png</term>
             <description>Uturn by going around a traffic circle in right-hand traffic.</description>
             </item>
             <item>
             <term>blank.png</term>
             <description>background/blank image.</description>
             </item>
             <item>
             <term>destination.png</term>
             <description>Arrival at destination</description>
             </item>
             <item>
             <term>fwy_change.png</term>
             <description>Change freeways.</description>
             </item>
             <item>
             <term>fwy_enter_lhd.png</term>
             <description>Enter freeway on the left.</description>
             </item>
             <item>
             <term>fwy_enter_rhd.png</term>
             <description>Enter freeway on the right.</description>
             </item>
             <item>
             <term>fwy_exit_lhd.png</term>
             <description>Exit freeway on the left.</description>
             </item>
             <item>
             <term>fwy_exit.rhd.png</term>
             <description>Exit freeway on the right.</description>
             </item>
             <item>
             <term>left.png</term>
             <description>Turn left.</description>
             </item>
             <item>
             <term>left_bear.png</term>
             <description>Bear to the left.</description>
             </item>
             <item>
             <term>left_lane.png</term>
             <description>Use the left lane.</description>
             </item>
             <item>
             <term>left_round_lhd.png</term>
             <description>Turn left at the traffic circle in left-hand traffic.</description>
             </item>
             <item>
             <term>left_round_rhd.png</term>
             <description>Turn left at the traffic circle in right-hand traffic.</description>
             </item>
             <item>
             <term>left_sharp.png</term>
             <description>Take a sharp left</description>
             </item>
             <item>
             <term>right.png</term>
             <description>Turn right.</description>
             </item>
             <item>
             <term>right_bear.png</term>
             <description>Bear to the right.</description>
             </item>
             <item>
             <term>right_lane.png</term>
             <description>Use the right lane.</description>
             </item>
             <item>
             <term>right_round_lhd.png</term>
             <description>Turn right at the traffic circle in left-hand traffic.</description>
             </item>
             <item>
             <term>right_round_rhd.png</term>
             <description>Turn right at the traffic circle in right-hand traffic.</description>
             </item>
             <item>
             <term>right_sharp.png</term>
             <description>Take a sharp right.</description>
             </item>
             <item>
             <term>straight.png</term>
             <description>Go straight ahead.</description>
             </item>
             <item>
             <term>straight_round_lhd.png</term>
             <description>Go straight through the traffic circle in left-hand traffic.</description>
             </item>
             <item>
             <term>straight_round_rhd.png</term>
             <description>Go straight through the traffic circle in right-hand traffic.</description>
             </item>
             <item>
             <term>uturn_lhd.png</term>
             <description>Make a uturn in left-hand traffic (by turning right).</description>
             </item>
             <item>
             <term>uturn_rhd.png</term>
             <description>Make a uturn in right-hand traffic (by turning left).</description>
             </item>
             </list>
            </remarks>
        </member>
        <member name="M:Telogis.GeoBase.Navigation.MovementCategorizer.GetMovementDescription(Telogis.GeoBase.Routing.Movement)">
            <summary>
            Returns a <see cref="T:Telogis.GeoBase.Navigation.MovementDescription"/> for the given 
            <see cref="T:Telogis.GeoBase.Routing.Movement"/>.
            </summary>
            <param name="dir">The <see cref="T:Telogis.GeoBase.Routing.Movement"/> to be described.</param>
        </member>
        <member name="M:Telogis.GeoBase.Navigation.MovementCategorizer.GetMovementDescription(Telogis.GeoBase.Navigation.NavigationEvent)">
            <summary>
            Returns a <see cref="T:Telogis.GeoBase.Navigation.MovementDescription"/> for the given 
            <see cref="T:Telogis.GeoBase.Navigation.NavigationEvent"/>.
            </summary>
            <param name="ev">The <see cref="T:Telogis.GeoBase.Navigation.NavigationEvent"/> to be described.</param>
        </member>
        <member name="M:Telogis.GeoBase.Navigation.MovementCategorizer.GetFilename(Telogis.GeoBase.Routing.Movement)">
            <summary>
            Returns the filename of the schematic image for the given 
            <see cref="T:Telogis.GeoBase.Routing.Movement"/>. If no path was specified when creating the 
            <see cref="T:Telogis.GeoBase.Navigation.MovementCategorizer"/> it returns an empty string.
            </summary>
            <param name="dir">The <see cref="T:Telogis.GeoBase.Routing.Movement"/> to be described.</param>
        </member>
        <member name="M:Telogis.GeoBase.Navigation.MovementCategorizer.GetFilename(Telogis.GeoBase.Navigation.NavigationEvent)">
            <summary>
            Returns the filename of the schematic image for the given 
            <see cref="T:Telogis.GeoBase.Navigation.NavigationEvent"/>.
            </summary>
            <param name="ev">The <see cref="T:Telogis.GeoBase.Navigation.NavigationEvent"/> to be described.</param>
        </member>
        <member name="M:Telogis.GeoBase.Navigation.MovementCategorizer.GetImage(Telogis.GeoBase.Routing.Movement)">
            <summary>
            Returns an image for the given <see cref="T:Telogis.GeoBase.Routing.Movement"/>.
            </summary>
            <param name="dir">The <see cref="T:Telogis.GeoBase.Routing.Movement"/> to be described.</param>
        </member>
        <member name="M:Telogis.GeoBase.Navigation.MovementCategorizer.GetImage(Telogis.GeoBase.Navigation.NavigationEvent)">
            <summary>
            Returns an image for the given <see cref="T:Telogis.GeoBase.Navigation.NavigationEvent"/>.
            </summary>
            <param name="ev">The <see cref="T:Telogis.GeoBase.Navigation.NavigationEvent"/> to be described.</param>
        </member>
        <member name="T:Telogis.GeoBase.CustomTable">
            <summary>
            Describes a table in a custom data file.
            </summary>
            <remarks><para>A table could record, for example, the location, type and ID
            number of a set of power pylons. Also see <see cref="T:Telogis.GeoBase.CustomColumn"/>.</para>
            <para><b>Some table names are predefined and reserved for use by the GeoBase
            engine. These predefined table names are:</b></para>
            <list type="table">
            <listheader><term>Predefined Polygon Query Tables:</term></listheader>
            <item><term>all</term></item>
            <item><term>countries</term></item>
            <item><term>states</term></item>
            <item><term>counties</term></item>
            <item><term>islands</term></item>
            <item><term>cities</term></item>
            <item><term>airports</term></item>
            <item><term>runways</term></item>
            <item><term>cemeteries</term></item>
            <item><term>hospitals</term></item>
            <item><term>industrial</term></item>
            <item><term>major_parks</term></item>
            <item><term>state_parks</term></item>
            <item><term>parks</term></item>
            <item><term>shopping</term></item>
            <item><term>sports</term></item>
            <item><term>universities</term></item>
            <item><term>golf_courses</term></item>
            <item><term>native</term></item>
            <item><term>military</term></item>
            <item><term>buildings</term></item>
            <item><term>oceans</term></item>
            <item><term>bays</term></item>
            <item><term>water</term></item>
            </list>
            <list type="table">
            <listheader><term>Predefined <see cref="T:Telogis.GeoBase.PointFeature">PointFeature</see> Query Tables:</term></listheader>
            <item><term>all</term></item>
            <item><term>small_villages</term></item>
            <item><term>villages</term></item>
            <item><term>large_villages</term></item>
            <item><term>towns</term></item>
            <item><term>large_towns</term></item>
            <item><term>small_cities</term></item>
            <item><term>cities</term></item>
            <item><term>major_cities</term></item>
            </list>
            <list type="table">
            <listheader><term>Predefined <see cref="T:Telogis.GeoBase.Line"/> Query Tables:</term></listheader>
            <item><term>all</term></item>
            <item><term>railways</term></item>
            <item><term>rivers</term></item>
            <item><term>canals</term></item>
            </list>
            <para><b>Related articles</b>: <a href="154a60d1-c146-49bc-a913-3e4c067ae8c6.htm">Data Query Concept</a>.</para>
            </remarks>
            <example><code lang="C#">
            CustomTable NWPylons = new CustomTable();
            NWPylons.Name = "North-Western Power Pylons"; // user-defined label
            NWPylons.Type = "Point"; // the type of data: one of "Line", "Polygon", "Point". Case-sensitive
            NWPylons.Columns[0] = pylonType; // an object of type CustomColumn
            NWPylons.Columns[1] = dateLastInspected; // another CustomColumn
            </code></example>
        </member>
        <member name="F:Telogis.GeoBase.CustomTable.Name">
            <summary>
            The user-defined name of the table. Some table names are predefined and should
            be avoided - see <see cref="T:Telogis.GeoBase.CustomTable"/>.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.CustomTable.Type">
            <summary>
            A string describing the datatype of the table. One of: "Line, Polygon, Point" (case-sensitive).
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.CustomTable.Columns">
            <summary>
            An array of the columns in this table.
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.CustomIndex">
            <summary>
            Describes an index in a custom data file.
            </summary>
            <remarks>
            <para><b>Related articles</b>: <a href="154a60d1-c146-49bc-a913-3e4c067ae8c6.htm">Data Query Concept</a>.</para>
            </remarks>
            <example><code lang="C#">
               CustomIndex MyIndex = new CustomIndex();
               MyIndex.Name = "North-West Power Pylons"; // A user-defined index name.
               MyIndex.TableName = "InspectionTable"; // A user-defined table name.
               MyIndex.Type = "Point"; // The type of data to index. Same as the type of column it is indexing (the custom column). 
               MyIndex.Column = "PylonLocation"; // A user-defined custom column name.
            </code></example>
        </member>
        <member name="F:Telogis.GeoBase.CustomIndex.Name">
            <summary>
            The user-defined name of the index. 
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.CustomIndex.TableName">
            <summary>
            The user-defined name of the table.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.CustomIndex.Type">
            <summary>
            The type of data to index. 
            </summary>
            <remarks>
            The type specified should be the same as that used for the column being indexed (the custom column).
            </remarks>
        </member>
        <member name="F:Telogis.GeoBase.CustomIndex.Column">
            <summary>
            The user-defined custom column's name.
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.CustomColumn">
            <summary>
            Describes a column in a custom data file.
            </summary>
            <remarks>A column could represent, for example, the location of a set
            of power pylons. Also see <see cref="T:Telogis.GeoBase.CustomTable"/>.
            <para><b>Related articles</b>: <a href="154a60d1-c146-49bc-a913-3e4c067ae8c6.htm">Data Query Concept</a>.</para>
            </remarks>
            <example><code lang="C#">
                CustomColumn pylonType = new CustomColumn();
                pylonType.Name = "Type of pylon"; // user-defined label
                pylonType.Type = "String";
                // ^^ the type of data in the column, one of:
                // "String", "DateTime", "Bool", "Int", "Float", "Double"
            </code></example>
        </member>
        <member name="F:Telogis.GeoBase.CustomColumn.Name">
            <summary>
            The user-defined name of the column.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.CustomColumn.Type">
            <summary>
            A string describing the datatype of the column.
            <para>A datatype identifier, one of: String, DateTime, Bool, Int, Float, Double.
            All identifier strings are case-sensitive.</para>
            </summary>
            <example><code lang="C#">
            CustomColumn myColumn = new CustomColumn();
            myColumn.Type = "Bool"; // case-sensitive!
            </code>
            </example>
        </member>
        <member name="M:Telogis.GeoBase.Authentication.AuthEncoder.EncodeAuth(Telogis.GeoBase.Authentication.Auth)">
            <summary>
            This generates an actual Auth Token  from the information in the Auth structure
            </summary>
            <param name="auth"></param>
            <returns></returns>
        </member>
        <member name="T:Telogis.GeoBase.Traffic.TrafficRouting">
            <summary>
            This class may be used to route through <see cref="P:Telogis.GeoBase.Traffic.TrafficRouting.Traffic">Traffic</see>.
            </summary>
            <remarks>
            <para>The class is used to route through <see cref="P:Telogis.GeoBase.Traffic.TrafficRouting.Traffic"/> using <see cref="T:Telogis.GeoBase.Routing.Directions"/>. The routing strategy can be configured using 
            <see cref="M:Telogis.GeoBase.Traffic.TrafficRouting.setUpRouteStrategy(Telogis.GeoBase.Routing.RoutingStrategy)"/>.</para>
            <para>The code below demonstartes how to use the TrafficRouting methods: <see cref="M:Telogis.GeoBase.Traffic.TrafficRouting.RecalculateRouteTime(Telogis.GeoBase.Routing.Directions,System.DateTime)"/> 
            and <see cref="M:Telogis.GeoBase.Traffic.TrafficRouting.setUpRouteStrategy(Telogis.GeoBase.Routing.RoutingStrategy)"/></para>
            <para><b>Related articles</b>: <a href="60998f81-efa9-4743-afcc-6e6f943a4fa1.htm">Routing with Traffic</a>.</para>
            </remarks>
            <example>
            <code lang="C#">
            private void TrafficRoute(LatLon A, LatLon B, String dataFile) {
            	// 
            	// create a new Route from A to B
            	// 
            	Route myRoute = new Route(new RouteStop(A), new RouteStop(B));
            
            	// 
            	// create a Traffic from our XML data
            	// 
            	XmlReader myXmlReader = XmlReader.Create(dataFile);
            	ITrafficSource[] srcs = new ITrafficSource[] { new InrixRealTimeTrafficSource(myXmlReader) };
            	Traffic myTraffic = new Traffic(srcs);
            
            	// 
            	// set up a TrafficRoute and configure the strategy from myRoute
            	// 
            	TrafficRouting myTrafficRouting = new TrafficRouting(myTraffic);
            	myTrafficRouting.setUpRouteStrategy(myRoute.Strategy);
            
            	// 
            	// set the start time for the journey. This does not have to
            	// be the current time.
            	// 
            	myRoute.CurrentTime = DateTime.Now;
            
            	// 
            	// get Directions between A and B, accounting for traffic conditions
            	// 
            	Directions myDirections = myRoute.GetDirections();
            
            	// 
            	// find the end time for the journey, given that it starts at startTime
            	// 
            	DateTime startTime = DateTime.Now + TimeSpan.FromHours(1);
            	DateTime endTime = myTrafficRouting.RecalculateRouteTime(myDirections, startTime);
            }
            </code>
            </example>
        </member>
        <member name="F:Telogis.GeoBase.Traffic.TrafficRouting.traffic">
            <summary>
            The <see cref="P:Telogis.GeoBase.Traffic.TrafficRouting.Traffic">Traffic</see> through which we are routing.
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.Traffic.TrafficRouting.#ctor(Telogis.GeoBase.Traffic.Traffic)">
            <summary>
            Creates a new <b>TrafficRouting</b> from the given <see cref="P:Telogis.GeoBase.Traffic.TrafficRouting.Traffic">Traffic</see>
            and <b>time</b> (as a DateTime).
            </summary>
            <param name="traffic">The <see cref="P:Telogis.GeoBase.Traffic.TrafficRouting.Traffic">Traffic</see> we will be routing through</param>
        </member>
        <member name="M:Telogis.GeoBase.Traffic.TrafficRouting.RecalculateRouteTime(Telogis.GeoBase.Routing.Directions,System.DateTime)">
            <summary>
            Recalculate (by accounting for traffic congestion) the time required to travel a given
            route (specified as <see cref="T:Telogis.GeoBase.Routing.Directions">Directions</see>) starting
            at a given time.
            </summary>
            <param name="dir">The route to travel. <see cref="T:Telogis.GeoBase.Routing.Directions"/></param>
            <param name="startTime">The time at which the journey is to start. <see cref="T:System.DateTime"/></param>
            <returns>The calculated time at which the journey will end. The chronological length of the journey
            may be determined from the difference between the return value and the given <b>startTime</b> parameter.
            </returns>
        </member>
        <member name="M:Telogis.GeoBase.Traffic.TrafficRouting.RecalculateRouteTime(Telogis.GeoBase.Routing.Directions,Telogis.GeoBase.LatLon,System.DateTime)">
            <summary>
            Recalculate (by accounting for traffic congestion) the time required to complete a given
            route (specified as <see cref="T:Telogis.GeoBase.Routing.Directions">Directions</see>) starting
            at a given time and given that progress has already been made to a certain point.
            </summary>
            <param name="dir">The route to travel. <see cref="T:Telogis.GeoBase.Routing.Directions"/></param>
            <param name="curPos">The location along the route at which the journey begins.</param>
            <param name="startTime">The time at which the journey is to start. <see cref="T:System.DateTime"/></param>
            <returns>The calculated time at which the journey will end. The chronological length of the journey
            may be determined from the difference between the return value and the given <b>startTime</b> parameter.
            </returns>
        </member>
        <member name="M:Telogis.GeoBase.Traffic.TrafficRouting.setUpRouteStrategy(Telogis.GeoBase.Routing.RoutingStrategy)">
            <summary>
            Configures a RoutingStrategy to route in this <see cref="P:Telogis.GeoBase.Traffic.TrafficRouting.Traffic">Traffic</see>.
            </summary>
            <param name="strat">The <see cref="T:Telogis.GeoBase.Routing.RoutingStrategy"/> to configure.</param>
        </member>
        <member name="M:Telogis.GeoBase.Traffic.TrafficRouting.RemoveTrafficFromRouteStrategy(Telogis.GeoBase.Routing.RoutingStrategy)">
            <summary>
            Configures a RoutingStrategy to route without traffic information.
            </summary>
            <param name="strat">The <see cref="T:Telogis.GeoBase.Routing.RoutingStrategy"/> to configure.</param>
        </member>
        <member name="P:Telogis.GeoBase.Traffic.TrafficRouting.Traffic">
            <summary>
            The current <see cref="P:Telogis.GeoBase.Traffic.TrafficRouting.Traffic">Traffic</see> through which we are routing.
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.Routing.TollwayBeginsNote">
            <summary>
            A Note informing that the tollway begins.
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.Routing.TollwayEndsNote">
            <summary>
            A Note informing that the tollway ends.
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.Routing.RouteHighlightData.#ctor">
            <summary>
            Parameterless constructor required for deserialization.
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.Routing.RouteHighlightData.#cctor">
            <summary>
            Static constructor, for intializing static fields.
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.Routing.RouteHighlightData.#ctor(System.String,Telogis.GeoBase.Routing.RoutingStrategy)">
            <summary>
            Route highlight data that will be requested from the supplied URL in CSV format.
            </summary>
            <param name="DataUrl">URL that GeoStream will request the data from.</param>
            <param name="Strategy">Strategy for the route.</param>
        </member>
        <member name="M:Telogis.GeoBase.Routing.RouteHighlightData.#ctor(Telogis.GeoBase.Routing.RemoteRoute)">
            <summary>
            Route highlight data that is taken from the supplied RemoteRoute.
            </summary>
            <param name="rt">The route to take the highlight data from.</param>
        </member>
        <member name="M:Telogis.GeoBase.Routing.RouteHighlightData.GetRouteData(Telogis.GeoBase.Diagnostics.ILogger,System.Guid)">
            <summary>
            Gets the data for a route highlight - this may involve an HTTP request.
            </summary>
            <param name="logger">The Logger to write request information to.</param>
            <param name="requestId">The id of the request getting route data.</param>
            <returns>Route that has been set up with the data.</returns>
        </member>
        <member name="M:Telogis.GeoBase.Routing.RouteHighlightData.AddCSVDataItem``1(System.Collections.Generic.Dictionary{System.String,Telogis.GeoBase.CSVDataItem{``0}},Telogis.GeoBase.CSVDataItem{``0})">
            <summary>
            Adds a data item to a dictionary of data items.
            </summary>
            <typeparam name="T">Type that the data item will operate on.
            </typeparam>
            <param name="dictionary">Dictionary to add the item to.</param>
            <param name="item">The item to add.</param>
        </member>
        <member name="T:Telogis.GeoBase.Routing.RouteHighlightData.StartTimeDataItem">
            <summary>
            StartTime
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.CSVDataItem`1">
            <summary>
            Item that sets an appropriate data field based on a value in a CSV
            file.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:Telogis.GeoBase.Routing.RouteHighlightData.LatDataItem">
            <summary>
            Lat
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.Routing.RouteHighlightData.LonDataItem">
            <summary>
            Lon
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.Routing.RouteHighlightData.TimeSincePreviousStopDataItem">
            <summary>
            TimeSincePreviousStop
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.Routing.RouteHighlightData.SpeedDataItem">
            <summary>
            Speed
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.Routing.RouteHighlightData.HeadingDataItem">
            <summary>
            Heading
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.Routing.RouteHighlightData.IgnitionOnDataItem">
            <summary>
            IgnitionOn
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.Routing.LinkEdit.LinkEdit">
            <summary>
            Represents a link edit (a customization of one or more street links to affect routing).
            A link edit may affect more than one link.  For example, one created using a LatLonSelection 
            without a heading, or one created using a PolygonSelection.
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.Routing.LinkEdit.LinkEdit.#ctor(Telogis.GeoBase.Transactional.Table,Telogis.GeoBase.Transactional.Record)">
            <summary>
            Create a link with a table and the record it belongs to
            </summary>
            <param name="table">The link edit database table.</param>
            <param name="record">The record in the table that describes the link edit.</param>
        </member>
        <member name="M:Telogis.GeoBase.Routing.LinkEdit.LinkEdit.#ctor(Telogis.GeoBase.Transactional.Table,Telogis.GeoBase.Transactional.Record,System.Int32,Telogis.GeoBase.Routing.LinkEdit.ILinkEditSelection,System.Int32,Telogis.GeoBase.SpeedUnit)">
            <summary>
            Create a link from its base information (priority, selection, speed and unit) and the record it belongs to
            </summary>
            <param name="table">The link edit database table</param>
            <param name="record">The record in the table that describes the link edit.</param>
            <param name="priority">The priority of the link edit. Link edits with larger priority values are
            applied in preference to link edits for the same street link with smaller priorities.</param>
            <param name="selection">The class that determines which street links the edit applies to.</param>
            <param name="speed">The speed limit assigned to the link edit.</param>
            <param name="unit">The units to use when interpreting speed.</param>
        </member>
        <member name="M:Telogis.GeoBase.Routing.LinkEdit.LinkEdit.SetSpeed(System.Int32,Telogis.GeoBase.SpeedUnit)">
            <summary>
            Sets the speed that will be applied to the links affected by this edit.
            </summary>
            <remarks>
            When applied, speeds will be converted into miles per hour and rounded down to the
            largest integer value that is no larger than the specified speed.  A negative speed
            can be applied, and indicates that the original speed from strategy's
            <see cref="T:Telogis.GeoBase.Routing.RoutingProfile">RoutingProfile</see> will be
            used.  The maximum speed that can be specified is 254mph.
            </remarks>
            <param name="speed">The speed to apply.</param>
            <param name="unit">The units for speed.</param>
        </member>
        <member name="M:Telogis.GeoBase.Routing.LinkEdit.LinkEdit.GetSpeed(Telogis.GeoBase.SpeedUnit)">
            <summary>
            Gets the speed that will be applied to the links affected by this edit.
            </summary>
            <remarks>
            A negative speed can be returned, and indicates that the original speed from strategy's
            <see cref="T:Telogis.GeoBase.Routing.RoutingProfile">RoutingProfile</see> will be
            used.
            </remarks>
            <param name="unit">The units in which to return the result.</param>
            <returns>The speed that will be applied.</returns>
        </member>
        <member name="P:Telogis.GeoBase.Routing.LinkEdit.LinkEdit.Priority">
            <summary>
            Determines the link edit's priority.  Edits with a larger Priority value are applied
            in preference to those with a smaller Priority value.  If two edits have the same
            Priority value then the behavior is undefined.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Routing.LinkEdit.LinkEdit.Selection">
            <summary>
            The ILinkEditSelection that selects the links that will be affected by this edit.
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.PoiAsyncResult">
            <summary>
            Provides properties to query the state of an asynchronous POI search
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.PoiAsyncResult.AsyncState">
            <summary>
            Gets a user-defined object that qualifies or contains information about the asynchronous operation.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.PoiAsyncResult.AsyncWaitHandle">
            <summary>
            Gets a System.Threading.WaitHandle that is used to wait for the asynchronous operation to complete.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.PoiAsyncResult.CompletedSynchronously">
            <summary>
            Gets a value that indicates whether the asynchronous operation completed synchronously.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.PoiAsyncResult.IsCompleted">
            <summary>
            Gets a value that indicates whether the asynchronous operation has completed. True if the operation is complete.
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.Register.Register">
            <summary>
            Preregister.
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.Register.Register.#ctor">
            <summary>
            PreRegister constructor. Initializes component.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Register.Register.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.Register.Register.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Telogis.GeoBase.Register.Register.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.MapStyle">
            <summary>
            A map style is a compiled representation of a Chameleon script. For more information
            on writing Chameleon scripts, see the Chameleon section of the User's Guide.
            </summary>
            <remarks>
            <para><b>Related articles</b>: <a href="a328c909-d878-4c34-a6f4-d222e4d2bcf0.htm">Chameleon Custom Map Styles</a>.</para>
            </remarks>
            <example>
            <para>
            The code example below uses the Create(String) method to instantiate a MapStyle
            object. This method will return null if any errors occur. Overloads of the Create() 
            method, such as <see cref="M:Telogis.GeoBase.MapStyle.Create(System.String,System.Collections.ArrayList@,System.Boolean)"/> 
            allow the compile errors (if any) to be inspected.
            </para>
            <code lang="C#">
            // load a custom MapStyle from disk - this is a plain-text file, with
            // syntax described in the Chameleon section of the Telogis GeoBase User's Guide.
            MapStyle myStyle = MapStyle.Create(@"C:\some_directory_path\myStyle.cam");
            	
            if (myStyle != null) {
            
            	// apply the MapStyle to our MapCtrl
            	myMapCtrl.Style = myStyle;
            
            } else {
            
            	// handle error
            
            }
            </code>
            </example>
        </member>
        <member name="M:Telogis.GeoBase.MapStyle.HasParameter(System.String)">
            <summary>
            Determines if a specified parameter exists. The parameter will be specified in the Chameleon .CAM file
            using the <i>PARAMETER %param = 1</i> syntax.
            </summary>
            <param name="name">The parameter to check for.</param>
            <returns><i>True</i> if the parameter exists, <i>false</i> otherwise.</returns>
            <example>
            <code lang="C#"></code>
            MapStyle style = MapStyle.Create("my_style_file.cam");
            
            if (!style.HasParameterValue("my_param_name")) {
                throw MyException("parameter my_param_name is missing from my_style_file.cam");
            }
            </example>
        </member>
        <member name="M:Telogis.GeoBase.MapStyle.SetTemplateVariable(System.String,System.Object)">
            <summary>
            Assign a value to a named template variable to the MapStyle.
            </summary>
            <param name="name">The name of the template variable.</param>
            <param name="value">The value to assign to the template variable.</param>
        </member>
        <member name="M:Telogis.GeoBase.MapStyle.GetTemplateVariable(System.String)">
            <summary>
            Retrieve the value of a named template variable.
            </summary>
            <param name="name">The name of the template variable.</param>
            <returns>The value of the template variable.</returns>
        </member>
        <member name="M:Telogis.GeoBase.MapStyle.GetParameterValue(System.String)">
            <summary>
            Gets the value of the specified parameter. The parameter will be set in the Chameleon .CAM file
            using the <i>PARAMETER %param = 1</i> syntax.
            </summary>
            <param name="name">The parameter to get the value of.</param>
            <returns>The parameter value, or 0 if no such parameter exists.</returns>
            <example>
            <code lang="C#">
            MapStyle style = MapStyle.Create("my_style_file.cam");
            float p = style.GetParameterValue("my_param_name");
            </code>
            </example>
        </member>
        <member name="M:Telogis.GeoBase.MapStyle.ClearParameter(System.String)">
            <summary>
            Clear the parameter to the Unset state.
            </summary>
            <example>
            <code lang="C#">
            MapStyle style = MapStyle.Create("my_style.cam");
            float p = style.GetParameterValue("param"); // p = 2
            
            style.SetParameter("param", 1);
            p = style.GetParameterValue("param"); // p = 1
            
            style.ClearParameter("param");
            p = style.GetParameterValue("param"); // p = 2
            </code>
            </example>
            <param name="name">Name of the parameter to clear.</param>
        </member>
        <member name="M:Telogis.GeoBase.MapStyle.GetPropertyNames">
            <summary>
            Get names of available properties.
            </summary>
            <example>
            <code lang="C#">
            // Properties are set in the Chameleon (.CAM) file as follows:
            PROPERTY copyright = "Telogis, Copyright __YEAR__" 
            </code>
            </example>
            <returns>An array of property names for this MapStyle.</returns>
        </member>
        <member name="M:Telogis.GeoBase.MapStyle.GetProperty(System.String)">
            <summary>
            Gets a Property value by name.
            </summary>
            <example>
            <code lang="C#">
            // in the Chameleon (.CAM) file:
            // -----------------------------
            PROPERTY developer_name = "Joe Bloggs" 
            
            // in the C# usercode:
            // -----------------------------
            MapStyle style = MapStyle.Create("my_style.cam");
            string dev_name = style.GetProperty("developer_name");
            
            Console.WriteLine("This custom map style created by " + dev_name);
            </code>
            </example>
            <param name="name">The name of the property to get.</param>
            <returns>The requested property value.</returns>
        </member>
        <member name="M:Telogis.GeoBase.MapStyle.CreateFromBinary(System.IO.Stream)">
            <summary>
            Creates a MapStyle from a file saved in a binary format.
            </summary>
            <param name="s">The stream the style will be read from.</param>
            <returns>The MapStyle defined in the file.</returns>
            <remarks>Binary cam files have the extension .bcm</remarks>
        </member>
        <member name="M:Telogis.GeoBase.MapStyle.SaveToBinary(System.IO.Stream)">
            <summary>
            Save the current style in a binary format.
            </summary>
            <param name="s">The stream the style will be written to.</param>
            <remarks>Binary cam files have the extension .bcm</remarks>
        </member>
        <member name="M:Telogis.GeoBase.MapStyle.SetParameter(System.String,System.Boolean)">
            <summary>
            Set a parameter to a boolean value.
            </summary>
            <remarks>
            In the Chameleon language, boolean <i>false</i> equates to a value of zero. 
            Any other value is considered to be <i>true</i>.
            If the given parameter does not exist, no action will be taken.
            </remarks>
            <param name="name">The name of the parameter to set.</param>
            <param name="val">The value the parameter will be set to.</param>
        </member>
        <member name="M:Telogis.GeoBase.MapStyle.SetParameter(System.String,System.Single)">
            <summary>
            Set a parameter to a (positive) float value. Negative values are not allowed.
            If the given parameter does not exist, no action will be taken.
            </summary>
            <exception>An exception will be thrown if an attempt is made to set a parameter to a negative value.</exception>
            <param name="name">The name of the parameter to set.</param>
            <param name="val">The value the parameter will be set to.</param>
        </member>
        <member name="M:Telogis.GeoBase.MapStyle.GetResourceStyle(System.String)">
            <summary>
            Load a MapStyle from a specified resource.
            </summary>
            <param name="mdlName">The resource file to load.</param>
            <returns>The MapStyle loaded from the specified resource.</returns>
        </member>
        <member name="M:Telogis.GeoBase.MapStyle.GetResourceStyle(System.String,System.Boolean)">
            <summary>
            Load a MapStyle from a resource.
            </summary>
            <param name="mdlName">The resource file to load.</param>
            <param name="Encrypted">Whether the resource file is encrypted.</param>
            <returns>The map style loaded from the specified resource file.</returns>
        </member>
        <member name="M:Telogis.GeoBase.MapStyle.GetResourceStyle(System.String,System.Collections.ArrayList@,System.Boolean)">
            <summary>
            Load a MapStyle from a resource and return any Exceptions that occur.
            </summary>
            <param name="mdlName">The resource file to load.</param>
            <param name="errors">Outputs an ArrayList of error strings if any occur.</param>
            <param name="Debug">Indicates whether to turn on debug information.</param>
            <returns>The map style that was loaded from the specified resource.</returns>
        </member>
        <member name="M:Telogis.GeoBase.MapStyle.Create(System.IO.Stream)">
            <summary>
            Create a MapStyle from the given stream.
            </summary>
            <param name="Chameleon">A stream containing the Chameleon script.</param>
            <returns>A new MapStyle, or null if there is a compile error.</returns>
        </member>
        <member name="M:Telogis.GeoBase.MapStyle.Create(System.String,System.Collections.ArrayList@,System.Boolean)">
            <summary>
            Create a style from a file.
            </summary>
            <param name="filename">The file from which to load the Chameleon script.</param>
            <param name="Errors">Outputs an ArrayList of error strings if any occur.</param>
            <param name="DebugInfo">Determines whether to switch on debug information.</param>
            <returns>A new MapStyle object, or null on error.</returns>
        </member>
        <member name="M:Telogis.GeoBase.MapStyle.Create(System.String,System.Collections.ArrayList@,System.Collections.ArrayList@,System.Boolean)">
            <summary>
            Create a style from a file.
            </summary>
            <param name="filename">The file from which to load the Chameleon script.</param>
            <param name="Errors">Outputs an ArrayList of error strings if any occur.</param>
            <param name="warnings">Outputs an ArrayList of warning messages if any occur.</param>
            <param name="DebugInfo">Determines whether to switch on debug information.</param>
            <returns>A new MapStyle object, or null on error.</returns>
        </member>
        <member name="M:Telogis.GeoBase.MapStyle.CreateFromEncrypted(System.IO.Stream,System.Collections.ArrayList@,System.Boolean)">
            <summary>
            Create a MapStyle from the given stream. The stream must contain
            an encrypted Chameleon script.
            </summary>
            <param name="Chameleon">A stream containing the encrypted Chameleon script to use.</param>
            <param name="Errors">Array of compilation errors.</param>
            <param name="DebugInfo">True to include debug information, false otherwise.</param>
            <returns>A new MapStyle object, or null on error.</returns>
        </member>
        <member name="M:Telogis.GeoBase.MapStyle.Create(System.String)">
            <summary>
            Create a MapStyle from the given file.
            </summary>
            <param name="filename">The file from which to load the Chameleon script.</param>
            <returns>A new MapStyle object, or null on error.</returns>
        </member>
        <member name="M:Telogis.GeoBase.MapStyle.Create(System.IO.Stream,System.Collections.ArrayList@,System.Boolean)">
            <summary>
            Create a MapStyle from the Chameleon code in the given stream.
            </summary>
            <param name="Chameleon">The stream containing the Chameleon code.</param>
            <param name="Errors">Array of compilation errors.</param>
            <param name="DebugInfo">True to include debug info.</param>
            <returns>A new MapStyle object, or null on error.</returns>
        </member>
        <member name="M:Telogis.GeoBase.MapStyle.Create(System.IO.Stream,System.Collections.ArrayList@,System.Collections.ArrayList@,System.Boolean)">
            <summary>
            Create a MapStyle from the Chameleon code in the given stream.
            </summary>
            <param name="Chameleon">The stream containing the Chameleon code.</param>
            <param name="Errors">Array of compilation errors.</param>
            <param name="Warnings">Array of compilation warnings.</param>
            <param name="DebugInfo">True to include debug info.</param>
            <returns>A new MapStyle object, or null on error.</returns>
        </member>
        <member name="P:Telogis.GeoBase.MapStyle.Signed">
            <summary>
            Gets whether this map style has been signed by Telogis
            to allow use without a Chameleon license.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.MapStyle.HighestAuxiliaryLayer">
            <summary>
            The highest number of a auxiliary layer sepcified in the cam file.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.MapStyle.ParameterNames">
            <summary>
            Get a list of settable parameters. This list will contain all the parameters defined in the loaded Chameleon
            script (.CAM) file.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.MapStyle.Name">
            <summary>
            The user-assigned name of this MapStyle (for convenience purposes).
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.MapStyle.Description">
            <summary>
            The user-assigned description of this MapStyle (for convenience purposes).
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.MapStyle.DefaultStyle">
            <summary>
            Return a new instance of the default MapStyle.
            </summary>
        </member>
        <member name="T:Internal.StaticResourceProvider">
            <summary>
            Implements static methods for retrieving static language resource from
            an assembly and supporting files.
            </summary>
            <remarks>
            	For the provider to locate resources, the default namespace must be
            	the same as the assembly name. All resources should be stored in a 
            	Resources namespace (folder).
            </remarks>
        </member>
        <member name="M:Internal.StaticResourceProvider.#ctor(System.String)">
            <summary>
            Initializes a new instance of the StaticResourceProvider class.
            </summary>
        </member>
        <member name="M:Internal.StaticResourceProvider.MakeProviderForAssembly(System.String)">
            <summary>
            Gets a <see cref="T:Internal.StaticResourceProvider"/> for the given assembly.
            </summary>
            <param name="hostAssembly">
            	The assemlby to get the resources for.
            </param>
            <returns>
            	Returns a new StaticResourceProvider.
            </returns>
        </member>
        <member name="M:Internal.StaticResourceProvider.MakeProviderForAssembly(System.Reflection.Assembly)">
            <summary>
            Gets a <see cref="T:Internal.StaticResourceProvider"/> for the given assembly.
            </summary>
            <param name="hostAssembly">
            	The assemlby to get the resources for.
            </param>
            <returns>
            	Returns a new StaticResourceProvider.
            </returns>
        </member>
        <member name="M:Internal.StaticResourceProvider.LocalizeMenu(System.Windows.Forms.Menu,System.Boolean,System.Globalization.CultureInfo)">
            <summary>
            Localizes a menu resource.
            </summary>
            <param name="menu">
            	The menu to localize.
            </param>
            <param name="inherit">
            	Indicates if this provider will inherit resources form assemblies higher
            	in the calling chain.
            </param>
            <param name="culture">
            	The culture to load the resource for. If null uses the current UI culture.
            </param>
            <remarks>
            	LocalizeMenu looks through each of the menu items and attempts to localize
            	the name. The menu name must be prefixed with the pound sign (#) for it
            	to be localized.
            </remarks>
        </member>
        <member name="M:Internal.StaticResourceProvider.LocalizeControl(System.Windows.Forms.Control,System.Boolean,System.Globalization.CultureInfo)">
            <summary>
            Localizes a windows form control.
            </summary>
            <param name="control">
            	The control to localize.
            </param>
            <param name="inherit">
            	Indicates if this provider will inherit resources form assemblies higher
            	in the calling chain.
            </param>
            <param name="culture">
            	The culture to load the resource for. If null uses the current UI culture.
            </param>
        </member>
        <member name="M:Internal.StaticResourceProvider.LocalizeControl(System.Windows.Forms.Control)">
            <summary>
            Localizes a windows form control.
            </summary>
            <param name="control">
            	The control to localize.
            </param>
        </member>
        <member name="M:Internal.StaticResourceProvider.LocalizeObject(System.Object,System.Boolean,System.Globalization.CultureInfo)">
            <summary>
            	Localizes an object. All public string properties will be checked.
            </summary>
            <param name="obj">
            	The object to localize.
            </param>
            <param name="inherit">
            	Indicates if this provider will inherit resources form assemblies higher
            	in the calling chain.
            </param>
            <param name="culture">
            	The culture to load the resource for. If null uses the current UI culture.
            </param>
        </member>
        <member name="M:Internal.StaticResourceProvider.GetString(System.String,System.Boolean,System.Boolean,System.Globalization.CultureInfo)">
            <summary>
            Gets a resource string with the given resource name.
            </summary>
            <param name="resourceName">
            	Name of the resource that provides the text for the message.
            </param>
            <param name="throwOnError">
            	Indicates if an exception is thrown if the resource is not found. When
            	false and the resource is not found, the resource name will be returned
            	instead.
            </param>
            <param name="inherit">
            	Indicates if this provider will inherit resources form assemblies higher
            	in the calling chain.
            </param>
            <param name="culture">
            	The culture to load the resource for. If null uses the current UI culture.
            </param>
            <returns>
            	Returns the string if found.
            </returns>
            <exception cref="T:System.Resources.MissingManifestResourceException">
            	If the resource does not exist and throwOnError is true.
            </exception>
        </member>
        <member name="M:Internal.StaticResourceProvider.GetString(System.String,System.Boolean,System.Boolean)">
            <summary>
            Gets a resource string with the given resource name.
            </summary>
            <param name="resourceName">
            	Name of the resource that provides the text for the message.
            </param>
            <param name="throwOnError">
            	Indicates if an exception is thrown if the resource is not found. When
            	false and the resource is not found, the resource name will be returned
            	instead.
            </param>
            <param name="inherit">
            	Indicates if this provider will inherit resources form assemblies higher
            	in the calling chain.
            </param>
            <returns>
            	Returns the string if found otherwise returns resourceName if throwOnError is false.
            </returns>
            <exception cref="T:System.Resources.MissingManifestResourceException">
            	If the resource does not exist and throwOnError is true.
            </exception>
        </member>
        <member name="M:Internal.StaticResourceProvider.GetString(System.String,System.Boolean)">
            <summary>
            Gets a resource string with the given resource name.
            </summary>
            <param name="resourceName">
            	Name of the resource that provides the text for the message.
            </param>
            <param name="inherit">
            	Indicates if this provider will inherit resources form assemblies higher
            	in the calling chain.
            </param>
            <returns>
            	Returns the string if found otherwise returns resourceName.
            </returns>
            <exception cref="T:System.Resources.MissingManifestResourceException">
            	If the resource does not exist and throwOnError is true.
            </exception>
        </member>
        <member name="M:Internal.StaticResourceProvider.GetString(System.String)">
            <summary>
            Gets a resource string with the given resource name.
            </summary>
            <param name="resourceName">
            	Name of the resource that provides the text for the message.
            </param>
            <returns>
            	Returns the string if found otherwise returns resourceName.
            </returns>
            <exception cref="T:System.Resources.MissingManifestResourceException">
            	If the resource does not exist and throwOnError is true.
            </exception>
        </member>
        <member name="M:Internal.StaticResourceProvider.FormatResourceString(System.Boolean,System.Boolean,System.Globalization.CultureInfo,System.String,System.Object[])">
            <summary>
            Formats a resource string with the given resource name.
            </summary>
            <param name="resourceName">
            	Name of the resource that provides the text for the message.
            </param>
            <param name="args">
            	Parameters to pass to the <see cref="M:System.String.Format(System.String,System.Object)"/> method.
            </param>
            <param name="throwOnError">
            	Indicates if an exception is thrown if the resource is not found. When
            	false and the resource is not found, the resource name will be returned
            	instead.
            </param>
            <param name="inherit">
            	Indicates if this provider will inherit resources form assemblies higher
            	in the calling chain.
            </param>
            <param name="culture">
            	The culture to load the resource for. If null uses the current UI culture.
            </param>
            <returns>
            	Returns the formatted message if found.
            </returns>
            <exception cref="T:System.ApplicationException">
            	If the resource does not exist.
            </exception>
        </member>
        <member name="M:Internal.StaticResourceProvider.FormatResourceString(System.Boolean,System.Boolean,System.String,System.Object[])">
            <summary>
            Formats a resource string with the given resource name.
            </summary>
            <param name="resourceName">
            	Name of the resource that provides the text for the message.
            </param>
            <param name="args">
            	Parameters to pass to the <see cref="M:System.String.Format(System.String,System.Object)"/> method.
            </param>
            <param name="throwOnError">
            	Indicates if an exception is thrown if the resource is not found. When
            	false and the resource is not found, the resource name will be returned
            	instead.
            </param>
            <param name="inherit">
            	Indicates if this provider will inherit resources form assemblies higher
            	in the calling chain.
            </param>
            <returns>
            	Returns the formatted message if found.
            </returns>
            <exception cref="T:System.ApplicationException">
            	If the resource does not exist.
            </exception>
        </member>
        <member name="M:Internal.StaticResourceProvider.FormatResourceString(System.Boolean,System.String,System.Object[])">
            <summary>
            Formats a resource string with the given resource name.
            </summary>
            <param name="resourceName">
            	Name of the resource that provides the text for the message.
            </param>
            <param name="args">
            	Parameters to pass to the <see cref="M:System.String.Format(System.String,System.Object)"/> method.
            </param>
            <param name="inherit">
            	Indicates if this provider will inherit resources form assemblies higher
            	in the calling chain.
            </param>
            <returns>
            	Returns the formatted message if found.
            </returns>
            <exception cref="T:System.ApplicationException">
            	If the resource does not exist.
            </exception>
        </member>
        <member name="M:Internal.StaticResourceProvider.FormatResourceString(System.String,System.Object[])">
            <summary>
            Formats a resource string with the given resource name.
            </summary>
            <param name="resourceName">
            	Name of the resource that provides the text for the message.
            </param>
            <param name="args">
            	Parameters to pass to the <see cref="M:System.String.Format(System.String,System.Object)"/> method.
            </param>
            <returns>
            	Returns the formatted message if found.
            </returns>
            <exception cref="T:System.ApplicationException">
            	If the resource does not exist.
            </exception>
        </member>
        <member name="P:Internal.StaticResourceProvider.AssemblyName">
            <summary>
            Gets the name of the assembly this instance will load resources for.
            </summary>
        </member>
        <member name="P:Internal.StaticResourceProvider.Assembly">
            <summary>
            Gets the root assembly to load resources for.
            </summary>
        </member>
        <member name="P:Internal.StaticResourceProvider.CurrentProvider">
            <summary>
            Gets the <see cref="T:Internal.StaticResourceProvider"/> for the current assembly.
            </summary>
        </member>
        <member name="P:Internal.StaticResourceProvider.ParentProvider">
            <summary>
            Gets the <see cref="T:Internal.StaticResourceProvider"/> for the assembly of the
            method that called the current method.
            </summary>
        </member>
        <member name="T:Internal.StaticResourcesAttribute">
            <summary>
            Declares the static resource information for a given assembly.
            </summary>
        </member>
        <member name="M:Internal.StaticResourcesAttribute.#ctor">
            <summary>
            Initializes a new instance of the StaticResourcesAttribute class.
            </summary>
        </member>
        <member name="P:Internal.StaticResourcesAttribute.ResourceName">
            <summary>
            Gets or sets the full resource name of the resource file for the static 
            resources in the assembly. If set, overrides any value stored in the
            <see cref="P:Internal.StaticResourcesAttribute.BaseResourceName"/> property.
            </summary>
        </member>
        <member name="P:Internal.StaticResourcesAttribute.BaseResourceName">
            <summary>
            Gets or sets the base name of the resource file for the static resources in the assembly.
            </summary>
        </member>
        <member name="P:Internal.StaticResourcesAttribute.Inherit">
            <summary>
            Gets or sets a value that indicates if resources should be inerited by
            default for the current assembly.
            </summary>
        </member>
        <member name="T:Xheo.Licensing.MachineProfile">
            <summary>
            Manages a machine profile used by the license activation system. Profiles 
            represent a collection of generally non volitale system properties that can
             collectively be used to identify certain machines.
            </summary>
        </member>
        <member name="F:Xheo.Licensing.MachineProfile.CurrentVersion">
            <summary>
            The current profile hash version.
            </summary>
        </member>
        <member name="M:Xheo.Licensing.MachineProfile.#ctor">
            <summary>
            Initializes a new instance of the MachineProfile class.
            </summary>
        </member>
        <member name="M:Xheo.Licensing.MachineProfile.CompareTo(System.String,System.Int32)">
            <summary>
            Determines if the MachineProfile is comparatively similar to the given
            hash.
            </summary>
            <param name="profileHash">
            	The hash to compare to.
            </param>
            <param name="tolerance">
            	The tolerance level.
            </param>
            <returns>
            	Returns true if the current machine profile is within the tolerance
            	level of the given profile hash.
            </returns>
        </member>
        <member name="M:Xheo.Licensing.MachineProfile.FillFromMachine">
            <summary>
            Fills the current profile from properties of the current machine.
            </summary>
        </member>
        <member name="M:Xheo.Licensing.MachineProfile.GetComparableHash(System.Version)">
            <summary>
            Creates a comparable hash value for the current profile. The hash can be used
            to compare how similar one machine profile is to another without actually
            having knowledge of the exact machine characteristics.
            </summary>
            <param name="version">
            	The hash version to generate. Use to create backwards compatible hash codes.
            </param>
            <returns>
            	Returns a comparable has for the current machine.
            </returns>
        </member>
        <member name="M:Xheo.Licensing.MachineProfile.GetComparableHash">
            <summary>
            Creates a comparable hash value for the current profile. The hash can be used
            to compare how similar one machine profile is to another without actually
            having knowledge of the exact machine characteristics.
            </summary>
            <returns>
            	Returns a comparable has for the current machine.
            </returns>
        </member>
        <member name="M:Xheo.Licensing.MachineProfile.CompareHash(System.String,System.String)">
            <summary>
            Compares two machine profile hashes and determines the amount of difference.
            </summary>
            <param name="hash">
            	The of the machine to compare.
            </param>
            <param name="comparedHash">
            	The hashed value of another machine profile to compare to.
            </param>
            <returns>
            	Returns the difference rating from 0 (same) to 10 (very different).
            </returns>
        </member>
        <member name="M:Xheo.Licensing.MachineProfile.GetDifferences(System.String,System.String)">
            <summary>
            Gets the name of the hardware types that are different between the two hashes.
            </summary>
            <param name="hash">
            	The of the machine to compare.
            </param>
            <param name="comparedHash">
            	The hashed value of another machine profile to compare to.
            </param>
            <returns>
            	Returns the collection of hardware changes detected between the two hashes.
            </returns>
        </member>
        <member name="M:Xheo.Licensing.MachineProfile.GetWindowsProductId">
            <summary>
            Gets the Product ID for the current windows OS installation.
            </summary>
            <returns>
            	Returns the Product ID for the current windows OS installation.
            </returns>
        </member>
        <member name="M:Xheo.Licensing.MachineProfile.GetDrives">
            <summary>
            Gets the Hardware IDs of any installed IDE drives.
            </summary>
            <returns>
            	Returns a list of hardware IDs of any installed IDE drives.
            </returns>
        </member>
        <member name="M:Xheo.Licensing.MachineProfile.GetPhysicalMemory">
            <summary>
            Gets an the number of bytes of physical memory installed on the machine.
            </summary>
            <returns>
            	Returns the number of bytes of physical memory instlaled on the machine.
            </returns>
        </member>
        <member name="M:Xheo.Licensing.MachineProfile.GetVideoControllers">
            <summary>
            Summary of GetVideoControllers.
            </summary>
            <returns></returns>	
        </member>
        <member name="M:Xheo.Licensing.MachineProfile.GetUSBControllers">
            <summary>
            Summary of GetUSBControllers.
            </summary>
            <returns></returns>	
        </member>
        <member name="M:Xheo.Licensing.MachineProfile.GetHID">
            <summary>
            Summary of GetHID.
            </summary>
            <returns></returns>	
        </member>
        <member name="M:Xheo.Licensing.MachineProfile.GetIDEControllers">
            <summary>
            Summary of GetIDEControllers.
            </summary>
            <returns></returns>	
        </member>
        <member name="M:Xheo.Licensing.MachineProfile.GetSCSIControllers">
            <summary>
            Summary of GetSCSIControllers.
            </summary>
            <returns></returns>	
        </member>
        <member name="M:Xheo.Licensing.MachineProfile.Get1394Controllers">
            <summary>
            Summary of Get1394Controllers.
            </summary>
            <returns></returns>	
        </member>
        <member name="M:Xheo.Licensing.MachineProfile.GetAudioControllers">
            <summary>
            Summary of GetAudioControllers.
            </summary>
            <returns></returns>	
        </member>
        <member name="M:Xheo.Licensing.MachineProfile.GetModems">
            <summary>
            Summary of GetModems.
            </summary>
            <returns></returns>	
        </member>
        <member name="M:Xheo.Licensing.MachineProfile.GetProcessors">
            <summary>
            Summary of GetProcessors.
            </summary>
            <returns></returns>	
        </member>
        <member name="M:Xheo.Licensing.MachineProfile.GetMacAddress">
            <summary>
            Gets the MAC address of the first network card found on the machine.
            </summary>
            <returns>
            	Returns a string version of the MAC address if found, otherwise null.
            </returns>
        </member>
        <member name="M:Xheo.Licensing.MachineProfile.UuidCreate(Xheo.Licensing.MachineProfile.TGuid@)">
            <summary>
            Summary of UuidCreate.
            </summary>
            <param name="guid"></param>
            <returns></returns>	
        </member>
        <member name="M:Xheo.Licensing.MachineProfile.UuidCreateSequential(Xheo.Licensing.MachineProfile.TGuid@)">
            <summary>
            Summary of UuidCreateSequential.
            </summary>
            <param name="guid"></param>
            <returns></returns>	
        </member>
        <member name="M:Xheo.Licensing.MachineProfile.GetAdaptersInfo(System.IntPtr,System.UInt32@)">
            <summary>
            The Win32 function to retrieve information about the adapter
            </summary>
        </member>
        <member name="M:Xheo.Licensing.MachineProfile.GlobalMemoryStatus(Xheo.Licensing.MachineProfile._MEMORYSTATUS@)">
            <summary>
            Summary of GlobalMemoryStatus.
            </summary>
            <param name="memstat"></param>
        </member>
        <member name="M:Xheo.Licensing.MachineProfile.GlobalMemoryStatusEx(Xheo.Licensing.MachineProfile._MEMORYSTATUSEX@)">
            <summary>
            Summary of GlobalMemoryStatusEx.
            </summary>
            <param name="memstat"></param>
            <returns></returns>	
        </member>
        <member name="P:Xheo.Licensing.MachineProfile.Profile">
            <summary>
            Gets the profile of the current machine.
            </summary>
        </member>
        <member name="P:Xheo.Licensing.MachineProfile.Hash">
            <summary>
            Gets the comparable hash for the MachineProfile.
            </summary>
        </member>
        <member name="T:Xheo.Licensing.MachineProfile.Constants">
            <summary>
            A class to contain the constants required for the IP_ADAPTER_INFO struct
            </summary>
        </member>
        <member name="F:Xheo.Licensing.MachineProfile.Constants.MAX_ADAPTER_NAME_LENGTH">
            <summary>
            The maximum length of an adapter name
            </summary>
        </member>
        <member name="F:Xheo.Licensing.MachineProfile.Constants.MAX_ADAPTER_DESCRIPTION_LENGTH">
            <summary>
            The maximum length of the description of an adapter
            </summary>
        </member>
        <member name="F:Xheo.Licensing.MachineProfile.Constants.MAX_ADAPTER_ADDRESS_LENGTH">
            <summary>
            The maximum length for the physical address of the adapter
            </summary>
        </member>
        <member name="T:Xheo.Licensing.MachineProfile.IP_ADDR_STRING">
            <summary>
            declare the IP_ADDR_STRING structure
            </summary>
        </member>
        <member name="F:Xheo.Licensing.MachineProfile.IP_ADDR_STRING.Next">
            <summary>
            Pointer to the next IP_ADDR_STRING structure in the list
            </summary>
        </member>
        <member name="F:Xheo.Licensing.MachineProfile.IP_ADDR_STRING.IpAddress">
            <summary>
            This array holds the IP address
            </summary>
        </member>
        <member name="F:Xheo.Licensing.MachineProfile.IP_ADDR_STRING.IpMask">
            <summary>
            This array holds the IP address mask
            </summary>
        </member>
        <member name="F:Xheo.Licensing.MachineProfile.IP_ADDR_STRING.Context">
            <summary>
            Specifies network table entry (NTE). This value corresponds to the NTEContext parameters in the AddIPAddress and DeleteIPAddress functions
            </summary>
        </member>
        <member name="T:Xheo.Licensing.MachineProfile.IP_ADAPTERINFO_STRUCTURE">
            <summary>
            declare the IP_ADAPTERINFO_STRUCTURE structure
            </summary>
        </member>
        <member name="F:Xheo.Licensing.MachineProfile.IP_ADAPTERINFO_STRUCTURE.Next">
            <summary>
            Pointer to the next adapter in the list of adapters
            </summary>
        </member>
        <member name="F:Xheo.Licensing.MachineProfile.IP_ADAPTERINFO_STRUCTURE.ComboIndex">
            <summary>
            Reserved
            </summary>
        </member>
        <member name="F:Xheo.Licensing.MachineProfile.IP_ADAPTERINFO_STRUCTURE.AdapterName">
            <summary>
            Specifies the name of the adapter
            </summary>
        </member>
        <member name="F:Xheo.Licensing.MachineProfile.IP_ADAPTERINFO_STRUCTURE.Description">
            <summary>
            Specifies a description for the adapter
            </summary>
        </member>
        <member name="F:Xheo.Licensing.MachineProfile.IP_ADAPTERINFO_STRUCTURE.AddressLength">
            <summary>
            Specifies the length of the hardware address for the adapter
            </summary>
        </member>
        <member name="F:Xheo.Licensing.MachineProfile.IP_ADAPTERINFO_STRUCTURE.Address">
            <summary>
            Specifies the hardware address for the adapter
            </summary>
        </member>
        <member name="F:Xheo.Licensing.MachineProfile.IP_ADAPTERINFO_STRUCTURE.Index">
            <summary>
            Specifies the adapter index
            </summary>
        </member>
        <member name="F:Xheo.Licensing.MachineProfile.IP_ADAPTERINFO_STRUCTURE.Type">
             <summary>
             Specifies the adapter type. The type is one of the following values. 
            IF_OTHER_ADAPTERTYPE 
            IF_ETHERNET_ADAPTERTYPE 
            IF_TOKEN_RING_ADAPTERTYPE 
            IF_FDDI_ADAPTERTYPE 
            IF_PPP_ADAPTERTYPE 
            IF_LOOPBACK_ADAPTERTYPE 
            IF_SLIP_ADAPTERTYPE 
            These values are defined in the header file IPIfCons.h
             </summary>
        </member>
        <member name="F:Xheo.Licensing.MachineProfile.IP_ADAPTERINFO_STRUCTURE.DhcpEnabled">
            <summary>
            Specifies whether dynamic host configuration protocol (DHCP) is enabled for this adapter
            </summary>
        </member>
        <member name="F:Xheo.Licensing.MachineProfile.IP_ADAPTERINFO_STRUCTURE.CurrentIPAddress">
            <summary>
            Specifies the current IP address for this adapter
            </summary>
        </member>
        <member name="F:Xheo.Licensing.MachineProfile.IP_ADAPTERINFO_STRUCTURE.IpAddressList">
            <summary>
            Specifies the list of IP addresses associated with this adapter
            </summary>
        </member>
        <member name="F:Xheo.Licensing.MachineProfile.IP_ADAPTERINFO_STRUCTURE.GatewayList">
            <summary>
            Specifies the IP address of the default gateway for this adapter
            </summary>
        </member>
        <member name="F:Xheo.Licensing.MachineProfile.IP_ADAPTERINFO_STRUCTURE.DhcpServer">
            <summary>
            Specifies the IP address of the DHCP server for this adapter
            </summary>
        </member>
        <member name="F:Xheo.Licensing.MachineProfile.IP_ADAPTERINFO_STRUCTURE.HaveWins">
            <summary>
            Specifies whether this adapter uses Windows Internet Name Service (WINS)
            </summary>
        </member>
        <member name="F:Xheo.Licensing.MachineProfile.IP_ADAPTERINFO_STRUCTURE.PrimaryWinsServer">
            <summary>
            Specifies the IP address of the primary WINS server
            </summary>
        </member>
        <member name="F:Xheo.Licensing.MachineProfile.IP_ADAPTERINFO_STRUCTURE.SecondaryWinsServer">
            <summary>
            Specifies the IP address of the secondary WINS server
            </summary>
        </member>
        <member name="F:Xheo.Licensing.MachineProfile.IP_ADAPTERINFO_STRUCTURE.LeaseObtained">
            <summary>
            Specifies the time when the current DHCP lease was obtained
            </summary>
        </member>
        <member name="F:Xheo.Licensing.MachineProfile.IP_ADAPTERINFO_STRUCTURE.LeaseExpires">
            <summary>
            Specifies the time when the current DHCP lease will expire
            </summary>
        </member>
        <member name="T:Xheo.Licensing.MachineProfile.GetAdapterInfo">
            <summary>
            Uses the windows API to retrieve information about the IP configuration of the local machine
            </summary>
        </member>
        <member name="M:Xheo.Licensing.MachineProfile.GetAdapterInfo.#ctor">
            <summary>
            Constructor for the GetAdapterInfo Class
            </summary>
        </member>
        <member name="M:Xheo.Licensing.MachineProfile.GetAdapterInfo.GetFirstAdapter">
            <summary>
            Gets the details of the first available adapter on the local machine
            </summary>
            <returns>The return value is an struct of type IP_ADAPTERINFO_STRUCTURE containing data about the Adapter</returns>
        </member>
        <member name="M:Xheo.Licensing.MachineProfile.GetAdapterInfo.GetAdapters">
            <summary>
            Gets details of all the adapters on the local machine
            </summary>
            <returns>The return object is a System.Collections.ArrayList of IPConfig.IP_ADAPTERINFO_STRUCTURE structs containing data about the Adapter</returns>
        </member>
        <member name="T:Xheo.Licensing.MachineProfile.TGuid">
            <summary>
            Summary of TGuid
            </summary>
        </member>
        <member name="F:Xheo.Licensing.MachineProfile.TGuid.a">
            <summary>
            </summary>
        </member>
        <member name="F:Xheo.Licensing.MachineProfile.TGuid.b">
            <summary>
            </summary>
        </member>
        <member name="F:Xheo.Licensing.MachineProfile.TGuid.d">
            <summary>
            </summary>
        </member>
        <member name="F:Xheo.Licensing.MachineProfile.TGuid.m">
            <summary>
            </summary>
        </member>
        <member name="F:Xheo.Licensing.MachineProfile.TGuid.s">
            <summary>
            </summary>
        </member>
        <member name="F:Xheo.Licensing.MachineProfile.TGuid.m1">
            <summary>
            </summary>
        </member>
        <member name="F:Xheo.Licensing.MachineProfile.TGuid.m2">
            <summary>
            </summary>
        </member>
        <member name="F:Xheo.Licensing.MachineProfile.TGuid.m3">
            <summary>
            </summary>
        </member>
        <member name="F:Xheo.Licensing.MachineProfile.TGuid.m4">
            <summary>
            </summary>
        </member>
        <member name="F:Xheo.Licensing.MachineProfile.TGuid.m5">
            <summary>
            </summary>
        </member>
        <member name="F:Xheo.Licensing.MachineProfile.TGuid.m6">
            <summary>
            </summary>
        </member>
        <member name="T:Xheo.Licensing.MachineProfile._MEMORYSTATUS">
            <summary>
            Summary of _MEMORYSTATUS
            </summary>
        </member>
        <member name="F:Xheo.Licensing.MachineProfile._MEMORYSTATUS.dwLength">
            <summary>
            </summary>
        </member>
        <member name="F:Xheo.Licensing.MachineProfile._MEMORYSTATUS.dwMemoryLoad">
            <summary>
            </summary>
        </member>
        <member name="F:Xheo.Licensing.MachineProfile._MEMORYSTATUS.dwTotalPhys">
            <summary>
            </summary>
        </member>
        <member name="F:Xheo.Licensing.MachineProfile._MEMORYSTATUS.dwAvailPhys">
            <summary>
            </summary>
        </member>
        <member name="F:Xheo.Licensing.MachineProfile._MEMORYSTATUS.dwTotalPageFile">
            <summary>
            </summary>
        </member>
        <member name="F:Xheo.Licensing.MachineProfile._MEMORYSTATUS.dwAvailPageFile">
            <summary>
            </summary>
        </member>
        <member name="F:Xheo.Licensing.MachineProfile._MEMORYSTATUS.dwTotalVirtual">
            <summary>
            </summary>
        </member>
        <member name="F:Xheo.Licensing.MachineProfile._MEMORYSTATUS.dwAvailVirtual">
            <summary>
            </summary>
        </member>
        <member name="T:Xheo.Licensing.MachineProfile._MEMORYSTATUSEX">
            <summary>
            Summary of _MEMORYSTATUSEX
            </summary>
        </member>
        <member name="F:Xheo.Licensing.MachineProfile._MEMORYSTATUSEX.dwLength">
            <summary>
            </summary>
        </member>
        <member name="F:Xheo.Licensing.MachineProfile._MEMORYSTATUSEX.dwMemoryLoad">
            <summary>
            </summary>
        </member>
        <member name="F:Xheo.Licensing.MachineProfile._MEMORYSTATUSEX.ullTotalPhys">
            <summary>
            </summary>
        </member>
        <member name="F:Xheo.Licensing.MachineProfile._MEMORYSTATUSEX.ullAvailPhys">
            <summary>
            </summary>
        </member>
        <member name="F:Xheo.Licensing.MachineProfile._MEMORYSTATUSEX.ullTotalPageFile">
            <summary>
            </summary>
        </member>
        <member name="F:Xheo.Licensing.MachineProfile._MEMORYSTATUSEX.ullAvailPageFile">
            <summary>
            </summary>
        </member>
        <member name="F:Xheo.Licensing.MachineProfile._MEMORYSTATUSEX.ullTotalVirtual">
            <summary>
            </summary>
        </member>
        <member name="F:Xheo.Licensing.MachineProfile._MEMORYSTATUSEX.ullAvailVirtual">
            <summary>
            </summary>
        </member>
        <member name="F:Xheo.Licensing.MachineProfile._MEMORYSTATUSEX.ullAvailExtendedVirtual">
            <summary>
            </summary>
        </member>
        <member name="T:Xheo.Licensing.ExtendedLicensePack">
            <summary>
            Represents a collection of licenses stored in a single .LIC file.
            </summary>
            <remarks>
            Each license pack can serialize to and from an XML license file. Each license
            within the pack is signed, but the pack itself is not. Licenses can be added
            or removed without affecting the validity of the pack.
            </remarks>
        </member>
        <member name="M:Xheo.Licensing.ExtendedLicensePack.#ctor">
            <summary>
             Initializes a new instance of the ExtendedLicensePack class.
            </summary>
        </member>
        <member name="M:Xheo.Licensing.ExtendedLicensePack.#ctor(System.String)">
            <summary>
             Initializes a new instance of the ExtendedLicensePack class from the 
             given file.
            </summary>
            <param name="filename">
            	Path to the file that contains the license pack.
            </param>
        </member>
        <member name="M:Xheo.Licensing.ExtendedLicensePack.#ctor(System.String,System.Boolean)">
            <summary>
             Initializes a new instance of the ExtendedLicensePack class from the 
             given file.
            </summary>
            <param name="filename">
            	Path to the file that contains the license pack.
            </param>
            <param name="tryIsolatedStorage">
            	When true attempts to load a mirrored version of the license from Isolated
            	Storage first.
            </param>
        </member>
        <member name="M:Xheo.Licensing.ExtendedLicensePack.Dispose">
            <summary>
            Disposes of any managed/unmanged resources.
            </summary>
        </member>
        <member name="M:Xheo.Licensing.ExtendedLicensePack.GetLicensesForComponent(System.String)">
            <summary>
            Gets a subset of the current license pack filtered by the given component.
            </summary>
            <param name="component">
            	Name of the component to get licenses for.
            </param>
            <returns>
            	Returns a new collection with the requested licenses.
            </returns>
        </member>
        <member name="M:Xheo.Licensing.ExtendedLicensePack.IndexOf(System.String)">
            <summary>
            Gets the index of the ExtendedLicense with the given serial number.
            </summary>
            <param name="serialNumber">
            	The serial number to look for.
            </param>
            <returns>
            	Returns the index of the license if found, otherwise -1.
            </returns>
        </member>
        <member name="M:Xheo.Licensing.ExtendedLicensePack.IndexOf(Xheo.Licensing.ExtendedLicense)">
            <summary>
            Gets the index of the license in the pack.
            </summary>
            <param name="license">
            	The license to look for.
            </param>
            <returns>
            	Returns the index of the license if found, otherwise -1.
            </returns>
        </member>
        <member name="M:Xheo.Licensing.ExtendedLicensePack.Add(Xheo.Licensing.ExtendedLicense)">
            <summary>
            Adds the given ExtendedLicense to the collection.
            </summary>
            <param name="license">
            	The ExtendedLicense to add.
            </param>
        </member>
        <member name="M:Xheo.Licensing.ExtendedLicensePack.Insert(System.Int32,Xheo.Licensing.ExtendedLicense)">
            <summary>
            Inserts the license at the given index.
            </summary>
            <param name="index">
            	The index in the collection to insert the license.
            </param>
            <param name="license">
            	The license to be inserted.
            </param>
        </member>
        <member name="M:Xheo.Licensing.ExtendedLicensePack.Remove(Xheo.Licensing.ExtendedLicense)">
            <summary>
            Removes the given ExtendedLicense from the collection.
            </summary>
            <param name="license">
            	The ExtendedLicense to remove.
            </param>
        </member>
        <member name="M:Xheo.Licensing.ExtendedLicensePack.CopyTo(Xheo.Licensing.ExtendedLicense[],System.Int32)">
            <summary>
            Copies the collection of ExtendedLicense objects into the array at the given index.
            </summary>
            <param name="array">
            	The array to copy to.
            </param>
            <param name="index">
            	The index in the array to start copying.
            </param>
        </member>
        <member name="M:Xheo.Licensing.ExtendedLicensePack.Contains(Xheo.Licensing.ExtendedLicense)">
            <summary>
            Determines if the pack contains the given license.
            </summary>
            <param name="license">
            	The license to look for.
            </param>
            <returns>
            	Returns true if the license is found, otherwise false.
            </returns>
        </member>
        <member name="M:Xheo.Licensing.ExtendedLicensePack.Remove(System.String)">
            <summary>
            Removes the license with the given serial number.
            </summary>
            <param name="serialNumber">
            	The serial numbef of the license to remove.
            </param>
        </member>
        <member name="M:Xheo.Licensing.ExtendedLicensePack.Load(System.String,System.Boolean)">
            <summary>
            Loads the contents of the license pack from a file.
            </summary>
            <param name="filename">
            	Path to the file where the licenses were saved.
            </param>
            <param name="tryIsolatedStorage">
            	When true attempts to load a mirrored version of the license from Isolated
            	Storage first.
            </param>
        </member>
        <member name="M:Xheo.Licensing.ExtendedLicensePack.Load(System.String)">
            <summary>
            Loads the contents of the license pack from a file.
            </summary>
            <param name="filename">
            	Path to the file where the licenses were saved.
            </param>
        </member>
        <member name="M:Xheo.Licensing.ExtendedLicensePack.Load(System.IO.Stream)">
            <summary>
            Loads the contents of the license pack from a file.
            </summary>
            <param name="stream">
            	The stream to load from.
            </param>
        </member>
        <member name="M:Xheo.Licensing.ExtendedLicensePack.Save(System.IO.Stream)">
            <summary>
            Saves the contents of the license pack to a stream.
            </summary>
            <param name="stream">
            	The Stream to write the contents of the license pack to.
            </param>
        </member>
        <member name="M:Xheo.Licensing.ExtendedLicensePack.Save(System.String)">
            <summary>
            Saves the contents of the license pack to a file.
            </summary>
            <param name="filename">
            	Path to the file where the licenses should be saved.
            </param>
        </member>
        <member name="M:Xheo.Licensing.ExtendedLicensePack.Save">
            <summary>
            Saves the contents of the license pack to the file that it was originally loaded
            from.
            </summary>
        </member>
        <member name="M:Xheo.Licensing.ExtendedLicensePack.Save(System.String,System.Boolean)">
            <summary>
            Saves the contents of the license pack to a file.
            </summary>
            <param name="filename">
            	Path to the file where the licenses should be saved.
            </param>
            <param name="useIsolatedOnFail">
            	If the save fails because of a permission exception, attempt to save to the
            	isolated storage location instead.
            </param>
        </member>
        <member name="M:Xheo.Licensing.ExtendedLicensePack.Save(System.Boolean)">
            <summary>
            Saves the contents of the license pack to the file that it was originally loaded
            from.
            </summary>
            <param name="useIsolatedOnFail">
            	If the save fails because of a permission exception, attempt to save to the
            	isolated storage location instead.
            </param>
        </member>
        <member name="M:Xheo.Licensing.ExtendedLicensePack.ToXmlString">
            <summary>
            Gets the contents of the license pack as an XML string.
            </summary>
            <returns>
            	An XML string representation of the license pack.
            </returns>
        </member>
        <member name="M:Xheo.Licensing.ExtendedLicensePack.ToFormattedXmlString">
            <summary>
            Gets the contents of the license pack as an friendly XML string.
            </summary>
            <returns>
            	An XML string representation of the license pack.
            </returns>
        </member>
        <member name="M:Xheo.Licensing.ExtendedLicensePack.FromXmlString(System.String)">
            <summary>
            Loads the contents of the xml string into the license pack.
            </summary>
            <param name="xml">
            	A string containing the XML for the license pack.
            </param>
        </member>
        <member name="M:Xheo.Licensing.ExtendedLicensePack.WriteToResponse(System.String,System.Boolean)">
            <summary>
            Writes the license pack to the response stream for download. The included filename
            is only a suggestion to the user agent.
            </summary>
            <param name="filename">
            	Suggested file name.
            </param>
            <param name="direct">
            	Indicates that the file should be written directly to the response and not
            	saved as a new file. When false the user is prompted to open or save the 
            	file on their computer.
            </param>
            <remarks>
            	Use this method to provide license downloads on your website. You should be
            	careful to not write any additional content to the response stream, or call
            	Response.End() after this method.
            	<para>
            	<b>NOTE:</b> The response must be buffered for this method to work. In general
            	buffering is on by default in ASP.NET applications.
            	</para>
            </remarks>
        </member>
        <member name="M:Xheo.Licensing.ExtendedLicensePack.WriteToResponse(System.String)">
            <summary>
            Writes the license pack to the response stream for download. The included filename
            is only a suggestion to the user agent.
            </summary>
            <param name="filename">
            	Suggested file name.
            </param>
            <remarks>
            	Use this method to provide license downloads on your website. You should be
            	careful to not write any additional content to the response stream, or call
            	Response.End() after this method.
            	<para>
            	<b>NOTE:</b> The response must be buffered for this method to work. In general
            	buffering is on by default in ASP.NET applications.
            	</para>
            </remarks>
        </member>
        <member name="M:Xheo.Licensing.ExtendedLicensePack.WriteToResponse">
            <summary>
            Writes the license pack to the response stream for download.
            </summary>
            <remarks>
            	Use this method to provide license downloads on your website.
            	<para>
            	<b>NOTE:</b> The response must be buffered for this method to work. In general
            	buffering is on by default in ASP.NET applications.
            	</para>
            </remarks>
        </member>
        <member name="M:Xheo.Licensing.ExtendedLicensePack.Clone">
            <summary>
            Clones the license pack in memory.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Xheo.Licensing.ExtendedLicensePack.IsEmbedded">
            <summary>
            Gets a value that indicates if the pack was loaded directly from an assembly.
            </summary>
        </member>
        <member name="P:Xheo.Licensing.ExtendedLicensePack.MetaValues">
            <summary>
            Gets a collection of arbitrary values to store with the license pack. These 
            values <i>are not</i> protected and may be changed without affecting the 
            validity of the contained licenses. Use for storing volitle information and 
            other unsecured information.
            </summary>
        </member>
        <member name="P:Xheo.Licensing.ExtendedLicensePack.Location">
            <summary>
            Gets the path to the file where the license pack was originally loaded from.
            If not loaded from a file, returns null.
            </summary>
        </member>
        <member name="P:Xheo.Licensing.ExtendedLicensePack.SaveToShared">
            <summary>
            Gets or sets a value that indicates if changes to the license pack when validating
            should be saved to the shared licenses folder.
            </summary>
        </member>
        <member name="P:Xheo.Licensing.ExtendedLicensePack.Item(System.Int32)">
            <summary>
            Gets or sets the ExtendedLicense at the given index.
            </summary>
        </member>
        <member name="P:Xheo.Licensing.ExtendedLicensePack.Item(System.String)">
            <summary>
            Gets or sets the ExtendedLicense with the given serial number.
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.LatLon">
            <summary>
            Latitude Longitude Pair, expressed in degrees (WGS84 World Geodetic System projection).
            </summary>
            <remarks>GeoBase works with the WGS84 World Geodetic System. If your data is in a different
            projection you will need to reproject the points to work with them in GeoBase. For more
            information on WGS84 click <a href="http://earth-info.nga.mil/GandG/publications/tr8350.2/wgs84fin.pdf">here</a>.
            <para><b>Related articles</b>: <a href="ba99dd3e-b8bb-40e3-9e15-5aa9a6a2e6ff.htm">Common Concepts</a>, 
            <a href="243b2474-98eb-4087-902d-c206207674b3.htm">Geocoding Concept</a>, 
            <a href="70746bb6-4c27-4ed5-a312-1faa1f86a3bf.htm">Map Control Tutorial</a>, 
            <a href="14ad9e39-768a-4a15-9e0e-c7d3dd2b7d25.htm">Creating a Route</a>, 
            <a href="60998f81-efa9-4743-afcc-6e6f943a4fa1.htm">Routing with Traffic</a>.</para>
            </remarks>
        </member>
        <member name="F:Telogis.GeoBase.LatLon._x">
            <summary>
            x-coordinate.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.LatLon._y">
            <summary>
            y-coordinate.
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.LatLon.to_real(System.UInt32)">
            <summary>
            Convert unit to double.
            </summary>
            <param name="x">integer</param>
            <returns>degrees</returns>
        </member>
        <member name="M:Telogis.GeoBase.LatLon.from_real(System.Double)">
            <summary>
            Convert real to int.
            </summary>
            <param name="x">degrees</param>
            <returns>int</returns>
        </member>
        <member name="M:Telogis.GeoBase.LatLon.uint_to_rad(System.UInt32)">
            <summary>
            Converts a <code>uint</code> representation of a latitude or longitude coordinate to its corresponding radian value.
            This conversion is performed without an intermediary calculation in degrees to minimise the resulting error.
            </summary>
            <param name="x">the <code>uint</code> representation of the coordinate to convert to radians.</param>
            <returns>the radian value of <paramref name="x"/>.</returns>
        </member>
        <member name="M:Telogis.GeoBase.LatLon.uint_from_rad(System.Double)">
            <summary>
            Converts a radian representation of a latitude or longitude coordinate to its corresponding <code>uint</code> value.
            This conversion is performed without an intermediary calculation in degrees to minimise the resulting error.
            </summary>
            <param name="x">the radians representation of the coordinate to convert to a <code>uint</code>.</param>
            <returns>the <code>uint</code> representation of <paramref name="x"/>.</returns>
        </member>
        <member name="M:Telogis.GeoBase.LatLon.#ctor(System.Xml.XmlNode)">
            <summary>
            Construct a new <see cref="T:Telogis.GeoBase.LatLon"/> from an XML node, retrieving the attributes "Lat" and "Lon".
            </summary>
            <remarks>See also <see cref="M:Telogis.GeoBase.LatLon.ToXmlString(System.Xml.XmlTextWriter)"/>.</remarks>
            <param name="doc"></param>
        </member>
        <member name="M:Telogis.GeoBase.LatLon.ToXmlString(System.Xml.XmlTextWriter)">
            <summary>
            Return the <see cref="T:Telogis.GeoBase.LatLon"/> as two XML attributes: Lat="0.00000" Lon="0.00000".
            </summary>
            <param name="doc"></param>
        </member>
        <member name="M:Telogis.GeoBase.LatLon.#ctor(System.Double,System.Double)">
            <summary>
            Initialize from parameters.
            </summary>
            <param name="lat">Latitude.</param>
            <param name="lon">Longitude.</param>
        </member>
        <member name="M:Telogis.GeoBase.LatLon.#ctor(System.UInt64)">
            <summary>
            Initialize from 64bit integer. See <see cref="P:Telogis.GeoBase.LatLon.AsInt64"/>
            </summary>
            <param name="as64">Latitude and Longitude packed as a 64bit integer</param>
        </member>
        <member name="M:Telogis.GeoBase.LatLon.GetHashCode">
            <summary>
            Create a Hashcode for this <see cref="T:Telogis.GeoBase.LatLon"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Telogis.GeoBase.LatLon.#ctor(System.String)">
            <summary>
            Takes a string of form "latitude,longitude" and creates a LatLon.
            </summary>
            <param name="latlon">The string containing the latitude and longitude components.</param>
        </member>
        <member name="M:Telogis.GeoBase.LatLon.#ctor(Telogis.GeoBase.LatLon)">
            <summary>
            Create a copy of a LatLon.
            </summary>
            <param name="other">The LatLon to be copied.</param>
        </member>
        <member name="M:Telogis.GeoBase.LatLon.FromDegMinDec(System.Int32,System.Int32,System.Int32,System.Char)">
            <summary>
            Converts to degrees a co-ordinate specified in Degrees, Minutes and Degree Decimal Minutes.
            This positioning format is often used by GPS devices.
            </summary>
            <remarks>
            Degree Decimal Minutes (DDM) is a standard used by some governments and GPS manufacturers. Instead
            of specifying Degrees (D), Minutes (M) and Seconds (S) a position may be expressed as D, M, DDM where
            DDM is a 4-digit decimal fraction of a minute.
            </remarks>
            <param name="deg">Degrees.</param>
            <param name="minute">Minutes.<br/>Valid range: 0-59</param>
            <param name="minute_dec">Fractions of a minute (also known as 'degree decimal minutes').<br/>Valid range: 0-9999</param>
            <param name="nsew">North, South, East or West. Valid characters: {'N', 'S', 'E', 'W'}</param>
            <returns></returns>
        </member>
        <member name="M:Telogis.GeoBase.LatLon.FromParts(System.Int32,System.Int32,System.Int32,System.Char,System.Int32,System.Int32,System.Int32,System.Char)">
            <summary>
            Create a LatLon from position parameters.
            </summary>
            <param name="latDeg">Degrees latitude.</param>
            <param name="latMin">Latitude minutes.</param>
            <param name="latDec">Latitude degree decimal minutes.</param>
            <param name="latNS">Latitude compass direction. One of: 'N', 'S'.</param>
            <param name="lonDeg">Degrees longitude.</param>
            <param name="lonMin">Longitude minutes.</param>
            <param name="lonDec">Longitude degree decimal minutes.</param>
            <param name="lonEW">Longitude compass direction. One of: 'E' 'W'.</param>
            <remarks>Degree Decimal Minutes (DDM) is a standard used by some governments and GPS manufacturers. Instead
            of specifying Degrees (D), Minutes (M) and Seconds (S) a position may be expressed as D, M, DDM where
            DDM is a 4-digit decimal fraction of a minute.</remarks>
            <returns>A new LatLon.</returns>
        </member>
        <member name="M:Telogis.GeoBase.LatLon.DistanceTo(Telogis.GeoBase.LatLon,Telogis.GeoBase.DistanceUnit)">
             <summary>
             Measure distance between this and another LatLon (using <see cref="M:Telogis.GeoBase.MathUtil.GreatCircle(System.Double,System.Double,System.Double,System.Double)"/>).
             </summary>
             <param name="other">Destination LatLon.</param>
             <param name="units">Unit that measurement is returned in.</param>
             <returns>Distance in requested units.</returns>
             <remarks>The value returned represents the distance over the face of a sphere rather
             than the straight line distance. See <see cref="M:Telogis.GeoBase.MathUtil.GreatCircle(System.Double,System.Double,System.Double,System.Double)"/> for more information.
            </remarks>
        </member>
        <member name="M:Telogis.GeoBase.LatLon.PythagoreanDistanceTo(Telogis.GeoBase.LatLon,Telogis.GeoBase.DistanceUnit)">
            <summary>
            Measure approximate distance between this and another LatLon (using a Pythagorean approximation).
            See remarks for comments on the accuracy of this method.
            </summary>
            <remarks>The Pythagorean distance assumes that the world is flat between the two points. 
            This assumption is safe when the points are near each other. If the points are a significant 
            distance apart the straight line between the Polygon and the point will pass
            through the interior of the world. To calculate the true shortest distance consider 
            using the DistanceTo method. The DistanceTo method calculates the distance using a 
            great circle which traces an arc over the surface of the earth.
            </remarks>
            <param name="other">Destination LatLon.</param>
            <param name="units">Unit that measurement is returned in.</param>
            <returns>Distance in requested units.</returns>
        </member>
        <member name="M:Telogis.GeoBase.LatLon.Equals(System.Object)">
            <summary>
            Check for equality with another LatLon by checking if they occupy the same co-ordinates.
            </summary>
            <param name="other">The LatLon to compare with.</param>
            <returns></returns>
        </member>
        <member name="M:Telogis.GeoBase.LatLon.IsWithin(Telogis.GeoBase.LatLon,Telogis.GeoBase.LatLon)">
            <summary>
            Check whether this LatLon lies within a box defined by the minimum and maximum LatLon's. See remarks.
            </summary>
            <param name="min">Represents the minimum latitude &amp; longitude.</param>
            <param name="max">Represents the maximum latitude &amp; longitude.</param>
            <returns>true if this LatLon lies within the area given, false if not.</returns>
            <remarks>The minimum and maximum LatLons can be thought of as representing the opposite corners
            of a box. Thus the method tests whether this LatLon lies within (or on the edge of) said box. Should
            the parameters have the same latitude of longitude then the method returns <b>true</b> if this LatLon
            lies on a line drawn between the two parameters.
            </remarks>
        </member>
        <member name="M:Telogis.GeoBase.LatLon.ToString">
            <summary>
            Return the co-ordinates of this LatLon in the form "<see cref="P:Telogis.GeoBase.LatLon.Lat"/>,<see cref="P:Telogis.GeoBase.LatLon.Lon"/>".
            </summary>
            <returns>The latitude and longitude of this LatLon.</returns>
        </member>
        <member name="M:Telogis.GeoBase.LatLon.op_Equality(Telogis.GeoBase.LatLon,Telogis.GeoBase.LatLon)">
            <summary>
            Checks two <see cref="T:Telogis.GeoBase.LatLon">LatLons</see> for equality.
            </summary>
            <param name="a">First <see cref="T:Telogis.GeoBase.LatLon"/>.</param>
            <param name="b">A second <see cref="T:Telogis.GeoBase.LatLon"/> to compare with the first.</param>
            <returns>Returns <b>true</b> if the two  <see cref="T:Telogis.GeoBase.LatLon">LatLons</see>
            are equal, otherwise <b>false</b>.</returns>
        </member>
        <member name="M:Telogis.GeoBase.LatLon.op_Inequality(Telogis.GeoBase.LatLon,Telogis.GeoBase.LatLon)">
            <summary>
            Checks two <see cref="T:Telogis.GeoBase.LatLon">LatLons</see> for inequality.
            </summary>
            <param name="a">First <see cref="T:Telogis.GeoBase.LatLon"/>.</param>
            <param name="b">A second <see cref="T:Telogis.GeoBase.LatLon"/> to compare with the first.</param>
            <returns></returns>
        </member>
        <member name="M:Telogis.GeoBase.LatLon.ToOtFmt(System.Double)">
            <summary>
            Converts from degrees to the Ot database format.
            </summary>
            <param name="deg"></param>
            <returns></returns>
        </member>
        <member name="F:Telogis.GeoBase.LatLon.Empty">
            <summary>
            An empty (null-equivalent) <see cref="T:Telogis.GeoBase.LatLon"/>.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.LatLon.SerializeLat">
            <summary>
            Serialize just 6 fractional digits of the lat.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.LatLon.Lat">
            <summary>
            Latitude (Y) in degrees.
            </summary>        
        </member>
        <member name="P:Telogis.GeoBase.LatLon.SerializeLon">
            <summary>
            Serialize just 6 fractional digits of the lat.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.LatLon.Lon">
            <summary>
            Longitude (X) in degrees.
            </summary>        
        </member>
        <member name="P:Telogis.GeoBase.LatLon.x">
            <summary>
            Gets or sets Lon.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.LatLon.y">
            <summary>
            Gets or sets Lat.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.LatLon.IsValid">
            <summary>
            True only if this LatLon has been assigned a valid value.
            </summary>
            <example>
            Performs a range-check on the coordinates of this LatLon. Will return
            false if the range-check fails.
            </example>
        </member>
        <member name="P:Telogis.GeoBase.LatLon.WKT">
            <summary>
            Return this point formatted for WKT.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.LatLon.AsInt64">
            <summary>
            Return Latitude and Longitude packed as a 64bit integer
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.Vector">
            <summary>
            A vector is formed from a <see cref="T:Telogis.GeoBase.LatLon"/> with a given heading and speed.
            </summary>
            <remarks>
            The heading is specified by degrees in a clockwise rotation about the compass face, where North = 0.<br/>
            <b>This class has yet to be finalized.</b> You may wish to periodically check for revisions.
            </remarks>
        </member>
        <member name="F:Telogis.GeoBase.Vector.Location">
            <summary>
            A LatLon representing the location of this vector.
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.Vector.GetSpeed(Telogis.GeoBase.DistanceUnit)">
            <summary>
            Gets the speed of this vector in the specified <see cref="T:Telogis.GeoBase.DistanceUnit">units</see>.
            </summary>
            <param name="units">The units to return the speed in.</param>
            <returns>Speed in the specified units.</returns>
        </member>
        <member name="M:Telogis.GeoBase.Vector.SetSpeed(System.Double,Telogis.GeoBase.DistanceUnit)">
            <summary>
            Sets the speed of this vector in the specified <see cref="T:Telogis.GeoBase.DistanceUnit">units</see>.
            </summary>
            <param name="speed">The vector speed.</param>
            <param name="units">The units the new speed has been specified in.</param>
        </member>
        <member name="M:Telogis.GeoBase.Vector.#ctor(Telogis.GeoBase.LatLon)">
            <summary>
            Construct Vector with a location but with no heading or speed.
            </summary>
            <param name="location"></param>
        </member>
        <member name="M:Telogis.GeoBase.Vector.#ctor(Telogis.GeoBase.LatLon,System.Double)">
            <summary>
            Construct Vector with location and heading.
            </summary>
            <param name="location">The <see cref="T:Telogis.GeoBase.LatLon"/> location</param>
            <param name="heading">In degrees</param>
        </member>
        <member name="P:Telogis.GeoBase.Vector.HasHeading">
            <summary>
            Gets whether this Vector currently has a heading set.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Vector.Heading">
            <summary>
            Gets or sets the heading in degrees. Specify -1 for no heading.
            Values are modded by 360, in order to fall in the range 0 &lt;= <i>heading</i> &lt; 360.
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.Rectangle">
            <summary>
            Describes a rectangular area, specified by two corner points. Rectangles may be checked
            for overlap using the <see cref="M:Telogis.GeoBase.Rectangle.Intersects(Telogis.GeoBase.Rectangle)"/> method.
            </summary>
            <remarks>
            <para>As with <see cref="T:Telogis.GeoBase.BoundingBox"/> a Rectangle is specified by two
            sets of coordinates, one representing the top-left corner the other the bottom-right corner.</para>
            <para>Rectangles can be created using a <see cref="T:Telogis.GeoBase.BoundingBox"/>'s
            <see cref="P:Telogis.GeoBase.BoundingBox.Rectangle"/> method.</para>
            </remarks>
        </member>
        <member name="F:Telogis.GeoBase.Rectangle.x1">
            <summary>
            Left edge
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Rectangle.x2">
            <summary>
            Right edge
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Rectangle.y1">
            <summary>
            Top edge
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Rectangle.y2">
            <summary>
            Bottom edge
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.Rectangle.ToString">
            <summary>
            Creates a string representation of this <see cref="T:Telogis.GeoBase.Rectangle"/>.
            </summary>
            <returns>A string of the form "<see cref="P:Telogis.GeoBase.Rectangle.p1"/>, <see cref="P:Telogis.GeoBase.Rectangle.p2"/>".</returns>
        </member>
        <member name="M:Telogis.GeoBase.Rectangle.Intersects(Telogis.GeoBase.Rectangle)">
            <summary>
            Test if this Rectangle intersects with another Rectangle.
            </summary>
            <param name="other">The Rectangle to be compared with this Rectangle.</param>
            <returns><b>true</b> if there is an intersection, <b>false</b> if not.</returns>
        </member>
        <member name="P:Telogis.GeoBase.Rectangle.lat1">
            <summary>
            Gets or sets the Latitude of the bottom edge of the <see cref="T:Telogis.GeoBase.Rectangle"/>.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Rectangle.lat2">
            <summary>
            Gets or sets the Latitude of the top edge of the <see cref="T:Telogis.GeoBase.Rectangle"/>.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Rectangle.lon1">
            <summary>
            Gets or sets the Longitude of the left edge of the <see cref="T:Telogis.GeoBase.Rectangle"/>.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Rectangle.lon2">
            <summary>
            Gets or sets the Longitude of the right edge of the <see cref="T:Telogis.GeoBase.Rectangle"/>.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Rectangle.p1">
            <summary>
            Gets Point 1 as <see cref="T:Telogis.GeoBase.LatLon"/>.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Rectangle.p2">
            <summary>
            Gets Point 2 as <see cref="T:Telogis.GeoBase.LatLon"/>.
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.Transactional.IndexColumn">
            <summary>
            An IndexColumn is a designated column in a <see cref="T:Telogis.GeoBase.Transactional.Table"/> that is
            used for creating an index. An index allows you to query the table for
            records matching specified criteria.
            </summary>
            <remarks>
            An Index may be created from one or more IndexColumns.
            </remarks>
            <example>
            <code lang="C#">
            using (EnsureTransaction trans = new EnsureTransaction(repository)) {
                Index idx = t.CreateIndex("locations", 
                    new IndexColumn[] { 
                        new IndexColumn("latlon") 
                    });
            }
            </code>
            </example>
        </member>
        <member name="M:Telogis.GeoBase.Transactional.IndexColumn.#ctor(System.String)">
            <summary>
            Creates a new IndexColumn on the given column.
            </summary>
            <param name="colname">The name of the column. This is not case-sensitive.</param>
        </member>
        <member name="T:Telogis.GeoBase.Transactional.EqualFilter">
            <summary>
            A ColumnFilter that selects only those records where the specified
            column is equal to a specified value.
            </summary>
            <example>
            <code lang="C#">
            String owner = "My Corporate";
            
            // create the equal filter - this will only match records where
            // the 'owner' column is equal to the string defined above
            EqualFilter ef = new EqualFilter("owner", owner);
            
            // the index defines the table we will query (myTable) and the 
            // columns we want to retrieve (the columns were defined when
            // the index was created 
            Index idx = myTable.Indexes["my_index_name"];
            
            // we must begin a transaction before we can perform a query
            myTransactionalRepository.BeginTransaction();
            Console.WriteLine("Warehouses where owner is '{0}'", owner);
            
            //
            // here's where we actually use the EqualFilter - as part of the 
            // query. note that we can iterate through the returned records
            // using an enumerator.
            //
            foreach (Record r in idx.Query(new ColumnFilter[1] { ef }) {
                Console.WriteLine("\t{0}, phone {1}", r["address"], r["phone"]);
            }
            
            // ... we've finished the query so we should end the transaction
            myTransactionalRepository.EndTransaction();
            </code></example>
        </member>
        <member name="M:Telogis.GeoBase.Transactional.EqualFilter.#ctor(System.String,System.Object)">
            <summary>
            Create a new EqualFilter where the given column of a Record should match a 
            specified value.
            </summary>
            <param name="column">The column name</param>
            <param name="value">The value</param>
        </member>
        <member name="M:Telogis.GeoBase.StringUtil.NormalizedEqual(System.String,System.String)">
            <summary>
            Returns true if the normalized forms of a and b are
            equal
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Telogis.GeoBase.StringUtil.ReplaceAccentedChars(System.String@)">
            <summary>
            Remove accents from a string of characters
            </summary>
            <param name="input"></param>
        </member>
        <member name="M:Telogis.GeoBase.StringUtil.LexicalIncrement(System.String)">
            <summary>
            Lexically increments the input string. For example: Victoria becomes Victorib and Teddy becomes Teddz
            </summary>
            <param name="input">Input string to be incremented</param>
            <returns>Returns lexically incremented string</returns>
        </member>
        <member name="M:Telogis.GeoBase.StringUtil.ForEachOccurence(System.String,System.String,Telogis.GeoBase.Function{System.Boolean,System.Int32})">
            <summary>
            Calls whenFoundIndex with the index into the string of the needle for every occurence of the needle in the haystack
            </summary>
            <param name="needle">String being searched for</param>
            <param name="haystack">The string being searched in</param>
            <param name="whenFoundIndex">Called when an occurence is found. Return false to break out of search</param>
        </member>
        <member name="T:Telogis.GeoBase.IntersectionLabeller">
            <summary>
            Used to label an intersection
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.IntersectionLabeller.UpdatePosition(Telogis.GeoBase.LatLon,System.Double)">
            <summary>
            Update the position of a single vehicle
            </summary>
            <param name="location"></param>
            <param name="heading"></param>
        </member>
        <member name="M:Telogis.GeoBase.IntersectionLabeller.UpdatePosition(Telogis.GeoBase.IntersectionLabeller.Position[])">
            <summary>
            Update the position of multiple vehicles
            </summary>
            <param name="positions">An array of vehicle Positions, see <see cref="T:Telogis.GeoBase.IntersectionLabeller.Position">Position</see></param>
        </member>
        <member name="M:Telogis.GeoBase.IntersectionLabeller.DrawPoint(System.Drawing.Graphics,Telogis.GeoBase.RenderContext,System.Drawing.Brush,Telogis.GeoBase.LatLon)">
            <summary>
            Draw a rectangle at the given location.
            </summary>
            <param name="gr"></param>
            <param name="rc"></param>
            <param name="br"><see cref="T:System.Drawing.Brush"/></param>
            <param name="ll"></param>
        </member>
        <member name="M:Telogis.GeoBase.IntersectionLabeller.Render(System.Drawing.Graphics,Telogis.GeoBase.RenderContext)">
            <summary>
            Render an intersection label on the given graphics with a given context. Should not be called directly.
            </summary>
            <param name="g"><see cref="T:System.Drawing.Graphics"/></param>
            <param name="rc"><see cref="T:Telogis.GeoBase.RenderContext"/></param>
        </member>
        <member name="M:Telogis.GeoBase.IntersectionLabeller.MidPoint(Telogis.GeoBase.LatLon,Telogis.GeoBase.LatLon)">
            <summary>
            Return the midpoint between two given <see cref="T:Telogis.GeoBase.LatLon">LatLon</see>s.
            </summary>
            <param name="A"><see cref="T:Telogis.GeoBase.LatLon"/></param>
            <param name="B"><see cref="T:Telogis.GeoBase.LatLon"/></param>
            <returns></returns>
        </member>
        <member name="M:Telogis.GeoBase.IntersectionLabeller.GetDirection(Telogis.GeoBase.StreetLink,Telogis.GeoBase.LatLon,System.Double)">
            <summary>
            Check if the given heading is in-line with the alignment of the street (within a 90 degree arc)
            </summary>
            <param name="link">A street. See <see cref="T:Telogis.GeoBase.StreetLink">StreetLink</see></param>
            <param name="location">The current location (on the street). See <see cref="T:Telogis.GeoBase.LatLon">LatLon</see></param>
            <param name="heading">The current heading, measured in degrees</param>
            <returns><b>True</b> if the given heading is in-line (within a 90 degree arc) with the alignment of the street</returns>
        </member>
        <member name="M:Telogis.GeoBase.IntersectionLabeller.LabelLinkPt(Telogis.GeoBase.IntersectionLabeller.Context,Telogis.GeoBase.LatLon,Telogis.GeoBase.StreetLink,Telogis.GeoBase.LatLon)">
            <summary>
            Label the link on an intersection
            </summary>
            <param name="c">The Context object for this labeller</param>
            <param name="llint">The location of the intersection</param>
            <param name="link">The streetlink object that describes the link</param>
            <param name="llpt">The point to label the link on</param>
            <returns><b>True</b> if the link was labelled, otherwise <b>false</b></returns>
        </member>
        <member name="P:Telogis.GeoBase.IntersectionLabeller.Font">
            <summary>
            Gets or sets the <see cref="T:System.Drawing.Font">System.Drawing.Font</see> used to 
            render the text of the label.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.IntersectionLabeller.Brush">
            <summary>
            Gets or sets the <see cref="T:System.Drawing.Brush">System.Drawing.Brush</see> color
            used to draw the text of the label.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.IntersectionLabeller.Pen">
            <summary>
            Gets or sets the <see cref="T:System.Drawing.Pen">System.Drawing.Pen</see> used to
            draw the label outline.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.IntersectionLabeller.RequiredRendermodes">
            <summary>
            Gets the <see cref="T:Telogis.GeoBase.RenderMode">RenderMode</see> required by this <b>IntersectionLabeller</b>
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.IntersectionLabeller.Position">
            <summary>
            Used to describe the position (of a vehicle) for intersection labelling.
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.IntersectionLabeller.Position.#ctor(Telogis.GeoBase.LatLon,System.Double)">
            <summary>
            Construct a new Position with the given location and heading.
            </summary>
            <param name="location"><see cref="T:Telogis.GeoBase.LatLon"/></param>
            <param name="heading">The desired heading</param>
        </member>
        <member name="P:Telogis.GeoBase.IntersectionLabeller.Position.Location">
            <summary>
            Get the location of this Position.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.IntersectionLabeller.Position.Heading">
            <summary>
            Get the heading of this Position.
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.GeoStream.Server.JSONDataQuery">
            <summary>
            Provides a JSON interface to the DataQuery class
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.GeoStream.Server.JSONHandler">
            <summary>
            Provides an abstract base class that all classes that want to service JSON requests should inherit from.
            </summary>
            <remarks>
            This abstract class implements the functionality required to service JSON requests. Inheriting classes
            need only define arbitrary methods and mark them with JsonRpcMethodAttribute, and this base class will
            take care of exposing them and routing requests to them.
            </remarks>
        </member>
        <member name="F:Telogis.GeoBase.GeoStream.Server.JSONHandler.method">
            <summary>
            Method use to send request, should be POST or GET
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.GeoStream.Server.JSONHandler.user">
            <summary>
            Used to authenticate a user's access to resources. See <see cref="T:Telogis.GeoBase.GeoStream.Authentication.AuthenticatedUser"/>.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.GeoStream.Server.JSONHandler.Context">
            <summary>
            Used to record all HTTP-specific information related to a request.  See <see cref="T:System.Web.HttpContext"/>.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.GeoStream.Server.JSONHandler.Request">
            <summary>
            Used to read HTTP values sent by client during the request.  See <see cref="T:System.Web.HttpRequest"/>.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.GeoStream.Server.JSONHandler.Response">
            <summary>
            Used to form the HTTP response to the request. See <see cref="T:System.Web.HttpResponse"/>.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.GeoStream.Server.JSONHandler.Session">
            <summary>
            Used to alter HTTP session settings and values. See <see cref="T:System.Web.SessionState.HttpSessionState"/>.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.GeoStream.Server.JSONHandler.Server">
            <summary>
            Used to process HTTP requests. See <see cref="T:System.Web.HttpServerUtility"/>.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.GeoStream.Server.JSONHandler.RequestId">
            <summary>
            Used to identify this request for logging. 
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.GeoStream.Server.JSONHandler.JsonCompressionEnabled">
            <summary>
            If this is true, clients that indicate they can accept compressed HTTP messages in their
            Accept-Encoding header will be served compressed responses.
            If this setting is absent from Web.Config, then this defaults to false.
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.GeoStream.Server.JSONHandler.GetMethodInfo(System.Type,System.String)">
            <summary>
            Retrieves the method attributes using the method's name.
            </summary>
            <param name="t">The <see cref="T:System.Type"/> containing the methods to match to <b>methodname</b>.</param>
            <param name="methodname">The name of the method to match to a method.</param>
            <returns><see cref="T:System.Reflection.MethodInfo"/> containing a series of method attributes, or <b>null</b>
            if a unique match could not be made between a method and method name.</returns>
        </member>
        <member name="M:Telogis.GeoBase.GeoStream.Server.JSONHandler.Countries(System.Object[])">
            <summary>
            Gets all available countries. No parameters are required.
            </summary>
            <returns>the array of countries supported by the loaded data files.</returns>
        </member>
        <member name="M:Telogis.GeoBase.GeoStream.Server.JSONHandler.GetCultures(System.Object[])">
            <summary>
            Gets the cultures available for generating directions. The head of the array is the default culture of the application.
            </summary>
            <param name="args">No parameters are required.</param>
            <returns>An array of cultures.</returns>
        </member>
        <member name="M:Telogis.GeoBase.GeoStream.Server.JSONHandler.GetCopyrightString(System.Object[])">
            <summary>
            Gets the copyright string to display in the corner of maps. No parameters are required.
            </summary>
            <returns>the copyright string associated with the loaded datasets.</returns>
        </member>
        <member name="M:Telogis.GeoBase.GeoStream.Server.JSONHandler.GetUTCTime">
            <summary>
            Gets the current time (as UTC).
            </summary>
            <returns>the current time (as UTC).</returns>
        </member>
        <member name="M:Telogis.GeoBase.GeoStream.Server.JSONHandler.HaveCountry(Telogis.GeoBase.Country)">
            <summary>
            Checks if a given country is available.
            </summary>
            <param name="country"><see cref="T:Telogis.GeoBase.Country"/></param>
            <returns>True if the specified country is available, otherwise false.</returns>
        </member>
        <member name="M:Telogis.GeoBase.GeoStream.Server.JSONHandler.Test">
            <summary>
            A simple method used to test the operation of the JSONHandler. Always returns <b>true</b>.
            </summary>
            <returns><b>True</b>.</returns>
        </member>
        <member name="M:Telogis.GeoBase.GeoStream.Server.JSONHandler.UploadStyle(System.String,System.Boolean)">
            <summary>
            Uploads a new map style to the server (if allowed).
            </summary>
            <param name="sourceStr"> The URI of the style source.</param>
            <param name="encrypted"> A boolean indicating whether the map style is encrypted.</param>
            <returns>true if the upload was successful, or false if the operation is not allowed.</returns>
        </member>
        <member name="M:Telogis.GeoBase.GeoStream.Server.JSONHandler.GetObjectByGuid(System.String)">
            <summary>
            Gets an object from cache, given a GUID.
            </summary>
            <param name="guid">Unique identifier for the object.</param>
            <returns><see cref="T:Telogis.GeoBase.Routing.Route"/>.</returns>
        </member>
        <member name="M:Telogis.GeoBase.GeoStream.Server.JSONHandler.GetRouteMatrixByGuid(System.String)">
            <summary>
            Gets a <see cref="T:Telogis.GeoBase.Routing.RouteMatrix"/> from cache, given a GUID.
            </summary>
            <param name="guid">Unique identifier for the route matrix.</param>
            <returns><see cref="T:Telogis.GeoBase.Routing.RouteMatrix"/>.</returns>
        </member>
        <member name="M:Telogis.GeoBase.GeoStream.Server.JSONHandler.getDatasetHashCode">
             <summary>
            
             </summary>
             <returns></returns>
        </member>
        <member name="M:Telogis.GeoBase.GeoStream.Server.JSONHandler.IsCompressionRequested(System.String)">
            <summary>
            Determines if a compression algorithm is requested by the client
            </summary>
            <param name="name">The name of a compression algorithm (e.g. "gzip")</param>
            <returns>True, if the name of the compression algorithm given in name has been
            requested by the client in the Accept-Encoding header, otherwise false.</returns>
        </member>
        <member name="M:Telogis.GeoBase.GeoStream.Server.JSONHandler.CompressPage">
            <summary>
            Sets up the current page or handler to use GZip through a Response.Filter, if requested
            by the client and enabled server-side.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.GeoStream.Server.JSONHandler.m_jsonRegex">
            <summary>
            Regular expression for identifying that a stream contains a JSON request.
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.GeoStream.Server.JSONHandler.GetRequestStream">
            <summary>
            Gets the RPC request stream from the input stream (which may be encoded).
            </summary>
            <returns>A <see cref="T:System.IO.Stream"/> containing the serialized JSON RPC.</returns>
        </member>
        <member name="M:Telogis.GeoBase.GeoStream.Server.JSONHandler.ProcessRequest(System.Web.HttpContext)">
            <summary>
            Processes the JSON request associated with a given HTTP request.
            </summary>
            <param name="context">The <see cref="T:System.Web.HttpContext"/> describing the request.</param>
        </member>
        <member name="M:Telogis.GeoBase.GeoStream.Server.JSONHandler.QuoteJSON(System.String)">
            <summary>
            places single-quotes around a JSON string and escapes the necessary characters in the JSON
            to ensure that it is preserved even once its containing string is evaluated.
            </summary>
            <param name="json">the raw JSON to quote.</param>
            <returns>a quoted string containing <paramref name="json"/>.</returns>
        </member>
        <member name="M:Telogis.GeoBase.GeoStream.Server.JSONHandler.#cctor">
            <summary>
            Static constructor to initialize worker pool.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.GeoStream.Server.JSONHandler.IsReusable">
            <summary>
            Controls whether the handler is reusable. Always returns <b>true</b> (yes).
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.GeoStream.Server.JSONDataQuery.CheckAuthorization">
            <summary>
            Checks that the user is authorized to perform a Data Query.
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.GeoStream.Server.JSONDataQuery.QueryStreets(Telogis.GeoBase.BoundingBox,System.String)">
            <summary>
            Gets an array of <see cref="T:Telogis.GeoBase.Street"/>s, of
            the specified <see cref="T:Telogis.GeoBase.StreetType"/>, that
            lie underneath the given <see cref="T:Telogis.GeoBase.BoundingBox"/>.</summary>
            <remarks>
            <para>This method also matches <see cref="T:Telogis.GeoBase.Street"/>s that pass through <b>bbox</b> and continue
            outside its area.<br/> Further, Streets with <see cref="T:Telogis.GeoBase.BoundingBox">BoundingBoxes</see>
            that intersect <b>bbox</b> will also be returned by this method, thus it is possible
            that streets will be returned that appear to lie outside <b>rect</b>.</para>
            <para><b>Note:</b></para><para>The maximum number of results that can be returned is limited, depending on the application's platform. 
            For desktop applications, this value is 262144; for mobile applications, the limit is 4096.</para>
            </remarks>
            <param name="bbox">The <see cref="T:Telogis.GeoBase.BoundingBox"/> representing the area to be queried.</param>
            <param name="type">The <see cref="T:Telogis.GeoBase.StreetType"/> that should be matched.</param>
            <returns>An array of <see cref="T:Telogis.GeoBase.Street"/>s matching the specified type.</returns>
        </member>
        <member name="M:Telogis.GeoBase.GeoStream.Server.JSONDataQuery.FindNearestPolygons(Telogis.GeoBase.LatLon,System.String,System.Double)">
             <summary>
             Gets an array of <see cref="T:Telogis.GeoBase.Polygon"/> objects from a given table that
             are near the given location. Polygons are used to represent features such as lakes, golf courses,
             parking lots and forests.
             </summary>
             <remarks>
             <para>See <see cref="T:Telogis.GeoBase.CustomTable"/> for a list of predefined tables.</para>
             <seealso cref="M:Telogis.GeoBase.GeoStream.Server.JSONDataQuery.FindNearestPolygon(Telogis.GeoBase.LatLon,System.String)"/>
             </remarks> 
             <para>Use this method with caution as it only returns one result, even if multiple polygons are within the search location. 
             It is recommended that <see cref="M:Telogis.GeoBase.DataQuery.FindNearestPolygons(Telogis.GeoBase.LatLon,System.String)">FindNearestPolygons</see> is used instead, which 
             returns an <b>array</b> of polygons from within the search location.</para>
             <example><code lang="C#">
             //
             // This example will use a GPS unit to find the current location,
             // and then perform a DataQuery to find the nearest hospital to our
             // current location...
             //
            
             IGps myGps = new CEGps(); // create GPS unit, this will work on Windows Mobile devices
             myGps.PowerUp(); // power up the GPS, ready for use
            
             LatLon myLoc = myGps.Position.location; // get the current location
            
             // then get the nearest hospital, as a polygon...
             Polygon hospital = DataQuery.FindNearestPolygons(myLoc, "hospitals")[0];
             </code></example>
             <param name="location">Polygon objects nearest to this location will be returned.</param>
             <param name="tableName">The name of the table to query. See <see cref="T:Telogis.GeoBase.CustomTable"/></param>
             <param name="simplificationLevel">Level used to simplify results, given as meters per pixel</param>
             <returns>The nearest <see cref="T:Telogis.GeoBase.Polygon"/>s. There may be more than one if the
             query point touches one or more Polygon objects. An empty array is returned if there are no results.</returns>
        </member>
        <member name="M:Telogis.GeoBase.GeoStream.Server.JSONDataQuery.FindNearestLines(Telogis.GeoBase.LatLon,System.String)">
            <summary>
            Finds the nearest <see cref="T:Telogis.GeoBase.Line"/> (such as a stream or railway line)
            to the location given, in the specified table. See <see cref="T:Telogis.GeoBase.CustomTable"/>
            for a list of predefined tables.
            </summary>
            <param name="location">The location to query.</param>
            <param name="tableName">The line table to query. See <see cref="T:Telogis.GeoBase.CustomTable"/>
            for a list of predefined tables</param>
            <returns>The nearest <see cref="T:Telogis.GeoBase.Line"/>s. There may be more than one if the
            query point touches one or more Line objects. An empty array is returned if there are no results.</returns>
            <remarks>Map features are stored in named tables. See <see cref="M:Telogis.GeoBase.DataQuery.QueryLines(Telogis.GeoBase.BoundingBox,System.String)"/>
            <seealso cref="M:Telogis.GeoBase.DataQuery.QueryLines(Telogis.GeoBase.BoundingBox,System.String)"/>
            </remarks>
        </member>
        <member name="M:Telogis.GeoBase.GeoStream.Server.JSONDataQuery.QueryIndex(System.String,System.Object)">
            <summary>
            Queries a given object for an index. See also <see cref="T:Telogis.GeoBase.CustomTable"/> and <see cref="T:Telogis.GeoBase.CustomColumn"/>.
            </summary>
            <remarks>Given a table of power pylons (containing location, height and ID information) this method
            could be used to return a selection of power pylons matching certain location criteria.</remarks>
            <param name="index">Index to query</param>
            <param name="query">Key to search for</param>
            <returns>An array of <see cref="T:Telogis.GeoBase.GISObject"/> that match the query.</returns>
        </member>
        <member name="M:Telogis.GeoBase.GeoStream.Server.JSONDataQuery.QueryIndex(System.String,System.String,System.Object)">
            <summary>
            Queries a given object for an index. See also <see cref="T:Telogis.GeoBase.CustomTable"/> and <see cref="T:Telogis.GeoBase.CustomColumn"/>.
            </summary>
            <remarks>Given a table of power pylons (containing location, height and ID information) this method
            could be used to return a selection of power pylons matching certain location criteria.</remarks>
            <param name="index">Index to query</param>
            <param name="table">Table to query index from</param>
            <param name="query">Key to search for</param>
            <returns>An array of <see cref="T:Telogis.GeoBase.GISObject"/> that match the query.</returns>
        </member>
        <member name="M:Telogis.GeoBase.GeoStream.Server.JSONDataQuery.QueryIndex(System.String,Telogis.GeoBase.QueryType,System.Object)">
            <summary>
            Queries a given object for an index. See also <see cref="T:Telogis.GeoBase.CustomTable"/> and <see cref="T:Telogis.GeoBase.CustomColumn"/>.
            </summary>
            <remarks>Given a table of power pylons (containing location, height and ID information) this method
            could be used to return a selection of power pylons matching certain location criteria.</remarks>
            <param name="index">Index to query</param>
            <param name="condition">Condition to filter the key on</param>
            <param name="query">Key to search for</param>		
            <returns>An array of <see cref="T:Telogis.GeoBase.GISObject"/> that match the query and condition.</returns>
        </member>
        <member name="M:Telogis.GeoBase.GeoStream.Server.JSONDataQuery.QueryIndex(System.String,System.String,Telogis.GeoBase.QueryType,System.Object)">
            <summary>
            Queries a given object for an index. See also <see cref="T:Telogis.GeoBase.CustomTable"/> and <see cref="T:Telogis.GeoBase.CustomColumn"/>.
            </summary>
            <remarks>Given a table of power pylons (containing location, height and ID information) this method
            could be used to return a selection of power pylons matching certain location criteria.</remarks>
            <param name="index">Index to query</param>
            <param name="table">Table to query index from</param>
            <param name="condition">Condition to filter the key on</param>
            <param name="query">Key to search for</param>		
            <returns>An array of <see cref="T:Telogis.GeoBase.GISObject"/> that match the query and condition.</returns>
        </member>
        <member name="M:Telogis.GeoBase.GeoStream.Server.JSONDataQuery.QueryIndex(System.String,Telogis.GeoBase.QueryType,System.Object,System.Double)">
            <summary>
            Queries a given object for an index. See also <see cref="T:Telogis.GeoBase.CustomTable"/> and <see cref="T:Telogis.GeoBase.CustomColumn"/>.
            </summary>
            <remarks>Given a table of power pylons (containing location, height and ID information) this method
            could be used to return a selection of power pylons matching certain location criteria.</remarks>
            <param name="index">Index to query</param>
            <param name="condition">Condition to filter the key on</param>
            <param name="query">Key to search for</param>
            <param name="simplificationLevel">Level used to simplify line and polygon results, given as meters per pixel</param>
            <returns>An array of <see cref="T:Telogis.GeoBase.GISObject"/> that match the query and condition.</returns>
        </member>
        <member name="M:Telogis.GeoBase.GeoStream.Server.JSONDataQuery.QueryIndex(System.String,System.String,Telogis.GeoBase.QueryType,System.Object,System.Double)">
            <summary>
            Queries a given object for an index. See also <see cref="T:Telogis.GeoBase.CustomTable"/> and <see cref="T:Telogis.GeoBase.CustomColumn"/>.
            </summary>
            <remarks>Given a table of power pylons (containing location, height and ID information) this method
            could be used to return a selection of power pylons matching certain location criteria.</remarks>
            <param name="index">Index to query</param>
            <param name="table">Table to query index from</param>
            <param name="condition">Condition to filter the key on</param>
            <param name="query">Key to search for</param>
            <param name="simplificationLevel">Level used to simplify line and polygon results, given as meters per pixel</param>
            <returns>An array of <see cref="T:Telogis.GeoBase.GISObject"/> that match the query and condition.</returns>
        </member>
        <member name="M:Telogis.GeoBase.GeoStream.Server.JSONDataQuery.QueryPolygons(Telogis.GeoBase.BoundingBox,System.String)">
            <summary>
            Gets an array of <see cref="T:Telogis.GeoBase.Polygon"/>s that
            lie underneath the given <see cref="T:Telogis.GeoBase.Rectangle"/>.
            </summary>
            <param name="bbox">The <see cref="T:Telogis.GeoBase.BoundingBox"/> representing the area to be queried.</param>
            <param name="tableName">The name of the polygon table to query</param>
            <returns>An array of <see cref="T:Telogis.GeoBase.Polygon"/>s matching the specified type.</returns>
            <remarks>
            <para>This method matches <see cref="T:Telogis.GeoBase.Polygon"/>s that pass through <b>rect</b> and continue
            outside its area.<br/> Further, Polygons with <see cref="T:Telogis.GeoBase.BoundingBox">BoundingBoxes</see>
            that intersect <b>rect</b> will also be returned by this method, thus it is possible
            that streets will be returned that appear to lie outside <b>rect</b>.</para>
            <para>Map features are stored in tables, named according to type. Developers with custom data should avoid using
            the table names in the list below.</para>
            <list type="table">
            <listheader><term>Pre-defined polygon query tables</term><description>Polygon Import Type</description></listheader>
            <item><term>all</term><description>All</description></item>
            <item><term>countries</term><description>Countries (22)</description></item>
            <item><term>states</term><description>States (1)</description></item>
            <item><term>counties</term><description>Counties (23)</description></item>
            <item><term>islands</term><description>Islands (24)</description></item>
            <item><term>cities</term><description>Cities (2)</description></item>
            <item><term>airports</term><description>Airports (8)</description></item>
            <item><term>runways</term><description>Aircraft roads (runways &amp; taxi-ways)(19)</description></item>
            <item><term>cemeteries</term><description>Cemeteries (9)</description></item>
            <item><term>hospitals</term><description>Hospitals (10)</description></item>
            <item><term>industrial</term><description>Industrial complexes (11)</description></item>
            <item><term>major_parks</term><description>National parks (13)</description></item>
            <item><term>state_parks</term><description>State parks (14)</description></item>
            <item><term>parks</term><description>County parks (15)</description></item>
            <item><term>shopping</term><description>Shopping centers (16)</description></item>
            <item><term>sports</term><description>Sports complexes (17)</description></item>
            <item><term>universities</term><description>Colleges (18)</description></item>
            <item><term>golf_courses</term><description>Golf courses (20)</description></item>
            <item><term>native</term><description>Native American reservations (21)</description></item>
            <item><term>military</term><description>Military bases (12)</description></item>
            <item><term>buildings</term><description>Buildings (5)</description></item>
            <item><term>oceans</term><description>Oceans (0)</description></item>
            <item><term>bays</term><description>Bays (3)</description></item>
            <item><term>water</term><description>Water (4)</description></item>
            </list>
            </remarks>	
        </member>
        <member name="M:Telogis.GeoBase.GeoStream.Server.JSONDataQuery.QueryPolygons(Telogis.GeoBase.BoundingBox,System.String,System.Double)">
            <summary>
            Gets an array of <see cref="T:Telogis.GeoBase.Polygon"/>s that
            lie underneath the given <see cref="T:Telogis.GeoBase.Rectangle"/>.
            </summary>
            <param name="bbox">The <see cref="T:Telogis.GeoBase.BoundingBox"/> representing the area to be queried.</param>
            <param name="tableName">The name of the polygon table to query</param>
            <param name="simplificationLevel">Level used to simplify results, given as meters per pixel</param>
            <returns>An array of <see cref="T:Telogis.GeoBase.Polygon"/>s matching the specified type.</returns>
            <remarks>
            <para>This method matches <see cref="T:Telogis.GeoBase.Polygon"/>s that pass through <b>rect</b> and continue
            outside its area.<br/> Further, Polygons with <see cref="T:Telogis.GeoBase.BoundingBox">BoundingBoxes</see>
            that intersect <b>rect</b> will also be returned by this method, thus it is possible
            that streets will be returned that appear to lie outside <b>rect</b>.</para>
            <para>Map features are stored in tables, named according to type. Developers with custom data should avoid using
            the table names in the list below.</para>
            <list type="table">
            <listheader><term>Pre-defined polygon query tables</term><description>Polygon Import Type</description></listheader>
            <item><term>all</term><description>All</description></item>
            <item><term>countries</term><description>Countries (22)</description></item>
            <item><term>states</term><description>States (1)</description></item>
            <item><term>counties</term><description>Counties (23)</description></item>
            <item><term>islands</term><description>Islands (24)</description></item>
            <item><term>cities</term><description>Cities (2)</description></item>
            <item><term>airports</term><description>Airports (8)</description></item>
            <item><term>runways</term><description>Aircraft roads (runways &amp; taxi-ways)(19)</description></item>
            <item><term>cemeteries</term><description>Cemeteries (9)</description></item>
            <item><term>hospitals</term><description>Hospitals (10)</description></item>
            <item><term>industrial</term><description>Industrial complexes (11)</description></item>
            <item><term>major_parks</term><description>National parks (13)</description></item>
            <item><term>state_parks</term><description>State parks (14)</description></item>
            <item><term>parks</term><description>County parks (15)</description></item>
            <item><term>shopping</term><description>Shopping centers (16)</description></item>
            <item><term>sports</term><description>Sports complexes (17)</description></item>
            <item><term>universities</term><description>Colleges (18)</description></item>
            <item><term>golf_courses</term><description>Golf courses (20)</description></item>
            <item><term>native</term><description>Native American reservations (21)</description></item>
            <item><term>military</term><description>Military bases (12)</description></item>
            <item><term>buildings</term><description>Buildings (5)</description></item>
            <item><term>oceans</term><description>Oceans (0)</description></item>
            <item><term>bays</term><description>Bays (3)</description></item>
            <item><term>water</term><description>Water (4)</description></item>
            </list>
            </remarks>	
        </member>
        <member name="M:Telogis.GeoBase.GeoStream.Server.JSONDataQuery.QueryPolygonsAtPoint(Telogis.GeoBase.LatLon,System.String)">
             <summary>
             Gets an array of <see cref="T:Telogis.GeoBase.Polygon"/> objects that
             encapsulate the given <see cref="T:Telogis.GeoBase.LatLon"/>. This method can be used to find
             polygons (such as golf courses, parks, airports, political/geographical entities and bodies of water)
             at a given location. See example.
             </summary>
             <param name="loc">A <see cref="T:Telogis.GeoBase.LatLon"/> location to query.</param>
             <param name="tableName">The name of the polygon table to query (this specifies
             the <see cref="T:Telogis.GeoBase.PolygonType"/> to return).</param>
             <returns>An array of <see cref="T:Telogis.GeoBase.Polygon"/>s matching the specified type.</returns>
             <remarks>
             <para>Map features are stored in tables, named according to type. Developers with custom data should avoid using
             the table names in the list below.</para>
             <list type="table">
             <listheader><term>Pre-defined polygon query tables</term></listheader>
             <item><term>all</term></item>
             <item><term>countries</term></item>
             <item><term>states</term></item>
             <item><term>counties</term></item>
             <item><term>islands</term></item>
             <item><term>cities</term></item>
             <item><term>airports</term></item>
             <item><term>runways</term></item>
             <item><term>cemeteries</term></item>
             <item><term>hospitals</term></item>
             <item><term>industrial</term></item>
             <item><term>major_parks</term></item>
             <item><term>state_parks</term></item>
             <item><term>parks</term></item>
             <item><term>shopping</term></item>
             <item><term>sports</term></item>
             <item><term>universities</term></item>
             <item><term>golf_courses</term></item>
             <item><term>native</term></item>
             <item><term>military</term></item>
             <item><term>buildings</term></item>
             <item><term>oceans</term></item>
             <item><term>bays</term></item>
             <item><term>water</term></item>
             </list>
             </remarks>
             <example><code lang="C#">
             //
             // Get the golf course (if one exists) at the given location...
             //
             LatLon loc = new LatLon(33.919432,-118.31181); // location in Los Angeles, USA
             Polygon[] gcs = DataQuery.QueryPolygonsAtPoint(loc, "golf_courses");
             Console.WriteLine("There is " + gcs.Length + " golf course at the location " + loc.ToString());
            
             //
             // Get all polygons at the given location...
             //
             gcs = DataQuery.QueryPolygonsAtPoint(loc, "all");
             Console.WriteLine("There are a total of " + gcs.Length + " polygons at the location " + loc.ToString());
             int counter = 1;
             	foreach (Polygon p in gcs) {
             		Console.WriteLine("\t" + (counter++) + ") " + p.Name);
             }
             </code>
             <para>The above code snippet produces the following output:</para>
             <table><column><row>There is 1 golf course at the location 33.919432,-118.311809<br/>
             There are a total of 3 polygons at the location 33.919432,-118.311809<br/>
             1) Chester L Washington Golf Course<br/>
             2) Los Angeles<br/>
             3) California<br/></row></column>
             </table>
             </example>
        </member>
        <member name="M:Telogis.GeoBase.GeoStream.Server.JSONDataQuery.QueryPolygonsAtPoint(Telogis.GeoBase.LatLon,System.String,System.Double)">
             <summary>
             Gets an array of <see cref="T:Telogis.GeoBase.Polygon"/> objects that
             encapsulate the given <see cref="T:Telogis.GeoBase.LatLon"/>. This method can be used to find
             polygons (such as golf courses, parks, airports, political/geographical entities and bodies of water)
             at a given location. See example.
             </summary>
             <param name="loc">A <see cref="T:Telogis.GeoBase.LatLon"/> location to query.</param>
             <param name="tableName">The name of the polygon table to query (this specifies
             the <see cref="T:Telogis.GeoBase.PolygonType"/> to return).</param>
             <param name="simplificationLevel">Level used to simplify results, given as meters per pixel</param>
             <returns>An array of <see cref="T:Telogis.GeoBase.Polygon"/>s matching the specified type.</returns>
             <remarks>
             <para>Map features are stored in tables, named according to type. Developers with custom data should avoid using
             the table names in the list below.</para>
             <list type="table">
             <listheader><term>Pre-defined polygon query tables</term></listheader>
             <item><term>all</term></item>
             <item><term>countries</term></item>
             <item><term>states</term></item>
             <item><term>counties</term></item>
             <item><term>islands</term></item>
             <item><term>cities</term></item>
             <item><term>airports</term></item>
             <item><term>runways</term></item>
             <item><term>cemeteries</term></item>
             <item><term>hospitals</term></item>
             <item><term>industrial</term></item>
             <item><term>major_parks</term></item>
             <item><term>state_parks</term></item>
             <item><term>parks</term></item>
             <item><term>shopping</term></item>
             <item><term>sports</term></item>
             <item><term>universities</term></item>
             <item><term>golf_courses</term></item>
             <item><term>native</term></item>
             <item><term>military</term></item>
             <item><term>buildings</term></item>
             <item><term>oceans</term></item>
             <item><term>bays</term></item>
             <item><term>water</term></item>
             </list>
             </remarks>
             <example><code lang="C#">
             //
             // Get the golf course (if one exists) at the given location...
             //
             LatLon loc = new LatLon(33.919432,-118.31181); // location in Los Angeles, USA
             Polygon[] gcs = DataQuery.QueryPolygonsAtPoint(loc, "golf_courses", 1);
             Console.WriteLine("There is " + gcs.Length + " golf course at the location " + loc.ToString());
            
             //
             // Get all polygons at the given location...
             //
             gcs = DataQuery.QueryPolygonsAtPoint(loc, "all", 1);
             Console.WriteLine("There are a total of " + gcs.Length + " polygons at the location " + loc.ToString());
             int counter = 1;
             	foreach (Polygon p in gcs) {
             		Console.WriteLine("\t" + (counter++) + ") " + p.Name);
             }
             </code>
             <para>The above code snippet produces the following output:</para>
             <table><column><row>There is 1 golf course at the location 33.919432,-118.311809<br/>
             There are a total of 3 polygons at the location 33.919432,-118.311809<br/>
             1) Chester L Washington Golf Course<br/>
             2) Los Angeles<br/>
             3) California<br/></row></column>
             </table>
             </example>
        </member>
        <member name="M:Telogis.GeoBase.GeoStream.Server.JSONDataQuery.QueryPoints(Telogis.GeoBase.BoundingBox,System.String)">
             <summary>
             Finds <see cref="T:Telogis.GeoBase.PointFeature"/> objects that lie within the given
             <see cref="T:Telogis.GeoBase.Rectangle"/>.
             </summary>
             <param name="bbox">The <see cref="T:Telogis.GeoBase.BoundingBox"/> representing the area to query.</param>
             <param name="tableName">The name of the table to query.</param>
             <returns></returns>
             <remarks>Map features are stored in named tables according to their type.
             Developers with custom data should avoid using the table names in the list below.
             <list type="table">
             <listheader><term>Pre-defined data query tables</term></listheader>
             <item><term>all</term></item>
             <item><term>small_villages</term></item>
             <item><term>villages</term></item>
             <item><term>large_villages</term></item>
             <item><term>towns</term></item>
             <item><term>large_towns</term></item>
             <item><term>small_cities</term></item>
             <item><term>cities</term></item>
             <item><term>major_cities</term></item>
             </list>
             </remarks>
             <example><code lang="C#">
             //
             // Create new BoundingBox, NE Los Angeles (USA)
             //
             BoundingBox bbox = new BoundingBox(new LatLon(34, -117), new LatLon(33.75, -117.5));
            
             //
             // Get all PointFeatures in the bounding box...
             //
             PointFeature[] parray = DataQuery.QueryPoints(bbox, "all");
             Console.WriteLine("There are a total of " + parray.Length + " PointFeatures in the given BoundingBox");
             </code></example>
        </member>
        <member name="M:Telogis.GeoBase.GeoStream.Server.JSONDataQuery.QueryLines(Telogis.GeoBase.BoundingBox,System.String,System.Double)">
             <summary>
             Gets an array of <see cref="T:Telogis.GeoBase.Line"/>s that
             lie underneath the given <see cref="T:Telogis.GeoBase.BoundingBox"/>.
             </summary>
             <remarks>
             <para>This method also matches <see cref="T:Telogis.GeoBase.Line"/>s that pass
             through <b>rect</b> and continue outside its area.<br/> Further, Lines with
             <see cref="T:Telogis.GeoBase.BoundingBox">BoundingBoxes</see> that intersect
             <b>rect</b> will also be returned by this method, thus it is possible
             that lines will be returned that appear to lie outside <b>rect</b>.</para>
             <para>Map features are stored in named tables according to their type.
             Developers with custom data should avoid using the table names in the list below.</para>
             <list type="table">
             <listheader><term>Pre-defined <see cref="T:Telogis.GeoBase.Line"/> query tables</term></listheader>
             <item><term>all</term></item>
             <item><term>railways</term></item>
             <item><term>rivers</term></item>
             <item><term>canals</term></item>
             </list>
             </remarks>
             <param name="bbox">The <see cref="T:Telogis.GeoBase.BoundingBox"/> representing the area to be queried.</param>
             <param name="tableName">The lines table to query</param>
             <param name="simplificationLevel">Level used to simplify results, given as meters per pixel</param>
             <returns>An array of <see cref="T:Telogis.GeoBase.Line"/>s.</returns>
             <example><code lang="C#">
             //
             // Create new BoundingBox, NE Los Angeles (USA)
             //
             BoundingBox bbox = new BoundingBox(new LatLon(34, -117), new LatLon(33.75, -117.5));
            
             //
             // Get all the Lines in the bounding box... these could be railways, rivers or canals
             //
             Line[] ls = DataQuery.QueryLines(bbox, "all");
             Console.WriteLine("There are a total of " + ls.Length + " Lines in the given BoundingBox");
             </code></example>
        </member>
        <member name="M:Telogis.GeoBase.GeoStream.Server.JSONDataQuery.QueryLines(Telogis.GeoBase.BoundingBox,System.String)">
             <summary>
             Gets an array of <see cref="T:Telogis.GeoBase.Line"/>s that
             lie underneath the given <see cref="T:Telogis.GeoBase.BoundingBox"/>.
             </summary>
             <remarks>
             <para>This method also matches <see cref="T:Telogis.GeoBase.Line"/>s that pass
             through <b>rect</b> and continue outside its area.<br/> Further, Lines with
             <see cref="T:Telogis.GeoBase.BoundingBox">BoundingBoxes</see> that intersect
             <b>rect</b> will also be returned by this method, thus it is possible
             that lines will be returned that appear to lie outside <b>rect</b>.</para>
             <para>Map features are stored in named tables according to their type.
             Developers with custom data should avoid using the table names in the list below.</para>
             <list type="table">
             <listheader><term>Pre-defined <see cref="T:Telogis.GeoBase.Line"/> query tables</term></listheader>
             <item><term>all</term></item>
             <item><term>railways</term></item>
             <item><term>rivers</term></item>
             <item><term>canals</term></item>
             </list>
             </remarks>
             <param name="bbox">The <see cref="T:Telogis.GeoBase.BoundingBox"/> representing the area to be queried.</param>
             <param name="tableName">The lines table to query</param>
             <returns>An array of <see cref="T:Telogis.GeoBase.Line"/>s.</returns>
             <example><code lang="C#">
             //
             // Create new BoundingBox, NE Los Angeles (USA)
             //
             BoundingBox bbox = new BoundingBox(new LatLon(34, -117), new LatLon(33.75, -117.5));
            
             //
             // Get all the Lines in the bounding box... these could be railways, rivers or canals or all
             //
             Line[] ls = DataQuery.QueryLines(bbox, "railways");
             Console.WriteLine("There are a total of " + ls.Length + " railway lines in the given BoundingBox");
             </code></example>
        </member>
        <member name="M:Telogis.GeoBase.GeoStream.Server.JSONDataQuery.QueryPoi(Telogis.GeoBase.BoundingBox,System.Object[],System.String)">
            <summary>
            Gets all the Points of Interest that lie underneath the given <see cref="T:Telogis.GeoBase.BoundingBox"/>.
            </summary>
            <param name="bbox">A <see cref="T:Telogis.GeoBase.BoundingBox"/> representing the area to query</param>
            <param name="name">Only POIs with names that contain this string are returned.</param>
            <param name="type">An array of <see cref="T:Telogis.GeoBase.PoiType"/> objects. Only POIs matching
            one of these types will be returned.</param>
            <returns></returns>
            
        </member>
        <member name="M:Telogis.GeoBase.GeoStream.Server.JSONDataQuery.QueryLinks(Telogis.GeoBase.BoundingBox)">
            <summary>
            Gets an array of <see cref="T:Telogis.GeoBase.StreetLink"/>s that
            lie underneath the given <see cref="T:Telogis.GeoBase.BoundingBox"/>.
            </summary>
            <remarks>
            This method also matches <see cref="T:Telogis.GeoBase.StreetLink"/>s that pass through <b>rect</b> and continue
            outside its area.<br/> Further, StreetLinks with <see cref="T:Telogis.GeoBase.BoundingBox">BoundingBoxes</see>
            that intersect <b>rect</b> will also be returned by this method, thus it is possible
            that StreetLinks will be returned that appear to lie outside <b>rect</b>.
            </remarks>
            <param name="bbox">The <see cref="T:Telogis.GeoBase.BoundingBox"/> representing the area to be queried.</param>
            <returns>An array of <see cref="T:Telogis.GeoBase.StreetLink"/>s</returns>
        </member>
        <member name="T:Telogis.GeoBase.GeoStream.Server.DirectionOverlay">
            <summary>
            Implements a map overlay that draws driving directions.
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.GeoStream.Server.TileBase">
            <summary>
            Provides an abstract base-class for classes that wish to serve up map tiles or overlay tiles.
            </summary>
            <remarks>
            Implementers need only implement the abstract DoRequest() method.
            </remarks>
        </member>
        <member name="M:Telogis.GeoBase.GeoStream.Server.ITile.RespondWithRedirect(System.String)">
            <summary>
            Respond to the HTTP request with a redirect to another page.
            </summary>
            <param name="url">The URL of the page that should be returned.</param>
        </member>
        <member name="M:Telogis.GeoBase.GeoStream.Server.ITile.GetNotAuthorizedRedirectPath(System.Int32)">
            <summary>
            Get the path to redirect users to when an authorization error occurs.
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.GeoStream.Server.ITile.WritePNGToResponse(System.Drawing.Bitmap)">
            <summary>
            Convert a bitmap to PNG format and write it to the response stream.
            </summary>
            <param name="bmp">The bitmap to write as a PNG.</param>
        </member>
        <member name="M:Telogis.GeoBase.GeoStream.Server.ITile.WriteGIFToResponse(System.Drawing.Bitmap,System.Drawing.Color)">
            <summary>
            Convert a bitmap to GIF format and write it to the response stream.
            </summary>
            <param name="bmp">The bitmap to write as a GIF.</param>
            <param name="color">The color to use as a transparent color in the GIF.</param>
        </member>
        <member name="M:Telogis.GeoBase.GeoStream.Server.ITile.ResponseAppendHeader(System.String,System.String)">
            <summary>
            Add a header to the HTTP response message.
            </summary>
            <param name="name">The name of the HTTP header.</param>
            <param name="value">The value to assign to the header.</param>
        </member>
        <member name="M:Telogis.GeoBase.GeoStream.Server.ITile.ResponseWriteToOutput(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes to the response stream.
            </summary>
            <param name="imageBytes">The bytes to write to the output stream.</param>
            <param name="offset">The offset in the output stream where the bytes should be written.</param>
            <param name="count">The number of bytes to write.</param>
        </member>
        <member name="M:Telogis.GeoBase.GeoStream.Server.ITile.ResponseTransmitFile(System.String)">
            <summary>
            Write the specified file directly to the HTTP response.
            </summary>
            <param name="filename">The file to write to the HTTP reqponse stream.</param>
        </member>
        <member name="M:Telogis.GeoBase.GeoStream.Server.ITile.GetStyle(System.String)">
            <summary>
            Get the style of the map, which is expected to be available from the supplied file.
            </summary>
            <param name="requestedStyleFile">The cam/ecm file that contains the map style.</param>
            <returns>The style of the map.</returns>
        </member>
        <member name="M:Telogis.GeoBase.GeoStream.Server.ITile.RespondErrorMessage(System.Drawing.Image,System.Int32,System.Int32,System.Exception,System.Drawing.Color)">
            <summary>
            Updates the HTTP response to reflect that an exception occured.
            </summary>
            <param name="img">An background image to use for the response.</param>
            <param name="width">The width of the image to return.</param>
            <param name="height">The height of the image to return.</param>
            <param name="exp">The exception that occured.</param>
            <param name="color">A background color to use if no image is supplied.</param>
        </member>
        <member name="M:Telogis.GeoBase.GeoStream.Server.ITile.RenderSuperTile(Telogis.GeoBase.GeoStream.TileParams,System.String,System.Collections.Generic.Dictionary{System.String,System.Single},Telogis.GeoBase.GeoStream.Server.TileReqType,System.String,Telogis.GeoBase.GeoStream.MapType,Telogis.GeoBase.IMapRenderer,System.String)">
            <summary>
            Returns a rendered SuperTile based on the supplied parameters.
            </summary>
            <param name="tileParams">The parameters of the tile, including zoom, position, size, and number of tiles per supertile.</param>
            <param name="style">The style file for the map.</param>
            <param name="parameters">Override values to the parameters in the MapStyle that is loaded from style.</param>
            <param name="reqT">The tile request type (e.g. map, satellite imagery, WMS, and so on)</param>
            <param name="wmsLayer">The name of the WMS layer, when reqT is set to TileReqType.Wms</param>
            <param name="mapType">Indicates whether to draw the map as well as the renderer.</param>
            <param name="renderer">The renderer to be drawn on the map.</param>
            <param name="CacheKey">A key that uniquely identifies a cached version of this tile. This value can be obtained by calling the CacheKey method.</param>
            <returns>A SuperTile object for the rendered super tile.</returns>
        </member>
        <member name="P:Telogis.GeoBase.GeoStream.Server.ITile.Request">
            <summary>
            The HTTP request message that requested the tile.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.GeoStream.Server.ITile.ResponseIsClientConnected">
            <summary>
            Gets a value indicating whether the GeoStream client is still connected to the server.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.GeoStream.Server.ITile.ResponseExpires">
            <summary>
            Gets or sets the number of minutes before a page cached on a browser expires. If the client returns to the
            same page before it expires, the cached version is used.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.GeoStream.Server.ITile.ResponseCacheControl">
            <summary>
            Gets or sets the <b>Cache-Control</b> header of the HTTP response. 
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.GeoStream.Server.ITile.ResponseCaching">
            <summary>
            Returns the HttpCachePolicy for the Response object. This is the preferred way to control
            client-side caching.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.GeoStream.Server.ITile.ResponseContentType">
            <summary>
            Gets or sets the HTTP MIME type of the output stream.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.GeoStream.Server.TileBase.MaxFreeZoom">
            <summary>
            Maximum (free) zoom allowed.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.GeoStream.Server.TileBase.DEFAULT_STYLE_FILENAME">
            <summary>
            The filename (with or without extension) of the MapStyle to use if no MapStyle is 
            specified by the TileRequest and there is no MapStyle filename specified by the
            DefaultStyle key in Web.Config.
            <remarks>
            If this file does not exist (in addition to the conditions for use of this file 
            defined above), then the internal MapStyle will be used as a final last resort.
            </remarks>
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.GeoStream.Server.TileBase.CacheMap">
            <summary>
            Define whether to cache this map.
            </summary>
            <remarks>Defaults to <b>true</b> (map is cached). If <b>false</b> the map is not cached.
            </remarks>
        </member>
        <member name="F:Telogis.GeoBase.GeoStream.Server.TileBase.cacheLock">
            <summary>
            Used to lock the cache for exclusive access.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.GeoStream.Server.TileBase.satelliteAuthToken">
            <summary>
            Remember the auth token for satellite imagery.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.GeoStream.Server.TileBase.AlwaysReturnErrorTilesOnFailure">
            <summary>
            If true, always return Error-Tiles, even if the error was external to the GeoStream
            server (e.g. Satellite imgery cache was down). If false then external errors will
            attempt to return GBMap tiles on external-failure. Defaults to false if not present in
            web.config.
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.GeoStream.Server.TileBase.GetStyle(System.String)">
            <summary>
            Get the style of the map. If the corresponding cam/ecm file cannot be found, the 
            DefaultStyle given in Web.Config is returned, and if that is not set, "tileserve.cam"
            is looked for before returning MapStyle.Default as a last resort.
            </summary>
            <param name="requestedStyleFile">The cam/ecm file that contains the map style.</param>
            <returns>The style of the map.</returns>
        </member>
        <member name="M:Telogis.GeoBase.GeoStream.Server.TileBase.FindStylePathAndFilename(System.String)">
            <summary>
            Checks to see if a given style name has a corresponding .cam or .ecm file that exists
            and returns it if it does.
            </summary>
            <param name="styleName">The filename, with or without extension, of the style to
            look for.</param>		
            <returns>The full path and filename of an existing MapStyle camera file which matches
            the given styleName if one exists, otherwise an empty string.</returns>
            <remarks>This will search the paths listed in member variable stylePaths. If you 
            pass in an absolute file path, and the file exists then that path is returned.</remarks>
        </member>
        <member name="M:Telogis.GeoBase.GeoStream.Server.TileBase.ResponseWriteToOutput(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes to the response stream.
            </summary>
            <param name="imageBytes">The bytes to write to the output stream.</param>
            <param name="offset">The offset in the output stream where the bytes should be written.</param>
            <param name="count">The number of bytes to write.</param>
        </member>
        <member name="M:Telogis.GeoBase.GeoStream.Server.TileBase.ResponseAppendHeader(System.String,System.String)">
            <summary>
            Add a header to the HTTP response message.
            </summary>
            <param name="name">The name of the HTTP header.</param>
            <param name="value">The value to assign to the header.</param>
        </member>
        <member name="M:Telogis.GeoBase.GeoStream.Server.TileBase.ResponseTransmitFile(System.String)">
            <summary>
            Write the specified file directly to the HTTP response.
            </summary>
            <param name="filename">The file to write to the HTTP reqponse stream.</param>
        </member>
        <member name="M:Telogis.GeoBase.GeoStream.Server.TileBase.Page_Load(System.Object,System.EventArgs)">
            <summary>
            Loads a page.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Telogis.GeoBase.GeoStream.Server.TileBase.DoRequest(Telogis.GeoBase.GeoStream.Authentication.AuthenticatedUser,Telogis.GeoBase.GeoStream.TileParams,System.Boolean)">
            <summary>
            Services a request for a tile.
            </summary>
            <remarks>
            Implementers are expected to return to the browser an image with dimensions
            matching the width and height specified in p, containing the overlay for the specified tile.
            </remarks>
            <param name="user">The IAuthenticatedUser the current user is authenticated as, or null if this is an anonymous request.</param>
            <param name="tileParams">The parameters for the tile being requested.</param>
            <param name="debug">If true, debugging mode is enabled.</param>
        </member>
        <member name="M:Telogis.GeoBase.GeoStream.Server.TileBase.RespondNotLoggedIn(System.Int32)">
            <summary>
            User isn't logged in. Redirect and tell them so.
            </summary>
            <param name="size"></param>
        </member>
        <member name="M:Telogis.GeoBase.GeoStream.Server.TileBase.RespondNotAuthorized(System.Int32)">
            <summary>
            User is not authorized. Tell them so.
            </summary>
            <param name="size"></param>
        </member>
        <member name="M:Telogis.GeoBase.GeoStream.Server.TileBase.RespondWithRedirect(System.String)">
            <summary>
            Respond to the HTTP request with a redirect to another page.
            </summary>
            <param name="url">The URL of the page that should be returned.</param>
        </member>
        <member name="M:Telogis.GeoBase.GeoStream.Server.TileBase.RenderSuperTile(Telogis.GeoBase.GeoStream.TileParams,System.String,System.Collections.Generic.Dictionary{System.String,System.Single},Telogis.GeoBase.GeoStream.Server.TileReqType,System.String,Telogis.GeoBase.GeoStream.MapType,Telogis.GeoBase.IMapRenderer,System.String)">
            <summary>
            Returns a rendered SuperTile based on the supplied parameters.
            </summary>
            <param name="tileParams">The parameters of the tile, including zoom, position, size, and number of tiles per supertile.</param>
            <param name="style">The cam/ecm style file for the map.</param>
            <param name="parameters">Override values to the parameters in the MapStyle that is loaded from style.</param>
            <param name="reqT">The tile request type (e.g. map, satellite imagery, WMS, and so on)</param>
            <param name="wmsLayer">The name of the WMS layer, when reqT is set to TileReqType.Wms</param>
            <param name="mapType">Indicates whether to draw the map as well as the renderer.</param>
            <param name="renderer">The renderer to be drawn on the map.</param>
            <param name="CacheKey">A key that uniquely identifies a cached version of this tile. This value can be obtained by calling the CacheKey method.</param>
            <returns>A SuperTile object for the rendered super tile.</returns>
        </member>
        <member name="M:Telogis.GeoBase.GeoStream.Server.TileBase.RespondErrorMessage(System.Drawing.Image,System.Int32,System.Int32,System.Exception,System.Drawing.Color)">
            <summary>
            Updates the HTTP response to reflect that an exception occured.
            </summary>
            <param name="img">An background image to use for the response.</param>
            <param name="width">The width of the image to return.</param>
            <param name="height">The height of the image to return.</param>
            <param name="exp">The exception that occured.</param>
            <param name="color">A background color to use if no image is supplied.</param>
        </member>
        <member name="M:Telogis.GeoBase.GeoStream.Server.TileBase.ParamOutOfBounds(Telogis.GeoBase.GeoStream.TileParams)">
            <summary>
            Return blank tile if request is off top or bottom of map
            </summary>
            <param name="tileParams"></param>
            <returns>True if blank tile was written</returns>
        </member>
        <member name="M:Telogis.GeoBase.GeoStream.Server.TileBase.WritePNGToResponse(System.Drawing.Bitmap)">
            <summary>
            Convert a bitmap to PNG format and write it to the response stream.
            </summary>
            <param name="bmp">The bitmap to write as a PNG.</param>
        </member>
        <member name="M:Telogis.GeoBase.GeoStream.Server.TileBase.WriteGIFToResponse(System.Drawing.Bitmap,System.Drawing.Color)">
            <summary>
            Convert a bitmap to GIF format and write it to the response stream.
            </summary>
            <param name="bmp">The bitmap to write as a GIF.</param>
            <param name="color">The color to use as a transparent color in the GIF.</param>
        </member>
        <member name="M:Telogis.GeoBase.GeoStream.Server.TileBase.ServedTile(Telogis.GeoBase.GeoStream.Server.TileReqType,System.Int64,System.DateTime)">
            <summary>
            Records the fact that a tile was served.
            </summary>
            <param name="reqT">The tile request type (e.g. map, satellite imagery, WMS, and so on)</param>
            <param name="filesize">The size of the file that was returned if it was a cached image.</param>
            <param name="requestStartTime">The time when the tile request was received.</param>
        </member>
        <member name="P:Telogis.GeoBase.GeoStream.Server.TileBase.ResponseIsClientConnected">
            <summary>
            Gets a value indicating whether the GeoStream client is still connected to the server.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.GeoStream.Server.TileBase.ResponseCacheControl">
            <summary>
            Gets or sets the <b>Cache-Control</b> header of the HTTP response. 
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.GeoStream.Server.TileBase.ResponseExpires">
            <summary>
            Gets or sets the number of minutes before a page cached on a browser expires. If the client returns to the
            same page before it expires, the cached version is used.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.GeoStream.Server.TileBase.ResponseContentType">
            <summary>
            Gets or sets the HTTP MIME type of the output stream.
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.GeoStream.Server.DirectionOverlay.DoRequest(Telogis.GeoBase.GeoStream.Authentication.AuthenticatedUser,Telogis.GeoBase.GeoStream.TileParams,System.Boolean)">
            <summary>
            Services the request for a direction overlay.
            </summary>
            <param name="user">The <see cref="T:Telogis.GeoBase.GeoStream.Authentication.AuthenticatedUser"/> requesting the overlay.</param>
            <param name="p">Parameters of the tile used to generate the overlay.</param>
            <param name="debug"><i>Internal use only.</i></param>
        </member>
        <member name="T:Telogis.GeoBase.GeoStream.LRUDictionary">
            <summary>
            A dictionary class that also provides functionality to remove the
            least-recently-used item.
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.Clustering.ClustersUpdatedDelegate">
            <summary>
            The type of event handlers invoked when clusters are updated.
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.Clustering.IClusterLayer">
            <summary>
            The interface implemented by all cluster layers.
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.Clustering.IClusterLayer.BeginGetClusters(System.Int32,Telogis.GeoBase.BoundingBox,System.AsyncCallback,System.Object)">
            <summary>
            Starts calculating clusters asynchronously.
            </summary>
            <param name="worldWidthPx">The width, in pixels, of the entire area where clusterable
            features can be situated.</param>
            <param name="bbox">The bounding box for the visible portion of the map for which
            clusters are calculated.</param>
            <param name="callback">A callback that is executed when the cluster calculation is
            complete.</param>
            <param name="state">The state of the asynchronous cluster calculation</param>
            <returns>An IAsyncResult allowing the caller to query the state of the
            calculation.</returns>
        </member>
        <member name="M:Telogis.GeoBase.Clustering.IClusterLayer.EndGetClusters(System.IAsyncResult)">
            <summary>
            Returns the clusters calculated asynchronously by
            <see cref="M:IClusterLayer.BeginGetClusters"/> when the calculation is complete.
            </summary>
            <param name="result">The IAsyncResult that was returned by BeginGetClusters.</param>
            <returns>The set of clusters that was calculated by the cluster layer.</returns>
        </member>
        <member name="M:Telogis.GeoBase.Clustering.IClusterLayer.BeginGetImage(System.String,System.AsyncCallback,System.Object)">
            <summary>
            Obtains the image for a cluster asynchronously.
            </summary>
            <param name="visual">The name (image ID) of the cluster image to obtain from
            the visualizer (<see cref="T:IClusterVisualization"/>) of the cluster layer.</param>
            <param name="callback">A callback that is executed when the image for the cluster is
            ready.</param>
            <param name="state">The state of the asynchronous operation.</param>
            <returns>An IAsyncResult allowing the caller to query the state of the
            operation.</returns>
        </member>
        <member name="M:Telogis.GeoBase.Clustering.IClusterLayer.EndGetImage(System.IAsyncResult)">
            <summary>
            Returns the image for a cluster made available by a call to
            <see cref="M:IClusterLayer.BeginGetImage"/>.
            </summary>
            <param name="result">The IAsyncResult that was returned by BeginGetImage.</param>
            <returns>The image of the cluster.</returns>
        </member>
        <member name="M:Telogis.GeoBase.Clustering.IClusterLayer.BeginRefresh(System.AsyncCallback,System.Object)">
            <summary>
            Refreshes the cluster layer asynchronously.
            updated.
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.Clustering.IClusterLayer.EndRefresh(System.IAsyncResult)">
            <summary>
            Waits for a refresh to complete.
            </summary>
        </member>
        <member name="E:Telogis.GeoBase.Clustering.IClusterLayer.OnClustersChanged">
            <summary>
            An event that is fired when the map features that can be grouped into clusters are updated.
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.Indexes.HilbertIndex">
            <summary>
            HilbertIndex provides a location, in the form of an integer value,
            when given a <see cref="T:Telogis.GeoBase.LatLon"/> or <see cref="T:Telogis.GeoBase.BoundingBox"/>.
            </summary>
            <remarks>
            <para><b>Related articles</b>: <a href="34c741e4-d96a-40af-9048-2815511708a1.htm">Indexing External Spatial Data</a>.</para>
            </remarks>
            <example>
            Generating a numeric value for a <see cref="T:Telogis.GeoBase.LatLon"/> point:
            <code lang="C#">
            // Create a HilbertIndex object
            HilbertIndex hilb_index = new HilbertIndex();
            // Create a LatLon
            LatLon lat_lon = new LatLon(33, -118);
            // Generate a numeric value for the LatLon
            ulong ll_key = hilb_index.GetKey(lat_lon);
            </code>
            or a <see cref="T:Telogis.GeoBase.BoundingBox"/> area:
            <code lang="C#">
            // Create a HilbertIndex object
            HilbertIndex hilb_index = new HilbertIndex();
            // Create a BoundingBox
            BoundingBox b_box = new BoundingBox();
            b_box.Add(new LatLon(33.976473, -118.348352));
            b_box.Add(new LatLon(33.943459, -118.325526));
            // Generate a numeric value for the BoundingBox
            ulong box_key = hilb_index.GetKey(b_box);
            </code>
            </example>
        </member>
        <member name="M:Telogis.GeoBase.Indexes.HilbertIndex.GetKey(Telogis.GeoBase.BoundingBox)">
            <summary>
            Retrieves the index key value for a <see cref="T:Telogis.GeoBase.BoundingBox"/>.
            </summary>
            <param name="box"></param>
        </member>
        <member name="M:Telogis.GeoBase.Indexes.HilbertIndex.GetKey(Telogis.GeoBase.LatLon)">
            <summary>
            Retrieves the index key value for a <see cref="T:Telogis.GeoBase.LatLon"/>.
            </summary>
            <param name="loc"></param>
        </member>
        <member name="M:Telogis.GeoBase.Indexes.HilbertIndex.Query(Telogis.GeoBase.LatLon,System.Int32)">
            <summary>
            Retrieves ranges of index key values for a <see cref="T:Telogis.GeoBase.LatLon"/> up to the maximum number of ranges specified.
            </summary>
            <param name="loc"></param>
            <param name="maxNumRanges"></param>
        </member>
        <member name="M:Telogis.GeoBase.Indexes.HilbertIndex.Query(Telogis.GeoBase.BoundingBox,System.Int32)">
            <summary>
            Retrieves ranges of index key values for a <see cref="T:Telogis.GeoBase.BoundingBox"/> up to the maximum number of ranges specified.
            </summary>
            <param name="box"></param>
            <param name="maxNumRanges"></param>
        </member>
        <member name="T:Telogis.GeoBase.Indexes.HilbertQuery">
            <summary>
            HilbertQuery provides a range of index values when given a 
            <see cref="T:Telogis.GeoBase.LatLon"/> or a <see cref="T:Telogis.GeoBase.BoundingBox"/> and 
            a value specifying the maximum number of ranges to be returned.
            </summary>
            <example>
            <code lang="C#">
            // Create a HilbertIndex object
            HilbertIndex hilb_index = new HilbertIndex();
            // Create a BoundingBox
            BoundingBox b_box = new BoundingBox();
            b_box.Add(new LatLon(33.976473, -118.348352));
            b_box.Add(new LatLon(33.943459, -118.325526));
            // Create a Hilbert query with a maximum of 128 ranges.
            HilbertQuery hil_query = hilb_index.Query(b_box, 128);
            </code>
            </example>
        </member>
        <member name="P:Telogis.GeoBase.Indexes.HilbertQuery.QueryBox">
            <summary>
            The area to be queried, as a <see cref="T:Telogis.GeoBase.BoundingBox"/>.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Indexes.HilbertQuery.Ranges">
            <summary>
            The ranges which should be queried.
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.Indexes.HilbertQueryRenderer">
            <summary>
            HilbertQueryRenderer visually renders a <see cref="T:Telogis.GeoBase.Indexes.HilbertQuery"/> object on a map.
            </summary>
            <example>
            <code lang="C#">
            // Create a HilbertIndex object
            HilbertIndex hilb_index = new HilbertIndex();
            // Create a BoundingBox
            BoundingBox b_box = new BoundingBox();
            b_box.Add(new LatLon(33.976473, -118.348352));
            b_box.Add(new LatLon(33.943459, -118.325526));
            // Create a Hilbert query with a maximum of 128 ranges.
            HilbertQuery hil_query = hilb_index.Query(b_box, 128);
            // Create a HilbertQueryRenderer object
            HilbertQueryRenderer hilQueryRenderer = new HilbertQueryRenderer(hil_query);
            // Add to RenderList         
            mapCtrl.Renderer = hilQueryRenderer;
            </code>
            </example>
        </member>
        <member name="M:Telogis.GeoBase.Indexes.HilbertQueryRenderer.#ctor(Telogis.GeoBase.Indexes.HilbertQuery)">
            <summary>
            </summary>
            <param name="query">The <see cref="T:Telogis.GeoBase.Indexes.HilbertQuery"/> to be rendered.</param>
        </member>
        <member name="M:Telogis.GeoBase.Indexes.HilbertQueryRenderer.Render(System.Drawing.Graphics,Telogis.GeoBase.RenderContext)">
            <summary>
            Renders the <see cref="T:Telogis.GeoBase.Indexes.HilbertQuery"/> object on a map.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Indexes.HilbertQueryRenderer.RequiredRendermodes">
            <summary>
            Specifies at which stages of rendering this renderer should be called.  
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.Indexes.HilbertRange">
            <summary>
            HilbertRange identifies the maximum and minimum values in the 
            ranges retrieved by a <see cref="T:Telogis.GeoBase.Indexes.HilbertQuery"/>.
            </summary>
            <example>
            <code lang="C#">
            // Create a HilbertIndex object
            HilbertIndex hilb_index = new HilbertIndex();
            // Create a BoundingBox
            BoundingBox b_box = new BoundingBox();
            b_box.Add(new LatLon(33.976473, -118.348352));
            b_box.Add(new LatLon(33.943459, -118.325526));
            // Create a Hilbert query with a maximum of 128 ranges.
            HilbertQuery hil_query = hilb_index.Query(b_box, 128);
            StringBuilder my_out = new StringBuilder();
            // Use HilbertRange to locate the low and high values of the ranges.
            foreach (HilbertRange range in hil_query.Ranges)
            {
                my_out.AppendFormat("The minimum value of this returned range is {0} and the maximum {1}.", range.Low, range.High);
            }
            // Write the ranges to the console
            Console.WriteLine(my_out);
            </code>
            </example>
        </member>
        <member name="P:Telogis.GeoBase.Indexes.HilbertRange.Low">
            <summary>
            The minimum value of the range.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Indexes.HilbertRange.High">
            <summary>
            The maximum value of the range.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Indexes.HilbertRange.Quads">
            <summary>
            The quads contained within the range.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Indexes.HilbertQuad.Low">
            <summary>
            The minimum value of the quad.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Indexes.HilbertQuad.High">
            <summary>
            The maximum value of the quad.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Indexes.HilbertQuad.Level">
            <summary>
            The minimum level of features to be included in this query.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Indexes.HilbertQuad.BoundingBox">
            <summary>
            The area contained by the quad.
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.Traffic.NavteqPredictiveRealTimeTrafficSource">
            <summary>
            This class supports NAVTEQ predictive real-time traffic
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.Traffic.NavteqPredictiveRealTimeTrafficSource.#ctor(System.Xml.XmlReader)">
            <summary>
            Construct a new <b>NavteqPredictiveRealTraffic</b> from a given (NAVTEQ) XML data source.
            </summary>
            <param name="reader"></param>
        </member>
        <member name="T:Telogis.GeoBase.Traffic.ILinkTrafficSource">
            <summary>
            Implemented to resolve a given LinkId and <see cref="T:System.DateTime">DateTime</see>
            to a <see cref="T:Telogis.GeoBase.Traffic.TrafficInfo">TrafficInfo</see>.
            </summary>
            <remarks>
            <para>The ILinkTrafficSource interface is implemented to resolve a given LinkId and <see cref="T:System.DateTime">DateTime</see> 
            to a <see cref="T:Telogis.GeoBase.Traffic.TrafficInfo">TrafficInfo</see>. A <see cref="N:Telogis.GeoBase.Traffic">Traffic</see> 
            object will have one or more traffic sources which will be implemented with the ILinkTrafficSource interface. </para>
            <para>Additional traffic data sources can be added with the ILinkTrafficSource interface. The interface exposes the 
            <see cref="M:Telogis.GeoBase.Traffic.ILinkTrafficSource.GetTrafficInfo(System.UInt64,Telogis.GeoBase.Traffic.TrafficDirectionType,System.DateTime)">GetTrafficInfo</see> 
            method, and the <see cref="P:Telogis.GeoBase.Traffic.ILinkTrafficSource.CreatedTime"></see> property. To implement this 
            interface, code must be provided for both GetTrafficInfo, and CreatedTime.</para>
            <para><see cref="P:Telogis.GeoBase.Traffic.ILinkTrafficSource.CreatedTime">CreatedTime</see> - gets the <see cref="T:System.DateTime">DateTime</see> 
            for when the traffic data was created.</para>
            <para><see cref="M:Telogis.GeoBase.Traffic.ILinkTrafficSource.GetTrafficInfo(System.UInt64,Telogis.GeoBase.Traffic.TrafficDirectionType,System.DateTime)">GetTrafficInfo</see> 
            - this method returns the <see cref="T:Telogis.GeoBase.Traffic.TrafficInfo"></see> for the given LinkId at the specified DateTime.</para>
            </remarks>
        </member>
        <member name="M:Telogis.GeoBase.Traffic.ILinkTrafficSource.GetTrafficInfo(System.UInt64,Telogis.GeoBase.Traffic.TrafficDirectionType,System.DateTime)">
            <summary>
            Implemented by derived classes to resolve a given LinkID and <see cref="T:System.DateTime">DateTime</see>
            to a <see cref="T:Telogis.GeoBase.Traffic.TrafficInfo">TrafficInfo</see>.
            </summary>
            <param name="linkId">The LinkId to resolve.</param>
            <param name="direction">The direction with respect to the given linkId (from reference, for example).</param>
            <param name="time">The <see cref="T:System.DateTime">DateTime</see> to get the <see cref="T:Telogis.GeoBase.Traffic.TrafficInfo"/> for. This will be UTC.</param>
            <returns>The <see cref="T:Telogis.GeoBase.Traffic.TrafficInfo">TrafficInfo</see> for the given LinkId at the specified DateTime.</returns>
        </member>
        <member name="M:Telogis.GeoBase.Traffic.ILinkTrafficSource.GetTrafficInfo(System.UInt64,Telogis.GeoBase.Traffic.TrafficDirectionType,System.DateTime,Telogis.GeoBase.TimeZone)">
            <summary>
            Implemented by derived classes to resolve a given LinkId and <see cref="T:System.DateTime">DateTime</see> 
            to a <see cref="T:Telogis.GeoBase.Traffic.TrafficInfo">TrafficInfo</see>.
            </summary>
            <param name="linkId">The LinkId to resolve.</param>
            <param name="direction">The direction with respect to the given linkId (from reference, for example).</param>
            <param name="time">The <see cref="T:System.DateTime">DateTime</see> to get the <see cref="T:Telogis.GeoBase.Traffic.TrafficInfo"/> for. This will be UTC.</param>
            <param name="timezone">The timezone this LinkId exists in. This can be used to convert the UTC time passed in to the local time for the LinkId</param>
            <returns>The <see cref="T:Telogis.GeoBase.Traffic.TrafficInfo">TrafficInfo</see> for the given LinkId at the specified DateTime.</returns>
        </member>
        <member name="P:Telogis.GeoBase.Traffic.ILinkTrafficSource.CreatedTime">
            <summary>
            The <see cref="T:System.DateTime">DateTime</see> when the traffic data was created.
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.Traffic.IBatchTrafficSource">
            <summary>
            An IBatchTrafficSource provides bulk querying of traffic data.
            </summary>
            <remarks>
            <para>
            The IBatchTrafficSource interface is implemented to provide bulk querying of traffic data.
            
            IBatchTrafficSource provides a function GetTraffic which may be called to fetch traffic information for one or more
            links (specified as an ITrafficRequest).
            
            The ITrafficRequest interface provides access to one or more ITrafficItem objects, each containing infomation for a single link.
            ITrafficItem.SetSpeed should be used to set the speed of each ITrafficItem as appropriate.
            </para>
            </remarks>
            <example>
            <code lang="C#">
            class MyTrafficSource : IBatchTrafficSource {
            
            	public Dictionary&lt;string, double&gt; TMCToSpeed = new Dictionary&lt;string, double&gt;();
            
            	public void GetTraffic(ITrafficRequest request) {
            		foreach (ITrafficItem item in request) {
            			double speedMph;
            			if (TMCToSpeed.TryGetValue(item.TMC, out speedMph)) {
            				item.SetSpeed(speedMph, SpeedUnit.MilesPerHour);
            			}
            		}
            	}
            }
            </code>
            </example>
        </member>
        <member name="M:Telogis.GeoBase.Traffic.IBatchTrafficSource.GetTraffic(Telogis.GeoBase.Traffic.ITrafficRequest)">
            <summary>
            Get traffic information for one or more links.
            </summary>
            <param name="request">A request object containing one or more ITrafficItem objects.</param>
        </member>
        <member name="T:Telogis.GeoBase.Traffic.ITrafficRequest">
            <summary>
            An ITrafficRequest provides access to or more ITrafficItem objects each containing traffic information for a single link.
            ITrafficItem.SetSpeed should be used to set the speed of each ITrafficItem as appropriate.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Traffic.ITrafficRequest.Count">
            <summary>
            The number of ITrafficItem objects in the request.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Traffic.ITrafficRequest.Item(System.Int32)">
            <summary>
            Gets the specified ITrafficItem object.
            </summary>
            <param name="idx">An index into the ITrafficRequest object. (idx >= 0 &amp;&amp; idx &lt; Count)</param>
            <returns>The ITrafficItem at the specified location.</returns>
        </member>
        <member name="T:Telogis.GeoBase.Traffic.ITrafficItem">
            <summary>
            An ITrafficItem object provides information about a single StreetLink.
            Implementors of IBatchTrafficSource should call ITrafficItem.SetSpeed to specify traffic speeds.
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.Traffic.ITrafficItem.SetSpeed(System.Double,Telogis.GeoBase.SpeedUnit)">
            <summary>
            Sets the link speed. Use this function to specify traffic speeds.
            </summary>
            <param name="speed">The speed to set.</param>
            <param name="units">The units speed is measured in.</param>
        </member>
        <member name="P:Telogis.GeoBase.Traffic.ITrafficItem.Street">
            <summary>
            The street associated with this ITrafficItem.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Traffic.ITrafficItem.LinkNumber">
            <summary>
            The index of StreetLink within Street.Links.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Traffic.ITrafficItem.StreetLink">
            <summary>
            The street link associated with this ITrafficItem.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Traffic.ITrafficItem.Direction">
            <summary>
            The traffic direction associated with this ITrafficItem.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Traffic.ITrafficItem.LinkId">
            <summary>
            The link ID for the link associated with this ITrafficItem.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Traffic.ITrafficItem.Time">
            <summary>
            The time traffic is being requested for (UTC).
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Traffic.ITrafficItem.TimeZone">
            <summary>
            The timezone for the link associated with this ITrafficItem.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Traffic.ITrafficItem.TMC">
            <summary>
            The TMC code for the link associated with this ITrafficItem.
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.Traffic.InrixV2TrafficSource">
            <summary>
            This Class supports Inrix V2 traffic data format
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.Traffic.InrixV2TrafficSource.#ctor(System.Xml.XmlReader)">
            <summary>
            Creates a new Inrix V2 traffic source
            </summary>
            <param name="reader">An xml reader on the inrix traffic data</param>
        </member>
        <member name="P:Telogis.GeoBase.Traffic.InrixV2TrafficSource.Incident.IncidentId">
            <summary>
            Gets the Id of the incident for this tmc
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Traffic.InrixV2TrafficSource.Incident.Tmc">
            <summary>
            Gets the Tmc code of this incident
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Traffic.InrixV2TrafficSource.Incident.Speed">
            <summary>
            Gets the speed of the traffic on this tmc
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.Vehicle">
             <summary>
             Represents a driver and vehicle combination that is available to 
             service a route.
             </summary>
             <remarks>
             A vehicle can be configured to possess certain skills, allowing for vehicles
             to be assigned to jobs that match their skill set. A vehicle also has costs
             associated with it, such as the <see cref="F:Telogis.GeoBase.Vehicle.CostPerMile"/> travelled. 
             This data could be used to optimise vehicle selection.
            </remarks>
        </member>
        <member name="F:Telogis.GeoBase.Vehicle.PullOutCost">
            <summary>
            An initial start up cost, such as the cost to pull out of the garage.
            </summary>
            <remarks>
            This value allows the customer to calculate the initial cost of
            beginning a route. For example the value could represent a dollar figure such
            as the cost of rostering a driver who has a contracted 4 hour minimum
            shift.
            </remarks>
        </member>
        <member name="F:Telogis.GeoBase.Vehicle.CostPerMile">
            <summary>
            How much it costs for this vehicle to travel one mile, excluding <see cref="F:Telogis.GeoBase.Vehicle.CostPerHour">hourly costs</see>.
            </summary>
            <remarks>
            How much it costs for this vehicle to travel one mile,
            <b>excluding</b> any hourly costs. Typical costs would be
            gas, depreciation, service costs (tyre wear) etc...
            </remarks>
        </member>
        <member name="F:Telogis.GeoBase.Vehicle.CostPerHour">
            <summary>
            Cost of the driver / technician per hour.  It is assumed that this 
            cost runs the whole time the vehicle is out.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Vehicle.MaxMinutes">
            <summary>
            Max minutes worked per day before overtime.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Vehicle.OverTimeCost">
            <summary>
            Excess cost incurred if the vehicle runs over its alloted time.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Vehicle.Capacity">
            <summary>
            Carrying capacity of this vehicle in undefined units.
            </summary>
            <remarks>
            No units are defined for this value. The capacity could represent
            the number of kilograms, cubic metres, or boxes of jellyfish the vehicle
            is capable of carrying. The unit that this value represents is to
            be decided by the implementor.
            </remarks>
        </member>
        <member name="F:Telogis.GeoBase.Vehicle.Skills">
            <summary>
            The skills provided by this vehicle / driver combination.
            </summary>
            <remarks>
            The term 'skills' represents the special capabilites of this
            vehicle and driver. Examples include a vehicle with a cargo
            hoist, or a driver certified to transport chemicals.
            Skills are represented as a bit map.
            </remarks>
        </member>
        <member name="F:Telogis.GeoBase.Vehicle.LunchLengthMinMinutes">
            <summary>
            How long a lunch break should be in minutes.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Vehicle.MaxMinutesBeforeLunch">
            <summary>
            How many minutes must be worked before a lunch break may be taken.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Vehicle.BreakMinutes">
            <summary>
            The length of non-lunch breaks in minutes.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Vehicle.MaxMinutesWithoutBreak">
            <summary>
            The maximum number of minutes that can be worked without a break.
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.Routing.VrpGA">
            <summary>
            Summary description for VrpGA.
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.Routing.VrpGA.Cromossome.#ctor(System.Int32[],Telogis.GeoBase.Routing.VrpGA.Customer[])">
            <summary>
            Costs - an array of times between stops in minutes
            </summary>
            <param name="costs"></param>
            <param name="customers"></param>
        </member>
        <member name="T:Telogis.GeoBase.Routing.StateChangesNote">
            <summary>
            A Note informing that the state line is being crossed.
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.Routing.DirectionsFactory">
            <summary>
            A <see cref="T:Telogis.GeoBase.Routing.DirectionsFactory">DirectionsFactory</see> is used to generate <see cref="T:Telogis.GeoBase.Routing.Directions"/> from an array of <see cref="T:Telogis.GeoBase.LatLon"/>s, 
            which would have, typically, been created outside of GeoBase. This is useful for when third party routing engines are employed.
            </summary>
            <remarks>
            <para><b>Workflow</b></para>
            <para>The following outlines the workflow for creating <see cref="T:Telogis.GeoBase.Routing.Directions"/> from a pre-calculated array of <see cref="T:Telogis.GeoBase.LatLon"/>s.</para>
            <list type="bullet">
            <item>Create a <b>DirectionsFactory</b> with your array of <see cref="T:Telogis.GeoBase.LatLon"/>s</item>
            <item>Call <see cref="M:Telogis.GeoBase.Routing.DirectionsFactory.AddMovement">AddMovement()</see> for each movement that you want to add to the directions</item>
            <item>Call <see cref="M:Telogis.GeoBase.Routing.DirectionsFactory.GenerateDirections"/> to generate the <see cref="T:Telogis.GeoBase.Routing.Directions"/></item>
            </list>
            <para><b>Note</b></para>
            <para>When calling <see cref="M:Telogis.GeoBase.Routing.DirectionsFactory.AddMovement">AddMovement()</see>, the first entry must be of MovementType <see cref="F:Telogis.GeoBase.Routing.MovementType.Depart"/>, and the final call must be of MovementType 
            <see cref="F:Telogis.GeoBase.Routing.MovementType.Arrive"/>.</para>
            </remarks>
        </member>
        <member name="F:Telogis.GeoBase.Routing.DirectionsFactory.prevMovement">
            <summary>
            The Intersection at the start of the previous movement, necessary for calculating distance
            between movements, as prevDesc will not be at the previous movement if there are joining
            links inbetween.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Routing.DirectionsFactory.prevStartIndex">
            <summary>
            Used for verifying that the current turn does not lie within the previously
            added turn, if it does an exception is thrown.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Routing.DirectionsFactory.prevOutboundEnd">
            <summary>
            Stores the index into the Points array of the last point in the outlink of the previous
            movement's IntersectionDescription. This is necessary to ensure that we dont reuse points.
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.Routing.DirectionsFactory.#ctor(Telogis.GeoBase.LatLon[])">
            <summary>
            Create a <b>DirectionsFactory</b> using an array of <see cref="T:Telogis.GeoBase.LatLon"/>s describing points along a pre-calculated route.
            </summary>
            <param name="pts">An array of LatLons describing points along a pre-calculated route.</param>
        </member>
        <member name="M:Telogis.GeoBase.Routing.DirectionsFactory.AddMovement(System.Int32,System.Int32,Telogis.GeoBase.Routing.MovementType,Telogis.GeoBase.Routing.MovementInfo)">
            <summary>
            Use to add <b>departure</b>, <b>turns</b> and <b>arrival</b> points to the directions.
            </summary>
            <param name="startIndex">The index to the LatLon array for the start point of the movement</param>
            <param name="endIndex">The index to the LatLon array for the end point of the movement</param>
            <param name="type">The <see cref="T:Telogis.GeoBase.Routing.MovementType"/> describing the type of movement that a direction encompasses</param>
            <param name="info">The <see cref="T:Telogis.GeoBase.Routing.MovementInfo"/> for this movement (that is, between startIndex and endIndex)</param>
            <remarks><para>The <b>startIndex</b> can not be greater than the <b>endIndex</b>. However, the <b>startIndex</b> can be equal to the <b>endIndex</b>. For example, when 
            the movement is a straightforward right turn, there will only be one turn point, located at the turn's intersection.</para>
            <para>The first movement must have a <see cref="T:Telogis.GeoBase.Routing.MovementType"/> of <see cref="F:Telogis.GeoBase.Routing.MovementType.Depart"/></para>
            <para>The final movement must have a <see cref="T:Telogis.GeoBase.Routing.MovementType"/> of <see cref="F:Telogis.GeoBase.Routing.MovementType.Arrive"/></para></remarks>
        </member>
        <member name="M:Telogis.GeoBase.Routing.DirectionsFactory.AddNote(System.Int32,Telogis.GeoBase.Routing.NoteType,Telogis.GeoBase.Routing.MovementInfo)">
            <summary>
            Add a note to a direction for the given movement.
            </summary>
            <param name="noteLocationIndex">The index to the LatLon array for the start point of the movement</param>
            <param name="type">The type of note to add to this movement</param>
            <param name="info">The <see cref="T:Telogis.GeoBase.Routing.MovementInfo"/> for this movement (that is, between startIndex and endIndex)</param>
        </member>
        <member name="M:Telogis.GeoBase.Routing.DirectionsFactory.DistanceToPreviousMovement(Telogis.GeoBase.Routing.IntersectionDescription,Telogis.GeoBase.Routing.MovementType,Telogis.GeoBase.DistanceUnit)">
            <summary>
            Calculate the distance between the previous movement and the current movement.
            </summary>
            <param name="currDesc"></param>
            <param name="unit"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Telogis.GeoBase.Routing.DirectionsFactory.GenerateDirections">
            <summary>
            Get <see cref="T:Telogis.GeoBase.Routing.Directions"/>
            </summary>
            <returns><see cref="T:Telogis.GeoBase.Routing.Directions"/></returns>
        </member>
        <member name="M:Telogis.GeoBase.Routing.MovementInfo.SetSpeedLimit(System.Int32,Telogis.GeoBase.SpeedUnit)">
            <summary>
            Sets the vehicle speed limit.
            </summary>
            <param name="speedLimit"></param>
            <param name="unit"></param>
        </member>
        <member name="M:Telogis.GeoBase.Routing.MovementInfo.GetSpeedLimit(Telogis.GeoBase.SpeedUnit)">
            <summary>
            Gets the vehicle speed limit.
            </summary>
            <param name="unit"></param>
            <returns></returns>
        </member>
        <member name="T:Telogis.GeoBase.Routing.IntersectionType">
            <summary>
            Describes the geometry of a single <see cref="T:Telogis.GeoBase.Routing.Direction"/>.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Routing.IntersectionType.int_None">
            <summary>
            Not an intersection, only one way to go.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Routing.IntersectionType.int_T">
            <summary>
            A Tee Intersection
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Routing.IntersectionType.int_YSplit">
            <summary>
            An intersection where the road splits or joins into different streets
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Routing.IntersectionType.int_4Way">
            <summary>
            Four way intersection
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Routing.IntersectionType.int_Complex">
            <summary>
            Intersection with more than four roads
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Routing.IntersectionType.int_SkipBypass">
            <summary>
            An intersection at which the road splits to allow an overbridge
            to bypass an upcoming crossroads. This indicates that the route
            chooses not to take the bypass
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Routing.IntersectionType.int_RoundAboutEntry">
            <summary>
            Entrance to a traffic circle.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Routing.IntersectionType.int_RoundAboutInside">
            <summary>
            Along the inside of a traffic circle.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Routing.IntersectionType.int_RoundAboutExit">
            <summary>
            Exit from a traffic circle.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Routing.IntersectionType.int_RampExit">
            <summary>
            Ramp exiting a limited access highway.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Routing.IntersectionType.int_RampEntry">
            <summary>
            Ramp entering a limited access highway.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Routing.IntersectionType.int_IntersectionEntry">
            <summary>
            Entering an intersection.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Routing.IntersectionType.int_IntersectionExit">
            <summary>
            Exiting an intersection.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Routing.IntersectionType.int_ChangeFerry">
            <summary>
            Moving off one ferry and onto another
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Routing.IntersectionType.int_UTurn">
            <summary>
            Route takes a u-turn
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Routing.IntersectionType.int_InsideIntersection">
            <summary>
            Inside a complex intersection, such as a traffic circle
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Routing.IntersectionType.int_Split">
            <summary>
            Where a singly digitised road becomes mulitply digitised or
            vice-versa
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Routing.IntersectionType.int_Continue">
            <summary>
            Where only two links join due to a name change, or a road
            crossing on a different z-level
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Routing.IntersectionType.int_EmbarkFerry">
            <summary>
            Moving onto a ferry
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Routing.IntersectionType.int_DisembarkFerry">
            <summary>
            Moving off of a ferry
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Routing.IntersectionType.int_Departure">
            <summary>
            Starting a route
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Routing.IntersectionType.int_EndPoint">
            <summary>
            Arriving at a destination
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.Routing.IntersectionDescription">
            <summary>
            Describes an Intersection in the context of a route, including the turning
            information and which intersections precede and follow.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Routing.IntersectionDescription.OtherLinks">
            <summary>
            A list of the links that are connected to this intersection, excluding the inbound
            and outbound links
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Routing.IntersectionDescription.LeftStreetName">
            <summary>
            If this intersection has a left turn, this is the name
            of that street
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Routing.IntersectionDescription.RightStreetName">
            <summary>
            If this intersection has a right turn, this is the name
            of that street
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Routing.IntersectionDescription.InboundStreet">
            <summary>
            This is from The intersection to the next one
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Routing.IntersectionDescription.SideStreetDivider">
            <summary>
            Indicates that one or more of the links that isn't chosen has turn restrictions
            that might affect this turn.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Routing.IntersectionDescription.EndOfStreet">
            <summary>
            This is the end of the entry street - you can not go straight ahead
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Routing.IntersectionDescription.ChangesName">
            <summary>
            The street changes to a new name but basically continues
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Routing.IntersectionDescription.Hasleft">
            <summary>
            Is there a Right Turn?
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Routing.IntersectionDescription.Hasright">
            <summary>
            Is there a Left turn?
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Routing.IntersectionDescription.IsIllegal">
            <summary>
            This will return if the movement from last to this to next
            Is not allowed by the road network (eg you make a turn that you can not
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Routing.IntersectionDescription.MovementDegrees">
            <summary>
            How far  you have turned
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.Routing.DrivingDirectionEvent">
            <summary>
            Driving direction that doesn't include turning maneuvers
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.Routing.NoteType">
            <summary>
            Used to define the type of a <see cref="T:Telogis.GeoBase.Routing.Note">Note</see>.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Routing.NoteType.StateChange">
            <summary>
            Used when crossing a State border.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Routing.NoteType.TollwayBegins">
            <summary>
            Used at the start of a tollway.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Routing.NoteType.TollwayEnds">
            <summary>
            Used at the end of a tollway.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Routing.NoteType.NameChange">
            <summary>
            Used when the name of a street changes.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Routing.NoteType.FreewayEnds">
            <summary>
            Used when a freeway ends.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Routing.NoteType.WayPointApproaching">
            <summary>
            Used when a waypoint is approaching
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Routing.NoteType.WayPointPassed">
            <summary>
            Used when a waypoint was passed
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Routing.NoteType.DrivingBreak">
            <summary>
            Used for when the vehicle should be stationary
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.Routing.MovementType">
            <summary>
            Describes the type of movement that a direction encompasses.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Routing.MovementType.None">
            <summary>
            No movement is required for this direction.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Routing.MovementType.First">
            <summary>First turn. Used for Roundabout movement.</summary>
        </member>
        <member name="F:Telogis.GeoBase.Routing.MovementType.Second">
            <summary>Second turn. Used for Roundabout movement.</summary>
        </member>
        <member name="F:Telogis.GeoBase.Routing.MovementType.Third">
            <summary>Third turn. Used for Roundabout movement.</summary>
        </member>
        <member name="F:Telogis.GeoBase.Routing.MovementType.Fourth">
            <summary>Fourth turn. Used for Roundabout movement.</summary>
        </member>
        <member name="F:Telogis.GeoBase.Routing.MovementType.Fifth">
            <summary>Fifth turn. Used for Roundabout movement.</summary>
        </member>
        <member name="F:Telogis.GeoBase.Routing.MovementType.Sixth">
            <summary>Sixth turn. Used for Roundabout movement.</summary>
        </member>
        <member name="F:Telogis.GeoBase.Routing.MovementType.Left">
            <summary>
            Turn direction - left.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Routing.MovementType.Right">
            <summary>
            Turn direction - right.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Routing.MovementType.Merge">
            <summary>
            Turn direction - merge.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Routing.MovementType.DrivingSide">
            <summary>
            Right exit.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Routing.MovementType.Turn">
            <summary>
            Instruction to make a turn.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Routing.MovementType.UTurn">
            <summary>
            Instruction to make a u-turn.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Routing.MovementType.Roundabout">
            <summary>
            Instruction to make a roundabout.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Routing.MovementType.EmbarkFerry">
            <summary>
            Instruction to embark on a ferry.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Routing.MovementType.DisembarkFerry">
            <summary>
            Instruction to disembark a ferry.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Routing.MovementType.ChangeFerry">
            <summary>
            Instruction to change to another ferry.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Routing.MovementType.LeaveFreeway">
            <summary>
            Instruction to leave the freeway.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Routing.MovementType.JoinFreeway">
            <summary>
            Instruction to join the freeway.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Routing.MovementType.ChangeFreeways">
            <summary>
            Instruction to change freeways.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Routing.MovementType.Depart">
            <summary>
            Departure.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Routing.MovementType.Arrive">
            <summary>
            On arrival.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Routing.MovementType.Split">
            <summary>
            Instruction to split.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Routing.MovementType.SkipBypass">
            <summary>
            Instruction to skip the bypass.
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.Routing.Directions">
            <summary>
            A driving route through a number of stops.
            </summary>
            <remarks><para><b>Related articles</b>: <a href="7149832b-c202-4c69-9716-d4fc2876aaa4.htm">Routing Concept</a>, 
            <a href="d2cbdf1c-bc58-48bb-9d33-e29e6c7ca27a.htm">Using Directions</a>, 
            <a href="60998f81-efa9-4743-afcc-6e6f943a4fa1.htm">Routing with Traffic</a>.</para>
            </remarks>
        </member>
        <member name="F:Telogis.GeoBase.Routing.Directions.renderAlpha">
            <summary>
            The default alpha opacity of the <see cref="T:System.Drawing.Pen"/>
            used to render the route.  Valid values are 0 (fully transparent)
            to 255 (fully opaque).
            </summary>        
        </member>
        <member name="M:Telogis.GeoBase.Routing.Directions.AngleBetween(System.Drawing.Point,System.Drawing.Point,System.Drawing.Point)">
            <summary>
            Computes the angle (in degrees) between two vectors (p-pa) and (p-pb) using the relation:
            a.b = |a| |b| cos theta, where a.b = ax.bx + ay.by
            </summary>
            <param name="pa"></param>
            <param name="p"></param>
            <param name="pb"></param>
            <returns></returns>
        </member>
        <member name="M:Telogis.GeoBase.Routing.Directions.Render(System.Drawing.Graphics,Telogis.GeoBase.RenderContext)">
            <summary>
            <see cref="T:Telogis.GeoBase.IMapRenderer"/> support - renders a route on the map.
            </summary>
            <param name="graphics">The <see cref="T:System.Drawing.Graphics"/> responsible for drawing the route.</param>
            <param name="rc">The <see cref="T:Telogis.GeoBase.RenderContext"/> upon which the route is to be drawn.</param>
        </member>
        <member name="M:Telogis.GeoBase.Routing.Directions.ZoomTo(Telogis.GeoBase.IMap)">
            <summary>
            Zooms the given map to this driving route.
            </summary>
            <param name="aMap"><see cref="T:Telogis.GeoBase.IMap"/> upon which the zoom takes place.</param>
        </member>
        <member name="M:Telogis.GeoBase.Routing.Directions.ZoomTo(Telogis.GeoBase.IMap,System.Int32)">
            <summary>
            <para>Zooms the given map to this driving route, and ensures that there is a visible buffer
            of <i>buffer</i> pixels between the edge of the route and the edge of the map.</para>
            <para>For example, setting <i>buffer</i> to 10 results in a map where the edges of
            this driving route are 10 pixels in from the edge of the map.</para>
            </summary>
            <param name="aMap"><see cref="T:Telogis.GeoBase.IMap"/> upon which the zoom takes place.</param>
            <param name="buffer">Minimum number of pixels between the edge of the route and the edge of the map.</param>
        </member>
        <member name="M:Telogis.GeoBase.Routing.Directions.GetTotalDistance(Telogis.GeoBase.DistanceUnit)">
            <summary>
            Gets the total distance for this route in the specified <see cref="T:Telogis.GeoBase.DistanceUnit"/>.
            </summary>
            <remarks><para><b>Related articles</b>: <a href="d2cbdf1c-bc58-48bb-9d33-e29e6c7ca27a.htm">Using Directions</a>.</para></remarks>
            <param name="du">The <see cref="T:Telogis.GeoBase.DistanceUnit"/> to calculate the total distance in.</param>
            <returns>The total distance, in the specified <see cref="T:Telogis.GeoBase.DistanceUnit"/>.</returns>
        </member>
        <member name="M:Telogis.GeoBase.Routing.Directions.GetTotalTime">
            <summary>
            Get the total time for this set of directions.
            </summary>
            <remarks><para><b>Related articles</b>: <a href="d2cbdf1c-bc58-48bb-9d33-e29e6c7ca27a.htm">Using Directions</a>.</para></remarks>
            <returns>The cumulative sum of the estimated time between all
            stops in this set of directions, as a <see cref="T:System.TimeSpan"/>.</returns>
        </member>
        <member name="M:Telogis.GeoBase.Routing.Directions.GetStopToStopDistances(Telogis.GeoBase.DistanceUnit)">
            <summary>
            Gets the Distance from Each stop to each stop
            </summary>
            <param name="units"></param>
            <returns></returns>
        </member>
        <member name="M:Telogis.GeoBase.Routing.Directions.GetStopToStopTimes">
            <summary>
            Gets the time from each stop to each stop
            </summary>
            <returns></returns>
        </member>
        <member name="M:Telogis.GeoBase.Routing.Directions.GetDirectionLinks">
            <summary>
            Get the DirectionLinks held by this Directions object
            </summary>
            <returns></returns>
        </member>
        <member name="M:Telogis.GeoBase.Routing.Directions.GetFirstMovement">
            <summary>
            return the first movement in the directions. Returns null, if there is no movement.
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.Routing.Directions.#ctor">
            <summary>
            Initialize a new <see cref="T:Telogis.GeoBase.Routing.Directions"/> object.
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.Routing.Directions.BeginGenerator(Telogis.GeoBase.Routing.Routing,System.TimeSpan)">
            <summary>
            Create a DirectionsGenerator.
            </summary>
            <param name="routing">Routing that generated the
            directions.</param>
            <param name="startTimeOffset">Start time of this leg, relative to
            routing.CurrentTime</param>
        </member>
        <member name="M:Telogis.GeoBase.Routing.Directions.Optimise(Telogis.GeoBase.Routing.Routing,System.TimeSpan,Telogis.GeoBase.Routing.RouteProgress,Telogis.GeoBase.Routing.DirectionLink,System.String,System.Boolean,Telogis.GeoBase.Routing.IAsyncDirectionsHandler)">
            <summary>
            "Optimise" a route (generate directions for it).
            </summary>
            <param name="routing">Routing that generated the route.</param>
            <param name="startTimeOffset">Start time of this leg, relative to
            routing.CurrentTime</param>
            <param name="rp">Optional route progress delegate.</param>
            <param name="startLink">startLink of route.</param>
            <param name="progressString">Route progress string, required if a
            route progress delegate was supplied.</param>
            <param name="bMustSucceed">Whether the route must be legal.</param>
            <param name="handler">A helper object for managing the generation of <see cref="T:Telogis.GeoBase.Routing.Directions"/>.</param>
            <returns>Boolean indicating whether the route is legal (true) or
            not (false)</returns>
        </member>
        <member name="M:Telogis.GeoBase.Routing.Directions.Append(System.TimeSpan,Telogis.GeoBase.Routing.Directions)">
            <summary>
            Append a set of directions.  Note that shallow copies are performed
            so the appended Directions object should not be modified after this
            method is called.
            </summary>
            <param name="timeOnSite">Time spent on site before these directions</param>
            <param name="directions">Directions that are to be appended</param>
        </member>
        <member name="M:Telogis.GeoBase.Routing.Directions.RemoveAt(System.Int32)">
            <summary>
            <i>Not supported in this class.</i>
            </summary>
            <param name="index"></param>
            <exception cref="T:System.NotSupportedException">Thrown when this method is called.</exception>
        </member>
        <member name="M:Telogis.GeoBase.Routing.Directions.Insert(System.Int32,System.Object)">
            <summary>
            <i>Not supported in this class.</i>
            </summary>
            <param name="index"></param>
            <param name="value"></param>
            <exception cref="T:System.NotSupportedException">Thrown when this method is called.</exception>
        </member>
        <member name="M:Telogis.GeoBase.Routing.Directions.Remove(System.Object)">
            <summary>
            <i>Not supported in this class.</i>
            </summary>
            <param name="value"></param>
            <exception cref="T:System.NotSupportedException">Thrown when this method is called.</exception>
        </member>
        <member name="M:Telogis.GeoBase.Routing.Directions.Contains(System.Object)">
            <summary>
            Gets whether or not these <see cref="T:Telogis.GeoBase.Routing.Directions"/> contain the specified
            object.
            </summary>
            <param name="value">The object to find</param>
            <returns><b>true</b> if these <see cref="T:Telogis.GeoBase.Routing.Directions"/> contain the specified object, <b>false</b> if they do not.</returns>
        </member>
        <member name="M:Telogis.GeoBase.Routing.Directions.Clear">
            <summary>
            <i>Not supported in this class.</i>
            </summary>
            <exception cref="T:System.NotSupportedException">Thrown when this method is called.</exception>
        </member>
        <member name="M:Telogis.GeoBase.Routing.Directions.IndexOf(System.Object)">
            <summary>
            Gets the index of the specified object.
            </summary>
            <param name="value">The object to search for.</param>
            <returns>The index of the object if found, otherwise -1.</returns>
        </member>
        <member name="M:Telogis.GeoBase.Routing.Directions.Add(System.Object)">
            <summary>
            <i>Not supported in this class.</i>
            </summary>
            <exception cref="T:System.NotSupportedException">Thrown when this method is called.</exception>
        </member>
        <member name="M:Telogis.GeoBase.Routing.Directions.CopyTo(System.Array,System.Int32)">
            <summary>
            Copies the contents of this collection to an array. See <see cref="M:System.Collections.ArrayList.CopyTo(System.Array)"/>.
            </summary>
            <param name="array">The array to copy to.</param>
            <param name="index">The index in <see cref="T:System.Array"/> to start copying to.</param>
        </member>
        <member name="M:Telogis.GeoBase.Routing.Directions.GetEnumerator">
            <summary>
            Returns an enumerator for this collection
            </summary>
            <returns></returns>
        </member>
        <member name="M:Telogis.GeoBase.Routing.Directions.Serialize(System.IO.Stream)">
            <summary>
            Serialize the Directions to the supplied stream.  The serialized Directions can be 
            deserialized using the Deserialize method.
            </summary>
            <param name="outputStream">Stream which the Directions is to be serialized to.</param>
        </member>
        <member name="M:Telogis.GeoBase.Routing.Directions.Deserialize(System.IO.Stream)">
            <summary>
            Deserialize a Directions after it has previously been serialized using the Serialize
            method.
            </summary>
            <param name="inputStream">Stream which the Directions is to be deserialized
            from.</param>
            <returns>The deserialized Directions object.</returns>
        </member>
        <member name="M:Telogis.GeoBase.Routing.Directions.ClearPointsCache">
            <summary>
            Clears the points cache and associated objects (reductionMarkers and pointsArray).
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Routing.Directions.RenderPen">
            <summary>
            The <see cref="T:System.Drawing.Pen"/> normally used to render the route.
            </summary>
            <remarks>
            Default color: <see cref="P:System.Drawing.Color.Blue"/><br/>
            Default width: 15 pixels.
            </remarks>
        </member>
        <member name="P:Telogis.GeoBase.Routing.Directions.RenderPenSmall">
            <summary>
            The <see cref="T:System.Drawing.Pen"/> used to render the route when the map is zoomed out
            </summary>
            <remarks>
            Default color: <see cref="P:System.Drawing.Color.Blue"/><br/>
            Default width: 7 pixels.
            </remarks>
        </member>
        <member name="P:Telogis.GeoBase.Routing.Directions.RenderColor">
            <summary>
            Sets the <see cref="T:System.Drawing.Color"/> to render the route in.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Routing.Directions.SelectedIndex">
            <summary>
            Gets or sets the current <see cref="T:Telogis.GeoBase.Routing.Direction"/> by its index
            value in the list. See remarks.
            </summary>
            <remarks>
            Note that an index value of -1 is valid, and serves to
            indicate that no <see cref="T:Telogis.GeoBase.Routing.Direction"/> is currently selected.
            </remarks>
            <exception cref="T:System.IndexOutOfRangeException">
            Thrown if the value is out of the range -1 &lt; value &lt; number of items.</exception>
        </member>
        <member name="P:Telogis.GeoBase.Routing.Directions.Selected">
            <summary>
            Gets or sets the currently selected <see cref="T:Telogis.GeoBase.Routing.Direction"/>.
            The current selection is the one that will be rendered on the map.
            </summary>
            <exception cref="T:System.ArgumentException">Thrown if the specified <see cref="T:Telogis.GeoBase.Routing.Direction"/>
            was not found in the list.</exception>
        </member>
        <member name="P:Telogis.GeoBase.Routing.Directions.Points">
            <summary>
            Gets an array of <see cref="T:Telogis.GeoBase.LatLon"/>s representing
            the entire driving route. These points may differ from the concatenation
            of the points on individual direction objects.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Routing.Directions.RequiredRendermodes">
            <summary>
            Gets the <see cref="T:Telogis.GeoBase.RenderMode">RenderMode</see> required by this <b>Directions</b>
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Routing.Directions.Remote">
            <summary>
            Whether these directions were generated by a GeoStream server.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Routing.Directions.Units">
            <summary>
            The <see cref="T:Telogis.GeoBase.Navigation.UnitSystem"/> that is to
            be used in these directions. The value is used by the read-only <see cref="P:Telogis.GeoBase.Routing.Directions.UnitsEffectiveValue"/>. 
            If Units is not set by the application, then <see cref="P:Telogis.GeoBase.Routing.Directions.UnitsEffectiveValue"/> is taken from the global settings field <see cref="F:Telogis.GeoBase.Settings.Units"/>. 
            The global default is imperial yards.
            </summary>
            <remarks>
            This property cannot be set if the directions were generated by a
            GeoStream server.
            </remarks>
        </member>
        <member name="P:Telogis.GeoBase.Routing.Directions.UnitsEffectiveValue">
            <summary>
            The <see cref="T:Telogis.GeoBase.Navigation.UnitSystem"/> used in
            these directions. If <see cref="P:Telogis.GeoBase.Routing.Directions.Units"/> is not set in the application, then <see cref="P:Telogis.GeoBase.Routing.Directions.UnitsEffectiveValue"/> is taken from the global settings field <see cref="F:Telogis.GeoBase.Settings.Units"/>. 
            The global default is imperial yards.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Routing.Directions.MessagesBundle">
            <summary>
            Provides access to messages (for example strings and announcements) for a single culture. 
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Routing.Directions.Violations">
            <summary>
            Contains a list of all constraint violations in the directions.
            </summary>
            <remarks>Constraints are restrictions based on the <see cref="P:Telogis.GeoBase.Routing.IRoute.VehicleSpec"/> property as well
            as restrictions set using the properties of the routing strategy such as <see cref="P:Telogis.GeoBase.Routing.RoutingStrategy.AllowUTurns"/>,
            <see cref="P:Telogis.GeoBase.Routing.RoutingStrategy.RoadCrossingBehavior"/> and <see cref="P:Telogis.GeoBase.Routing.RoutingStrategy.UseTollRoads"/>.
            Constraints are not "hard" restrictions, but rather, are implemented by imposing a prohibitive cost to violation of a
            constraint. This means that the generated directions can include violations when there are no better routing alternatives available.
            The Violations property lists the links where constraint violations have occurred.</remarks>
        </member>
        <member name="P:Telogis.GeoBase.Routing.Directions.IsReadOnly">
            <summary>
            Gets whether this collection is read-only or not. Always <b>true</b>.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Routing.Directions.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:Telogis.GeoBase.Routing.Direction"/> for the specified index
            </summary>
            <exception cref="T:System.NotSupportedException">Thrown when a set is attempted.</exception>
        </member>
        <member name="P:Telogis.GeoBase.Routing.Directions.IsFixedSize">
            <summary>
            Returns whether this collection is a fixed size. Always returns <b>true</b>.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Routing.Directions.IsSynchronized">
            <summary>
            Returns whether this collection is synchronized.
            </summary>
            <returns><b>True</b> if synchronized, <b>false</b> if it is not.</returns>
        </member>
        <member name="P:Telogis.GeoBase.Routing.Directions.Count">
            <summary>
            Returns the number of <see cref="T:Telogis.GeoBase.Routing.Direction"/>s.
            </summary>
            <returns>
            The number of items in the list.
            </returns>
        </member>
        <member name="P:Telogis.GeoBase.Routing.Directions.SyncRoot">
            <summary>
            Gets an object that can be used to synchronize access to this object. See <see cref="P:System.Collections.ArrayList.SyncRoot"/>.
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.Routing.DirectionLink">
            <summary>
            A DirectionLink represents a portion of a route that goes between two choice points (such as intersections). DirectionLink objects form a linked list that can be accessed from a <see cref="T:Telogis.GeoBase.Routing.Directions"/> object by calling the <see cref="M:Telogis.GeoBase.Routing.Directions.GetDirectionLinks" /> method.
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.Routing.DirectionLink.TurnDegrees(System.Double,System.Double)">
            <summary>
            Returns the 'turn' that should be made.  Positive numbers are a L/H turn
            Negative is a RH turn
            </summary>
            <param name="curheading"></param>
            <param name="newheading"></param>
            <returns></returns>
        </member>
        <member name="M:Telogis.GeoBase.Routing.DirectionLink.GetStreetLink">
            <summary>
            Returns a reference to the <see cref="T:Telogis.GeoBase.StreetLink"/> that this direction link travels over.
            The street link can be used to obtain information such as the the time zone where the street lies and the 
            post codes for the street.
            Note that the street link may cover more distance than the direction link. You can compare the FirstPoint 
            and LastPoint properties of the street link to the same-named properties of the direction link to determine
            whether they represent the same portion of a street.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Telogis.GeoBase.Routing.DirectionLink.Name">
            <summary>
            A descriptive name for the direction link. This can be a street name or a type of road such as 'ramp'. 
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Routing.DirectionLink.Next">
            <summary>
            The next direction link in the linked list.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Routing.DirectionLink.Prev">
            <summary>
            The previous direction link in the linked list.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Routing.DirectionLink.Points">
            <summary>
            An array of points that indicate the path of the direction link.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Routing.DirectionLink.FirstPoint">
            <summary>
            The first point in the direction link. This is the same as the last point of the previous direction link in the linked list.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Routing.DirectionLink.LastPoint">
            <summary>
            The last point in the direction link. This is the same as the first point of the next direction link in the linked list.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Routing.DirectionLink.LinkId">
            <summary>
            A unique identifier for this direction link.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Routing.DirectionLink.Address">
            <summary>
            The address where the direction link is located. 
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Routing.DirectionLink.Flags">
            <summary>
            Detailed information about the road segment that the direction link covers, such as access restriction, legal speed limit, the types of vehicles permitted, and so on.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Routing.DirectionLink.Time">
            <summary>
            The expected time for the <b>end</b> of this link.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Routing.DirectionLink.ExpectedEndTime">
            <summary>
            The amount of time that a vehicle traveling along the route defined by the linked list of 
            direction links is expected to take to arrive at the last point in this link from the time 
            it departs the first point of the first link in the linked list.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Routing.DirectionLink.StartHeading">
            <summary>
            The heading of the first segment in the link.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Routing.DirectionLink.GeneralStartHeading">
            <summary>
            The heading between the start of the link and the first point that's over 100m away.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Routing.DirectionLink.EndHeading">
            <summary>
            The heading of the last segment in the link.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Routing.DirectionLink.GeneralEndHeading">
            <summary>
            The heading to the end of the link from the first point that's over 100m away from the
            end.
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.Confidence">
            <summary>
            Represents the confidence that an address found by geocoding is correct.
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.Confidence.ToFloat">
            <summary>
            The confidence rating, represented as a fraction of the total possible score.
            </summary>
            <returns>A confidence score between 0 (no confidence) and 1 (perfect confidence)</returns>
        </member>
        <member name="M:Telogis.GeoBase.Confidence.GetConfidenceScores">
            <summary>
            Returns a ConfidenceScores structure that reflects the
            confidence ratings of this Confidence object.
            </summary>
            <returns>A ConfidenceScores structure, where each part has the
            part's confidence rating expressed on a scale from 0 to 1.</returns>
        </member>
        <member name="P:Telogis.GeoBase.Confidence.Item(Telogis.GeoBase.ConfidencePart)">
            <summary>
            The confidence rating for an individual part of an address
            </summary>
            <param name="which">The part of the address</param>
            <returns>The confidence rating</returns>
        </member>
        <member name="P:Telogis.GeoBase.Confidence.TotalScore">
            <summary>
            The total confidence for the address, found by totalling 
            the confidence ratings for each part.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Confidence.IsGoodMatch">
            <summary>
            Indicates whether the confidence score exceeds the minimum
            value for a good match.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Confidence.IsPerfectMatch">
            <summary>
            Indicates whether the confidence score represents a perfect match.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Confidence.MeetsThreshold">
            <summary>
            meets the confidence threshold to be considered
            </summary>
        </member>
        <member name="T:Telogis.UI.XmlLoader">
            <summary>
            Simple class to create controls from XML description
            </summary>
        </member>
        <member name="M:Telogis.UI.XmlLoader.CreateLayout(System.String,System.Windows.Forms.Control)">
            <summary>
            Create controls from XML
            </summary>
            <param name="xml"></param>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Telogis.UI.XmlLoader.CreateFromFile(System.String,System.Windows.Forms.Control)">
            <summary>
            Load from the given file (in the same directory as the executable)
            </summary>
            <param name="name"></param>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="T:Telogis.GeoBase.Link">
            <summary>
            Summary description for Link.
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.Link.IsStraight(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Determines if a line is straight to within the given
            threshold
            </summary>
            <param name="threshold">Threshold of straightness (in degrees)</param>
            <param name="x1">x of first point</param>
            <param name="y1">y of first point</param>
            <param name="x2">x of middle point</param>
            <param name="y2">y of middle point</param>
            <param name="x3">x of last point</param>
            <param name="y3">y of last point</param>
            <returns>A true if the bend in the line is no more that threshold</returns>
        </member>
        <member name="M:Xheo.Licensing.TrialServerAttribute.#ctor">
            <summary>
            Included for COM compliance, do not use.
            </summary>
        </member>
        <member name="M:Xheo.Licensing.TrialServerAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the TrialServerAttribute class.
            </summary>
            <param name="serverUrl">
            	The URL of the <c>LicenseServer</c> WebService to request a trial license from.
            </param>
        </member>
        <member name="M:Xheo.Licensing.TrialServerAttribute.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the TrialServerAttribute class.
            </summary>
            <param name="extra">
            	Extra information to pass verbatim to the <c>LicenseServer.GetTrialLicense</c> method.
            </param>
            <param name="serverUrl">
            	The URL of the <c>LicenseServer</c> WebService to request a trial license from.
            </param>
        </member>
        <member name="P:Xheo.Licensing.TrialServerAttribute.ServerUrl">
            <summary>
            Gets the address of the acitvation server for issuing new trial licenses.
            </summary>
        </member>
        <member name="P:Xheo.Licensing.TrialServerAttribute.Extra">
            <summary>
            Gets a string of extra information to be included in the request. This can
            include things like a partner ID, originating URL, etc. The value is passed
            verbatim to the <c>LicenseServer.GetTrialLicense</c> method.
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.Transactional.TableCollection">
            <summary>
            A collection of tables in a transactional repository.
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.Transactional.TableCollection.TryGetTable(System.String,Telogis.GeoBase.Transactional.Table@)">
            <summary>
            Gets a <see cref="T:Telogis.GeoBase.Transactional.Table"/> object from this collection specified by name.
            </summary>
            <example>
            <code lang="C#">
            // get the table named "warehouses", note that case is not important
            Table myWarehouses;
            if (!myTransactionalRepository.Tables.TryGetTable("Warehouses", out myWarehouses)) {
                // Create the table...
            } else {
                Record first = myWarehouses.GetRecord(0);
                ...
            }
            </code>
            </example>
            <param name="name">The name of the <see cref="T:Telogis.GeoBase.Transactional.Table"/> to return. 
            Case is not important.</param>
            <param name="result">The named table.</param>
            <returns>True if the the specified table was found.</returns>
        </member>
        <member name="P:Telogis.GeoBase.Transactional.TableCollection.Names">
            <summary>
            Returns a list of <see cref="T:Telogis.GeoBase.Transactional.Table"/> names.
            </summary>
            <example>
            This code snippet lists all the table names from a given transactional 
            repository.
            <code lang="C#">
            void ListTables(TransactionalRepository tr) { 
                Console.WriteLine("Repository contains these tables:");
                foreach (String name in tr.Tables.Names) {
                    Console.WriteLine("\t{0}", name);
                }
            }
            </code>
            </example>
        </member>
        <member name="P:Telogis.GeoBase.Transactional.TableCollection.Item(System.String)">
            <summary>
            Gets a <see cref="T:Telogis.GeoBase.Transactional.Table"/> object from this collection specified by name.
            </summary>
            <example>
            <code lang="C#">
            // get the table named "warehouses", note that case is not important
            Table myWarehouses = myTransactionalRepository.Tables["Warehouses"];
            </code>
            </example>
            <param name="name">The name of the <see cref="T:Telogis.GeoBase.Transactional.Table"/> to return. 
            Case is not important.</param>
            <returns>The named <see cref="T:Telogis.GeoBase.Transactional.Table"/></returns>
        </member>
        <member name="T:Telogis.GeoBase.Transactional.Record">
            <summary>
            A record is a row in a <see cref="T:Telogis.GeoBase.Transactional.Table"/>. Each record has a number of 
            predefined columns. See remarks for usage notes.
            </summary>
            <remarks>
            You should create a record using
            <see cref="M:Telogis.GeoBase.Transactional.Table.CreateRecord">Table.CreateRecord</see>. 
            Populate the fields of the record then insert the record into the table using
            <see cref="M:Telogis.GeoBase.Transactional.Table.Insert(Telogis.GeoBase.Transactional.Record)">Table.Insert</see>.
            See example.
            </remarks>
            <example>
            <code lang="C#">
            //
            // Use the table's CreateRecord() method to create the record
            //
            Record myRecord = myTable.CreateRecord();
            
            //
            // We must begin a transaction before we can modify the
            // repository
            //
            myTransactionalRepo.BeginTransaction();
            
            //
            // Populate the fields of the record
            //
            myRecord["PoiName"] = "Acme Corp";
            myRecord["Location"] = new LatLon(37.25, -117.5);
            
            //
            // Add the record to the database
            //
            myTable.Insert(myRecord);
            
            //
            // No changes are made to the repository until we finalize
            // the transaction.
            //
            myTransactionalRepo.EndTransaction();
            </code>
            </example>
        </member>
        <member name="P:Telogis.GeoBase.Transactional.Record.Item(System.String)">
            <summary>
            Get or set a column value for this record.
            </summary>
            <example>
            The following example shows how to get a column value for a record:
            <code lang="C#">    
            ...
            foreach (Record r in idx.Query(new ColumnFilter[0])) {
                Console.WriteLine("Customername = {0}, Location = {1}", 
                    r["CustomerName"], 
                    r["Location"]);
            }
            </code>
            Similarly, the following example shows how to set column values for a record:
            <code lang="C#">
            
            // we must use the table's CreateRecord() method because different tables will
            // have different record structures (due to the design of each table)
            Record r = myTable.CreateRecord();
            
            // set some values for the name and location
            r["CustomerName"] = "My Corporate";
            r["Location"] = new LatLon(36, -122);
            
            // add the record to the repository
            myTransactionalRepository.BeginTransaction();
            myTable.Insert(r);
            myTransactionalRepository.EndTransaction();
            </code>
            </example>
            <remarks>
            An exception will be thrown if the column name cannot be found.
            </remarks>
            <param name="column">The name of the column. Case is not important.</param>
            <returns>The value of the column.</returns>
        </member>
        <member name="T:Telogis.GeoBase.Transactional.RangedIndexColumn">
            <summary>
            A RangedIndexColumn is a designated sequential range of columns in a <see cref="T:Telogis.GeoBase.Transactional.Table"/> that are
            used for creating an index. An index allows you to query the table for
            records matching specified criteria.
            </summary>
            <example>
            <code lang="C#">
            using (EnsureTransaction trans = new EnsureTransaction(repository)) {
                Index idx = t.CreateIndex("locations1-3", 
                    new IndexColumn[] { 
                        new RangedIndexColumn("latlon1", "latlon3") 
                    });
            }
            </code>
            </example>
        </member>
        <member name="M:Telogis.GeoBase.Transactional.RangedIndexColumn.#ctor(System.String,System.String)">
            <summary>
            Creates a RangedIndexColumn for a specified range of columns.
            </summary>
            <param name="minCol">The name of the first column in the range. This is not case-sensitive.</param>
            <param name="maxCol">The name of the last column in the range. This is not case-sensitive.</param>
        </member>
        <member name="T:Telogis.GeoBase.Transactional.IntersectFilter">
            <summary>
            A ColumnFilter that selects only those records where the specified field intersects with 
            (or is contained within) this IntersectFilter object's <see cref="T:Telogis.GeoBase.BoundingBox"/>.
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.Transactional.IntersectFilter.#ctor(System.String,Telogis.GeoBase.BoundingBox)">
            <summary>
            Creates an IntersectFilter where the given field of a Record (either <see cref="F:Telogis.GeoBase.Transactional.DataType.Polygon"/> 
            or <see cref="F:Telogis.GeoBase.Transactional.DataType.LatLon"/>) should intersect with (or be contained inside) a given <see cref="T:Telogis.GeoBase.BoundingBox"/>.
            </summary>
            <param name="column">The field name</param>
            <param name="box">The BoundingBox that should intersect (or contain) with the field value</param>
        </member>
        <member name="T:Telogis.GeoBase.Transactional.IndexType">
            <summary>
            Used to describe the data structure behind an <see cref="T:Telogis.GeoBase.Transactional.Index"/>.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Transactional.IndexType.BTree">
            <summary>
            Binary-Tree
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Transactional.IndexType.RTree">
            <summary>
            R-Tree
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.Repositories.SimpleRepository">
            <summary>
            A <see cref="T:Telogis.GeoBase.Repositories.SimpleRepository">SimpleRepository</see> is a local repository type that supports 
            local GeoBase services (such as mapping and routing) by referencing
            a GeoBase (GBFS) data file.
            </summary>
            <remarks><para><b>Related articles</b>: <a href="5a8e7c38-67e2-47fe-8bb0-2cd0b1a6547a.htm">Using Repositories to manage data</a>.</para></remarks>
        </member>
        <member name="M:Telogis.GeoBase.Repositories.SimpleRepository.#ctor(System.String)">
            <summary>
            Get a new SimpleRepository created from a GBFS file. The GBFS file is specified by a filepath.
            </summary>
            <param name="gbfsFile">The filepath to the GBFS file. This may be absolute, or relative.</param>
            <returns>A <see cref="T:Telogis.GeoBase.Repositories.SimpleRepository"/>.</returns>
        </member>
        <member name="M:Telogis.GeoBase.Repositories.SimpleRepository.CreateFailoverRepository(System.String,System.UInt32,System.UInt32,System.String[])">
            <summary>
            Get a new SimpleRepository created from several instances of a same GBFS file.
            In case one file instance is no longer available, the SimpleRepository fails over to the next one.
            </summary>
            <param name="gbfsBaseame">The basename of a GBFS file.</param>
            <param name="nbRetry">Number of retries, in case of temporary errors, before failing over to the next file.</param>
            <param name="retryInterval">Time to wait between each try (in milli-seconds).</param>
            <param name="failoverDirectories">Paths to directories containing this GBFS file. These may be absolute, or relative.</param>
            <returns>A <see cref="T:Telogis.GeoBase.Repositories.SimpleRepository"/>.</returns>
        </member>
        <member name="M:Telogis.GeoBase.Repositories.SimpleRepository.ToString">
            <summary>
            Returns a string representation of the simple repository.
            </summary>
            <returns>The name of the GBFS file this repository represents.</returns>
        </member>
        <member name="M:Telogis.GeoBase.Repositories.SimpleRepository.Supports(Telogis.GeoBase.FeatureSupport)">
            <summary>
            Gets whether this Repository supports the specified <see cref="T:Telogis.GeoBase.FeatureSupport">feature</see>.
            </summary>
            <param name="feature">The <see cref="T:Telogis.GeoBase.FeatureSupport">feature</see> to check.</param>
            <returns><b>True</b> if the feature is supported, <b>False</b> if it is not.</returns>
        </member>
        <member name="M:Telogis.GeoBase.Repositories.SimpleRepository.GetRepositoriesForCountry(Telogis.GeoBase.Country)">
            <summary>
            Returns this simple repository if it supports the specified country.
            </summary>
            <param name="country">The country whose data is required.</param>
            <returns>If this repository includes data for the specified country, returns a list containing this repository. Otherwise,
            (if the country is not supported), returns an empty list.</returns>
        </member>
        <member name="M:Telogis.GeoBase.Repositories.SimpleRepository.GetUnitSystem(Telogis.GeoBase.Country)">
            <summary>
            Returns the unit system for a specified country.
            </summary>
            <param name="country">The country whose units are desired.</param>
            <returns>The enumerated value identifying the unit system associated with the country, or
            if the unit system is not known, UnitSystem.Unknown.</returns>
        </member>
        <member name="M:Telogis.GeoBase.Repositories.SimpleRepository.GetDrivingSide(Telogis.GeoBase.Country)">
            <summary>
            Indicates which side of the road vehicles drive in the specified country.
            </summary>
            <param name="country">The country to query.</param>
            <returns>An indication of whether vehicles drive on the right, on the left, or 
            the driving side is not known for the specified country.</returns>
        </member>
        <member name="M:Telogis.GeoBase.Repositories.SimpleRepository.GetCountry(System.Int32)">
            <summary>
            used by RouteFlag to get its country
            </summary>
            <param name="countryId">The internal country identifier.</param>
            <returns>The country associated with the specified identifier.</returns>
        </member>
        <member name="M:Telogis.GeoBase.Repositories.SimpleRepository.GetRoutingProfile">
            <summary>
            Gets the default RoutingProfile for a GBFS.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Telogis.GeoBase.Repositories.SimpleRepository.GetRoutingProfile(Telogis.GeoBase.Country)">
            <summary>
            Gets the default RoutingProfile for a given GBFS file and country.
            </summary>
            <param name="country">The country for which a routing profile is desired.</param>
            <returns>A routing profile for determining speed profiles based on road class.</returns>
        </member>
        <member name="P:Telogis.GeoBase.Repositories.SimpleRepository.FileName">
            <summary>
            Get the filename of this dataset
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Repositories.SimpleRepository.Version">
            <summary>
            Get version details for this Dataset.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Repositories.SimpleRepository.Name">
            <summary>
            Get the name of this Dataset.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Repositories.SimpleRepository.CustomTables">
            <summary>
            The tables in this data file, if it's a custom data file.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Repositories.SimpleRepository.HasGlobalData">
            <summary>
            May be used to determine if global data is available in this Dataset (true) or not (false).
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Repositories.SimpleRepository.VendorName">
            <summary>
            Gets the vendor name for this dataset.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Repositories.SimpleRepository.VendorVersion">
            <summary>
            Gets the version number for this dataset.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Repositories.SimpleRepository.CopyrightString">
            <summary>
            Get the copyright string for this Dataset.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Repositories.SimpleRepository.Countries">
            <summary>
            Gets an array of <see cref="T:Telogis.GeoBase.Country"/>s for which data in this
            SimpleRepository is available.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Repositories.SimpleRepository.Regions">
            <summary>
            Gets an array of regions for which data in this SimpleRepository is avalable
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.Repositories.SimpleRepository.GBNetAssemblyResolver.ResolveGBDotNetEventHandler(System.Object,System.ResolveEventArgs)">
            <summary>
            This provides the geobase.net assembly if a reflection call fails to load it. Reflection
            only loads assemblies from certain paths (GAC, .exe directory) so if geobase.net is in 
            an unusual place this may be called.
            </summary>
            <param name="sender"></param>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="T:Telogis.GeoBase.CSVParser">
            <summary>
            Static class for parsing lines in a CSV file, includes support for
            quoted strings and escaped quotation marks.
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.CSVParser.ParseColumnRow``1(System.Collections.Generic.Dictionary{System.String,Telogis.GeoBase.CSVDataItem{``0}},System.String,System.Int32)">
            <summary>
            Parse a string containing column names.
            </summary>
            <typeparam name="T">Type that the CSVDataItems in this line will
            operate on.</typeparam>
            <param name="itemDict">Dictionary of CSVDataItems.</param>
            <param name="str">The line.</param>
            <param name="lineNumber">1-based line index.</param>
            <returns>List of CSVDataItems in the line.</returns>
        </member>
        <member name="M:Telogis.GeoBase.CSVParser.ParseDataRow``1(System.Collections.Generic.List{Telogis.GeoBase.CSVDataItem{``0}},System.String,``0,System.Int32)">
            <summary>
            Parse a string containing data.
            </summary>
            <typeparam name="T">Type that the CSVDataItems in this line will
            operate on.</typeparam>
            <param name="items">Items in the line.</param>
            <param name="str">The line.</param>
            <param name="obj">Object to operate on.</param>
            <param name="lineNumber">1-based line index.</param>
        </member>
        <member name="M:Telogis.GeoBase.CSVParser.Parse(System.String)">
            <summary>
            Parse a string, splitting it into its component valuesusing the deault split character
            </summary>
            <param name="str">The string.</param>
        </member>
        <member name="M:Telogis.GeoBase.CSVParser.Parse(System.String,System.String)">
            <summary>
            Parse a string, splitting it into its component values.
            </summary>
            <param name="str">The string.</param>
            <param name="splitToken">The split token. Must be one character long.</param>
        </member>
        <member name="T:Telogis.GeoBase.GeoStream.DeQueue">
            <summary>
            A double-ended queue.
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.Exceptions.InternalFailureException">
            <summary>
            An exception thrown when a native code failure occurs.
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.Exceptions.WriteFailureException">
            <summary>
            An exception thrown when writing to a file fails for no apparent reason.
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.Exceptions.ReadFailureException">
            <summary>
            An exception thrown when reading a file fails for no apparent reason.
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.Exceptions.SeekFailureException">
            <summary>
            An exception thrown when seeking a file fails for no apparent reason.
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.Exceptions.GetFileSizeFailureException">
            <summary>
            An exception thrown when finding a file's size fails for no apparent reason.
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.Exceptions.RepositoryLoadException">
            <summary>
            An exception thrown when a repository could not be loaded.
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.Exceptions.RepositoryLoadException.#ctor(System.String)">
            <summary>
            An exception thrown when a repository could not be loaded.
            </summary>
            <param name="m">A detailed error message.</param>
        </member>
        <member name="T:Telogis.GeoBase.Exceptions.InvalidLicenseException">
            <summary>
            An exception thrown when a license is invalid.
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.Exceptions.InvalidLicenseException.#ctor(System.String)">
            <summary>
            An exception thrown when a license is invalid.
            </summary>
            <param name="m">A detailed error message.</param>
        </member>
        <member name="T:Telogis.GeoBase.Exceptions.SDKExpiredException">
            <summary>
            An exception thrown when an SDK license has expired.
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.Exceptions.SDKExpiredException.#ctor(System.String)">
            <summary>
            An exception thrown when an SDK license has expired.
            </summary>
            <param name="m">A detailed error message.</param>
        </member>
        <member name="T:Telogis.GeoBase.Exceptions.TrialExpiredException">
            <summary>
            An exception thrown when a trial license has expired.
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.Exceptions.TrialExpiredException.#ctor(System.String)">
            <summary>
            An exception thrown when a trial license has expired.
            </summary>
            <param name="m">A detailed error message.</param>
        </member>
        <member name="T:Telogis.GeoBase.Exceptions.TestLicenseExpiredException">
            <summary>
            An exception thrown when a trial license has expired.
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.Exceptions.TestLicenseExpiredException.#ctor(System.String)">
            <summary>
            An exception thrown when a trial license has expired.
            </summary>
            <param name="m">A detailed error message.</param>
        </member>
        <member name="T:Telogis.GeoBase.Exceptions.NoStreetDataException">
            <summary>
            An exception thrown when a stop is placed in an area where no street data is available.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Exceptions.NoStreetDataException.Stop">
            <summary>
            The stop which caused the exception to be thrown.
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.Exceptions.NoStreetDataException.#ctor(System.String,Telogis.GeoBase.RouteStop)">
            <summary>
            An exception thrown when a stop is placed in an area where no street data is available.
            </summary>
            <param name="m">A detailed message.</param>
            <param name="stop">The stop which caused the exception to be thrown.</param>
        </member>
        <member name="T:Telogis.GeoBase.Exceptions.RoutingOutOfMemoryException">
            <summary>
            An exception thrown when there is insufficient memory available to
            calculate a route. GeoBase will clean up any route memory in use
            before throwing this exception.
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.Exceptions.RoutingOutOfMemoryException.#ctor(System.String)">
            <summary>
            An exception thrown when there is insufficient memory available to
            calculate a route. GeoBase will clean up any route memory in use
            before throwing this exception.
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.Exceptions.InvalidLatLonException">
            <summary>
            An exception thrown when an invalid LatLon is used.
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.Exceptions.InvalidLatLonException.#ctor(System.String)">
            <summary>
            An exception thrown when an invalid LatLon is used.
            </summary>
            <param name="m">A detailed message.</param>
        </member>
        <member name="T:Telogis.GeoBase.Exceptions.InvalidProcessingRatioException">
            <summary>
            An exception thrown when the ExtraProcessingRatio is too large or too low.
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.Exceptions.InvalidProcessingRatioException.#ctor">
            <summary>
            An exception thrown when an invalid float number is used.
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.Exceptions.MapStyleDecryptionException">
            <summary>
            An exception thrown when decryption of an ecm file fails.
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.Exceptions.MapStyleDecryptionException.#ctor(System.String)">
            <summary>
            An exception thrown when decryption of an ecm file fails.
            </summary>
            <param name="m">A detailed error message.</param>
        </member>
        <member name="T:Telogis.GeoBase.Exceptions.MapStyleVersionMismatchException">
            <summary>
            An exception thrown when attempting to load a bcm file created in a different version of 
            GeoBase.
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.Exceptions.MapStyleVersionMismatchException.#ctor(System.String)">
            <summary>
            An exception thrown when attempting to load a bcm file created in a different version of 
            GeoBase.
            </summary>
            <param name="m">A detailed error message.</param>
        </member>
        <member name="T:Telogis.GeoBase.Exceptions.InvalidCamFileException">
            <summary>
            An exception thrown when a Cam file contains invalid data.
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.Exceptions.InvalidCamFileException.#ctor(System.String)">
            <summary>
            An exception thrown when a Cam file contains invalid data.
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.Exceptions.InvalidAuxiliaryLayerException">
            <summary>
            An exception thrown when an invalid auxiliary layer is referenced in a CAM file.
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.Exceptions.InvalidAuxiliaryLayerException.#ctor(System.String)">
            <summary>
            An exception thrown when an invalid auxiliary layer is referenced in a CAM file.
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.Exceptions.FailedToDecodePNGException">
            <summary>
            An exception thrown when there is a failure to decode a PNG.
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.Exceptions.FailedToDecodePNGException.#ctor(System.String)">
            <summary>
            An exception thrown when there is a failure to decode a PNG.
            </summary>
            <param name="msg">Detail message.</param>
        </member>
        <member name="T:Telogis.GeoBase.Exceptions.UnspecifiedFatalException">
            <summary>
            An exception thrown when an unspecified error occurs in native code.
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.Exceptions.UnspecifiedFatalException.#ctor(Telogis.GeoBase.Internal.GBError,System.String)">
            <summary>
            An exception thrown when an unspecified error occurs in native code.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Exceptions.UnspecifiedFatalException.ErrorCode">
            <summary>
            Get the error code for the specified exception.
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.Exceptions.CouldNotMapFileException">
            <summary>
            An exception thrown when a file could not be mapped to memory.
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.Exceptions.CouldNotMapFileException.#ctor(System.String)">
            <summary>
            An exception thrown when a file could not be mapped to memory.
            </summary>
            <param name="errorMessage">A detailed error message.</param>
        </member>
        <member name="T:Telogis.GeoBase.Exceptions.CountryNotSpecifiedException">
            <summary>
            An exception thrown when attempting to geocode with Country.Unknown.
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.Exceptions.CountryNotSpecifiedException.#ctor(System.String)">
            <summary>
            An exception thrown when attempting to geocode with Country.Unknown.
            </summary>
            <param name="m">A detailed error message.</param>
        </member>
        <member name="T:Telogis.GeoBase.Exceptions.NoGeoCoderException">
            <summary>
            An exception thrown when attempting to geocode in a country without a geocoder.
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.Exceptions.NoGeoCoderException.#ctor(System.String)">
            <summary>
            An exception thrown when attempting to geocode in a country without a geocoder.
            </summary>
            <param name="m">A detailed error message.</param>
        </member>
        <member name="T:Telogis.GeoBase.Exceptions.UnableToListRegionsException">
            <summary>
            An exception thrown by the DrillDownGeoCoder when a call to GetRegions() specifies a region level that has not yet been set.
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.Exceptions.UnableToListRegionsException.#ctor(System.Int32)">
            <summary>
            An exception thrown by the DrillDownGeoCoder when a call to GetRegions() specifies a region level that has not yet been set.
            </summary>
            <param name="setFirst">The region level to set first.</param>
        </member>
        <member name="T:Telogis.GeoBase.Exceptions.NullRegionException">
            <summary>
            An exception thrown by the DrillDownGeoCoder when a null-reference is passed to a function expecting a RegionData object.
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.Exceptions.NullRegionException.#ctor">
            <summary>
            An exception thrown by the DrillDownGeoCoder when a null-reference is passed to a function expecting a RegionData object.
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.Exceptions.RegionLevelTooHighException">
            <summary>
            An exception thrown by the DrillDownGeoCoder when an attempt is made to access a region level that is more precise than the data
            set allows.
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.Exceptions.RegionLevelTooHighException.#ctor">
            <summary>
            An exception thrown by the DrillDownGeoCoder when an attempt is made to access a region level that is more precise than the data
            set allows.
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.Exceptions.NoMoreRegionsException">
            <summary>
            An exception thrown when there are no more regions below to be requested.
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.Exceptions.InvalidLevelNumberException">
            <summary>
             An exception thrown by the DrillDownGeoCoder when SetRegion is called with an incorrect level number.
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.Exceptions.InvalidLevelNumberException.#ctor">
            <summary>
            An exception thrown by the DrillDownGeoCoder when SetRegion is called with an incorrect level number.
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.Exceptions.LevelNotSetException">
            <summary>
            An exception thrown by the DrillDownGeoCoder when it needs more information before setting this region level.
            Set region level `GetLargestUnsetLevel()` first.
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.Exceptions.LevelNotSetException.#ctor(System.String)">
            <summary>
            An exception thrown by the DrillDownGeoCoder when it needs more information before setting this region level.
            Set region level `GetLargestUnsetLevel()` first.
            </summary>
            <param name="m">A message to be attached to the exception.</param>
        </member>
        <member name="T:Telogis.GeoBase.Exceptions.ObsoleteOperationException">
            <summary>
            An exception thrown when an an obsolete function is called.
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.Exceptions.ObsoleteOperationException.#ctor(System.String)">
            <summary>
            An exception thrown when an an obsolete function is called.
            </summary>
            <param name="m">A message containing information on what to use instead.</param>
        </member>
        <member name="T:Telogis.GeoBase.Exceptions.PlatformDetectionException">
            <summary>
            An exception thrown when the current platform cannot be detected.
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.Exceptions.PlatformDetectionException.#ctor(System.String)">
            <summary>
            An exception thrown when the current platform cannot be detected.
            </summary>
            <param name="m">A detailed error message.</param>
        </member>
        <member name="T:Telogis.GeoBase.Exceptions.VersionMismatchException">
            <summary>
            An exception thrown when geobase.net.dll and geobase.dll versions do not match.
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.Exceptions.PermissionException">
            <summary>
            An exception thrown when the user does not have permission to perform a certain action.
            </summary>
            <remarks>This exception's message starts with 'You do not have permission to' followed by the passed in string</remarks>
        </member>
        <member name="M:Telogis.GeoBase.Exceptions.PermissionException.#ctor(System.String)">
            <summary>
            An exception thrown when the user does not have permission to perform a certain action.
            </summary>
            <param name="msg">A string describing the specific forbidden action.</param>
        </member>
        <member name="T:Telogis.GeoBase.Exceptions.JSONTokenException">
            <summary>
            An exception thrown when an unexpected symbol is found in the JSON stream.
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.Exceptions.JSONFormatException">
            <summary>
            An exception thrown when the JSONFormatter encounters something unexpected.
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.Exceptions.MapLabelException">
            <summary>
            An exception thrown when placing labels on the Map.
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.Exceptions.TooManyLinksException">
            <summary>
            An exception thrown when there are too many street links.
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.Exceptions.InvalidAddressParityException">
            <summary>
            An exception thrown when GeoBase can't determine if the address numbers on a street are in an odd or even pattern. This usually
            happens when the data is corrupted.
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.Exceptions.ChameleonTemplateException">
            <summary>
            An exception thrown by the Chameleon Template Processor
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.Exceptions.UnsupportedPlatformException">
            <summary>
            An exception thrown when GeoBase is used on a platform that isn't 32-bit or 64-bit.
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.Exceptions.UnsupportedTimeZoneException">
            <summary>
            An exception thrown when a TimeZone is specified with settings that are not supported by
            GeoBase.
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.Exceptions.UnavailableOnGeoStreamException">
            <summary>
            An exception thrown when a feature not available on GeoStream is used with GeoStream.
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.Exceptions.OnlyAvailableOnGeoStreamException">
            <summary>
            An exception thrown when a feature only available on GeoStream is used without GeoStream.
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.Exceptions.MethodCalledOutOfOrderException">
            <summary>
            An exception thrown when a set of library routines are called out of the order they should be called in.
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.Exceptions.DisallowedOperationException">
            <summary>
            An exception thrown when a configuration setting was set to disallow an operation to occur.
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.Exceptions.InterruptionRequiredException">
            <summary>
            An exception thrown when an operation needs to be completed or interrupted before the requested operation can commence.
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.Exceptions.StreamAlreadyOpenException">
            <summary>
            An exception that is thrown when there is an attempt to open a stream or file twice.
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.Exceptions.StreamNotYetOpenException">
            <summary>
            Occurs when a file or stream that has already been closed is closed again.
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.Exceptions.TemporarilyUnableToComplyException">
            <summary>
            Occurs when a requested operation cannot be done within a short period of time.
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.Exceptions.DataProblemException">
            <summary>
            Thrown when there is a problem with the GBFS provided.
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.Exceptions.FileCanNotBeOpenedException">
            <summary>
            Thrown when the a file cannot be opened for a given filename.
            An exception thrown when the a file cannot be opened.
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.Exceptions.FileCanNotBeOpenedException.#ctor(System.String)">
            <summary>
            An exception thrown when the a file cannot be opened.
            </summary>
            <param name="msg">A descriptive message.</param>
        </member>
        <member name="T:Telogis.GeoBase.Exceptions.ObjectDoesNotDeriveCorrectInterfaceException">
            <summary>
            Thrown when an object that does not implement a certain required type is used in a context which requires that type.
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.Exceptions.InvalidAsyncResult">
            <summary>
            Thrown when the IAsyncResult used to end an asynchronous operation is not the same as the one used to start it.
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.Exceptions.ValueNotFoundException">
            <summary>
            Thrown when a value that should be present in a data structure cannot be found inside it.
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.Exceptions.DestinationNotSetException">
            <summary>
            Thrown when an operation is performed that requires the Navigation class to have its destination set.
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.Exceptions.NavigationManagerNotSuspendedException">
            <summary>
            Thrown when an operation is performed that requires the NavigationManager to be suspended.
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.Exceptions.InvalidLoadNumberException">
            <summary>
            Thrown when the used load number is out of range.
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.Exceptions.ExceptionEventArgs">
            <summary>
            Used to pass exception information via an event using type EventArgs.
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.Exceptions.InvalidRouteStopWindowException">
            <summary>
            An exception thrown when the specified <see cref="P:Telogis.GeoBase.RouteStop.WindowStart"/> and
            <see cref="P:Telogis.GeoBase.RouteStop.WindowEnd"/> of a RouteStop are not valid.
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.Exceptions.RouteStopException">
            <summary>
            An exception thrown when a RouteStop error occurs.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Exceptions.RouteStopException.RouteStopIndexUnavailable">
            <summary>
            This constant is useful for comparing against <see cref="P:Telogis.GeoBase.Exceptions.RouteStopException.RouteStopIndex"/>.
            If they are equal, there is no route stop index.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Exceptions.RouteStopException.RouteStop">
            <summary>
            The RouteStop that caused this exception, if it was supplied.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Exceptions.RouteStopException.RouteStopIndex">
            <summary>
            The array index of the RouteStop that this exception refers to, if one was supplied.
            If no RouteStop index was supplied, <see cref="P:Telogis.GeoBase.Exceptions.RouteStopException.RouteStopIndexUnavailable"/> will be returned.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Exceptions.RouteStopException.Message">
            <summary>
            The text that provides detail and insight as to what caused the error.
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.Exceptions.InvalidRouteStopWindowException.#ctor(Telogis.GeoBase.RouteStop,System.DateTime,System.DateTime,System.String[])">
            <param name="routeStop">The route stop with an invalid time window.</param>
            <param name="windowEnd">The end of the invalid time window.</param>
            <param name="windowStart">The start of the invalid time window.</param>
            <param name="additionalInfo">Any additional information that may be useful in determining the cause of the exception being thrown.</param>
        </member>
        <member name="M:Telogis.GeoBase.Exceptions.InvalidRouteStopWindowException.#ctor(System.String[])">
            <summary>
            This overload can be used if the required parameters for the following constructor is unavailable:
            <see cref="M:Telogis.GeoBase.Exceptions.InvalidRouteStopWindowException.#ctor(Telogis.GeoBase.RouteStop,System.DateTime,System.DateTime,System.String[])"/>
            </summary>
            <param name="additionalInfo">Any additional information that may be useful in determining the cause of the exception being thrown.</param>
        </member>
        <member name="P:Telogis.GeoBase.Exceptions.InvalidRouteStopWindowException.WindowEnd">
            <summary>
            The end of the route stop's time window (latest delivery time).
            <see cref="P:Telogis.GeoBase.Exceptions.RouteStopException.RouteStop"/>
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Exceptions.InvalidRouteStopWindowException.WindowStart">
            <summary>
            The start of the route stop's time window (earliest delivery time).
            <see cref="P:Telogis.GeoBase.Exceptions.RouteStopException.RouteStop"/>
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Exceptions.InvalidRouteStopWindowException.Message">
            <summary>
            The text that provides detail and insight as to what caused the error.
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.Exceptions.StringsAlreadyCachedException">
            <summary>
            An exception thrown when a strings file has already been cached before.
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.Exceptions.StringsAlreadyCachedException.#ctor(System.String)">
            <summary>
            An exception thrown when a strings file has already been cached before.
            </summary>
            <param name="m">A detailed error message.</param>
        </member>
        <member name="T:Telogis.GeoBase.Exceptions.TMCFormatException">
            <summary>
            An exception thrown when a TMC code cannot be parsed.
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.Exceptions.TMCFormatException.#ctor(System.String)">
            <summary>
            An exception thrown when a TMC code cannot be parsed.
            </summary>
            <param name="m">A detailed error message.</param>
        </member>
        <member name="T:Telogis.GeoBase.Exceptions.MessagesBundleException">
            <summary>
            Thrown when a MessagesBundle running in debug mode is configured incorrectly.
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.Exceptions.MessagesBundleException.#ctor(System.String)">
            <summary>
            Thrown when a MessagesBundle running in debug mode is configured incorrectly.
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.Exceptions.MessagesBundleTypeMissingException">
            <summary>
            Thrown when a whole type section is missing in a language file.
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.Exceptions.MessagesBundleTypeMissingException.#ctor(System.String)">
            <summary>
            Thrown when a whole type section is missing in a language file.
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.Exceptions.TextDirectionsNotSupportedException">
            <summary>
            Thrown when the directions section is missing in a language file.
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.Exceptions.TextDirectionsNotSupportedException.#ctor(System.String)">
            <summary>
            Thrown when the directions section is missing in a language file.
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.Exceptions.StringsNotSupportedException">
            <summary>
            Thrown when the strings section is missing in a language file.
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.Exceptions.StringsNotSupportedException.#ctor(System.String)">
            <summary>
            Thrown when the strings section is missing in a language file.
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.Exceptions.AnouncementsNotSupportedException">
            <summary>
            Thrown when the announcements section is missing in a language file.
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.Exceptions.AnouncementsNotSupportedException.#ctor(System.String)">
            <summary>
            Thrown when the announcements section is missing in a language file.
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.Exceptions.CultureNotAvailableException">
            <summary>
            Thrown when an unavailable culture is requested for navigation announcements or strings.
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.Exceptions.InternalGeoCoderException">
            <summary>
            An exception thrown when an internal geocoder exception occurs.
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.Exceptions.InternalGeoCoderException.#ctor(System.String)">
            <summary>
            An exception thrown when an internal geocoder exception occurs.
            </summary>
            <param name="m">A detailed error message.</param>
        </member>
        <member name="T:Telogis.GeoBase.Exceptions.InternalRepositoryException">
            <summary>
            An exception thrown when an internal error has occurred, resulting in GeoBase using a
            repository that is not valid.
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.Exceptions.DatabaseException">
            <summary>
            An exception thrown when a database error occurs.
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.Exceptions.DatabaseException.#ctor(System.String)">
            <summary>
            An exception thrown when a database error occurs.
            </summary>
            <param name="m">A detailed error message.</param>
        </member>
        <member name="T:Telogis.GeoBase.Exceptions.DatabaseVersionMismatchException">
            <summary>
            An exception thrown when a GBFS contains an old version of DrillDownGeocoder data.
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.Exceptions.DatabaseVersionMismatchException.#ctor(System.String)">
            <summary>
            An exception thrown when a GBFS contains an old version of DrillDownGeocoder data.
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.Exceptions.InvalidAngleException">
            <summary>
            An exception thrown when the NormalizeAngle method is given an invalid number.
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.Exceptions.StreetLinkNotFoundException">
            <summary>
            An exception thrown when a StreetLink could not be found.
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.Exceptions.StreetLinkNotFoundException.#ctor(System.String)">
            <summary>
            An exception thrown when a StreetLink could not be found.
            </summary>
            <param name="msg">Detail message.</param>
        </member>
        <member name="T:Telogis.GeoBase.Exceptions.NotEnoughStopsException">
            <summary>
            An exception thrown when a route with less than two stops is calculated.
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.Exceptions.NotEnoughStopsException.#ctor(System.String)">
            <summary>
            An exception thrown when a route with less than two stops is calculated.
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.Exceptions.TooManyStopsException">
            <summary>
            An exception thrown if an operation is performed on a route that has more stops than the
            operation can support.
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.Exceptions.StopNotFoundException">
            <summary>
            Thrown if the user attempts to remove a RouteStop from a route which does not contain the stop.
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.Exceptions.ServerException">
            <summary>
            An exception that is passed to the client when a GeoStream server throws an exception.
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.Exceptions.ServerException.#ctor(System.String,System.Exception,System.String,System.String,System.String)">
            <summary>
            An exception that is passed to the client when a GeoStream server throws an exception.
            </summary>
            <param name="message">A string describing the exception that occurred.</param>
            <param name="inner">An exception that was thrown on the GeoStream server (may be null).</param>
            <param name="source">The name of the application or object that generated the exception.</param>
            <param name="remoteStack">The stack trace of the exception that occurred on the GeoStream server.</param>
            <param name="originalType">The type of the original exception (on the server).</param>
        </member>
        <member name="F:Telogis.GeoBase.Exceptions.ServerException.m_RemoteStackTrace">
             <summary>
            
             </summary>
        </member>
        <member name="F:Telogis.GeoBase.Exceptions.ServerException.m_OriginalExceptionType">
            <summary>
            The type of the exception that was originally thrown on the server.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Exceptions.ServerException.RemoteStackTrace">
            <summary>
            A string representation of the frames on the call stack when the exception was thrown on the server.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Exceptions.ServerException.OriginalExceptionType">
            <summary>
            The type of the exception that was originally thrown on the server.
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.Exceptions.UnexpectedArgumentException">
            <summary>
            An Exception thrown when an argument to a method is not valid.
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.Exceptions.LinkEditException">
            <summary>
            An Exception thrown when there is a problem compiling the LinkEdit database.
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.Exceptions.NoLocalDataException">
            <summary>
            An exception thrown when GeoBase fails to find any local data but is told to use it.
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.Exceptions.NoRemoteDataException">
            <summary>
            An exception thrown when GeoBase fails to use a geostream repository because none are specified.
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.Exceptions.CouldNotAddStopException">
            <summary>
            An exception thrown when a stop can not be added to a route.
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.Exceptions.CouldNotAddStopException.#ctor(System.String)">
            <summary>
            An exception thrown when a stop can not be added to a route.
            </summary>
            <param name="m">A detailed error message.</param>
        </member>
        <member name="T:Telogis.GeoBase.Exceptions.InternalRoutingException">
            <summary>
            An exception thrown when an internal routing error occurs.
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.Exceptions.InternalRoutingException.#ctor(System.String)">
            <summary>
            An exception thrown when an internal routing error occurs.
            </summary>
            <param name="m">A detailed error message.</param>
        </member>
        <member name="T:Telogis.GeoBase.Exceptions.RouteExceedsCostException">
            <summary> 
            Thrown when a route cannot be found between given locations which does not exceed the maximum cost. 
            </summary> 
        </member>
        <member name="T:Telogis.GeoBase.Exceptions.DirectionsCalculationAbortedException">
            <summary>
            An exception thrown when AsyncDirectionsEventArgs.Abort is called.
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.Exceptions.DirectionsFactoryPointsException">
            <summary>
            An exception thrown when less than two points have been supplied.
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.Exceptions.DirectionsFactoryDataException">
            <summary>
            An exception thrown when an added movement is not within a currently loaded Telogis GBFS file.
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.Exceptions.DirectionsFactoryMovementsException">
            <summary>
            An exception thrown when the first or last movements are not of type 'Depart' and 
            'Arrive' respectively, or when GenerateDirections() is called before departure and 
            arrival movements have been added using AddMovement().
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.Exceptions.InvalidGBFSException">
            <summary>
            An exception thrown when a GBFS file is not valid.
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.Exceptions.InvalidGBFSException.#ctor(System.String,System.Exception,System.String)">
            <summary>
            An exception thrown when a GBFS file is not valid.
            </summary>
            <param name="m">A detailed error message.</param>
            <param name="inner">The causing exception.</param>
            <param name="internalFile">The internal file that caused the exception</param>
        </member>
        <member name="M:Telogis.GeoBase.Exceptions.InvalidGBFSException.#ctor(System.String,System.String)">
            <summary>
            An exception thrown when a GBFS file is not valid.
            </summary>
            <param name="m">A detailed error message.</param>
            <param name="internalFile">The internal file that caused the exception</param>
        </member>
        <member name="M:Telogis.GeoBase.Exceptions.InvalidGBFSException.ToString">
            <summary>
            Returns the internal filename which caused the exception.
            </summary>
            <returns>A string for internal diagnostics</returns>
        </member>
        <member name="T:Telogis.GeoBase.Exceptions.TooManyGeocodersException">
            <summary>
            An exception thrown when multiple GeoCoders for the same country exist.
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.Exceptions.TooManyGeocodersException.#ctor(System.String)">
            <summary>
            An exception thrown when multiple GeoCoders for the same country exist.
            </summary>
            <param name="m">A detailed error message.</param>
        </member>
        <member name="T:Telogis.GeoBase.Exceptions.UnableToDisposeRepositoryException">
            <summary>
            Thrown when an attempt is made to dispose a repository that is in use.
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.Exceptions.OverlappingRegionsException">
            <summary>
            An exception thrown when two overlapping GBFS files are placed in the same MultiRepository.
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.Exceptions.OverlappingRegionsException.#ctor(System.Boolean,Telogis.GeoBase.Set{System.String})">
            <summary>
            An exception thrown when two overlapping GBFS files are placed in the same MultiRepository.
            </summary>
            <param name="globalOverlap">Whether multiple files contain global
            data.</param>
            <param name="regions">Overlapping regions.</param>
        </member>
        <member name="P:Telogis.GeoBase.Exceptions.OverlappingRegionsException.Message">
            <summary>
            The detailed error message.
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.Exceptions.InvalidSchemaException">
            <summary>
            An exception thrown when a table or index is created with a invalid schema.
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.Exceptions.InvalidSchemaException.#ctor(System.String)">
            <summary>
            An exception thrown when a table or index is created with a invalid schema.
            </summary>
            <param name="m">An detailed error message.</param>
        </member>
        <member name="T:Telogis.GeoBase.Exceptions.TableColumnNameException">
            <summary>
            Thrown when a specified table column does not exist or there is something wrong with the name.
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.Exceptions.StreetAmbiguousException">
            <summary>
            Thrown when a specified table column does not exist or there is something wrong with the name.
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.Exceptions.NoMapStyleException">
            <summary>
            Thrown when the PartialCamRenderer doesn't have a map style to render.
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.Exceptions.NoMapStyleException.#ctor(System.String)">
            <summary>
            Thrown when the PartialCamRenderer doesn't have a map style to render.
            </summary>
            <param name="msg">A detailed error message.</param>
        </member>
        <member name="T:Telogis.GeoBase.Exceptions.TrafficException">
            <summary>
            Thrown when a traffic error occurs.
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.Exceptions.ConfigurationException">
            <summary>
            Thrown when GeoBase is configured incorrectly.
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.Exceptions.ConfigurationException.#ctor(System.String)">
            <summary>
            Thrown when GeoBase is configured incorrectly.
            </summary>
            <param name="msg">A detailed error message.</param>
        </member>
        <member name="T:Telogis.GeoBase.Exceptions.SatelliteException">
            <summary>
            Thrown when there is an error obtaining or rendering satellite imagery.
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.Exceptions.SatelliteLayerNameException">
            <summary>
            Thrown when an invalid satellite imagery layer name is specified.
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.Exceptions.DuplicateRouteStopException">
            <summary>
            Thrown when a duplicate RouteStop object is added to a route. See remarks.
            </summary>
            <remarks>
            <para>Consider the route with three stops: a start, and two stops (one of which is visited twice).
            Suppose the route is traveled as follows:</para>
            <para><center>[Start] -&gt; [FirstStop] -&gt; [SecondStop] -&gt; [FirstStop]</center></para>
            <para>To create this route one cannot simply add [FirstStop] to the route twice (due to the way
            stops are stored internally). Instead, one should create another RouteStop (with the same location
            as [FirstStop]) and add it to the route after [SecondStop].</para>
            <para>See <see cref="M:Telogis.GeoBase.RouteStop.Clone"/>.</para>
            </remarks>
        </member>
        <member name="M:Telogis.GeoBase.Exceptions.DuplicateRouteStopException.#ctor(Telogis.GeoBase.LatLon,System.String[])">
            <summary>
            Use this overload if no RouteStop is available to pass in as an argument.
            </summary>
            <param name="latLon">The latitude and longitude point of the duplicate RouteStop.</param>
            <param name="additionalInfo">Any additional information that may be useful in determining the cause of the exception being thrown.</param>
        </member>
        <member name="M:Telogis.GeoBase.Exceptions.DuplicateRouteStopException.#ctor(Telogis.GeoBase.RouteStop,System.String[])">
            <summary>
            Use this overload if the route stop being passed in is not from an array or access to the array index is unavailable.
            </summary>
            <param name="routeStop">The duplicate route stop.</param>
            <param name="additionalInfo">Any additional information that may be useful in determining the cause of the exception being thrown.</param>
        </member>
        <member name="M:Telogis.GeoBase.Exceptions.DuplicateRouteStopException.#ctor(Telogis.GeoBase.RouteStop,System.Int32,System.String[])">
            <summary>
            Use this overload in preference to other constructors that do not supply a RouteStop. The RouteStop contains additional information.
            </summary>
            <param name="routeStop">The duplicate route stop.</param>
            <param name="routeStopIndex">The index of the stop in the array that contains the routeStop.</param>
            <param name="additionalInfo">Any additional information that may be useful in determining the cause of the exception being thrown.</param>
        </member>
        <member name="M:Telogis.GeoBase.Exceptions.DuplicateRouteStopException.#ctor(System.String[])">
            <summary>
            This overload can be used if the required parameters for the following constructors are unavailable:
            <see cref="M:Telogis.GeoBase.Exceptions.DuplicateRouteStopException.#ctor(Telogis.GeoBase.LatLon,System.String[])"/>
            <see cref="M:Telogis.GeoBase.Exceptions.DuplicateRouteStopException.#ctor(Telogis.GeoBase.RouteStop,System.String[])"/>
            <see cref="M:Telogis.GeoBase.Exceptions.DuplicateRouteStopException.#ctor(Telogis.GeoBase.RouteStop,System.Int32,System.String[])"/>
            </summary>
            <param name="additionalInfo">Any additional information that may be useful in determining the cause of the exception being thrown.</param>
        </member>
        <member name="P:Telogis.GeoBase.Exceptions.DuplicateRouteStopException.RouteStop">
            <summary>
            The RouteStop that was added twice to a route.
            </summary>
            <remarks>This value may be null if no RouteStop was supplied to the constructor.</remarks>
        </member>
        <member name="P:Telogis.GeoBase.Exceptions.DuplicateRouteStopException.RouteStopIndex">
            <summary>
            The array index of the duplicate RouteStop object.
            </summary>
            <remarks>If no stop index was supplied to the constructor, this value is <see cref="P:Telogis.GeoBase.Exceptions.RouteStopException.RouteStopIndexUnavailable"/>.</remarks>
        </member>
        <member name="P:Telogis.GeoBase.Exceptions.DuplicateRouteStopException.Message">
            <summary>
            The text that provides detail and insight as to what caused the error.
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.Exceptions.RouteStopTooFarAwayException">
            <summary>
            Thrown when a RouteStop is too far away from the closest available street.
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.Exceptions.RouteStopTooFarAwayException.#ctor(Telogis.GeoBase.LatLon,System.String[])">
            <summary>
            Use this overload if no RouteStop is available to pass in as an argument.
            </summary>
            <param name="latLon">The latitude and longitude point of the RouteStop that's too far from the closest available street.</param>
            <param name="additionalInfo">Any additional information that may be useful in determining the cause of the exception being thrown.</param>
        </member>
        <member name="M:Telogis.GeoBase.Exceptions.RouteStopTooFarAwayException.#ctor(Telogis.GeoBase.RouteStop,System.String[])">
            <summary>
            Use this overload if the route stop being passed in is not from an array or access to the array index is unavailable.
            </summary>
            <param name="routeStop">The route stop that's too far from the closest available street.</param>
            <param name="additionalInfo">Any additional information that may be useful in determining the cause of the exception being thrown.</param>
        </member>
        <member name="M:Telogis.GeoBase.Exceptions.RouteStopTooFarAwayException.#ctor(Telogis.GeoBase.RouteStop,System.Int32,System.String[])">
            <summary>
            Use this overload in preference to other constructors that do not supply a RouteStop. The RouteStop contains additional information.
            </summary>
            <param name="routeStop">The route stop that's too far from the closest available street.</param>
            <param name="routeStopIndex">The index of the array that contains the routeStop.</param>
            <param name="additionalInfo">Any additional information that may be useful in determining the cause of the exception being thrown.</param>
        </member>
        <member name="M:Telogis.GeoBase.Exceptions.RouteStopTooFarAwayException.#ctor(System.String[])">
            <summary>
            This overload can be used if the required parameters for the following constructors are unavailable:
            <see cref="M:Telogis.GeoBase.Exceptions.RouteStopTooFarAwayException.#ctor(Telogis.GeoBase.LatLon,System.String[])"/>
            <see cref="M:Telogis.GeoBase.Exceptions.RouteStopTooFarAwayException.#ctor(Telogis.GeoBase.RouteStop,System.String[])"/>
            <see cref="M:Telogis.GeoBase.Exceptions.RouteStopTooFarAwayException.#ctor(Telogis.GeoBase.RouteStop,System.Int32,System.String[])"/>
            </summary>
            <param name="additionalInfo">Any additional information that may be useful in determining the cause of the exception being thrown.</param>
        </member>
        <member name="P:Telogis.GeoBase.Exceptions.RouteStopTooFarAwayException.Message">
            <summary>
            The text that provides detail and insight as to what caused the error.
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.Exceptions.BreakStartEndException">
            <summary>
            Thrown when a Break is used as the start or end of a Route.
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.Exceptions.WaypointStartEndException">
            <summary>
            Thrown when a Waypoint is used as the start or end of a Route.
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.Exceptions.WaypointSameLinkException">
            <summary>
            Thrown when a Waypoint is on the same link as both the previous and next stops.
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.Exceptions.WaypointException">
            <summary>
            Thrown if a Waypoint is used with Route Highlighting or Optimization.
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.Exceptions.AddressIsTooLongException">
            <summary>
            Thrown if an address given to the geocoder is too long.
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.Exceptions.InvalidRouteStopTypeException">
            <summary>
            Thrown if an operation is attempted with a type of RouteStop that cannot be used with that
            operation.
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.Exceptions.InvalidRouteStopTypeException.#ctor(Telogis.GeoBase.RouteStop,System.Int32,System.String[])">
            <param name="routeStop">The route stop that was unsuitable for the attempted operation.</param>
            <param name="routeStopIndex">The index of the stop in the array that contains the routeStop.</param>
            <param name="additionalInfo">Any additional information that may be useful in determining the cause of the exception being thrown.</param>
        </member>
        <member name="M:Telogis.GeoBase.Exceptions.InvalidRouteStopTypeException.#ctor(System.String[])">
            <summary>
            This overload can be used if the required parameters for the following constructor is unavailable:
            <see cref="M:Telogis.GeoBase.Exceptions.InvalidRouteStopTypeException.#ctor(Telogis.GeoBase.RouteStop,System.Int32,System.String[])"/>
            </summary>
            <param name="additionalInfo">Any information that may be useful in determining the cause of the exception being thrown.</param>
        </member>
        <member name="P:Telogis.GeoBase.Exceptions.InvalidRouteStopTypeException.RouteStop">
            <summary>
            The RouteStop that was unsuitable for the attempted operation, if one was supplied.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Exceptions.InvalidRouteStopTypeException.RouteStopIndex">
            <summary>
            The index of the unsuitable RouteStop in the array of stops, if one was supplied.
            If no stop index was supplied, <see cref="P:Telogis.GeoBase.Exceptions.RouteStopException.RouteStopIndexUnavailable"/> is returned.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Exceptions.InvalidRouteStopTypeException.Message">
            <summary>
            The text that provides detail and insight as to what caused the error.
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.Exceptions.SerializationException">
            <summary>
            Thrown if GeoBase encounters an internal error processing messages between a GeoStream
            client and a GeoStream server.
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.Exceptions.AsyncException">
            <summary>
            Thrown when an exception is thrown during an asynchronous request.
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.Exceptions.TileRequestException">
            <summary>
            Thrown if a user attempts to fetch a tile using an invalid set of parameters in the
            request URL.
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.Exceptions.BoundingBoxOperationException">
            <summary>
            Thrown when an operation on a BoundingBox is invalid for the BoundingBox's current state.
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.Exceptions.OperationOnNonUIThreadException">
            <summary>
            Thrown if an operation is performed on a UI object from a non-UI thread.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Exceptions.OperationOnNonUIThreadException.Message">
            <summary>
            A message indicating that the operation should be executed inside a call to the Invoke method.
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.Exceptions.CannotLoadRepositoryException">
            <summary>
            [Emulator Specific] Thrown if GeoBase is asked to load more than one GBFS file on the emulator
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.Exceptions.InteropException">
            <summary>
            Thrown if GeoBase encounters an interoperability issue between managed and native code.
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.Exceptions.GSRendererException">
            <summary>
            This is thrown when attempting to fetch a tile from an incorrectly configured
            GeoStreamRenderer. See the <see cref="T:Telogis.GeoBase.GeoStream.Server.GeoStreamRenderer"/>
            API documentation for details on how to correctly configure a GeoStreamRenderer.
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.Exceptions.SoundPlayerException">
            <summary>
            An exception thrown when there is a failure playing an audio announcement.
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.Exceptions.SoundPlayerException.#ctor(System.String)">
            <summary>
            An exception thrown when there is a failure playing an audio announcement.
            </summary>
            <param name="msg">Detail message.</param>
        </member>
        <member name="M:Telogis.GeoBase.Exceptions.SoundPlayerException.#ctor(System.String,System.Exception)">
            <summary>
            An exception thrown when there is a failure playing an audio announcement.
            </summary>
            <param name="msg">Detail message.</param>
            <param name="innerException"> The exception that is the cause of the current exception.</param>
        </member>
        <member name="T:Telogis.GeoBase.GeoStream.GeoStreamRPCException">
            <summary>
            Thrown when an exception occurs whilst making a GeoStream RPC call. If the exception was 
            thrown by the remote end of the RPC call, the InnerException property will contain 
            the exception the GeoStream server threw.
            </summary>
            <remarks>
            <para><b>Related articles</b>: <a href="716a13bd-a586-4062-ad0c-6d48b15b72da.htm">GeoStream</a>.</para>
            </remarks>
        </member>
        <member name="M:Telogis.GeoBase.GeoStream.GeoStreamRPCException.#ctor(System.String)">
            <summary>
            Create a new exception with a given error message.
            </summary>
            <param name="message">Error message.</param>
        </member>
        <member name="M:Telogis.GeoBase.GeoStream.GeoStreamRPCException.#ctor(System.String,System.Exception)">
            <summary>
            Create a new exception with a given error message and link to the inner exception 
            that caused this exception.
            </summary>
            <param name="message">The error message for the GeoStreamRPCException.</param>
            <param name="innerException">The exception on the GeoStream server that occurred when trying to execute the RPC call.</param>
        </member>
        <member name="M:Telogis.GeoBase.GeoStream.GeoStreamRPCException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            For serialization.
            </summary>
            <param name="info">The information needed to serialize the RPC call.</param>
            <param name="context">Describes the source and destination of the serialized stream, as well as caller-defined context.</param>
        </member>
        <member name="P:Telogis.GeoBase.GeoStream.GeoStreamRPCException.Message">
            <summary>
            Gets a string containing the exception generated.
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.StateNotFoundException">
            <summary>
            An exception thrown when a state name cannot be found when geocoding.
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.StateNotFoundException.#ctor(System.String)">
            <summary>
            An exception thrown when a state name cannot be found when geocoding.
            </summary>
            <param name="state">The invalid state name</param>
        </member>
        <member name="T:Telogis.GeoBase.JournalTooOldException">
            <summary>
            An exception thrown when the journal file being specified is made with a version of GeoBase that's too old.
            Simply regenerating the journal file will fix this problem.
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.JournalTooOldException.#ctor(System.String)">
            <summary>
            Constructs the journal too old exception.
            </summary>
            <param name="message"></param>
        </member>
        <member name="T:Telogis.GeoBase.JournalVersionUnsupported">
            <summary>
            An exception thrown when the journal file being specified is made with a version of GeoBase that's either 
            too new or too old, and routing does not understand it. Simply regenerating the journal file will fix
            this problem.
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.JournalDataSetHashNotEqual">
            <summary>
            Fail-fast behaviour caused by the journal file being made with a a different repository than the current one.
            Simply regenerating the journal file will fix this problem.
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.DataSources.SimpleFeature">
            <summary>
            A simple implementation of IPointFeature.  A SimpleFeature has a Location, Type and
            Metadata associated with it.  When a cluster is summarized, SimpleFeatures with the same Type are 
            grouped together.  For example, if a SimpleFeature represents a vehicle then the Type might
            represent the vehicle's status: Moving, Idle, Parked, and so on.
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.DataSources.IPointFeature">
            <summary>
            Represents an item that can be clustered with other items if they are spatially close
            together relative to the map zoom.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.DataSources.IPointFeature.Location">
            <summary>
            The location of the feature.
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.DataSources.SimpleFeature.#ctor(Telogis.GeoBase.LatLon,System.String)">
            <summary>
            Construct a new SimpleFeature of a given type.
            </summary>
            <param name="location">The location of the feature.</param>
            <param name="type">The type of the feature - when a cluster is summarized,
            features of the same Type are grouped together.</param>
        </member>
        <member name="M:Telogis.GeoBase.DataSources.SimpleFeature.#ctor(Telogis.GeoBase.LatLon,System.String,Telogis.GeoBase.Serialization.JSONObject)">
            <summary>
            Construct a new SimpleFeature with the given attributes.
            </summary>
            <param name="location">The location of the feature.</param>
            <param name="type">The type of the feature.</param>
            <param name="metadata">Other information associated with the feature.</param>
        </member>
        <member name="M:Telogis.GeoBase.DataSources.SimpleFeature.ToJSON">
            <summary>
            Converts the feature into an object that can be easily serialized for transmission over
            HTTP.  The returned object has two key-value pairs representing the location and the
            tag.
            </summary>
            <returns>The feature in easily serializable format.</returns>
        </member>
        <member name="M:Telogis.GeoBase.DataSources.SimpleFeature.FromJSON(Telogis.GeoBase.Serialization.JSONObject)">
            <summary>
            Populates the feature's data from an object in the format generated by ToJSON().  The
            object passed in has two key-value pairs representing the location and the tag, and
            an optional key-value pair representing the metadata.
            </summary>
            <param name="serializedRepresentation">The object in the format generated by
            ToJSON().</param>
        </member>
        <member name="M:Telogis.GeoBase.DataSources.SimpleFeature.Summarize(System.Collections.Generic.IList{Telogis.GeoBase.DataSources.IPointFeature})">
            <summary>
            Creates a summary for one or more SimpleFeature objects.
            
            The resulting object will be of the following form - note that "features" will only be populated if there are
            fewer than 50 features total.
            <code lang="javascript">
            { "tally" : { "Restaurant" : 2,
                          "Jeweller" : 1,
                          "ATM" : 1 },
              "features" : [
                { "location" : "33.615575,-117.930215", "type" : "Restaurant", "metadata" : { "Name" : "Rudy's Pub &amp; Grill" } },
                { "location" : "33.615035,-117.930154", "type" : "Restaurant", "metadata" : { "Name" : "Mama D's Italy Kitchen" } },
                { "location" : "33.620420,-117.923972", "type" : "Jeweller",   "metadata" : { "Name" : "William Harold Jewelers" } },
                { "location" : "33.614501,-117.932181", "type" : "ATM",        "metadata" : { "Name" : "Bank of America ATM" } },
              ]
            }
            </code>
            </summary>
            <param name="features">The features to create a summary for.  Must all be
            SimpleFeatures</param>
            <returns>The summary object.</returns>
        </member>
        <member name="P:Telogis.GeoBase.DataSources.SimpleFeature.Location">
            <summary>
            The location of the feature.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.DataSources.SimpleFeature.Type">
            <summary>
            The type of this feature. Used by the summary function.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.DataSources.SimpleFeature.Metadata">
            <summary>
            Other information associated with this feature.
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.Clustering.Tally">
            <summary>
            Maintains a set of counts, each associated with a key.
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.Clustering.Tally.Add(System.String)">
            <summary>
            Add 1 to the given key.
            </summary>
            <param name="key">The key to increment.</param>
        </member>
        <member name="M:Telogis.GeoBase.Clustering.Tally.Add(System.String,System.Int32)">
            <summary>
            Add count to the given key.
            </summary>
            <param name="key">The key to increment.</param>
            <param name="count">The amount to increment by.</param>
        </member>
        <member name="M:Telogis.GeoBase.Clustering.Tally.ToJSON">
            <summary>
            Convert the Tally into a JSON object.
            </summary>
            <returns>The JSONObject representation of the tally.</returns>
        </member>
        <member name="P:Telogis.GeoBase.Clustering.Tally.Keys">
            <summary>
            All keys contained within the Tally.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Clustering.Tally.Item(System.String)">
            <summary>
            Get the value of a given key. If no such key exists 0 is returned.
            </summary>
            <param name="key">The key to lookup.</param>
            <returns>The count associated with the given key.</returns>
        </member>
        <member name="T:Telogis.GeoBase.Routing.LinkEdit.LatLonSelection">
            <summary>
            Selects a link for editing based on its location.  A heading can also be specified.
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.Routing.LinkEdit.LatLonSelection.#ctor(Telogis.GeoBase.LatLon)">
            <summary>
            Creates a LatLonSelection that will select the link at the supplied location.  If the
            link permits travel in both directions then the edit will be applied to both
            directions.  Locations should be chosen such that there is only one link at that
            location, to prevent ambiguities.  For example, it is recommended to avoid specifying
            a location that is near an intersection between two or more links.
            </summary>
            <param name="loc">The location of the edit.</param>
        </member>
        <member name="M:Telogis.GeoBase.Routing.LinkEdit.LatLonSelection.#ctor(Telogis.GeoBase.LatLon,System.Nullable{System.Double})">
            <summary>
            Creates a LatLonSelection that will select the link at the supplied location with the
            specified heading.  If the link permits travel in both directions then the edit will be
            applied to just one direction if it is within 20 degrees of the supplied heading.
            Locations should be chosen such that there is only one link at that
            location, to prevent ambiguities.  For example, it is recommended to avoid specifying
            a location that is near an intersection between two or more links.
            </summary>
            <param name="loc">The location of the edit.</param>
            <param name="heading">The heading of the link, in degrees.</param>
        </member>
        <member name="M:Telogis.GeoBase.Routing.LinkEdit.LatLonSelection.#ctor(System.String)">
            <summary>
            Creates a LatLonSelection from its selection name
            </summary>
            <param name="selection"></param>
        </member>
        <member name="M:Telogis.GeoBase.Routing.LinkEdit.LatLonSelection.ToString">
            <summary>
            Returns a string containing the location and heading.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Telogis.GeoBase.Routing.LinkEdit.LatLonSelection.Location">
            <summary>
            The location of the edit.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Routing.LinkEdit.LatLonSelection.Heading">
            <summary>
            The heading of the link, in degrees.
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.Routing.CustomRoutingInfo">
            <summary>
            CustomRoutingInfo is provided to a <see cref="T:Telogis.GeoBase.Routing.RouteCustomCostFunc"/> to aid in adjusting 
            the cost of traveling on a particular link. It contains information about the link to be evaluated.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Routing.CustomRoutingInfo.Start">
            <summary>
            The location of the start of the link
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Routing.CustomRoutingInfo.End">
            <summary>
            The location of the end of the link
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Routing.CustomRoutingInfo.Length">
            <summary>
            The length of the link in meters
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Routing.CustomRoutingInfo.LinkId">
            <summary>
            The LinkId for the link.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Routing.CustomRoutingInfo.CumulativeCost">
            <summary>
            The total cost of the route so far, not including this link
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Routing.CustomRoutingInfo.Flags">
            <summary>
            The <see cref="T:Telogis.GeoBase.Routing.RouteFlag"/> for the link
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Routing.CustomRoutingInfo.LastFlags">
            <summary>
            The <see cref="T:Telogis.GeoBase.Routing.RouteFlag"/> for the previous link
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Routing.CustomRoutingInfo.Timezone">
            <summary>
            The timezone this link is in. This should be used to convert the UTC Time to local time
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Routing.CustomRoutingInfo.Time">
            <summary>
            The UTC time at which routing is being performed
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Routing.CustomRoutingInfo.ExtraData">
            <summary>
            The <see cref="T:Telogis.GeoBase.LinkExtraData">extra data</see> associated with this link
            </summary>
        </member>
        <member name="T:Telogis.UI.SmartListBox">
            <summary>
            Main Listbox class used in Nav Address finding
            </summary>
        </member>
        <member name="F:Telogis.UI.SmartListBox.actionImage">
            <summary>
            
            </summary>
        </member>
        <member name="M:Telogis.UI.SmartListBox.FilterList(System.Collections.Generic.List{Telogis.UI.Pair})">
            <summary>
            Filter the input list by the search text
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Telogis.UI.SmartListBox.AddItem(System.String,System.Object,System.Int32)">
            <summary>
            Add the given item to this <b>SmartListBox</b>
            </summary>
            <param name="text">The (string) tag for the new item. This will be displayed to the user</param>
            <param name="value">The (object) value for the new item</param>
            <param name="FirstMatchChar">An index (zero-based) into the tag identifying where to start 
            the search when filtering listbox items</param>
        </member>
        <member name="M:Telogis.UI.SmartListBox.AddItem(System.String,System.Object)">
            <summary>
            Add an object to the <b>SmartListBox</b>
            </summary>
            <param name="text">Name given to the object. This will appear in the <b>SmartListBox</b></param>
            <param name="value">The object associated with the name</param>
        </member>
        <member name="M:Telogis.UI.SmartListBox.OnResize(System.EventArgs)">
            <summary>
            Handles a resize event.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Telogis.UI.SmartListBox.#ctor">
            <summary>
            Parameterless constructor. 
            </summary>
        </member>
        <member name="F:Telogis.UI.SmartListBox.HilightTextList">
            <summary>
            List of strings that should be highlighted in the results, because they have resulted in matches.
            </summary>
        </member>
        <member name="M:Telogis.UI.SmartListBox.Clear">
            <summary>
            Remove all items from the list
            </summary>
        </member>
        <member name="M:Telogis.UI.SmartListBox.OnMouseDown(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Handles a mouse-down event.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Telogis.UI.SmartListBox.OnMouseMove(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Handles a mouse-move event.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Telogis.UI.SmartListBox.FireClick">
            <summary>
            Safely fires the <b>SmartListBox</b>'s click event.
            </summary>
        </member>
        <member name="M:Telogis.UI.SmartListBox.OnMouseUp(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Handles a mouse-up event.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Telogis.UI.SmartListBox.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <summary>
            Handles a paint event.
            </summary>
            <param name="e"></param>
        </member>
        <member name="E:Telogis.UI.SmartListBox.Action">
            <summary>
            This eventhandler will be fired when an action is performed on an item.
            </summary>
        </member>
        <member name="P:Telogis.UI.SmartListBox.AutoFilter">
            <summary>
            Gets or sets whether to apply (automatic) filtering.
            </summary>
            <remarks>If <b>false</b> automatic filtering will be disabled.</remarks>
        </member>
        <member name="P:Telogis.UI.SmartListBox.KeyboardFilter">
            <summary>
            Returns a string of valid next letters.
            </summary>
        </member>
        <member name="P:Telogis.UI.SmartListBox.AllFilteredText">
            <summary>
            Get or set the filtered text.
            </summary>
            <remarks>The filtered text is the text entered into the <b>SmartListBox</b> to filter items.</remarks>
        </member>
        <member name="P:Telogis.UI.SmartListBox.Count">
            <summary>
            Number of items in this <b>SmartListBox</b>
            </summary>
        </member>
        <member name="P:Telogis.UI.SmartListBox.FullCount">
            <summary>
            This returns the full item count, even when autofiltered
            </summary>
        </member>
        <member name="P:Telogis.UI.SmartListBox.UpDownWidth">
            <summary>
            Gets or sets the width of the up and down buttons (when visible)
            </summary>
        </member>
        <member name="P:Telogis.UI.SmartListBox.HilightText">
            <summary>
            The Text that is hilighed in the list, or displayed in the 2nd line if no content
            </summary>
        </member>
        <member name="P:Telogis.UI.SmartListBox.ItemMargin">
            <summary>
            Buffer above and below Text to make finger pushing easier
            </summary>
            <remarks>Measured in pixels</remarks>
        </member>
        <member name="P:Telogis.UI.SmartListBox.NormalTextColor">
            <summary>
            Color of the normal text
            </summary>
        </member>
        <member name="P:Telogis.UI.SmartListBox.HilightTextColor">
            <summary>
            Sets the color to use when highlighting text
            </summary>
            <remarks><see cref="T:System.Drawing.SolidBrush"/></remarks>
        </member>
        <member name="P:Telogis.UI.SmartListBox.SelectionColor">
            <summary>
            Sets the color to use when selecting text
            </summary>
            <remarks><see cref="T:System.Drawing.SolidBrush"/></remarks>
        </member>
        <member name="P:Telogis.UI.SmartListBox.InfoText">
            <summary>
            The text displayed below the Edit Text when there is no list content
            </summary>
        </member>
        <member name="P:Telogis.UI.SmartListBox.NoItemText">
            <summary>
            String displayed when there are no items and no Text
            </summary>
        </member>
        <member name="P:Telogis.UI.SmartListBox.SelectedItem">
            <summary>
            Get the currently selected item
            </summary>
        </member>
        <member name="E:Telogis.UI.SmartListBox.SelectionChanged">
            <summary>
            This eventhandler will be fired when the currently selected text changes.
            </summary>
        </member>
        <member name="P:Telogis.UI.SmartListBox.SelectedIndex">
            <summary>
            Gets or sets the (zero-based) index of the currently selected item.
            </summary>
        </member>
        <member name="E:Telogis.UI.SmartListBox.Click">
            <summary>
            This eventhandler will be fired when the <b>SmartListBox</b> is clicked.
            </summary>
        </member>
        <member name="P:Telogis.UI.SmartListBox.InfoFont">
            <summary>
            Get or set the font used to display the <see cref="P:Telogis.UI.SmartListBox.InfoText">info text</see>.
            </summary>
        </member>
        <member name="T:Telogis.UI.SmartListBox.ActionEventHandler">
            <summary>
            Eventhandler delegate
            </summary>
            <param name="sender"></param>
            <param name="itemIndex"></param>
        </member>
        <member name="T:Telogis.UI.Pair">
            <summary>
            A Pair allows an object to be labeled.
            </summary>
        </member>
        <member name="F:Telogis.UI.Pair.tag">
            <summary>
            The <b>Pair</b>'s (string) label.
            </summary>
        </member>
        <member name="F:Telogis.UI.Pair.value">
            <summary>
            The <b>Pair</b>'s object.
            </summary>
        </member>
        <member name="M:Telogis.UI.Pair.#ctor(System.String,System.Object)">
            <summary>
            Construct a new object-label pair.
            </summary>
            <param name="t">The 'tag' (label) for the object</param>
            <param name="o">The object</param>
        </member>
        <member name="T:Telogis.UI.Clicker">
            <summary>
            The application delegate to play a 'click' sound on a control action
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.Navigation.DistanceFormatter">
            <summary>
            A utility class to format a given distance (measured in radians) as a string, with trailing units.
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.Navigation.DistanceFormatter.Format(System.Double,Telogis.GeoBase.Navigation.UnitSystem)">
            <summary>
            Formats the given distance as a string in the unit system provided.
            </summary>
            <param name="radians">The distance (in radians) to format.</param>
            <param name="system">The unit system to display it in.</param>
            <returns>The formatted distance string.</returns>
        </member>
        <member name="M:Telogis.GeoBase.Navigation.DistanceFormatter.FormatNumber(System.Double)">
            <summary>
            Returns a rounded string representation of a number.
            If the number is less than ten, return the rounded number.
            If the number has more than 4 digits, it is rounded to 2 signifigant digits.
            Otherwise round to 1 signifigant digit.
            For example FormatNumber(71) == "70", and FormatNumber(15999) == "16000"
            </summary>
            <param name="n">The number to format</param>
            <returns>The formatted number</returns>
        </member>
        <member name="T:Telogis.GeoBase.Navigation.LabelBox">
            <summary>
            A <see cref="T:Telogis.GeoBase.Navigation.LabelBox">LabelBox</see> is used to display 
            textual information above a map.
            </summary>
            <remarks><para><b>Related articles</b>: <a href="f95ae961-f645-4c92-a609-ca5b873f1c48.htm">Using a Navigator</a>, 
            <a href="af08a594-7b79-4b54-be4e-a689c43788f5.htm">Using a LabelBox</a>.</para></remarks>
        </member>
        <member name="T:Telogis.GeoBase.IMapMouseHandler">
             <summary>
             Implement to allow an item on the map to respond to mouse clicks.
             </summary>
             <remarks>
             IMapMouseHandler should be implemented by any object that will be
             displayed on an <see cref="T:Telogis.GeoBase.IMap"/> and wants to be
             able to respond to mouse events. IMapMouseHandler handles mouse events
             through the <see cref="T:Telogis.GeoBase.MapMouseEventsHandler"/> but also
             defines a further method called <see cref="M:Telogis.GeoBase.IMapMouseHandler.HitTest(System.Int32,System.Int32,Telogis.GeoBase.IMap)"/>. This method
             is used to determine whether the implementing object lies underneath a mouse click
             at given x &amp; y coordinates. 
             <para><b>Related articles</b>: <a href="49fe38bf-ca0a-4750-af1b-5d814b172684.htm">Renderers Tutorial</a>, 
             <a href="440bb76f-ec6e-4392-8bc8-9ac5121d7bc2.htm">Mouse Events</a>.</para>
            </remarks>
        </member>
        <member name="M:Telogis.GeoBase.IMapMouseHandler.HitTest(System.Int32,System.Int32,Telogis.GeoBase.IMap)">
             <summary>
             Test if the given x,y coordinates lie within the bounds of this item.
             </summary>
             <param name="x">x coordinate (pixels)</param>
             <param name="y">y coordinate (pixels)</param>
             <param name="aMap">The <see cref="T:Telogis.GeoBase.IMap"/> upon which the click occurred.</param>
             <returns>The item (if the click occurred on the item). Otherwise null</returns>
             <remarks>
             This method is used to determine whether an object lies underneath
             the co-ordinates at which the mouse was clicked. Objects that render
             themselves over the IMap (see <see cref="T:Telogis.GeoBase.IMapRenderer"/>)
             and react to mouse input should use HitTest to check if they have been clicked on.
             <para><b>Related articles</b>: <a href="49fe38bf-ca0a-4750-af1b-5d814b172684.htm">Renderers Tutorial</a>, 
             <a href="440bb76f-ec6e-4392-8bc8-9ac5121d7bc2.htm">Mouse Events</a>.</para>
             </remarks>
             <example> The following example
             is taken from <see cref="T:Telogis.GeoBase.BalloonPushPin"/>:
             <code lang="C#">
            	public IMapMouseHandler HitTest(int x, int y, IMap aMap) {
            
            		int x1, y1;
            
            		// Convert 'location' - A BalloonPushPin knows its LatLon - to
            		// x &amp; y map co-ordinates.
            		aMap.LatLontoXY(out x1, out y1 , location);
            
            		// Get a Rectangle with the size of this BalloonPushPin, located at x1,y1 co-ordinates. 
            		System.Drawing.Rectangle rect = Telogis.GeoBase.ImageUtils.IconCache.Rectangle(Icon, x1, y1);
            
            		// If the rectangle contains the co-ordinates that are being tested
            		// we have a hit, and so we return this BalloonPushPin.
            		if (rect.Contains(x, y)) {
            			return this;
            		}
            
            		// Otherwise there is no hit, and we return null.
            		return null;
            	}
             </code>
             </example>
        </member>
        <member name="P:Telogis.GeoBase.IMapMouseHandler.MapMouseEventsHandler">
            <summary>
            Gets the MapMouseEventsHandler.
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.Navigation.LabelBox.#ctor">
            <summary>
            Creates a new label box. See remarks for attributes.
            </summary>
            <remarks>The box has corners of radius 6px, a gray border 4px thick,
            the major font is 10pt bold-face Tahoma, the minor font is 8pt Tahoma,
            with black text.</remarks>
        </member>
        <member name="M:Telogis.GeoBase.Navigation.LabelBox.Dispose(System.Boolean)">
            <summary>
            Free all resources used by this <see cref="T:Telogis.GeoBase.Navigation.LabelBox"/>.
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.Navigation.LabelBox.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Navigation.LabelBox.ControlStyle">
            <summary>
            Prototypes the render function for this <see cref="T:Telogis.GeoBase.Navigation.LabelBox"/>.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Navigation.LabelBox.MajorBrush">
            <summary>
            The color in which to draw the major text.
            </summary>
            <remarks>The <see cref="M:Telogis.GeoBase.Navigation.LabelBox.#ctor">constructor</see> initializes this black.</remarks>
        </member>
        <member name="F:Telogis.GeoBase.Navigation.LabelBox.MinorBrush">
            <summary>
            The color in which to draw the minor text.
            </summary>
            <remarks>The <see cref="M:Telogis.GeoBase.Navigation.LabelBox.#ctor">constructor</see> initializes this black.</remarks>
        </member>
        <member name="F:Telogis.GeoBase.Navigation.LabelBox.AliasColor">
            <summary>
            The color used to alias the LabelBox on mobile devices.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Navigation.LabelBox.Buffer">
            <summary>
            The buffer space (measured in pixels) between LabelBox elements.
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.Navigation.LabelBox.Render(System.Drawing.Graphics,Telogis.GeoBase.RenderContext)">
            <summary>
            Implementation of <see cref="T:Telogis.GeoBase.IMapRenderer"/>. Used to draw this LabelBox.
            </summary>
            <param name="graphics">The graphics object to draw on.</param>
            <param name="rc">The context of the drawing operation.</param>
        </member>
        <member name="M:Telogis.GeoBase.Navigation.LabelBox.HitTest(System.Int32,System.Int32,Telogis.GeoBase.IMap)">
            <summary>
            Tests if the given pixel coordinates lie within this LabelBox.
            </summary>
            <param name="x">x coordinate (pixels)</param>
            <param name="y">y coordinate (pixels)</param>
            <param name="aMap">The <see cref="T:Telogis.GeoBase.IMap"/> upon which the click occurred.</param>
            <returns>The LabelBox (if the click was on the LabelBox), otherwise <b>null</b></returns>
        </member>
        <member name="P:Telogis.GeoBase.Navigation.LabelBox.Text">
            <summary>
            Gets or sets the (major) text of the labelbox.
            </summary>
            <remarks>Equivalent to <see cref="P:Telogis.GeoBase.Navigation.LabelBox.MajorText">MajorText</see>.
            See also <see cref="P:Telogis.GeoBase.Navigation.LabelBox.MinorText">MinorText</see></remarks>
        </member>
        <member name="P:Telogis.GeoBase.Navigation.LabelBox.MajorText">
            <summary>
            Gets or sets the major text to show on the label.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Navigation.LabelBox.MinorText">
            <summary>
            Gets or sets the minor text to show on the label.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Navigation.LabelBox.Font">
            <summary>
            Gets or sets the <see cref="T:System.Drawing.Font">Font</see> used to
            draw the major text of the LabelBox.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Navigation.LabelBox.MajorFont">
            <summary>
            The font to use for the major text of a label.
            </summary>
            <remarks>The <see cref="M:Telogis.GeoBase.Navigation.LabelBox.#ctor">constructor</see> initializes this to 10pt bold-face Tahoma.</remarks>
        </member>
        <member name="P:Telogis.GeoBase.Navigation.LabelBox.MinorFont">
            <summary>
            The font to use for the minor text of a label.
            </summary>
            <remarks>The <see cref="M:Telogis.GeoBase.Navigation.LabelBox.#ctor">constructor</see> initializes this to 8pt Tahoma.</remarks>
        </member>
        <member name="P:Telogis.GeoBase.Navigation.LabelBox.RequiredRendermodes">
            <summary>
            Gets the <see cref="T:Telogis.GeoBase.RenderMode">RenderMode</see> required by this <b>LabelBox</b>
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Navigation.LabelBox.MapMouseEventsHandler">
            <summary>
            Implements LabelBox mouse events: Click, MouseDown, MouseUp, MouseMove.
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.Navigation.TurnBox">
            <summary>
            A <see cref="T:Telogis.GeoBase.Navigation.TurnBox"/> is drawn as a visual aid when navigating a turn
            (or more generally a <see cref="T:Telogis.GeoBase.Navigation.NavigationEvent"/>.
            </summary>
            <remarks><img src="Art/navigation_turnbox.png"></img><para>The <see cref="T:Telogis.GeoBase.Navigation.TurnBox"/>
            (top left), and the associated navigation event (highlighted on map).</para>
            <para><b>Related articles</b>: <a href="7e963d53-c906-4fcb-8b71-595736b9f15b.htm">Using a TurnBox</a>.</para>
            </remarks>
        </member>
        <member name="F:Telogis.GeoBase.Navigation.TurnBox.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Navigation.TurnBox.DrivingSide">
            <summary>
            The driving side of the road. Defaults to right-hand side.
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.Navigation.TurnBox.#ctor">
            <summary>
            Parameterless constructor to create a new TurnBox.
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.Navigation.TurnBox.#ctor(Telogis.GeoBase.Navigation.NavigationEvent)">
            <summary>
            Create a new turnbox with a specified <see cref="T:Telogis.GeoBase.Navigation.NavigationEvent"/>.
            </summary>
            <param name="ne">The <see cref="T:Telogis.GeoBase.Navigation.NavigationEvent"/> that is 
            initially shown in the turnbox.</param>
        </member>
        <member name="F:Telogis.GeoBase.Navigation.TurnBox.SourceHeading">
            <summary>
            The heading, in degrees, before the <see cref="T:Telogis.GeoBase.Navigation.NavigationEvent"/> is made.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Navigation.TurnBox.OnRoute">
            <summary>
            Pen used to draw our route.
            </summary>
            <remarks>Initialized to 8px wide and blue.</remarks>
        </member>
        <member name="F:Telogis.GeoBase.Navigation.TurnBox.OffRouteBig">
            <summary>
            Pen used to draw large roads comprising, and intersecting with, our route.
            </summary>
            <remarks>Initialized to 7px wide and gray.</remarks>
        </member>
        <member name="F:Telogis.GeoBase.Navigation.TurnBox.OffRouteSmall">
            <summary>
            Pen used to draw small roads comprising, and intersecting with, our route.
            </summary>
            <remarks>Initialized to 4px wide and gray.</remarks>
        </member>
        <member name="F:Telogis.GeoBase.Navigation.TurnBox.Background">
            <summary>
            The background color of the turnbox.
            </summary>
            <remarks>Defaults to <see cref="T:System.Drawing.Color">white</see>.</remarks>
        </member>
        <member name="M:Telogis.GeoBase.Navigation.TurnBox.Dispose(System.Boolean)">
            <summary>
            Free all resources used by this TurnBox.
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.Navigation.TurnBox.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Navigation.TurnBox.AliasColor">
            <summary>
            The color used to alias the TurnBox on mobile devices.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Navigation.TurnBox.textHeight">
            <summary>
            The height of the text, in pixels.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Navigation.TurnBox.marginToDraw">
            <summary>
            The margin to the side of the turnbox.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Navigation.TurnBox.ControlStyle">
            <summary>
            A ControlStyle that handles rendering the frame of the turnbox.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Navigation.TurnBox.MaskLabels">
             <summary>
             If <b>true</b>, the control will reserve space on the label mask
             </summary>
             <remarks>
             If you are using a transparent background brush you may wish to set this property
             to <b>false</b>.
            </remarks>
        </member>
        <member name="M:Telogis.GeoBase.Navigation.TurnBox.Render(System.Drawing.Graphics,Telogis.GeoBase.RenderContext)">
            <summary>
            Draws the turnbox to represent the current navigation event.
            </summary>
            <param name="graphics">The <see cref="T:System.Drawing.Graphics"/> object to use for drawing</param>
            <param name="rc">The <see cref="T:Telogis.GeoBase.RenderContext"/> that provides the
            context of the drawing operation.</param>
            <remarks>The turnbox is not drawn if the map is a GeoStream map.</remarks>
        </member>
        <member name="P:Telogis.GeoBase.Navigation.TurnBox.Event">
            <summary>
            The <see cref="T:Telogis.GeoBase.Navigation.NavigationEvent"/> to draw the turn box for.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Navigation.TurnBox.CurrentEvent">
            <summary>
            Gets or sets the <see cref="T:Telogis.GeoBase.Navigation.NavigationEvent">navigation event</see>
            for which we are drawing the <see cref="T:Telogis.GeoBase.Navigation.TurnBox"/> for.
            </summary>
            <remarks><para><b>Related articles</b>: <a href="7e963d53-c906-4fcb-8b71-595736b9f15b.htm">Using a TurnBox</a>.</para></remarks>
        </member>
        <member name="P:Telogis.GeoBase.Navigation.TurnBox.RequiredRendermodes">
            <summary>
            Gets the <see cref="T:Telogis.GeoBase.RenderMode">RenderMode</see> required by this <b>TurnBox</b>
            </summary>
            <remarks>Turnbox uses both the prelabelling and postlabelling stages.</remarks>
        </member>
        <member name="T:Xheo.Licensing.DesigntimeLimit">
            <summary>
            Restricts the use of a protected Type to design-time environments only.
            </summary>
        </member>
        <member name="M:Xheo.Licensing.DesigntimeLimit.Validate(System.ComponentModel.LicenseContext,System.Type,System.Object)">
            <summary>
            Validates that the license being granted is within the limits enforced by
            this object.
            </summary>
            <param name="context">
            	The LicenseContext passed to <see cref="M:System.ComponentModel.LicenseProvider.GetLicense(System.ComponentModel.LicenseContext,System.Type,System.Object,System.Boolean)"/>.
            </param>
            <param name="type">
            	The Type of the object being licensed.
            </param>
            <param name="instance">
            	The instance of the object being licensed.
            </param>
            <returns>
            	Returns true if the limits are valid, otherwise false.
            </returns>
        </member>
        <member name="M:Xheo.Licensing.DesigntimeLimit.LoadFromXml(System.Xml.XmlNode)">
            <summary>
            Loads the contents of a Limit from an XML string.
            </summary>
            <param name="node">
            	The XML string to load from.
            </param>
            <returns>
            	Returns true if the load was successful, otherwise false.
            </returns>
        </member>
        <member name="M:Xheo.Licensing.DesigntimeLimit.SaveToXml(System.Xml.XmlNode)">
            <summary>
            Saves the contents of the Limit as an XML string.
            </summary>
            <returns>
            	Returns the saved XML.
            </returns>
        </member>
        <member name="P:Xheo.Licensing.DesigntimeLimit.Description">
            <summary>
            Gets the description of the limit.
            </summary>
        </member>
        <member name="P:Xheo.Licensing.DesigntimeLimit.Name">
            <summary>
            Gets the display name of the limit.
            </summary>
        </member>
        <member name="T:Internal.CommonRegexes">
            <summary>
            Declares static versions of some common regular expressions.
            </summary>
        </member>
        <member name="F:Internal.CommonRegexes.IpAddress">
            <summary>
            Pattern for matching against any valid IP address.
            </summary>
        </member>
        <member name="F:Internal.CommonRegexes.DomainName">
            <summary>
            Pattern for matching against any valid domain name.
            </summary>
        </member>
        <member name="F:Internal.CommonRegexes.FileName">
            <summary>
            Pattern for matching a Windows file path.
            </summary>
        </member>
        <member name="F:Internal.CommonRegexes.FilePath">
            <summary>
            Pattern for matching a Windows file path.
            </summary>
        </member>
        <member name="F:Internal.CommonRegexes.Url">
            <summary>
            Pattern for matching against any valid URL.
            </summary>
        </member>
        <member name="F:Internal.CommonRegexes.UrlFolder">
            <summary>
            Pattern for matching against any valid URL that has no file name.
            </summary>
        </member>
        <member name="F:Internal.CommonRegexes.FullyQualifiedUrl">
            <summary>
            Pattern for matching against any valid URL.
            </summary>
        </member>
        <member name="F:Internal.CommonRegexes.FullyQualifiedUrlFolder">
            <summary>
            Pattern for matching a fully qualified URL that has no file name.
            </summary>
        </member>
        <member name="F:Internal.CommonRegexes.Email">
            <summary>
            Pattern for matching against any valid email address.
            </summary>
        </member>
        <member name="F:Internal.CommonRegexes.UsZip5">
            <summary>
            Pattern for a US 5-digit zip code.
            </summary>
        </member>
        <member name="F:Internal.CommonRegexes.UsZip5Plus4">
            <summary>
            Pattern for a US 5-digit zip code plus 4 digit exchange.
            </summary>
        </member>
        <member name="F:Internal.CommonRegexes.UsZip">
            <summary>
            Pattern for a US 5-digit zip code with an optional 4 digit exchange.
            </summary>
        </member>
        <member name="F:Internal.CommonRegexes.UsPhone">
            <summary>
            Pattern for a US 10-digit phone number.
            </summary>
        </member>
        <member name="F:Internal.CommonRegexes.UsSsn">
            <summary>
            Pattern for a US social security number.
            </summary>
        </member>
        <member name="F:Internal.CommonRegexes.UsEin">
            <summary>
            Pattern for a US employer identification number.
            </summary>
        </member>
        <member name="F:Internal.CommonRegexes.UsSsnOrEin">
            <summary>
            Pattern for a US social security number or an employer identification number.
            </summary>
        </member>
        <member name="M:Internal.CommonRegexes.#ctor">
            <summary>
            Initializes a new instance of the CommonRegexes class.
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.Crypto">
            <summary>
            Summary description for Crypto.
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.BoundingBox">
             <summary>
             Represents a rectangular area, defined by two corners: top-left and bottom-right.
             Used for specifying map sizes and determining feature limits.
             </summary>
             <remarks>
             <para>A general purpose object used to represent a rectangular area. It has methods to
             allow resizing and to determine whether a given point lies within the box area.
             Some of the uses for Bounding Boxes are: zooming, or
             <see cref="M:Telogis.GeoBase.IMapMouseHandler.HitTest(System.Int32,System.Int32,Telogis.GeoBase.IMap)">hit-testing</see> a given area.</para>
             <para>If adjusting points manually, please refer to remarks on <see cref="F:Telogis.GeoBase.BoundingBox.P1">P1</see>
             for important usage information.</para>
             <para><b>Related articles</b>: <a href="154a60d1-c146-49bc-a913-3e4c067ae8c6.htm">Data Query Concept</a>, 
             <a href="26a9c54b-02bb-43fa-89a9-b9150f2480d9.htm">Avoiding a Given Area</a>.</para>
             </remarks>
             <example>
             <code lang="C#">
             BoundingBox bb = new BoundingBox();
            
             // using the Add method is a safe and easy way of
             // setting up the BoundingBox. These are arbitrary points
             // in Los Angeles, USA.
             bb.Add(new LatLon(33.94, -118.34));
             bb.Add(new LatLon(33.78, -117.95));
            
             // we can calculate the center of the BoundingBox:
             LatLon ll = bb.Center;
            
             // and we can check if the center of the BoundingBox
             // is *in* the BoundingBox...
             Console.WriteLine("Center is in BB? " + bb.Contains(ll));
             // ... this will, of course, be true...
            
             // we can also dump the box in WKT format:
             Console.WriteLine(bb.WKT);
            
             // if we have a Map object, we can zoom the Map to our BoundingBox. We need to set a buffer, which is the
             // number of pixels between the edge of the box and the edge of the visible map area.
             int edgeBuffer = 10;
             myMap.ZoomToBoundingBox(bb, edgeBuffer);
            
             </code>
             </example>
        </member>
        <member name="F:Telogis.GeoBase.BoundingBox.HemisphereTelogians">
            <summary>
            The number of telogians in a hemisphere.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.BoundingBox.P1">
            <summary>
            Represents the Min point (bottom-left corner).
            </summary>
            <remarks>
            <para>If you change this value by hand, you should call <see cref="M:Telogis.GeoBase.BoundingBox.Normalize"/>
            afterwards. However, note the following:<br/>
            The <see cref="M:Telogis.GeoBase.BoundingBox.Normalize"/> method sets the bottom left-hand point to be the point
            that lies furthest west. Similarly, <see cref="M:Telogis.GeoBase.BoundingBox.Normalize"/> sets the top right-hand point
            as the point that lies furthest east.</para>
            <para>If the bounding box is intersected by the prime meridian
            (the zero line of longitude through Greenwich) then there are two possibilities for the bounding
            box. The first is a comparatively small box, with two corners each lying either side of the
            meridian. The second possibility is a large rectangle that wraps around the earth, but does not
            cross the meridian. The solution to this ambiguity is to check if the meridian is visible on the
            user's map and carefully select the corners from which the desired bounding box is constructed.
            <b>This is the developer's responsibility.</b>
            It should be noted that this consideration is only of real concern when mapping in Western
            Europe, North Africa and the poles.</para>
            </remarks>
        </member>
        <member name="F:Telogis.GeoBase.BoundingBox.P2">
            <summary>
            Represents the Max point (top-right corner).
            </summary>
            <remarks>
            If you change this value by hand, you should call <see cref="M:Telogis.GeoBase.BoundingBox.Normalize"/>
            afterwards.
            </remarks>
        </member>
        <member name="F:Telogis.GeoBase.BoundingBox.m_allowCrossAntimeridian">
            <summary>
            Whether the BoundingBox is allowed to straddle the antimeridian (the meridian at +/- 
            180 degrees).
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.BoundingBox.#ctor">
            <summary>
            Create a BoundingBox with no boundaries set.
            </summary>
            <remarks><para>If the parameter-less constructor is used the <see cref="F:Telogis.GeoBase.BoundingBox.P1">bottom-left</see>
            and <see cref="F:Telogis.GeoBase.BoundingBox.P2">top-right</see> corner points will need to be set manually and
            <see cref="M:Telogis.GeoBase.BoundingBox.Normalize"/> called to ensure that P1 is the bottom-left corner and that P2 is the
            top-right corner.</para><para>To adjust the points of a BoundingBox, consider using the
            <see cref="M:Telogis.GeoBase.BoundingBox.AddPoint(Telogis.GeoBase.LatLon)"/> and <see cref="M:Telogis.GeoBase.BoundingBox.AddBox(Telogis.GeoBase.BoundingBox)"/> methods and the <see cref="F:Telogis.GeoBase.BoundingBox.P1"/> and
            <see cref="F:Telogis.GeoBase.BoundingBox.P2"/> properties.</para>
            </remarks>
        </member>
        <member name="M:Telogis.GeoBase.BoundingBox.#ctor(Telogis.GeoBase.BoundingBox)">
            <summary>
            Create a BoundingBox that contains the given BoundingBox.
            </summary>
            <remarks>This constructor effectively creates a BoundingBox that is a duplicate of
            the given BoundingBox.</remarks>
            <param name="other">The BoundingBox that this new BoundingBox should contain.</param>
        </member>
        <member name="M:Telogis.GeoBase.BoundingBox.#ctor(Telogis.GeoBase.LatLon[])">
            <summary>
            Constructs a new bounding box around the specified points.
            </summary>
            <param name="points">An array of points to be added to the bounding box.</param>
        </member>
        <member name="M:Telogis.GeoBase.BoundingBox.Normalize">
             <summary>
             Normalize the box. Should be called after manual changes to <see cref="F:Telogis.GeoBase.BoundingBox.P1"/>
             or <see cref="F:Telogis.GeoBase.BoundingBox.P2"/>.
             </summary>
             <remarks>
             This method should be called after manual changes to P1 or P2 because P1 must represent
             the bottom-left corner, and P2 must represent the top-right corner. Manual changes to P1 or P2
             could result in a cross over situation (P2 is top-left and P1 bottom-right). This method
             ensures that P1 and P2 do not violate the positioning rule.
            </remarks>
        </member>
        <member name="M:Telogis.GeoBase.BoundingBox.Inflate(System.Double,System.Double)">
            <summary>
            Makes each side of the box bigger or smaller by the given number of degrees.
            </summary>
            <param name="xDegrees">The number of degrees by which the width should change.
            The sign of this parameter determines whether the box shrinks or grows. A
            positive <b>degrees</b> value causes the box to inflate, a negative
            value causes the box to deflate.</param>
            <param name="yDegrees">The number of degrees by which the height should change.
            The sign of this parameter determines whether the box shrinks or grows. A
            positive <b>degrees</b> value causes the box to inflate, a negative
            value causes the box to deflate.</param>
        </member>
        <member name="M:Telogis.GeoBase.BoundingBox.Inflate(System.Double)">
            <summary>
            Make each side of the box bigger or smaller by the given number of degrees.
            </summary>
            <param name="degrees">The number of degrees by which the size should change.
            The sign of this parameter determines whether the box shrinks or grows. A
            positive <b>degrees</b> value causes the box to inflate, a negative
            value causes the box to deflate.</param>
            <remarks>
            The box will grow or shrink on all sides by the number of degrees specified.
            If you have a box where <see cref="F:Telogis.GeoBase.BoundingBox.P1"/>.x = 10,
            <see cref="F:Telogis.GeoBase.BoundingBox.P2"/>.x = 15 and you specify 5 degrees then you get
            P1.x = 5 and P2.x = 20 (both sides have moved outwards by 5 degrees).
            </remarks>
        </member>
        <member name="M:Telogis.GeoBase.BoundingBox.InflateBy(System.Double)">
            <summary>
            Multiply the box dimensions by the given amount.
            </summary>
            <param name="amount">Size to inflate the box by. This is specified as an amount
            relative to the current box size. For example, an amount of 1 would keep the edges
            of the box the same size, while an amount of 2 would double the size of each edge
            of the box.</param>
        </member>
        <member name="M:Telogis.GeoBase.BoundingBox.Add(Telogis.GeoBase.LatLon)">
            <summary>
            Inflate the box to contain the given point.
            </summary>
            <remarks>
            By calling this method repeatedly a BoundingBox may be created which contains all
            the given points.
            If <see cref="F:Telogis.GeoBase.BoundingBox.P1"/> is null (possibly because the default constructor
            was used) the first call to this method will set both P1 and <see cref="F:Telogis.GeoBase.BoundingBox.P2"/>
            to the same value, resulting in a BoundingBox with no area. If AddPoint is
            called again with the desired P2 value then the BoundingBox will expand.</remarks>
            <seealso cref="M:Telogis.GeoBase.BoundingBox.AddBox(Telogis.GeoBase.BoundingBox)"/>
            <param name="point">A <see cref="T:Telogis.GeoBase.LatLon"/> point that the box will inflate to contain.</param>
        </member>
        <member name="M:Telogis.GeoBase.BoundingBox.Add(Telogis.GeoBase.BoundingBox)">
            <summary>
            Inflate the Bounding Box to include this box.
            </summary>
            <remarks>This method is a convenience method that calls <see cref="M:Telogis.GeoBase.BoundingBox.AddPoint(Telogis.GeoBase.LatLon)"/> twice, once for
            <see cref="F:Telogis.GeoBase.BoundingBox.P1"/> and again for <see cref="F:Telogis.GeoBase.BoundingBox.P2"/>.
            </remarks>
            <param name="box">A <b>BoundingBox</b> which this box will inflate to contain.</param>
        </member>
        <member name="M:Telogis.GeoBase.BoundingBox.Contains(Telogis.GeoBase.LatLon)">
            <summary>
            Test if a given point lies within this bounding box. Points on the edge
            of the bounding box are considered to be outside.
            </summary>
            <param name="point">A <see cref="T:Telogis.GeoBase.LatLon"/> point</param>
            <returns><b>True</b> if the point lies within this Bounding Box, otherwise <b>false</b>.
            Will return <b>false</b> if the point lies on the edge of the bounding box.
            </returns>
        </member>
        <member name="M:Telogis.GeoBase.BoundingBox.Intersects(Telogis.GeoBase.BoundingBox)">
            <summary>
            Test whether this BoundingBox intersects with the specified
            Bounding Box.
            </summary>
            <param name="other">The BoundingBox to test against.</param>
            <returns><b>True</b> if the boxes intersect, otherwise <b>false</b>.</returns>
        </member>
        <member name="M:Telogis.GeoBase.BoundingBox.Contains(Telogis.GeoBase.BoundingBox)">
            <summary>
            Tests to see if this BoundingBox fully contains another bounding box.
            </summary>
            <param name="box">The BoundingBox to check</param>
            <returns><b>True</b> if this Box fully contains the other, otherwise <b>false</b>.</returns>
        </member>
        <member name="M:Telogis.GeoBase.BoundingBox.Clone">
            <summary>
            Makes a clone of the bounding box.
            </summary>
            <returns>A new bounding box with the same dimensions as this one.</returns>
        </member>
        <member name="M:Telogis.GeoBase.BoundingBox.AddBox(Telogis.GeoBase.BoundingBox)">
            <summary>
            Obsolete. Use <see cref="M:Telogis.GeoBase.BoundingBox.Add(Telogis.GeoBase.BoundingBox)"/>.
            </summary>
            <param name="box"></param>
        </member>
        <member name="M:Telogis.GeoBase.BoundingBox.AddPoint(Telogis.GeoBase.LatLon)">
            <summary>
            Obsolete. Use <see cref="M:Telogis.GeoBase.BoundingBox.Add(Telogis.GeoBase.LatLon)"/>
            </summary>
            <param name="point"></param>
        </member>
        <member name="M:Telogis.GeoBase.BoundingBox.Render(System.Drawing.Graphics,Telogis.GeoBase.RenderContext)">
            <summary>
            Renders the BoundingBox on a given graphics output with a given context.
            </summary>
            <param name="graphics"><see cref="T:System.Drawing.Graphics"/></param>
            <param name="rc"><see cref="T:Telogis.GeoBase.RenderContext"/></param>
        </member>
        <member name="M:Telogis.GeoBase.BoundingBox.Equals(System.Object)">
            <summary>
            Compares this object to the parameter object.
            </summary>
            <param name="obj">Object used for comparison.</param>
            <returns>Returns true if the parameter object is a BoundingBox and has the same
            coordinates and color as this BoundingBox.</returns>
        </member>
        <member name="M:Telogis.GeoBase.BoundingBox.Equals(Telogis.GeoBase.BoundingBox)">
            <summary>
            Compares this object to the parameter BoundingBox.
            </summary>
            <param name="other">BoundingBox used for comparison.</param>
            <returns>Returns true if the parameter BoundingBox has the same coordinates and color
            as this BoundingBox.</returns>
        </member>
        <member name="M:Telogis.GeoBase.BoundingBox.GetHashCode">
            <summary>
            Returns a unique integer for this object.
            </summary>
            <remarks>Used with hash tables.</remarks>
            <returns>An integer containing the hash code.</returns>
        </member>
        <member name="P:Telogis.GeoBase.BoundingBox.AllowCrossAntimeridian">
            <summary>
            Whether the BoundingBox is allowed to straddle the antimeridian (the meridian at +/- 
            180 degrees).  The default is true.
            </summary>
            <remarks>
            <para>
            If set to true then the BoundingBox will never cover more than 180 degrees of
            longitude.  In certain situations, the BoundingBox will achieve this by setting its
            left-hand edge to have a longitude larger than its right-hand edge, in which case the
            BoundingBox straddles the antimeridian (the meridian at +/- 180 degrees).
            </para>
            <para>
            For example, if set to true and the following points are added to the BoundingBox:
            (51, 171) and (72, -130), then the BoundingBox will have P1=(51, 171) and
            P2=(72, -130), meaning it will approximately cover Alaska USA.  However, if this
            property is set to false, then the BoundingBox will have P1=(51,-130) and P2=(72,171),
            meaning it will cover a narrow strip around the world from western Canada to eastern
            Russia.
            </para>
            <para>
            This value may only be changed when the bounding box covers zero area (ie P1 == P2).
            </para>
            </remarks>
        </member>
        <member name="P:Telogis.GeoBase.BoundingBox.TopLeft">
            <summary>
            The top-left corner of the BoundingBox.
            </summary>
            <remarks>Note that setting this value does not call <see cref="M:Telogis.GeoBase.BoundingBox.Normalize"/>.</remarks>
        </member>
        <member name="P:Telogis.GeoBase.BoundingBox.TopRight">
             <summary>
             The top-right corner of the BoundingBox.
             </summary>
            <remarks>Note that setting this value does not call <see cref="M:Telogis.GeoBase.BoundingBox.Normalize"/>.</remarks>
        </member>
        <member name="P:Telogis.GeoBase.BoundingBox.BottomLeft">
            <summary>
            The bottom-left corner of the BoundingBox.
            </summary>
            <remarks>Note that setting this value does not call <see cref="M:Telogis.GeoBase.BoundingBox.Normalize"/>.</remarks>
        </member>
        <member name="P:Telogis.GeoBase.BoundingBox.BottomRight">
            <summary>
            The bottom-right corner of the BoundingBox.
            </summary>
            <remarks>Note that setting this value does not call <see cref="M:Telogis.GeoBase.BoundingBox.Normalize"/>.</remarks>
        </member>
        <member name="P:Telogis.GeoBase.BoundingBox.Width">
            <summary>
            Gets the width of the BoundingBox in degrees.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.BoundingBox.Height">
            <summary>
            Gets the height of the BoundingBox in degrees.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.BoundingBox.WorldBounds">
            <summary>
            Returns a BoundingBox that covers the whole world.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Telogis.GeoBase.BoundingBox.Rectangle">
             <summary>
             Gets a <see cref="P:Telogis.GeoBase.BoundingBox.Rectangle"/> representing this box's coordinates, or sets this box
             to match the coordinates of a given <see cref="P:Telogis.GeoBase.BoundingBox.Rectangle"/>.
             </summary>
             <remarks>
             There is no need to call Normalize() after this method as the created Rectangle
             cannot have crossed-over coordinates.
            </remarks>
        </member>
        <member name="P:Telogis.GeoBase.BoundingBox.Center">
            <summary>
            Gets a LatLon representing the center of the box.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.BoundingBox.IsValid">
            <summary>
            Returns true only if this BoundingBox's corner points have been assigned valid values.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.BoundingBox.WKT">
            <summary>
            A string that describes the box in WKT (Well-Known Text) format.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.BoundingBox.Color">
            <summary>
            Gets or sets the color of the bounding box if it were to be rendered on the map
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.BoundingBox.BorderWidth">
            <summary>
            Sets the width of the BoundingBox border.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.BoundingBox.InnerColor">
            <summary>
            Sets the inner color of the BoundingBox. Default is transparent.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.BoundingBox.RequiredRendermodes">
            <summary>
            Gets the <see cref="T:Telogis.GeoBase.RenderMode">RenderMode</see> required by this <b>BoundingBox</b>
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.DayType">
            <summary>
            Describes whether a specified day (typically for a recurring event such as daylight 
            saving, see <see cref="T:Telogis.GeoBase.TimeZone"/>) is a day of the week, or a day of the month.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.DayType.DayOfWeek">
            <summary>
            The day is specified as the day of a week.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.DayType.DayOfMonth">
            <summary>
            The day is specified as the day of a month.
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.TimeZone">
             <summary>
             A TimeZone may be used to convert from UTC to local (street) time. You should not
             construct a TimeZone object manually. Instead, use the 
             <see cref="M:Telogis.GeoBase.GeoCoder.ReverseGeoCodeFull(Telogis.GeoBase.LatLon)"/>
             method, and retrieve a TimeZone object from the TimeZone property of the method's 
             return value.
             </summary>
             <remarks>
             TimeZone objects are structs so cannot take a null value. Typically, Telogis GeoBase 
             will allow access to TimeZone objects through nullable properties. Be sure to test 
             HasValue (as in the code example below) to determine if timezone information is 
             avaiable for the given street.
             </remarks>
             <example>
             <code lang="C#">
            
            	// this is your current (local) time
            	DateTime localTime = DateTime.Now;
            	Console.WriteLine("Local time is {0}", localTime.ToString());
            
            	// convert the current local time to UTC
            	DateTime utcTime = localTime.ToUniversalTime();
            	Console.WriteLine("UTC is {0}", utcTime.ToString());
             
             GeoCodeFull gf = GeoCoder.ReverseGeoCodeFull(new LatLon(33.581650, -117.727285));
            
            		if (gf.TimeZone.HasValue) {
            			
            			Telogis.GeoBase.TimeZone tz = gf.TimeZone.Value;
            
            			// use the timezone to convert the UTC time to street time
            			DateTime streetTime = tz.ConvertTime(utcTime);
            			Console.WriteLine("Street time is {0}", streetTime.ToString());
            
            		} else {
            
            			// there is no timezone information for this street
            			Console.WriteLine("No timezone information is available for that street");
            
            		}
             </code>
             <para>
             Sample output:
             <table><tr><td>
             Local time is 7/22/2010 1:51:30 PM
             UTC is 7/22/2010 1:51:30 AM
             Street time is 7/21/2010 6:51:30 PM
             </td></tr></table>
             </para>
             </example>
        </member>
        <member name="F:Telogis.GeoBase.TimeZone.gmtOffset">
            <summary>
            Offset in seconds relative to UTC.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.TimeZone.hasDst">
            <summary>
            1 if the timezone has DST, 0 otherwise.  If 0 then none of the following fields is
            applicable.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.TimeZone.startDay">
            <summary>
            The day that DST starts.  If startType is DayOfWeek then this is a day of the week
            (1-7), otherwise this is a day of the month (1-31).
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.TimeZone.startWeek">
            <summary>
            The week of the month that DST starts.  Valid range is 1-6; 6 is a special
            case representing the last week of the month.  Only applicable if startType is
            DayOfMonth.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.TimeZone.startMonth">
            <summary>
            The month that DST starts.  Valid range is 1-12.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.TimeZone.startTime">
            <summary>
            The time of day that DST starts.  In half-hours so, for example, the value 4 indicates
            2am.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.TimeZone.startType">
            <summary>
            Indicates whether the day on which DST starts is given by a set date in a set month, or
            by a set day in a set week in a set month.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.TimeZone.startTimestamp">
            <summary>
            Timestamp of the start of DST, used for caching.  Only valid in native code.  Don't use
            CustomNativeType("OS_TIME_T") so that in native code we can assert that
            sizeof(startTimestamp) == sizeof(OS_TIME_T).
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.TimeZone.endDay">
            <summary>
            The day that DST ends.  If startType is DayOfWeek then this is a day of the week
            (1-7), otherwise this is a day of the month (1-31).
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.TimeZone.endWeek">
            <summary>
            The week of the month that DST ends.  Valid range is 1-6; 6 is a special
            case representing the last week of the month.  Only applicable if startType is
            DayOfMonth.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.TimeZone.endMonth">
            <summary>
            The month that DST ends.  Valid range is 1-12.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.TimeZone.endTime">
            <summary>
            The time of day that DST ends.  In half-hours so, for example, the value 4 indicates
            2am.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.TimeZone.endType">
            <summary>
            Indicates whether the day on which DST ends is given by a set date in a set month, or
            by a set day in a set week in a set month.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.TimeZone.endTimestamp">
            <summary>
            Timestamp of the end of DST, used for caching.  Only valid in native code.  Don't use
            CustomNativeType("OS_TIME_T") so that in native code we can assert that
            sizeof(startTimestamp) == sizeof(OS_TIME_T).
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.TimeZone.ConvertTime(System.DateTime)">
            <summary>
            Returns the time of this timezone for the given time; the given time can be UTC or Local.
            </summary>
            <param name="time">The UTC or Local time to convert.</param>
            <returns>The converted time.</returns>
            <remarks>See the example <see cref="T:Telogis.GeoBase.TimeZone">here</see>.</remarks>
        </member>
        <member name="P:Telogis.GeoBase.TimeZone.DSTStartTimeOfDay">
            <summary>
            Gets the time of day at which daylight savings starts for this timezone.
            </summary>
            <remarks>
            Returns null if this timezone does not have daylight savings.
            </remarks>
        </member>
        <member name="P:Telogis.GeoBase.TimeZone.DSTEndTimeOfDay">
            <summary>
            Gets the time of day at which daylight savings ends for this timezone.
            </summary>
            <remarks>
            Returns null if this timezone does not have daylight savings.
            </remarks>
        </member>
        <member name="P:Telogis.GeoBase.TimeZone.DSTStartMonth">
            <summary>
            Gets the month in which daylight savings starts for this timezone.
            </summary>
            <remarks>
            1 is January, 12 is December. 0 will be returned if this timezone
            does not have daylight savings.
            </remarks>
        </member>
        <member name="P:Telogis.GeoBase.TimeZone.DSTEndMonth">
            <summary>
            Gets the month in which daylight savings ends for this timezone.
            </summary>
            <remarks>
            1 is January, 12 is December. 0 will be returned if this timezone
            does not have daylight savings.
            Use <see cref="P:Telogis.GeoBase.TimeZone.HasDST"/> to check if this timezone has daylight savings.
            </remarks>
        </member>
        <member name="P:Telogis.GeoBase.TimeZone.DSTStartDayType">
            <summary>
            Gets the way in which the start of daylight savings is implemented for this 
            timezone. 
            </summary>
            <remarks>
            Daylight savings can either start on a specified day of a specified 
            month (such as the first of March), or on a specified day of a specified 
            week of a specified month (such as the first Sunday in March). 
            Returns null if this timezone does not have daylight savings.
            </remarks>
        </member>
        <member name="P:Telogis.GeoBase.TimeZone.DSTEndDayType">
            <summary>
            Gets the way in which the end of daylight savings is implemented for this 
            timezone. 
            </summary>
            <remarks>
            Daylight savings can either end on a specified day of a specified 
            month (such as the first of September), or on a specified day of a specified 
            week of a specified month (such as the first Sunday in September).
            Returns null if this timezone does not have daylight savings.
            Use <see cref="P:Telogis.GeoBase.TimeZone.HasDST"/> to check if this timezone has daylight savings.
            </remarks>
        </member>
        <member name="P:Telogis.GeoBase.TimeZone.DSTStartDayOfMonth">
            <summary>
            Gets the day of the month in which daylight savings starts for this timezone.
            </summary>
            <remarks>
            1 is the first day of the month. 0 will be returned if this timezone
            does not have daylight savings or daylight savings starts on a week of a month.
            Use <see cref="P:Telogis.GeoBase.TimeZone.DSTStartDayType"/> to check how daylight saving is implemented
            for this timezone.
            </remarks>
        </member>
        <member name="P:Telogis.GeoBase.TimeZone.DSTEndDayOfMonth">
            <summary>
            Gets the day of the month in which daylight savings ends for this timezone.
            </summary>
            <remarks>
            Valid range is 1 to 31. 0 will be returned if this timezone
            does not have daylight savings or daylight savings ends on a week of a month.
            Use <see cref="P:Telogis.GeoBase.TimeZone.HasDST"/> to check if this timezone has daylight savings.
            Use <see cref="P:Telogis.GeoBase.TimeZone.DSTStartDayType"/> to check how daylight saving is implemented for this timezone.
            </remarks>
        </member>
        <member name="P:Telogis.GeoBase.TimeZone.DSTStartWeekOfMonth">
            <summary>
            Gets the week of the month in which daylight savings starts for this timezone.
            </summary>
            <remarks>
            <para>Valid range is 0-6, where 0 and 6 are special cases.</para>
            <para>A value between 1 and 5 is returned to represent the number of the week 
            in the month, where 1 is the first week, 2 is the second week, etc.</para>
            <para>0 will be returned if this timezone does not have daylight savings, or 
            daylight savings starts on a day of a month.</para> 
            <para>6 will be returned to represent the last week of the month. </para>
            <para>Use <see cref="P:Telogis.GeoBase.TimeZone.HasDST"/> to check if this timezone has daylight savings.
            Use <see cref="P:Telogis.GeoBase.TimeZone.DSTStartDayType"/> to check how daylight saving is implemented
            for this timezone.</para>
            </remarks>
        </member>
        <member name="P:Telogis.GeoBase.TimeZone.DSTEndWeekOfMonth">
            <summary>
            Gets the week of the month in which daylight savings ends for this timezone.
            </summary>
            <remarks>
            <para>Valid range is 0-6, where 0 and 6 are special cases.</para>
            <para>A value between 1 and 5 is returned to represent the number of the week 
            in the month, where 1 is the first week, 2 is the second week, etc.</para>
            <para>0 will be returned if this timezone does not have daylight savings, or 
            daylight savings starts on a day of a month.</para> 
            <para>6 will be returned to represent the last week of the month. </para>
            <para>Use <see cref="P:Telogis.GeoBase.TimeZone.HasDST"/> to check if this timezone has daylight savings.
            Use <see cref="P:Telogis.GeoBase.TimeZone.DSTStartDayType"/> to check how daylight saving is implemented
            for this timezone.</para>
            </remarks>
        </member>
        <member name="P:Telogis.GeoBase.TimeZone.GMTOffset">
            <summary>
            Returns the difference between this TimeZone and GMT, in hours.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.TimeZone.HasDST">
            <summary>
            Returns true if this TimeZone has daylight savings.
            </summary>
            <remarks>
            This method does not test if daylight savings are currently active.
            </remarks>
        </member>
        <member name="P:Telogis.GeoBase.TimeZone.DSTStartDayOfWeek">
            <summary>
            Returns the day of the week that daylight savings begins. 
            </summary>
            <remarks>
            Null will be returned if this timezone does not have daylight savings. 
            Use <see cref="P:Telogis.GeoBase.TimeZone.HasDST"/> to check if this timezone has daylight savings.
            </remarks>
        </member>
        <member name="P:Telogis.GeoBase.TimeZone.DSTEndDayOfWeek">
            <summary>
            Returns the day of the week that daylight savings ends. 
            </summary>
            <remarks>
            Null will be returned if this timezone does not have daylight savings.
            Use <see cref="P:Telogis.GeoBase.TimeZone.HasDST"/> to check if this timezone has daylight savings.
            </remarks>
        </member>
        <member name="T:Telogis.GeoBase.Repositories.ISmbPathRewriter">
            <summary>
            This interface is for internal Telogis use only.
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.Repositories.CompositeSmbPathRewriter">
            <summary>
            This class is for internal Telogis use only.
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.Repositories.SmbToPosixPathRewriter">
            <summary>
            This class is for internal Telogis use only.
            </summary>
        </member>
        <member name="T:Telogis.NativeSerial.NativeSerialStream">
            <summary>
            Class that wraps as a Stream access to a serial port through native API
            </summary>
            <remarks>Wraps CreateFile, Readfile, CloseHandle. Only developed as the .NET CF fails to open the serial port on YF Windows CE device PND71C, but native code does</remarks>
        </member>
        <member name="M:Telogis.NativeSerial.NativeSerialStream.#ctor(System.String,System.UInt32,System.IO.Ports.Parity,System.Int32,System.IO.Ports.StopBits)">
            <summary>
            Initializes a new instance using the specified port name, baud rate, parity bit, data bits, and stop bit.
            </summary>
            <param name="portName">The port to use (for example, "Com1:").</param>
            <param name="baudRate">The baud rate.</param>
            <param name="parity">One of the System.IO.Ports.SerialPort.Parity values.</param>
            <param name="dataBits">The data bits value.</param>
            <param name="stopBits">One of the System.IO.Ports.SerialPort.StopBits values.</param>
            <remarks>Does not open the port. Call Open() to open the port with these settings</remarks>
        </member>
        <member name="M:Telogis.NativeSerial.NativeSerialStream.Open">
            <summary>
            Opens a new serial port connection as a data source for this stream, using the settings provided in the constructor.
            </summary>
            <exception cref="T:System.InvalidOperationException">The specified port is already open.</exception>
            <exception cref="T:System.ComponentModel.Win32Exception">based on result of last win32 error in the event of an error</exception>
        </member>
        <member name="M:Telogis.NativeSerial.NativeSerialStream.Close">
            <summary>
            Closes the port handle.
            </summary>
            <exception cref="T:System.InvalidOperationException">The specified port is not open</exception>
            <exception cref="T:System.ComponentModel.Win32Exception">based on result of last win32 error in the event of an error</exception>
        </member>
        <member name="M:Telogis.NativeSerial.NativeSerialStream.Dispose(System.Boolean)">
            <summary>
            Closes the port handle and disposes via base class.
            </summary>
        </member>
        <member name="M:Telogis.NativeSerial.NativeSerialStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads a sequence of bytes from the current stream.
            </summary>
            <remarks>Will not return until at least one byte is read or an error occurs (mitigates EndOfStream exception). Currently does not support an offset value &gt; 0</remarks>
            <param name="buffer">An array of bytes. When this method returns, the buffer values between offset and (offset + count - 1) replaced by the bytes read from the current source.</param>
            <param name="offset">The zero-based byte offset in buffer at which to begin storing the data read from the current stream.</param>
            <param name="count">The maximum number of bytes to be read from the current stream.</param>
            <returns>The total number of bytes read into the buffer. This can be less than the number of bytes requested if that many bytes are not currently available, or zero (0) if the end of the stream has been reached.</returns>
            <exception cref="T:System.ArgumentException">The sum of offset and count is larger than the buffer length.</exception>
            <exception cref="T:System.ArgumentNullException">buffer is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">offset or count is negative, offset &gt; 0</exception>
            <exception cref="T:System.TimeoutException">Operation timed out</exception>
            <exception cref="T:System.ComponentModel.Win32Exception">based on result of last win32 error in the event of an error</exception>
        </member>
        <member name="P:Telogis.NativeSerial.NativeSerialStream.IsOpen">
            <summary>
            test if stream is open
            </summary>
        </member>
        <member name="P:Telogis.NativeSerial.NativeSerialStream.ReadTimeout">
            <summary>
            Gets or sets a value, in miliseconds, that determines how long the stream will attempt to read before timing out.
            </summary>
            <value> A value, in miliseconds, that determines how long the stream will attempt to read before timing out.</value>
            <exception cref="T:System.ComponentModel.Win32Exception">based on result of last win32 error in the event of an error</exception>
        </member>
        <member name="T:Telogis.GeoBase.ShapeUI.State.ISelectState">
            <summary>
            Interface that is implemented by all selection states.
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.ShapeUI.State.IState">
            <summary>
            Interface that is implemented by all states.
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.ShapeUI.State.IState.Begin">
            <summary>
            Called when the layer enters this state.
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.ShapeUI.State.IState.End">
            <summary>
            Called when the layer exits this state.
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.ShapeUI.State.IState.OnMouseMove(System.Object,System.Windows.Forms.MouseEventArgs)">
            <summary>
            Mouse-move handler for this state.
            </summary>
            <param name="sender">The sender of the mouse event.</param>
            <param name="e">The event arguments.</param>
            <returns>Whether the state handled the event.</returns>
        </member>
        <member name="M:Telogis.GeoBase.ShapeUI.State.IState.OnMouseUp(System.Object,System.Windows.Forms.MouseEventArgs)">
            <summary>
            Mouse-up handler for this state.
            </summary>
            <param name="sender">The sender of the mouse event.</param>
            <param name="e">The event arguments.</param>
            <returns>Whether the state handled the event.</returns>
        </member>
        <member name="M:Telogis.GeoBase.ShapeUI.State.IState.OnMouseDown(System.Object,System.Windows.Forms.MouseEventArgs)">
            <summary>
            Mouse-down handler for this state.
            </summary>
            <param name="sender">The sender of the mouse event.</param>
            <param name="e">The event arguments.</param>
            <returns>Whether the state handled the event.</returns>
        </member>
        <member name="M:Telogis.GeoBase.ShapeUI.State.IState.OnMouseClick(System.Object,System.Windows.Forms.MouseEventArgs)">
            <summary>
            Mouse-click handler for this state.
            </summary>
            <param name="sender">The sender of the mouse event.</param>
            <param name="e">The event arguments.</param>
            <returns>Whether the state handled the event.</returns>
        </member>
        <member name="M:Telogis.GeoBase.ShapeUI.State.IState.OnMouseLeave(System.Object,System.EventArgs)">
            <summary>
            Mouse-leave handler for this state.
            </summary>
            <param name="sender">The sender of the mouse event.</param>
            <param name="e">The event arguments.</param>
            <returns>Whether the state handled the event.</returns>
        </member>
        <member name="M:Telogis.GeoBase.ShapeUI.State.IState.Render(System.Drawing.Graphics,Telogis.GeoBase.RenderContext)">
            <summary>
            Called to render this state.
            </summary>
            <param name="graphics">Graphics to render to.</param>
            <param name="rc">Render context.</param>
        </member>
        <member name="M:Telogis.GeoBase.ShapeUI.State.IState.Apply">
            <summary>
            Applies any changes made whilst in this state.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.ShapeUI.State.ISelectState.Selection">
            <summary>
            The currently selected entity.
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.GeoStream.Server.ElasticCache`2">
            <summary>
            An Elastic cache is thread-safe dictionary where entries will expire after a certain period of time.
            </summary>
            <typeparam name="K">The key type.</typeparam>
            <typeparam name="V">The value type.</typeparam>
        </member>
        <member name="M:Telogis.GeoBase.GeoStream.Server.ElasticCache`2.#ctor(System.TimeSpan,System.TimeSpan,System.Int32,Telogis.GeoBase.Function{System.Int32,`0,`1},Telogis.GeoBase.Function{System.DateTime})">
            <summary>
            Constructs an instance of ElasticCache with a custom time provider. Used for testing.
            </summary>
            <param name="minLifetime">Items will be kept in the cache for at least this time.</param>
            <param name="maxLifetime">Items will expire from the cache after this time.</param>
            <param name="maxSize">The maximum size of the cache. This may be exceeded if all
            cache items are younger than minLifetime.</param>
            <param name="sizeDel">A delegate called to determine the size of an object within the
            cache.</param>
            <param name="timeDel">A callback function used to obtain the current time.</param>
        </member>
        <member name="M:Telogis.GeoBase.GeoStream.Server.ElasticCache`2.Clear">
            <summary>
            Clear the cache.
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.GeoStream.Server.ElasticCache`2.Get(`0)">
            <summary>
            Gets the value for the given key from the cache.
            </summary>
            <param name="key">The key to get the value for.</param>
            <returns>The value (if present) or default(V).</returns>
        </member>
        <member name="M:Telogis.GeoBase.GeoStream.Server.ElasticCache`2.Put(`0,`1)">
            <summary>
            Puts the given key/value pair into the cache.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Telogis.GeoBase.GeoStream.Server.ElasticCache`2.Touch(`0,Telogis.GeoBase.GeoStream.Server.ElasticCache{`0,`1}.CacheEntry)">
            <summary>
            Update the expiry time for an item in the cache.
            </summary>
            <param name="key">The key of the specified entry.</param>
            <param name="entry">The entry to update the expiry time for.</param>
        </member>
        <member name="M:Telogis.GeoBase.GeoStream.Server.ElasticCache`2.RemoveExpiry(`0,Telogis.GeoBase.GeoStream.Server.ElasticCache{`0,`1}.CacheEntry)">
            <summary>
            Removes the expiry time for a given item.
            Usually used when an expiry time is being updated or
            if the item is removed.
            </summary>
            <param name="key">Key of the specfied entry.</param>
            <param name="entry">The entry for which to remove the expiry time.</param>
        </member>
        <member name="M:Telogis.GeoBase.GeoStream.Server.ElasticCache`2.Remove(`0)">
            <summary>
            Removes the given key from the cache.
            </summary>
            <param name="key"></param>
        </member>
        <member name="M:Telogis.GeoBase.GeoStream.Server.ElasticCache`2.CollectGarbage">
            <summary>
            Remove all expired entries from the cache.
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.GeoStream.Server.ElasticCache`2.EnsureSpace(System.Int32)">
            <summary>
            Ensures that the cache has the specified amount of space.
            If that amount of space isn't available, all removable items will be removed.
            </summary>
            <param name="size">The amount of space to ensure.</param>
        </member>
        <member name="M:Telogis.GeoBase.GeoStream.Server.ElasticCache`2.GetLeastRecentlyUsed(`0@,System.DateTime@)">
            <summary>
            Gets the key of the oldest item in the cache.
            </summary>
            <param name="key">The key of the oldest item.</param>
            <param name="expiry">The expiry of the oldest item.</param>
            <returns>True if there is at least one item in the cache, false otherwise.</returns>
        </member>
        <member name="P:Telogis.GeoBase.GeoStream.Server.ElasticCache`2.Count">
            <summary>
            Get the number of items in the cache.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.GeoStream.Server.ElasticCache`2.Size">
            <summary>
            Gets the size of the cache.
            The units are the same as those returned by the size delegate.
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.Internal.ServerExceptionInfo">
            <summary>
            ServerExceptionInfo allows GeoBase to serialize the members of an exception.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Internal.ServerExceptionInfo.Message">
             <summary>
            
             </summary>
        </member>
        <member name="F:Telogis.GeoBase.Internal.ServerExceptionInfo.Source">
             <summary>
            
             </summary>
        </member>
        <member name="F:Telogis.GeoBase.Internal.ServerExceptionInfo.RemoteStackTrace">
             <summary>
            
             </summary>
        </member>
        <member name="F:Telogis.GeoBase.Internal.ServerExceptionInfo.OriginalExceptionType">
             <summary>
            
             </summary>
        </member>
        <member name="F:Telogis.GeoBase.Internal.ServerExceptionInfo.InnerException">
             <summary>
            
             </summary>
        </member>
        <member name="T:Telogis.GeoBase.Clustering.LocalClusterLayer">
            <summary>
            LocalClusterLayer is responsible for the fetching, caching, and indexing of clusters
            and associated features. Feature infomation is fetched on another thread
            and <see cref="E:Telogis.GeoBase.Clustering.LocalClusterLayer.OnClustersChanged"/> is called when new features are
            available.
            </summary>
            <remarks>
            <para>LocalClusterLayer is intended to act as a single, global object that persists for the lifetime of your application.
            It fetches point data automatically, based on the refresh rate of the feature data source. This data is 
            cached to improve performance.Applications that use a cluster layer
            locally to generate clusters, but that do not keep a reference to the cluster layer once the clusters are
            first generated should use <see cref="T:Telogis.GeoBase.Clustering.TransientClusterLayer"/> instead.</para>
            <para>All calls to <see cref="T:Telogis.GeoBase.DataSources.IPointFeatureSource"/> and 
            <see cref="T:Telogis.GeoBase.DataSources.IPointFeature"/> occur on a separate thread from the
            thread used to call <see cref="M:Telogis.GeoBase.Clustering.LocalClusterLayer.BeginGetClusters(System.Int32,Telogis.GeoBase.BoundingBox,System.AsyncCallback,System.Object)"/>.
            </para>
            </remarks>
        </member>
        <member name="M:Telogis.GeoBase.Clustering.LocalClusterLayer.#ctor(Telogis.GeoBase.Clustering.IClusteringAlgorithm,Telogis.GeoBase.DataSources.IPointFeatureSource,Telogis.GeoBase.Clustering.ClusterSummaryDelegate,Telogis.GeoBase.Clustering.IClusterVisualization)">
            <summary>
            Creates and initializes a local cluster layer for fetching, caching, and indexing
            clusters.
            </summary>
            <param name="algorithm">The clustering algorithm to use for combining map features into
            clusters.</param>
            <param name="datasource">A data source for obtaining point features to be
            clustered.</param>
            <param name="summaryDel">A function for combining the features in a cluster into a
            single summary object.</param>
            <param name="visualization">A visualizer for producing the image that appears on maps
            to represent the cluster.</param>
        </member>
        <member name="M:Telogis.GeoBase.Clustering.LocalClusterLayer.Dispose">
            <summary>
            Disposes of this local cluster layer.
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.Clustering.LocalClusterLayer.Dispose(System.Boolean)">
            <summary>
            Disposes of this local cluster layer.
            </summary>
            <param name="disposing">Whether Dispose() has been called explicitly.</param>
        </member>
        <member name="M:Telogis.GeoBase.Clustering.LocalClusterLayer.BeginGetClusters(System.Int32,Telogis.GeoBase.BoundingBox,System.AsyncCallback,System.Object)">
            <summary>
            Starts calculating clusters asynchronously.
            </summary>
            <param name="worldWidthPx">The width, in pixels, of the entire area where clusterable
            features can be situated.</param>
            <param name="bbox">The bounding box for the visible portion of the map for which
            clusters are calculated.</param>
            <param name="callback">A callback that is executed when the cluster calculation is
            complete.</param>
            <param name="state">The state of the asynchronous cluster calculation</param>
            <returns>An IAsyncResult allowing the caller to query the state of the
            calculation.</returns>
            <remarks>BeginGetClusters fetches data from its <see cref="T:Telogis.GeoBase.DataSources.IPointFeatureSource"/> 
            on a separate thread. This means that any callback that exeutes when cluster
            calculation is complete executes on a separate thread as well.</remarks>
        </member>
        <member name="M:Telogis.GeoBase.Clustering.LocalClusterLayer.EndGetClusters(System.IAsyncResult)">
            <summary>
            Returns the clusters calculated asynchronously by
            <see cref="M:Telogis.GeoBase.Clustering.LocalClusterLayer.BeginGetClusters(System.Int32,Telogis.GeoBase.BoundingBox,System.AsyncCallback,System.Object)"/> when the calculation is complete.
            </summary>
            <param name="result">The IAsyncResult that was returned by BeginGetClusters.</param>
            <returns>The set of clusters that was calculated by the cluster layer.</returns>
        </member>
        <member name="M:Telogis.GeoBase.Clustering.LocalClusterLayer.BeginGetImage(System.String,System.AsyncCallback,System.Object)">
            <summary>
            Obtains the image for a cluster asynchronously.
            </summary>
            <param name="imageId">The name (image ID) of the cluster image to obtain from
            the visualizer (<see cref="T:Telogis.GeoBase.Clustering.IClusterVisualization"/>) of the cluster layer.</param>
            <param name="callback">A callback that is executed when the image for the cluster is
            ready.</param>
            <param name="state">The state of the asynchronous operation.</param>
            <returns>An IAsyncResult allowing the caller to query the state of the
            operation.</returns>
        </member>
        <member name="M:Telogis.GeoBase.Clustering.LocalClusterLayer.EndGetImage(System.IAsyncResult)">
            <summary>
            Returns the image for a cluster made available by a call to
            <see cref="M:Telogis.GeoBase.Clustering.IClusterLayer.BeginGetImage(System.String,System.AsyncCallback,System.Object)"/>.
            </summary>
            <param name="result">The IAsyncResult that was returned by BeginGetImage.</param>
            <returns>The image of the cluster.</returns>
        </member>
        <member name="M:Telogis.GeoBase.Clustering.LocalClusterLayer.BeginRefresh(System.AsyncCallback,System.Object)">
            <summary>
            Starts updating the feature data for the clusters asynchronously.
            </summary>
            <param name="callback">A callback that is executed when the feature data is updated.</param>
            <param name="state">A user-defined object that represents the state of the asynchronous update.</param>
            <returns>An IAsyncResult allowing the caller to query the state of the calculation.</returns>
            <remarks>LocalClusterLayer automatically updates its feature data based on the 
            refresh rate of the <see cref="T:Telogis.GeoBase.DataSources.IPointFeatureSource"/> supplied
            to the constructor. Calling this method allows you to force a refresh, even if the point feature
            source has not expired since the last update.
            </remarks>
        </member>
        <member name="M:Telogis.GeoBase.Clustering.LocalClusterLayer.EndRefresh(System.IAsyncResult)">
            <summary>
            Executes when a refresh initiated by a call to <see cref="M:Telogis.GeoBase.Clustering.LocalClusterLayer.BeginRefresh(System.AsyncCallback,System.Object)"/> completes.
            </summary>
            <param name="result">The IAsyncResult that was returned by BeginRefresh.</param>
        </member>
        <member name="E:Telogis.GeoBase.Clustering.LocalClusterLayer.OnClustersChanged">
            <summary>
            Event that is fired when new features are available for the local cluster layer.
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.Clustering.LocalClusterLayer.ClusterLevel">
            <summary>
            Contains all clusters at a given zoom level.
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.Indexes.StringBTreeSearchType">
            <summary>
            Types of search supported by a StringBTreeSearchOperation.
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.ContactInfo">
            <summary>
             This class represents contact details and display information for your
             software package. The information contained in this class should be 
             sufficient to allow the user to lodge a support request and contact you.
             </summary>
        </member>
        <member name="M:Telogis.GeoBase.ContactInfo.#ctor">
            <summary>
            Initializes a new instance of the ContactInfo class.
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.ContactInfo.#ctor(System.String,System.String,System.String,System.String,System.Boolean)">
            <summary>
             Initializes a new instance of the ContactInfo class.
            </summary>
            <param name="email">
            	Email address for support requests.
            </param>
            <param name="url">
            	URL of a website for support.
            </param>
            <param name="company">
            	Company that created the component.
            </param>
            <param name="phone">
            	Phone number for support requests.
            </param>
            <param name="showWindow">
            	Indicates if a popup window should display an error message.
            </param>
        </member>
        <member name="M:Telogis.GeoBase.ContactInfo.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
             Initializes a new instance of the ContactInfo class.
            </summary>
            <param name="email">
            	Email address for support requests.
            </param>
            <param name="url">
            	URL of a website for support.
            </param>
            <param name="company">
            	Company that created the component.
            </param>
            <param name="phone">
            	Phone number for support requests.
            </param>
        </member>
        <member name="M:Telogis.GeoBase.ContactInfo.#ctor(System.String,System.String,System.String)">
            <summary>
             Initializes a new instance of the ContactInfo class.
            </summary>
            <param name="email">Email address for support requests.</param>
            <param name="url">URL of a website for support.</param>
            <param name="company">Company that created the component.</param>
        </member>
        <member name="M:Telogis.GeoBase.ContactInfo.#ctor(System.String,System.String)">
            <summary>
             Initializes a new instance of the ContactInfo class.
            </summary>
            <param name="email">Email address for support requests.</param>
            <param name="company">Company that created the component.</param>
        </member>
        <member name="P:Telogis.GeoBase.ContactInfo.Email">
            <summary>
            Gets or sets an email address where support questions should be directed.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.ContactInfo.Url">
            <summary>
            Gets or sets a URL where support is available.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.ContactInfo.Company">
            <summary>
            Gets or sets the name of the company that created the component.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.ContactInfo.Phone">
            <summary>
            Gets or sets a phone number where support is available.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.ContactInfo.Product">
            <summary>
            Gets or sets the name of the product as it should appear in licensing forms.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.ContactInfo.ShowWindow">
            <summary>
            Gets or sets a value that indicates if a window should be used to display the
            support info.
            </summary>
            <remarks><b>True</b> by default.</remarks>
        </member>
        <member name="P:Telogis.GeoBase.ContactInfo.IncludeDetails">
            <summary>
            Gets or sets a value that indicates if the report window should include details
            about the failure.
            </summary>
            <remarks>See <see cref="P:Telogis.GeoBase.ContactInfo.ShowWindow"/> to control whether the error window is displayed.</remarks>
        </member>
        <member name="P:Telogis.GeoBase.ContactInfo.IncludeAssemblies">
            <summary>
            Gets or sets a value that indicates if the report window should include a 
            list of loaded assemblies.
            </summary>
            <remarks>See <see cref="P:Telogis.GeoBase.ContactInfo.ShowWindow"/> to control whether an error window is displayed.</remarks>
        </member>
        <member name="P:Telogis.GeoBase.ContactInfo.IncludeSystemInfo">
            <summary>
            Gets or sets a value that indicates if the report window should include additional
            system information.
            </summary>
            <remarks>See <see cref="P:Telogis.GeoBase.ContactInfo.ShowWindow"/> to control whether an error window is displayed.</remarks>
        </member>
        <member name="T:Telogis.GeoBase.GeoCodeMatch">
            <summary>
            Describes how a GeoCode address was found.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.GeoCodeMatch.MATCH_STREET">
            <summary>
            This is applied if the type of result is a street.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.GeoCodeMatch.MATCH_CITY">
            <summary>
            This is applied if the type of result is a city.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.GeoCodeMatch.MATCH_STATE">
            <summary>
            This is applied if the type of result is a state or top level division
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.GeoCodeMatch.MATCH_STATE_ALONE">
            <summary>
            This is applied if the type of result is a state or top level division
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.GeoCodeMatch.MATCH_ZIP">
            <summary>
            This is applied if the type of result is a ZIP or postal code.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.GeoCodeMatch.MATCH_SUBURB">
            <summary>
            This is applied if the type of result is a suburb or city subdivision.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.GeoCodeMatch.MATCH_REGION">
            <summary>
            This is applied if the type of result is any other kind of region
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.GeoCodeMatch.MATCH_FULL_POSTCODE">
            <summary>
            This is applied if the type of result is the location of the postcode
            for countries with highly detailed postcodes (e.g. ZIP+4 or UK postcodes)
            </summary>
        </member>
        <member name="T:Xheo.Licensing.LimitCollection">
            <summary>
            Services as a collection of limits.
            </summary>
        </member>
        <member name="M:Xheo.Licensing.LimitCollection.#ctor(Xheo.Licensing.ExtendedLicense)">
            <summary>
             Initializes a new instance of the LimitCollection class.
            </summary>
            <param name="license">
            	Reference to the containing ExtendedLicense.
            </param>
        </member>
        <member name="M:Xheo.Licensing.LimitCollection.#ctor">
            <summary>
            Included for COM compliance, do not use.
            </summary>
        </member>
        <member name="M:Xheo.Licensing.LimitCollection.Add(Xheo.Licensing.Limit)">
            <summary>
            Adds a new limit to the collection.
            </summary>
            <param name="limit">
            	The limit to add.
            </param>
        </member>
        <member name="M:Xheo.Licensing.LimitCollection.Insert(System.Int32,Xheo.Licensing.Limit)">
            <summary>
            Inserts the limit at the given index.
            </summary>
            <param name="index">
            	The index where to insert the limit.
            </param>
            <param name="limit">
            	The limit to insert.
            </param>
        </member>
        <member name="M:Xheo.Licensing.LimitCollection.Remove(Xheo.Licensing.Limit)">
            <summary>
            Removes the given index from the list.
            </summary>
            <param name="limit">
            	The limit to remove.
            </param>
        </member>
        <member name="M:Xheo.Licensing.LimitCollection.CopyTo(Xheo.Licensing.Limit[],System.Int32)">
            <summary>
            Copies the collection to an array.
            </summary>
            <param name="array">
            	The array to copy to.
            </param>
            <param name="index">
            	The index in the array to begin copying.
            </param>
        </member>
        <member name="M:Xheo.Licensing.LimitCollection.IndexOf(Xheo.Licensing.Limit)">
            <summary>
            Gets the index of the given limit.
            </summary>
            <param name="limit">
            	The limit to look for.
            </param>
            <returns>
            	Returns the index of the given limit if found, otherwise -1.
            </returns>
        </member>
        <member name="M:Xheo.Licensing.LimitCollection.Contains(Xheo.Licensing.Limit)">
            <summary>
            Determines if the collection contains the given Limit.
            </summary>
            <param name="limit">
            	The Limit to look for.
            </param>
            <returns>
            	Returns true if the Limit is found, otherwise false.
            </returns>
        </member>
        <member name="M:Xheo.Licensing.LimitCollection.Validate(System.ComponentModel.LicenseContext,System.Type,System.Object,System.Boolean)">
            <summary>
            Ensures that all the Limits in the collection are valid for the given type
            and context.
            </summary>
            <param name="context">
            	The LicenseContext passed to <see cref="M:System.ComponentModel.LicenseProvider.GetLicense(System.ComponentModel.LicenseContext,System.Type,System.Object,System.Boolean)"/>.
            </param>
            <param name="type">
            	The Type of the object being licensed.
            </param>
            <param name="instance">
            	The instance of the object being licensed.
            </param>
            <param name="includeRemote">
            	Indicates if limits that have <see cref="P:Xheo.Licensing.Limit.IsRemote"/> set to true 
            	should be included in the validation.
            </param>
            <returns>
            	Returns true if the limits are valid, otherwise false.
            </returns>
        </member>
        <member name="M:Xheo.Licensing.LimitCollection.GetPrioritizedOrder(System.Boolean)">
            <summary>
            Gets the limits in order of priority.
            </summary>
            <param name="includeRemote">
            	Indicates if remote limits should be included.
            </param>
            <returns></returns>
        </member>
        <member name="M:Xheo.Licensing.LimitCollection.SaveToXml(System.Xml.XmlNode)">
            <summary>
            Saves the contents of the LimitCollection to the given XmlNode.
            </summary>
            <param name="parent">
            	The parent XmlNode.
            </param>
            <returns>
            	Returns the root node of the saved limits.
            </returns>
        </member>
        <member name="M:Xheo.Licensing.LimitCollection.LoadFromXml(System.Xml.XmlNode)">
            <summary>
            Loads the contents of a LimitCollection from an XmlNode.
            </summary>
            <returns>
            	Returns true if the load was successful, otherwise false.
            </returns>
        </member>
        <member name="M:Xheo.Licensing.LimitCollection.ToXmlString">
            <summary>
            Saves the contents of the limit collection to an XML string.
            </summary>
            <returns>
            	The saved XML.
            </returns>
        </member>
        <member name="M:Xheo.Licensing.LimitCollection.FromXmlString(System.String)">
            <summary>
            Loads the contents of the limit collection from an XML string.
            </summary>
            <param name="xml">
            	The XML string to load from.
            </param>
        </member>
        <member name="M:Xheo.Licensing.LimitCollection.Granted(System.ComponentModel.LicenseContext,System.Type,System.Object)">
            <summary>
            Called every time the limit is granted.
            </summary>
        </member>
        <member name="P:Xheo.Licensing.LimitCollection.License">
            <summary>
            Gets or sets a reference to the containing license.
            </summary>
        </member>
        <member name="P:Xheo.Licensing.LimitCollection.Item(System.Int32)">
            <summary>
            Gets or sets a limit at the given index.
            </summary>
        </member>
        <member name="T:Xheo.Licensing.PeekResult">
            <summary>
             Possible results from the <see cref="M:Xheo.Licensing.Limit.Peek(System.ComponentModel.LicenseContext,System.Type,System.Object)"/> method.
            </summary>
        </member>
        <member name="F:Xheo.Licensing.PeekResult.Unknown">
            <summary>
            Unkonwn status.
            </summary>
        </member>
        <member name="F:Xheo.Licensing.PeekResult.Valid">
            <summary>
            The limit is valid in it's current state and Validate will return true without
            any user interaction.
            </summary>
        </member>
        <member name="F:Xheo.Licensing.PeekResult.Invalid">
            <summary>
            The limit is invalid. Calling Validate may require user interaction.
            </summary>
        </member>
        <member name="F:Xheo.Licensing.PeekResult.NeedsUser">
            <summary>
            The limit may be valid but will require user interaction to ensure.
            </summary>
        </member>
        <member name="T:Internal.ConfigSettings">
            <summary>
            Implements an large integer of arbitrary length.
            </summary>
        </member>
        <member name="M:Internal.ConfigSettings.#ctor">
            <summary>
            Initializes a new instance of the ConfigSettings class.
            </summary>
        </member>
        <member name="M:Internal.ConfigSettings.InitLib">
            <summary>
            Initialize the library on first use.
            </summary>
        </member>
        <member name="M:Internal.ConfigSettings.LoadLibraryExW(System.String,System.IntPtr,System.UInt32)">
            <summary>
            Summary of LoadLibraryExW.
            </summary>
            <param name="filename"></param>
            <param name="hFile"></param>
            <param name="flags"></param>
            <returns></returns>	
        </member>
        <member name="M:Internal.ConfigSettings.FreeLibrary(System.IntPtr)">
            <summary>
            Summary of FreeLibrary.
            </summary>
            <param name="hModule"></param>
            <returns></returns>	
        </member>
        <member name="M:Internal.ConfigSettings.GetSettings(System.String,System.String)">
            <summary>
            Gets a collection of string settings for a given key in the given section.
            </summary>
            <param name="name">
            	Name of the setting to return.
            </param>
            <param name="section">
            	Name of the section where the value can be found. May be null. Use forward
            	slashes to distinguish sub sections.
            </param>
            <returns>
            	Returns a collection of values if found, otherwise null.
            </returns>
            <remarks>
            The design of this method allows developers to define configuration settings
            in custom configuration sections, or directly in the appSettings section. When
            setting values in the appSettings section, key names are prefixed with the prefix
            and section name eliminate possible naming collisions. If a value is set in
            the appSettings section and a custom section, both values are returned, with the
            custom settings first in the array.
            </remarks>
        </member>
        <member name="M:Internal.ConfigSettings.GetSettings(System.String)">
            <summary>
            Gets a collection of string settings for a given key in the given section.
            </summary>
            <param name="name">
            	Name of the setting to return.
            </param>
            <returns>
            	Returns a collection of values if found, otherwise null.
            </returns>
            <remarks>
            The design of this method allows developers to define configuration settings
            in custom configuration sections, or directly in the appSettings section. When
            setting values in the appSettings section, key names are prefixed with the prefix
            and section name eliminate possible naming collisions. If a value is set in
            the appSettings section and a custom section, both values are returned, with the
            custom settings first in the array.
            </remarks>
        </member>
        <member name="M:Internal.ConfigSettings.GetIntegerSettings(System.String,System.String)">
            <summary>
            Gets a collection of int settings for a given key in the given section.
            </summary>
            <param name="name">
            	Name of the setting to return.
            </param>
            <param name="section">
            	Name of the section where the value can be found. May be null. Use forward
            	slashes to distinguish sub sections.
            </param>
            <returns>
            	Returns a collection of values if found, otherwise null.
            </returns>
            <remarks>
            The design of this method allows developers to define configuration settings
            in custom configuration sections, or directly in the appSettings section. When
            setting values in the appSettings section, key names are prefixed with the prefix
            and section name eliminate possible naming collisions. If a value is set in
            the appSettings section and a custom section, both values are returned, with the
            custom settings first in the array.
            </remarks>
        </member>
        <member name="M:Internal.ConfigSettings.GetIntegerSettings(System.String)">
            <summary>
            Gets a collection of int settings for a given key in the given section.
            </summary>
            <param name="name">
            	Name of the setting to return.
            </param>
            <returns>
            	Returns a collection of values if found, otherwise null.
            </returns>
            <remarks>
            The design of this method allows developers to define configuration settings
            in custom configuration sections, or directly in the appSettings section. When
            setting values in the appSettings section, key names are prefixed with the prefix
            and section name eliminate possible naming collisions. If a value is set in
            the appSettings section and a custom section, both values are returned, with the
            custom settings first in the array.
            </remarks>
        </member>
        <member name="M:Internal.ConfigSettings.GetBooleanSettings(System.String,System.String)">
            <summary>
            Gets a collection of bool settings for a given key in the given section.
            </summary>
            <param name="name">
            	Name of the setting to return.
            </param>
            <param name="section">
            	Name of the section where the value can be found. May be null. Use forward
            	slashes to distinguish sub sections.
            </param>
            <returns>
            	Returns a collection of values if found, otherwise null.
            </returns>
            <remarks>
            The design of this method allows developers to define configuration settings
            in custom configuration sections, or directly in the appSettings section. When
            setting values in the appSettings section, key names are prefixed with the prefix
            and section name eliminate possible naming collisions. If a value is set in
            the appSettings section and a custom section, both values are returned, with the
            custom settings first in the array.
            </remarks>
        </member>
        <member name="M:Internal.ConfigSettings.GetBooleanSettings(System.String)">
            <summary>
            Gets a collection of int settings for a given key in the given section.
            </summary>
            <param name="name">
            	Name of the setting to return.
            </param>
            <returns>
            	Returns a collection of values if found, otherwise null.
            </returns>
            <remarks>
            The design of this method allows developers to define configuration settings
            in custom configuration sections, or directly in the appSettings section. When
            setting values in the appSettings section, key names are prefixed with the prefix
            and section name eliminate possible naming collisions. If a value is set in
            the appSettings section and a custom section, both values are returned, with the
            custom settings first in the array.
            </remarks>
        </member>
        <member name="M:Internal.ConfigSettings.GetDecimalSettings(System.String,System.String)">
            <summary>
            Gets a collection of decimal settings for a given key in the given section.
            </summary>
            <param name="name">
            	Name of the setting to return.
            </param>
            <param name="section">
            	Name of the section where the value can be found. May be null. Use forward
            	slashes to distinguish sub sections.
            </param>
            <returns>
            	Returns a collection of values if found, otherwise null.
            </returns>
            <remarks>
            The design of this method allows developers to define configuration settings
            in custom configuration sections, or directly in the appSettings section. When
            setting values in the appSettings section, key names are prefixed with the prefix
            and section name eliminate possible naming collisions. If a value is set in
            the appSettings section and a custom section, both values are returned, with the
            custom settings first in the array.
            </remarks>
        </member>
        <member name="M:Internal.ConfigSettings.GetDecimalSettings(System.String)">
            <summary>
            Gets a collection of int settings for a given key in the given section.
            </summary>
            <param name="name">
            	Name of the setting to return.
            </param>
            <returns>
            	Returns a collection of values if found, otherwise null.
            </returns>
            <remarks>
            The design of this method allows developers to define configuration settings
            in custom configuration sections, or directly in the appSettings section. When
            setting values in the appSettings section, key names are prefixed with the prefix
            and section name eliminate possible naming collisions. If a value is set in
            the appSettings section and a custom section, both values are returned, with the
            custom settings first in the array.
            </remarks>
        </member>
        <member name="M:Internal.ConfigSettings.GetSetting(System.String,System.String,System.String)">
            <summary>
            Gets the value of the first setting found in the configuration file.
            </summary>
            <param name="name">
            	Name of the setting to return.
            </param>
            <param name="section">
            	Name of the section where the value can be found. May be null. Use forward
            	slashes to distinguish sub sections.
            </param>
            <param name="defaultValue">
            	The value to return if not found.
            </param>
            <returns>
            	Returns the value of the first setting if found, otherwise defaultValue.
            </returns>
        </member>
        <member name="M:Internal.ConfigSettings.GetSetting(System.String,System.String)">
            <summary>
            Gets the value of the first setting found in the configuration file.
            </summary>
            <param name="name">
            	Name of the setting to return.
            </param>
            <param name="defaultValue">
            	The value to return if not found.
            </param>
            <returns>
            	Returns the value of the first setting if found, otherwise defaultValue.
            </returns>
        </member>
        <member name="M:Internal.ConfigSettings.GetSetting(System.String,System.Int32,System.String)">
            <summary>
            Gets the value of the first setting found in the configuration file.
            </summary>
            <param name="name">
            	Name of the setting to return.
            </param>
            <param name="section">
            	Name of the section where the value can be found. May be null. Use forward
            	slashes to distinguish sub sections.
            </param>
            <param name="defaultValue">
            	The value to return if not found.
            </param>
            <returns>
            	Returns the value of the first setting if found, otherwise defaultValue.
            </returns>
        </member>
        <member name="M:Internal.ConfigSettings.GetSetting(System.String,System.Int32)">
            <summary>
            Gets the value of the first setting found in the configuration file.
            </summary>
            <param name="name">
            	Name of the setting to return.
            </param>
            <param name="defaultValue">
            	The value to return if not found.
            </param>
            <returns>
            	Returns the value of the first setting if found, otherwise defaultValue.
            </returns>
        </member>
        <member name="M:Internal.ConfigSettings.GetSetting(System.String,System.Boolean,System.String)">
            <summary>
            Gets the value of the first setting found in the configuration file.
            </summary>
            <param name="name">
            	Name of the setting to return.
            </param>
            <param name="section">
            	Name of the section where the value can be found. May be null. Use forward
            	slashes to distinguish sub sections.
            </param>
            <param name="defaultValue">
            	The value to return if not found.
            </param>
            <returns>
            	Returns the value of the first setting if found, otherwise defaultValue.
            </returns>
        </member>
        <member name="M:Internal.ConfigSettings.GetSetting(System.String,System.Boolean)">
            <summary>
            Gets the value of the first setting found in the configuration file.
            </summary>
            <param name="name">
            	Name of the setting to return.
            </param>
            <param name="defaultValue">
            	The value to return if not found.
            </param>
            <returns>
            	Returns the value of the first setting if found, otherwise defaultValue.
            </returns>
        </member>
        <member name="M:Internal.ConfigSettings.GetSetting(System.String,System.Decimal,System.String)">
            <summary>
            Gets the value of the first setting found in the configuration file.
            </summary>
            <param name="name">
            	Name of the setting to return.
            </param>
            <param name="section">
            	Name of the section where the value can be found. May be null. Use forward
            	slashes to distinguish sub sections.
            </param>
            <param name="defaultValue">
            	The value to return if not found.
            </param>
            <returns>
            	Returns the value of the first setting if found, otherwise defaultValue.
            </returns>
        </member>
        <member name="M:Internal.ConfigSettings.GetSetting(System.String,System.Decimal)">
            <summary>
            Gets the value of the first setting found in the configuration file.
            </summary>
            <param name="name">
            	Name of the setting to return.
            </param>
            <param name="defaultValue">
            	The value to return if not found.
            </param>
            <returns>
            	Returns the value of the first setting if found, otherwise defaultValue.
            </returns>
        </member>
        <member name="M:Internal.ConfigSettings.GetMandatorySettings(System.String,System.String)">
            <summary>
            Gets a collection of mandatory settings similar to <see cref="M:Internal.ConfigSettings.GetSettings(System.String,System.String)"/>. However
            if the settings do not exist an exception is thrown.
            </summary>
            <param name="name">
            	Name of the setting to return.
            </param>
            <param name="section">
            	Name of the section where the value can be found. May be null. Use forward
            	slashes to distinguish sub sections.
            </param>
            <returns>
            	Returns the collection of settings.
            </returns>
        </member>
        <member name="M:Internal.ConfigSettings.GetMandatorySettings(System.String)">
            <summary>
            Gets a collection of mandatory settings similar to <see cref="M:Internal.ConfigSettings.GetSettings(System.String,System.String)"/>. However
            if the settings do not exist an exception is thrown.
            </summary>
            <param name="name">
            	Name of the setting to return.
            </param>
            <returns>
            	Returns the collection of settings.
            </returns>
        </member>
        <member name="M:Internal.ConfigSettings.GetMandatoryIntegerSettings(System.String,System.String)">
            <summary>
            Gets a collection of mandatory int settings similar to <see cref="M:Internal.ConfigSettings.GetSettings(System.String,System.String)"/>. However
            if the settings do not exist an exception is thrown.
            </summary>
            <param name="name">
            	Name of the setting to return.
            </param>
            <param name="section">
            	Name of the section where the value can be found. May be null. Use forward
            	slashes to distinguish sub sections.
            </param>
            <returns>
            	Returns the collection of settings.
            </returns>
        </member>
        <member name="M:Internal.ConfigSettings.GetMandatoryIntegerSettings(System.String)">
            <summary>
            Gets a collection of mandatory int settings similar to <see cref="M:Internal.ConfigSettings.GetSettings(System.String,System.String)"/>. However
            if the settings do not exist an exception is thrown.
            </summary>
            <param name="name">
            	Name of the setting to return.
            </param>
            <returns>
            	Returns the collection of settings.
            </returns>
        </member>
        <member name="M:Internal.ConfigSettings.GetMandatoryBooleanSettings(System.String,System.String)">
            <summary>
            Gets a collection of mandatory bool settings similar to <see cref="M:Internal.ConfigSettings.GetSettings(System.String,System.String)"/>. However
            if the settings do not exist an exception is thrown.
            </summary>
            <param name="name">
            	Name of the setting to return.
            </param>
            <param name="section">
            	Name of the section where the value can be found. May be null. Use forward
            	slashes to distinguish sub sections.
            </param>
            <returns>
            	Returns the collection of settings.
            </returns>
        </member>
        <member name="M:Internal.ConfigSettings.GetMandatoryBooleanSettings(System.String)">
            <summary>
            Gets a collection of mandatory bool settings similar to <see cref="M:Internal.ConfigSettings.GetSettings(System.String,System.String)"/>. However
            if the settings do not exist an exception is thrown.
            </summary>
            <param name="name">
            	Name of the setting to return.
            </param>
            <returns>
            	Returns the collection of settings.
            </returns>
        </member>
        <member name="M:Internal.ConfigSettings.GetMandatoryDecimalSettings(System.String,System.String)">
            <summary>
            Gets a collection of mandatory decimal settings similar to <see cref="M:Internal.ConfigSettings.GetSettings(System.String,System.String)"/>. However
            if the settings do not exist an exception is thrown.
            </summary>
            <param name="name">
            	Name of the setting to return.
            </param>
            <param name="section">
            	Name of the section where the value can be found. May be null. Use forward
            	slashes to distinguish sub sections.
            </param>
            <returns>
            	Returns the collection of settings.
            </returns>
        </member>
        <member name="M:Internal.ConfigSettings.GetMandatoryDecimalSettings(System.String)">
            <summary>
            Gets a collection of mandatory decimal settings similar to <see cref="M:Internal.ConfigSettings.GetSettings(System.String,System.String)"/>. However
            if the settings do not exist an exception is thrown.
            </summary>
            <param name="name">
            	Name of the setting to return.
            </param>
            <returns>
            	Returns the collection of settings.
            </returns>
        </member>
        <member name="M:Internal.ConfigSettings.GetMandatorySetting(System.String,System.String)">
            <summary>
            Gets the first setting found with the given name in the given section. If not
            found an exception is thrown.
            </summary>
            <param name="name">
            	Name of the setting to return.
            </param>
            <param name="section">
            	Name of the section where the value can be found. May be null. Use forward
            	slashes to distinguish sub sections.
            </param>
            <returns>
            	Returns the first setting found.
            </returns>
        </member>
        <member name="M:Internal.ConfigSettings.GetMandatorySetting(System.String)">
            <summary>
            Gets the first setting found with the given name in the given section. If not
            found an exception is thrown.
            </summary>
            <param name="name">
            	Name of the setting to return.
            </param>
            <returns>
            	Returns the first setting found.
            </returns>
        </member>
        <member name="M:Internal.ConfigSettings.GetMandatoryIntegerSetting(System.String,System.String)">
            <summary>
            Gets the first int setting found with the given name in the given section. If not
            found an exception is thrown.
            </summary>
            <param name="name">
            	Name of the setting to return.
            </param>
            <param name="section">
            	Name of the section where the value can be found. May be null. Use forward
            	slashes to distinguish sub sections.
            </param>
            <returns>
            	Returns the first setting found.
            </returns>
        </member>
        <member name="M:Internal.ConfigSettings.GetMandatoryIntegerSetting(System.String)">
            <summary>
            Gets the first int setting found with the given name in the given section. If not
            found an exception is thrown.
            </summary>
            <param name="name">
            	Name of the setting to return.
            </param>
            <returns>
            	Returns the first setting found.
            </returns>
        </member>
        <member name="M:Internal.ConfigSettings.GetMandatoryBooleanSetting(System.String,System.String)">
            <summary>
            Gets the first bool setting found with the given name in the given section. If not
            found an exception is thrown.
            </summary>
            <param name="name">
            	Name of the setting to return.
            </param>
            <param name="section">
            	Name of the section where the value can be found. May be null. Use forward
            	slashes to distinguish sub sections.
            </param>
            <returns>
            	Returns the first setting found.
            </returns>
        </member>
        <member name="M:Internal.ConfigSettings.GetMandatoryBooleanSetting(System.String)">
            <summary>
            Gets the first bool setting found with the given name in the given section. If not
            found an exception is thrown.
            </summary>
            <param name="name">
            	Name of the setting to return.
            </param>
            <returns>
            	Returns the first setting found.
            </returns>
        </member>
        <member name="M:Internal.ConfigSettings.GetMandatoryDecimalSetting(System.String,System.String)">
            <summary>
            Gets the first decimal setting found with the given name in the given section. If not
            found an exception is thrown.
            </summary>
            <param name="name">
            	Name of the setting to return.
            </param>
            <param name="section">
            	Name of the section where the value can be found. May be null. Use forward
            	slashes to distinguish sub sections.
            </param>
            <returns>
            	Returns the first setting found.
            </returns>
        </member>
        <member name="M:Internal.ConfigSettings.GetMandatoryDecimalSetting(System.String)">
            <summary>
            Gets the first decimal setting found with the given name in the given section. If not
            found an exception is thrown.
            </summary>
            <param name="name">
            	Name of the setting to return.
            </param>
            <returns>
            	Returns the first setting found.
            </returns>
        </member>
        <member name="M:Internal.ConfigSettings.GetAppSettingsKey(System.String,System.String)">
            <summary>
            Gets the key of the setting when set in the &lt;appSettings&gt; section.
            </summary>
            <param name="section">
            	Name of the section. May be null.
            </param>
            <param name="name">
            	Name of the key to build.
            </param>
            <returns>
            	Returns the complete key name for the appSettings section.
            </returns>
        </member>
        <member name="P:Internal.ConfigSettings.ShouldUseWebLogic">
            <summary>
            Indicates if the current request should use Web logic, even if the HttpContext
            has not been con
            </summary>
        </member>
        <member name="P:Internal.ConfigSettings.IsWebRequest">
            <summary>
            Gets a value indicating if a web request/HttpContext is currently available.
            </summary>
        </member>
        <member name="P:Internal.ConfigSettings.IisIsAvailable">
            <summary>
            Gets a value that indicates if IIS is installed and available on the
            machine. If false then HttpContext should not be checked because it will
            throw an exception.
            </summary>
        </member>
        <member name="P:Internal.ConfigSettings.RootPath">
            <summary>
            Gets the path where configuration values should be relative from. In a Web Application
            this is the root folder, in any other application it is the launch assembly's 
            startup folder.
            </summary>
        </member>
        <member name="T:Internal.ConfigReadWriter">
            <summary>
            Implements a class for reading and writing configuration sections in an 
            application's configuration file.
            </summary>
        </member>
        <member name="M:Internal.ConfigReadWriter.#ctor(System.String)">
            <summary>
            Initializes a new instance of the ConfigReadWriter class.
            </summary>
            <param name="name">
            	Name of the configuration section.
            </param>
            <remarks>
            You can access sub groups by including forward slasshes in the name. For instance
            xheo/web or xheo/data
            </remarks>
        </member>
        <member name="M:Internal.ConfigReadWriter.GetValues(System.String)">
            <summary>
            Gets a collection of values for the given key name.
            </summary>
            <param name="name">
            	The name of the values to retrieve.
            </param>
            <returns>
            	Returns a collection of values with the given key name.
            </returns>
        </member>
        <member name="M:Internal.ConfigReadWriter.GetValue(System.String)">
            <summary>
            Gets a  value for the given key name.
            </summary>
            <param name="name">
            	The name of the value to retrieve.
            </param>
            <returns>
            	Returns a value with the given key name.
            </returns>
        </member>
        <member name="M:Internal.ConfigReadWriter.SetValues(System.String,System.String[])">
            <summary>
            Sets a collection of values with the same name. Any existing settings
            will be replaced.
            </summary>
            <param name="name">
            	Name of the setting to set.
            </param>
            <param name="values">
            	Values to set.
            </param>
        </member>
        <member name="M:Internal.ConfigReadWriter.SetValue(System.String,System.String)">
            <summary>
            Sets the value of a setting. If the setting already exists its value is
            updated to the new setting.
            </summary>
            <param name="name">
            	Name of the setting to set.
            </param>
            <param name="value">
            	Value to set.
            </param>
        </member>
        <member name="M:Internal.ConfigReadWriter.AddValue(System.String,System.String)">
            <summary>
            Adds a new setting to the configuration.
            </summary>
            <param name="name">
            	Name of the setting to set.
            </param>
            <param name="value">
            	Value to set.
            </param>
        </member>
        <member name="M:Internal.ConfigReadWriter.AddValues(System.String,System.String[])">
            <summary>
            Adds a collection of new settings to the configuration.
            </summary>
            <param name="name">
            	Name of the setting to set.
            </param>
            <param name="values">
            	Values to set.
            </param>
        </member>
        <member name="M:Internal.ConfigReadWriter.RemoveValue(System.String)">
            <summary>
            Removes an existing setting.
            </summary>
            <param name="name">
            	Name of the setting to remove.
            </param>
        </member>
        <member name="M:Internal.ConfigReadWriter.AddRemoveKey(System.String)">
            <summary>
            Adds a &lt;remove&gt; setting to remove a predefined setting from  the configuration 
            if supported.
            </summary>
            <param name="name">
            	Name of the setting to remove.
            </param>
        </member>
        <member name="M:Internal.ConfigReadWriter.GetConfigurationNode">
            <summary>
            Gets the XmlNode of the configuration section in the configuration file.
            </summary>
            <returns>
            	Returns the XmlNode of the configuration section.
            </returns>
        </member>
        <member name="M:Internal.ConfigReadWriter.GetConfigurationSection(System.Xml.XmlDocument)">
            <summary>
            Locates and returns the configuration section from the XmlDocument.
            </summary>
            <param name="doc">
            	The configuration file as an XmlDocument.
            </param>
            <returns>
            	Returns the configuration section in the XmlDocument.
            </returns>
        </member>
        <member name="M:Internal.ConfigReadWriter.CreateConfigSection(System.Xml.XmlDocument)">
            <summary>
            Creates the configuration section definition in the config file if it does
            not already exist.
            </summary>
            <param name="doc"></param>
        </member>
        <member name="P:Internal.ConfigReadWriter.Name">
            <summary>
            Gets the name of the configuration section.
            </summary>
        </member>
        <member name="P:Internal.ConfigReadWriter.SectionHandlerType">
            <summary>
            Gets or sets the Type of the section handler used to read the settings in the
            configuration section.
            </summary>
        </member>
        <member name="P:Internal.ConfigReadWriter.UseAppSettings">
            <summary>
            Gets or sets a value that indicates if the values should be saved in the 
            &lt;appSettings&gt; section of the config.
            </summary>
        </member>
        <member name="P:Internal.ConfigReadWriter.File">
            <summary>
            Gets or sets the name of the file to use. The default is the application configuration file.
            </summary>
        </member>
        <member name="T:Xheo.Licensing.AddressCustomFormControl">
            <summary>
            Implements a US address form for the <see cref="T:Xheo.Licensing.RegistrationForm"/>.
            <seealso cref="T:Xheo.Licensing.ICustomFormControl"/>.
            </summary>
            <remarks>
            The AddressCustomFormControl adds the following fields to the registration
            form
            <div class="tablediv"><table cellspacing="0" class="dtTABLE">
            	<tr valign="top">
            	<th width="50%">Name</th>
            	<th width="50%">Use</th>
            	</tr>
            	<tr>
            		<td>country</td>
            		<td>The users's country. The value is one of the US Postal service's two letter country indentification codes.</td>
            	</tr>
            	<tr>
            		<td>streetAddress</td>
            		<td>The users's street address.</td>
            	</tr>
            	<tr>
            		<td>city</td>
            		<td>The users's city.</td>
            	</tr>
            	<tr>
            		<td>state</td>
            		<td>The users's city or province. When country is US, then contains one of the US Postal service's two letter state abbreviations.</td>
            	</tr>
            	<tr>
            		<td>zipcode</td>
            		<td>The users's zip or postal code.</td>
            	</tr>
            	<tr>
            		<td>phone</td>
            		<td>The users's phone number.</td>
            	</tr>
            </table>
            </div>
            </remarks>
        </member>
        <member name="T:Xheo.Licensing.ICustomFormControl">
            <summary>
            Controls that implement the ICustomFormControl can be included in the
            Additional Info section of the <see cref="T:Xheo.Licensing.RegistrationForm"/>, and perhaps
            other dynamic forms in the future.
            </summary>
            <remarks>
            	Generally a developer will want to use a <see cref="T:System.Windows.Forms.UserControl"/> as
            	the base class for a custom register contact control. The control will
            	be added to a scrolling panel so size is not an issue.
            </remarks>
        </member>
        <member name="M:Xheo.Licensing.ICustomFormControl.ValidateField(System.String)">
            <summary>
            Performs validation on the field in the control.
            </summary>
            <param name="field">
            	Name of the field to validate.
            </param>
            <returns>
            	Returns true if the fields are value, otherwise false.
            </returns>
        </member>
        <member name="M:Xheo.Licensing.ICustomFormControl.AddValues(Xheo.Licensing.LicenseValuesCollection)">
            <summary>
            Adds the values of the fields to the value collection. Multiple values can
            be assigned to the same key.
            </summary>
            <param name="values">
            	A collection of name/value pairs to add the field values to.
            </param>
        </member>
        <member name="M:Xheo.Licensing.ICustomFormControl.InitializeFields(System.String,System.Collections.Specialized.NameValueCollection)">
            <summary>
            Initializes the fields on the control from the collection of values.
            </summary>
            <param name="prefix">
            	The prefix to use on each key when searching for a value for 
            	this control.
            </param>
            <param name="values">
            	Collection of values to use when initializing.
            </param>
        </member>
        <member name="F:Xheo.Licensing.AddressCustomFormControl.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:Xheo.Licensing.AddressCustomFormControl.#ctor">
            Initializes a new instance of the AddressCustomFormControl class.
        </member>
        <member name="M:Xheo.Licensing.AddressCustomFormControl.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:Xheo.Licensing.AddressCustomFormControl.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:Xheo.Licensing.AddressCustomFormControl.InitializeFields(System.String,System.Collections.Specialized.NameValueCollection)">
            <summary>
            Initializes the fields on the control from the collection of values.
            </summary>
            <param name="prefix">
            	The prefix to use on each key when searching for a value for 
            	this control.
            </param>
            <param name="values">
            	Collection of values to use when initializing.
            </param>
        </member>
        <member name="M:Xheo.Licensing.AddressCustomFormControl.ValidateField(System.String)">
            <summary>
            Performs validation on the field in the control.
            </summary>
            <param name="field">
            	The field to validate.
            </param>
            <returns>
            	Returns true if the field value is valid, otherwise false.
            </returns>
        </member>
        <member name="M:Xheo.Licensing.AddressCustomFormControl.AddValues(Xheo.Licensing.LicenseValuesCollection)">
            <summary>
            Adds the values of the fields to the value collection. Multiple values can
            be assigned to the same key.
            </summary>
            <param name="values">
            	A collection of name/value pairs to add the field values to.
            </param>
        </member>
        <member name="T:Telogis.GeoBase.ImageUtils.ScaleBar">
            <summary>
            A ScaleBar shows the scale of a map with automatic scale marks.
            </summary>
            <remarks>
            Once constructed, the <see cref="M:Telogis.GeoBase.ImageUtils.ScaleBar.GetImage(System.Double,System.Int32,System.Int32,System.Drawing.Color,System.Drawing.Color)"/> method can
            be used to get an <see cref="T:System.Drawing.Image"/> of the scale
            bar with the desired parameters.
            </remarks>
        </member>
        <member name="M:Telogis.GeoBase.ImageUtils.ScaleBar.#ctor(System.Drawing.Font)">
            <summary>
            Initialize with the given <see cref="T:System.Drawing.Font"/>
            </summary>
            <param name="font"></param>
        </member>
        <member name="M:Telogis.GeoBase.ImageUtils.ScaleBar.#ctor">
            <summary>
            Initialize with Arial 7 point <see cref="T:System.Drawing.Font"/>.
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.ImageUtils.ScaleBar.SetUnitAbbreviation(Telogis.GeoBase.DistanceUnit,System.String)">
            <summary>
            Set the abbreviation used for a certain unit. Useful for changing abbreviations for different cultures. The default abbreviations for all distance units are SI abbreviations
            </summary>
            <param name="unit">The distance unit to be changed</param>
            <param name="abbreviation">the abbreviation string of the unit</param>
        </member>
        <member name="M:Telogis.GeoBase.ImageUtils.ScaleBar.GetImage(System.Double,System.Int32,System.Int32,System.Drawing.Color,System.Drawing.Color)">
            <summary>
            Draw a scalebar with the given width and height, representing the pixel size in miles.
            </summary>
            <param name="pixelsize">Pixel size in miles.</param>
            <param name="width">The desired width of the scale bar.</param>
            <param name="height">The desired height of the scale bar.</param>
            <param name="bground">The background <see cref="T:System.Drawing.Color"/>.</param>
            <param name="text"><see cref="T:System.Drawing.Color"/> of the text.</param>
            <returns>an Image</returns>
        </member>
        <member name="T:Telogis.GeoBase.ImageUtils.ASPGraphicsUtils">
            <summary>
            Utility functions for image processing in ASP.NET applications.
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.ImageUtils.ASPGraphicsUtils.ClientSupportsTransparency(System.Web.HttpRequest)">
            <summary>
            Calculates whether the client supports PNG transparency.  IE6 and below does not.
            </summary>
            <param name="request">The request sent by the client.</param>
            <returns>Whether the client supports PNG transparency.</returns>
        </member>
        <member name="M:Telogis.GeoBase.ImageUtils.ASPGraphicsUtils.RespondWithImage(System.Web.HttpRequest,System.Web.HttpResponse,System.Drawing.Image)">
            <summary>
            Writes an image to the supplied HttpReponse.  If the client supports PNG transparency
            then it is written as a PNG, otherwise it is written as a GIF with Color.Magenta as the
            transparent color.
            </summary>
            <param name="request">The request sent by the client.</param>
            <param name="response">The response that is going to be sent to the client.</param>
            <param name="image">The image that is to be sent to the client.</param>
        </member>
        <member name="M:Telogis.GeoBase.ImageUtils.ASPGraphicsUtils.WriteToOutputAsPNG(System.Drawing.Image,System.Web.HttpResponse)">
            <summary>
            Writes an image to an <see cref="T:System.Web.HttpResponse"/> stream as a PNG.
            </summary>
            <remarks>
            You can not write a PNG directly to a ResponseStream because the PNG encoder
            needs a seekable stream, and the response stream is not seekable.
            </remarks>
            <param name="bm">The <see cref="T:System.Drawing.Image"/> to be written.</param>
            <param name="response">The <see cref="T:System.Web.HttpResponse"/> to write to.</param>
        </member>
        <member name="M:Telogis.GeoBase.ImageUtils.ASPGraphicsUtils.WriteToOutputAsGIF(System.Drawing.Image,System.Drawing.Color,System.Web.HttpResponse)">
            <summary>
            Writes a Bitmap to an <see cref="T:System.Web.HttpResponse"/> stream as a GIF with the specified
            color rendered transparent.
            </summary>
            <param name="source">The Bitmap to write to the stream</param>
            <param name="transColor">Pixels of this color in the source will become transparent
            in the output.</param>
            <param name="response">The <see cref="T:System.Web.HttpResponse"/> to write to.</param>
        </member>
        <member name="M:Telogis.GeoBase.ImageUtils.ASPGraphicsUtils.LoadImageFromFile(System.String)">
            <summary>
            Loads an image from file without keeping the file handle open.
            </summary>
            <param name="fileName">The name of the file containing the image.</param>
            <returns>The image.</returns>
        </member>
        <member name="T:Telogis.GeoBase.CompassRose">
            <summary>
            Draws a Compass Rose on the map. When the user rotates the Compass Rose (by dragging with
            the mouse, configured by the <see cref="F:Telogis.GeoBase.CompassRose.EnableGui"/> property) the map will rotate.
            </summary>
            <remarks>
            <img src="Art/geobase_compassrose.png"></img>
            <para>In this example image above the Compass Rose is drawn
            in the top left-hand corner and has been used to rotate the map (of Long Island, New York)
            clockwise approximately 100 degrees (positive angles are always clockwise). Note the 
            orientation of labels does not change when the map is rotated.</para>
            </remarks>
            <example>
            <code lang="C#">
                // set up the RendererList (allows us to draw multiple objects on a map)
                RendererList rList = new RendererList();
                mainMap.Renderer = rList;
            
                ...
            
                // create a new CompassRose
                CompassRose cr = new CompassRose();
            
                // cr.X = mainMap.Right - 50;
                // ^^ uncomment to position the CompassRose on the top-right corner
            
                // cr.EnableGui = false; 
                // ^^ uncomment to disable user interaction with the CompassRose
            
                // add the CompassRose to our RendererList
                rList.Add(cr);
            </code>
            </example>
        </member>
        <member name="M:Telogis.GeoBase.CompassRose.#ctor">
            <summary>
            Create a new CompassRose object.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.CompassRose.X">
            <summary>
            The X pixel location of the center of the rose (measured from top left-hand corner).
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.CompassRose.Y">
            <summary>
            The Y pixel location of the center of the rose (measured from top left-hand corner).
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.CompassRose.Size">
            <summary>
            The radius of the compass rose, in pixels.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.CompassRose.EnableGui">
            <summary>
            When <b>true</b> the user may interactively rotate the map
            by dragging the compass rose.
            </summary>
            <remarks><b>True</b> by default.</remarks>
        </member>
        <member name="M:Telogis.GeoBase.CompassRose.Render(System.Drawing.Graphics,Telogis.GeoBase.RenderContext)">
            <summary>
            Implementation of <see cref="T:Telogis.GeoBase.IMapRenderer"/>. Used to draw the 
            information balloon. <b>Should not be called directly.</b>
            </summary>
            <param name="graphics"></param>
            <param name="rc"></param>
        </member>
        <member name="M:Telogis.GeoBase.CompassRose.HitTest(System.Int32,System.Int32,Telogis.GeoBase.IMap)">
            <summary>
            Implementation of <see cref="T:Telogis.GeoBase.IMapMouseHandler"/>. Checks to see if the 
            Compass Rose should respond to the user action. <b>Should not be
            called directly.</b>
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="aMap"></param>
            <returns></returns>
        </member>
        <member name="F:Telogis.GeoBase.CompassRose.bDown">
            <summary>
            <b>true</b> if the mouse button is depressed (down) on the Compass Rose,
            otherwise false.
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.CompassRose.handler_MouseUp(System.Object,System.Windows.Forms.MouseEventArgs)">
            <summary>
            This method is called when the mouse releases the Compass Rose.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Telogis.GeoBase.CompassRose.handler_MouseMove(System.Object,System.Windows.Forms.MouseEventArgs)">
            <summary>
            Rotates the map when the user moves the Compass Rose.
            </summary>
            <remarks>The map is rotated by using <see cref="M:Telogis.GeoBase.CompassRose.PanTo(System.Object,System.EventArgs)"/>
            to change the map's heading.</remarks>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Telogis.GeoBase.CompassRose.handler_MouseDown(System.Object,System.Windows.Forms.MouseEventArgs)">
            <summary>
            Rotates the map when the user clicks the Compass Rose.
            </summary>
            <remarks>The map is rotated by using <see cref="M:Telogis.GeoBase.CompassRose.PanTo(System.Object,System.EventArgs)"/>
            to change the map's heading.</remarks>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Telogis.GeoBase.CompassRose.AngleBetween(System.Drawing.Point,System.Drawing.Point,System.Drawing.Point)">
            <summary>
            Calculates the angle described by three points.
            </summary>
            <remarks>The calculated angle is pa-p-pb.</remarks>
            <param name="pa">First outer point.</param>
            <param name="p">Center point.</param>
            <param name="pb">Second outer point.</param>
            <returns>Angle between described by the points <i>in degrees</i></returns>
        </member>
        <member name="M:Telogis.GeoBase.CompassRose.PanTo(System.Object,System.EventArgs)">
            <summary>
            Rotates a map using an angle described by a MouseEvent 
            and (this) Compass Rose.
            </summary>
            <param name="sender">The heading of this map is changed.</param>
            <param name="e">MouseEvent containing the coordinates used to 
            calculate the required angle of rotation.</param>
        </member>
        <member name="P:Telogis.GeoBase.CompassRose.RequiredRendermodes">
            <summary>
            Gets the <see cref="T:Telogis.GeoBase.RenderMode">RenderMode</see> required by this <b>CompassRose</b>
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.CompassRose.Color">
            <summary>
            The <see cref="T:System.Drawing.Color"/> that should be used to draw the CompassRose.
            Defaults to black.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.CompassRose.MapMouseEventsHandler">
            <summary>
            Implementation of <see cref="T:Telogis.GeoBase.IMapMouseHandler"/>. Returns the correct 
            handler for the user's action. <b>Should not be
            called directly.</b>
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.Transactional.Table">
            <summary>
            Represents a table in a <see cref="T:Telogis.GeoBase.Transactional.TransactionalRepository"/>. In turn, a table
            represents a number of <see cref="T:Telogis.GeoBase.Transactional.Record"/> objects.
            Use <see cref="M:Telogis.GeoBase.Transactional.TransactionalRepository.CreateTable(System.String)"/>
            or <see cref="P:Telogis.GeoBase.Transactional.TransactionalRepository.Tables"/> to obtain an instance.
            </summary>
            <example>
            When you create a table you must define the table structure. For example, the following code
            snippet creates a table that has two columns: a customer name (string) and a warehouse location 
            (LatLon). Typically, you will only create a table and columns when creating a transactional
            repository. See <see cref="M:Telogis.GeoBase.Transactional.TransactionalRepository.#ctor(System.String)"/> for an example.
            <code lang="C#">
            using (EnsureTransaction trans = new EnsureTransaction(myTransactionalRepository)) {
                Table warehouse = myTransactionalRepository.CreateTable("Warehouse");
                warehouse.AddField("CustomerName", DataType.String);
                warehouse.AddField("Location", DataType.LatLon);
            }
            </code>
            To obtain an instance of a table, use the <see cref="P:Telogis.GeoBase.Transactional.TransactionalRepository.Tables">Tables</see>
            property of a transactional repository:
            <code lang="C#">
            Table warehouse = myTransactionalRepository.Tables["warehouse"];
            </code>
            Note that, like column names, the name of the table is not case sensitive.
            </example>
        </member>
        <member name="M:Telogis.GeoBase.Transactional.Table.CreateIndex(System.String,Telogis.GeoBase.Transactional.IndexColumn[])">
            <summary>
            Creates a new index on this table.
            </summary>
            <param name="idxname">The name of this index. This should be unique to the whole
            <see cref="T:Telogis.GeoBase.Transactional.TransactionalRepository"/></param>
            <param name="indexColumn">An array of <see cref="T:Telogis.GeoBase.Transactional.IndexColumn"/>s specifying the
            structure of the index. The order of these columns can have an effect on the resulting
            queries.</param>
            <returns>An instance of <see cref="T:Telogis.GeoBase.Transactional.Index"/> representing the newly created index.</returns>
            <remarks>Indexes must be created within the context of a transaction on the TransactionalRepository that
            contains the Table.</remarks>
        </member>
        <member name="M:Telogis.GeoBase.Transactional.Table.AddField(System.String,Telogis.GeoBase.Transactional.DataType)">
            <summary>
            Adds a new column to this table.
            </summary>
            <param name="colname">The name of the column to add. This name is converted to lowercase.</param>
            <param name="dataType">The <see cref="T:Telogis.GeoBase.Transactional.DataType"/> to use for this column.</param>
        </member>
        <member name="M:Telogis.GeoBase.Transactional.Table.CreateRecord">
            <summary>
            Creates a new <see cref="T:Telogis.GeoBase.Transactional.Record"/> for this table. This does not insert the record
            into the database; this should be done after populating the <see cref="T:Telogis.GeoBase.Transactional.Record"/>
            by calling <see cref="M:Telogis.GeoBase.Transactional.Table.Insert(Telogis.GeoBase.Transactional.Record)"/>.
            </summary>
            <returns>An empty record with only default values for each field.</returns>
        </member>
        <member name="M:Telogis.GeoBase.Transactional.Table.QueryAll">
            <summary>
            Fetch all of the records in the table.
            </summary>
            <returns>An enumeration of all the records in the table.</returns>
        </member>
        <member name="M:Telogis.GeoBase.Transactional.Table.Insert(Telogis.GeoBase.Transactional.Record)">
            <summary>
            Inserts a record into this table.
            </summary>
            <param name="record">The populated record to insert into the table.</param>
            <remarks>This method must be called after the <see cref="T:Telogis.GeoBase.Transactional.TransactionalRepository"/>
            has been instructed to start a transaction by calling
            <see cref="M:Telogis.GeoBase.Transactional.TransactionalRepository.BeginTransaction"/>.</remarks>
        </member>
        <member name="M:Telogis.GeoBase.Transactional.Table.Update(Telogis.GeoBase.Transactional.Record)">
            <summary>
            Update an existing record in the table
            </summary>
            <param name="record">The record to update.</param>
            <remarks>This method must be called after the <see cref="T:Telogis.GeoBase.Transactional.TransactionalRepository"/>
            has been instructed to start a transaction by calling
            <see cref="M:Telogis.GeoBase.Transactional.TransactionalRepository.BeginTransaction"/>.</remarks>
        </member>
        <member name="M:Telogis.GeoBase.Transactional.Table.DeleteAll">
            <summary>
            Delete all existing records in the table
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.Transactional.Table.Delete(Telogis.GeoBase.Transactional.Record[])">
            <summary>
            Deletes one or more records from the table.
            </summary>
            <param name="records">The records to delete.</param>
        </member>
        <member name="M:Telogis.GeoBase.Transactional.Table.Delete(System.Collections.Generic.IEnumerable{Telogis.GeoBase.Transactional.Record})">
            <summary>
            Deletes one or more records from the table.
            </summary>
            <param name="records">The records to delete.</param>
        </member>
        <member name="M:Telogis.GeoBase.Transactional.Table.Dispose">
            <summary>
            Disposes of this Table. This does not delete the table from the <see cref="T:Telogis.GeoBase.Transactional.TransactionalRepository"/>.
            Ordinarily, there is no need to call this method directly,
            <see cref="M:Telogis.GeoBase.Repositories.Repository.Dispose"/> should be called instead.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Transactional.Table.Fields">
            <summary>
            Gets all the Fields and associated field <see cref="T:Telogis.GeoBase.Transactional.DataType"/>.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Transactional.Table.Indexes">
            <summary>
            Returns an <see cref="T:Telogis.GeoBase.Transactional.IndexCollection"/> representing all the <see cref="T:Telogis.GeoBase.Transactional.Index"/>es 
            in this <see cref="T:Telogis.GeoBase.Transactional.Table"/>.
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.Transactional.Index">
             <summary>
             You can query an index to obtain a select number of columns from records matching <see cref="T:Telogis.GeoBase.Transactional.ColumnFilter">specific filters</see>. 
             After an index has been created (see 
             <see cref="M:Telogis.GeoBase.Transactional.Table.CreateIndex(System.String,Telogis.GeoBase.Transactional.IndexColumn[])"/>)
             the index persists in the transactional repository.
             </summary>
             <example>
             You should create your indexes when you create your table structure. The following code snippet provides an example
             of how you can do this. Also, refer to <see cref="M:Telogis.GeoBase.Transactional.TransactionalRepository.#ctor(System.String)"/>.
             <code lang="C#">
             static TransactionalRepository InitRepository(String fname) {
                //
                // if the repository file doesn't exist then it will be created
                //
                bool created = !System.IO.File.Exists(fname);
                TransactionalRepository tr = new TransactionalRepository(fname);
            
                //
                // If we created a new repository file then the repository is empty
                // and we must create the appropriate tables
                //
                if (created)
                {
                    Console.WriteLine("Creating transactional repository structure");
                    // Creating tables and indexes must occur within a transaction
                    tr.BeginTransaction();
                    
                    // create table(s) and some columns...
                    ...
            
                    //
                    // Create some indexes to allow us to query the table contents
                    //
                    myCustomerTable.CreateIndex("name_address", 
                        new IndexColumn[3] {
                            new IndexColumn("CustomerName"),
                            new IndexColumn("Address"),
                            new IndexColumn("Phone")
                        });
                        
                    myVehicleTable.CreateIndex("vehicle_details",
                        new IndexColumn[4] {
                            new IndexColumn("Type"),
                            new IndexColumn("Weight"),
                            new IndexColumn("Axles"),
                            new IndexColumn("Height")
                        });
                    
                    // at this point you may want to fill the table with some 
                    // intial data...
                    tr.EndTransaction;
                }
                else
                {
                    Console.WriteLine("Loaded transactional repository from disk.");
                    Console.WriteLine("I didn't need to create any tables, columns or indexes.");
                }
            
                return tr;
            }
             </code>
             Now, by using a combination of <see cref="T:Telogis.GeoBase.Transactional.ColumnFilter">filters</see> you can select rows
             from each table using our indexes.
             <code lang="C#">
             Index idx_customers = myCustomerTable.Indexes["name_address"];
             
             ContainsFilter phoneContains = new ContainsFilter("Phone", "866");
             EqualFilter nameIs = new EqualFilter("CustomerName", "My Corporate");
             ColumnFilter[] filters = new ColumnFilter[2] { phoneContains, nameIs };
             
             using (EnsureTransaction trans = new EnsureTransaction(myTransactionalRepository)) {
             
               // we can now display the address of each customer from 'My Corporate' whose phone 
               // number contains '866'
               foreach (Record r in idx_customers.Query(filters)) {
                   Console.WriteLine("{0}, {1}, {2}", r["CustomerName"], r["Address"], r["Phone"]);
               }
             
               ...
             
             }
             </code>
             </example>
        </member>
        <member name="M:Telogis.GeoBase.Transactional.Index.Query(Telogis.GeoBase.Transactional.ColumnFilter[])">
            <summary>
            Performs a query of this table using a specified index. A set of filters
            can also be specified to narrow the result set.
            </summary>
            <param name="columnFilter">An array of <see cref="T:Telogis.GeoBase.Transactional.ColumnFilter"/> objects to
            filter the result set. Every <see cref="T:Telogis.GeoBase.Transactional.Record"/> returned by the query will satisfy
            all specified filters. If you don't want to filter the results set, specify
            a zero-length array.</param>
            <returns>All records in the table that match the specified column filters.</returns>
            <remarks>This method must be called after the <see cref="T:Telogis.GeoBase.Transactional.TransactionalRepository"/>
            has been instructed to start a transaction by calling
            <see cref="M:Telogis.GeoBase.Transactional.TransactionalRepository.BeginTransaction"/>.</remarks>
        </member>
        <member name="P:Telogis.GeoBase.Transactional.Index.Fields">
            <summary>
            Gets a list of the fields in this Index.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Transactional.Index.Table">
            <summary>
            Gets the <see cref="P:Telogis.GeoBase.Transactional.Index.Table"/> used for this Index.
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.Navigation.IRouteCalculator">
            <summary>
            The IRouteCalculator interface enables users to use their own routing engine with other
            GeoBase facilities.
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.Navigation.IRouteCalculator.UpdatePosition(Telogis.GeoBase.Navigation.Position)">
            <summary>
            Updates the vehicle position.
            </summary>
            <param name="pos"></param>
        </member>
        <member name="M:Telogis.GeoBase.Navigation.IRouteCalculator.RecalculateRoute(Telogis.GeoBase.RouteStop,Telogis.GeoBase.RouteStop,Telogis.GeoBase.Routing.RoutingStrategy,Telogis.GeoBase.Routing.RouteProgress)">
            <summary>
            Do the work of recalculating the route.
            </summary>
            <param name="start">the starting point of this route</param>
            <param name="dest">the destination point of this route</param>
            <param name="strategy">the routing strategy to use</param>
            <param name="RouteProgress">delegate method used to update RouteProgress bar</param>
            <returns></returns>
        </member>
        <member name="P:Telogis.GeoBase.Navigation.IRouteCalculator.Directions">
            <summary>
            Returns a GeoBase <see cref="T:Telogis.GeoBase.Routing.Directions"/> object. <see cref="T:Telogis.GeoBase.Routing.DirectionsFactory"/> 
            exists to serve the purpose of constructing these Directions.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Navigation.IRouteCalculator.VehicleSpec">
            <summary>
            Set/Get the Vehicle specifications as required for route calculation.
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.Compiler.Preprocessor.Scanner">
            <summary>
            Scan a file, reading one line at a time.
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.Compiler.Preprocessor.IAST">
            <summary>
            Abstract Syntax Tree element.
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.Compiler.Preprocessor.IAST.Evaluate(System.Collections.Generic.Dictionary{System.String,System.Object},System.Text.StringBuilder)">
            <summary>
            Evaluate the given element.
            </summary>
            <param name="bindings">Bindings to use.</param>
            <param name="output">A StringBuilder to write output to.</param>
        </member>
        <member name="T:Telogis.GeoBase.Compiler.Preprocessor.Preprocessor">
            <summary>
            Preprocessor for CHM files.
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.Compiler.Preprocessor.Preprocessor.Process(System.IO.Stream,System.Collections.Generic.Dictionary{System.String,System.Object},System.Text.StringBuilder)">
            <summary>
            Preprocess a given stream.
            </summary>
            <param name="stream">The Chameleon Template stream to preprocess.</param>
            <param name="bindings">The bindings to use when processing. Definitions present in the
            template will be added.</param>
            <param name="output">The processed template is written here. This should be a valid CAM file.</param>
        </member>
        <member name="M:Telogis.GeoBase.Compiler.Preprocessor.Preprocessor.Lookup(System.Collections.Generic.Dictionary{System.String,System.Object},System.String)">
            <summary>
            Looks up a given key within bindings. Key parts may be separated with '.'.
            </summary>
            <param name="bindings">The bindings from which to perform the lookup.</param>
            <param name="key">The key to lookup.</param>
            <returns>The object for the specified key.</returns>
        </member>
        <member name="T:Telogis.GeoBase.Compiler.Preprocessor.ASTBlock">
            <summary>
            A block contains one or more AST elements and is terminated by an #end statement or EOF.
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.Compiler.Preprocessor.ASTDefine">
            <summary>
            Defines an binding.
            Values can be lists, dictionarys, or strings.
            
            For example:
            <code>
            #define $(traffic)
                [{class:1, limit:0.31, color:(222,   0, 0)},
                 {class:2, limit:0.62, color:(239, 102, 0)},
                 {class:3, limit:0.92, color:(255, 204, 0)},
                 {class:4,             color:( 51, 177, 0)}]
            #end
            </code>
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.Compiler.Preprocessor.ASTForeach">
            <summary>
            Repeats a block for each element within a given list.
            
            For example:
            <code>
            #foreach $(traffic) => $(cat)
            	render [ALL:$(cat.class)],pen&lt;$(cat.color),2&gt;
            #end
            </code>
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.Compiler.Preprocessor.ASTLine">
            <summary>
            Outputs a given line applying substituions.
            
            For example:
            <code>
            render [ALL:$(cat.class)],pen&lt;$(cat.color),2&gt;
            </code>
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.Compiler.Preprocessor.CharScanner">
            <summary>
            Scans a string one character at a time.
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.Compiler.Preprocessor.ExpressionParser">
            <summary>
            Parses expressions used for definitions.
            
            Supported value types are Dictionaries, Lists and Strings.
            
            Any value not starting with { or [ is assumed to be a string.
            
            <code>
            [{class:1, limit:0.31, color:(222,   0, 0)},
             {class:2, limit:0.62, color:(239, 102, 0)},
             {class:3, limit:0.92, color:(255, 204, 0)},
             {class:4,             color:( 51, 177, 0)}]
            </code>
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.Compiler.Preprocessor.ExpressionParser.Parse">
            <summary>
            Parse an object.
            </summary>
            <returns>The parsed object</returns>
        </member>
        <member name="M:Telogis.GeoBase.Compiler.Preprocessor.ExpressionParser.ParseList">
            <summary>
            Parse a list of objects.
            </summary>
            <returns>The parsed list.</returns>
        </member>
        <member name="M:Telogis.GeoBase.Compiler.Preprocessor.ExpressionParser.ParseDictionary">
            <summary>
            Parse a dictionary.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Telogis.GeoBase.Compiler.Preprocessor.ExpressionParser.ParseBlob">
            <summary>
            Parse a blob.
            </summary>
            <returns>The scanned blob.</returns>
        </member>
        <member name="M:Telogis.GeoBase.Compiler.Preprocessor.ExpressionParser.ParseNestedBlob(System.Char)">
            <summary>
            Parse a nested blob.
            </summary>
            <param name="terminator">The blob will be terminated by this character.</param>
            <returns>The scanned blob.</returns>
        </member>
        <member name="M:Telogis.GeoBase.Compiler.Preprocessor.ExpressionParser.ConsumeWhitespace">
            <summary>
            Ditch any whitespace at the current position.
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.ShapeUI.State.IEditState">
            <summary>
            Interface that is implemented by all editing states.
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.GeoStream.Server.DataServerDataSet">
            <summary>
            A DataServerDataSet allows GeoStream to use repositories provided by a DataServer.
            The repositories are found by using a RepositoryDiscoverer.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.GeoStream.Server.DataServerDataSet.m_countryList">
            <summary>
            List of (vendor, country) pairs.
            </summary>		
        </member>
        <member name="F:Telogis.GeoBase.GeoStream.Server.DataServerDataSet.m_hasGlobal">
            <summary>
            Whether this data set has global data.
            </summary>				
        </member>
        <member name="F:Telogis.GeoBase.GeoStream.Server.DataServerDataSet.m_globalVendor">
            <summary>
            The vendor providing global data.
            </summary>		
        </member>
        <member name="M:Telogis.GeoBase.GeoStream.Server.DataServerDataSet.#ctor">
            <summary>
            Private parameterless constructor for deserialization.
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.GeoStream.Server.DataServerDataSet.#ctor(System.String)">
            <summary>
            Creates a new DataServerDataSet with the given name.
            </summary>
            <param name="name">Name of the DataServerDataSet.</param>
        </member>
        <member name="M:Telogis.GeoBase.GeoStream.Server.DataServerDataSet.AddCountry(System.String,Telogis.GeoBase.Country)">
            <summary>
            Adds a country to the list provided by this DataServerDataSet.
            </summary>
            <param name="vendor">Vendor providing data for the country.</param>
            <param name="country">The country.</param>
        </member>
        <member name="M:Telogis.GeoBase.GeoStream.Server.DataServerDataSet.SetGlobal(System.String)">
            <summary>
            Specifies the vendor that will provide global data for this DataServerDataSet.
            </summary>
            <param name="vendor">Name of the vendor.</param>
        </member>
        <member name="M:Telogis.GeoBase.GeoStream.Server.DataServerDataSet.CreateRepository">
            <summary>
            Creates a repository containing the data provided by this DataServerDataSet.  Uses a
            RepositoryDiscoverer to connect to the DataServer and request the required data files
            from it.
            </summary>
            <returns>A repository containing the data provided by this DataServerDataSet.</returns>
        </member>
        <member name="T:Telogis.GeoBase.AbstractMap">
            <summary>
            Provides an abstract base class for different map implementations - such as <see cref="T:Telogis.GeoBase.Map"/>
            and <see cref="T:Telogis.GeoBase.MapCtrl"/>. You should use one of these two implementations to add mapping
            capabilites to your application.
            </summary>
            <remarks>
            <para>
            To place a Map in your application consider using a <see cref="T:Telogis.GeoBase.MapCtrl"/>.
            </para>
            </remarks>
            <seealso cref="T:Telogis.GeoBase.Map"/>
            <seealso cref="T:Telogis.GeoBase.GeoStream.TileMap"/>
            <seealso cref="T:Telogis.GeoBase.MapCtrl"/>
        </member>
        <member name="T:Telogis.GeoBase.IMap">
            <summary>
            Country / Engine independent map interface with support for zooming.
            </summary>
            <remarks>
            The <see cref="T:Telogis.GeoBase.IMap"/> interface provides support for user code to
            render additional features on maps. An example is the <see cref="T:Telogis.GeoBase.BalloonPushPin"/>.
            See the <see cref="T:Telogis.GeoBase.IMapRenderer"/> interface for more details.
            <seealso cref="T:Telogis.GeoBase.MapCtrl"/>
            <seealso cref="T:Telogis.GeoBase.Map"/>
            <para><b>Related articles</b>: <a href="685458eb-ffb4-4b03-b3fd-97997a647a7f.htm">How Renderers Work</a>, 
            <a href="929e54d5-f994-4e7e-aa42-c3920a2d7c30.htm">Using Multiple Renderers</a>.</para>
            </remarks>
        </member>
        <member name="M:Telogis.GeoBase.IMap.GetMap">
            <summary>
            Generate a map synchronously using current Center, Size and Zoom.
            </summary>
            <returns>System.Drawing.Image for further drawing.</returns>
        </member>
        <member name="M:Telogis.GeoBase.IMap.GetMap(System.Boolean,Telogis.GeoBase.MapProgress,System.Boolean@)">
            <summary>
            Generate a map using current Center, Size and Zoom.
            </summary>
            <remarks>
            If isAsync is true, and parts of the map cannot be drawn immediately (for example, 
            some of the required tiles are not present in the cache), the map is 
            still returned immediately, with those parts left blank, or marked with 'loading' as 
            appropriate. In contrast, GetMap() with isAsync false will not return until it's drawn the 
            whole map, even if that requires waiting for tiles.
            
            If isAsync is true, and the map can be rendered immediately anyway, done will be true on return,
            and the progressDelegate will not be called. Otherwise, done will be false, and progressDelegate
            will be called every time more of the map is available, until either it is completed (and the
            progressDelegate has been called with isComplete set to true) or CancelAsync() has been called.
            </remarks>
            <param name="isAsync">If true, fetch and draw the map asynchronously.</param>
            <param name="progressDelegate">If isAsync is true, this parameter specifies a delegate to be called
            when more of the map is available for rendering.</param>
            <param name="done">Set to true if the map was rendered completely, false otherwise.</param>
        </member>
        <member name="M:Telogis.GeoBase.IMap.CancelAsync">
            <summary>
            Cancels the asynchronous map fetch underway, if any.
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.IMap.LatLontoXY(System.Int32@,System.Int32@,Telogis.GeoBase.LatLon)">
            <summary>
            Convert from a <see cref="T:Telogis.GeoBase.LatLon"/> to a pixel X,Y location on the map.
            </summary>
            <param name="x">x co-ordinate.</param>
            <param name="y">y co-ordinate.</param>
            <param name="loc">LatLon location.</param>
        </member>
        <member name="M:Telogis.GeoBase.IMap.XYtoLatLon(System.Int32,System.Int32)">
            <summary>
            Gets the <see cref="T:Telogis.GeoBase.LatLon"/> of a point on the map given by x &amp; y co-ordinates.
            </summary>
            <remarks>
            This function should be used to translate x &amp; y co-ordinates to LatLons. This is necessary
            because the projection is curved. See <see cref="T:Telogis.GeoBase.LatLon"/> for more information.
            </remarks>
            <param name="x">The x co-ordinate to translate.</param>
            <param name="y">The y co-ordinate to translate.</param>
            <returns>A <see cref="T:Telogis.GeoBase.LatLon"/> representing the map co-ordinates of the given x &amp; y values.</returns>
        </member>
        <member name="M:Telogis.GeoBase.IMap.XYtoBoundingBox(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Gets the <see cref="T:Telogis.GeoBase.BoundingBox"/> of two pixel locations, x1,y1 and x2,y2
            </summary>
            <remarks>
            </remarks>
            <param name="x1">The x co-ordinate of the first point to translate.</param>
            <param name="y1">The y co-ordinate of the first point to translate.</param>
            <param name="x2">The x co-ordinate of the second point to translate.</param>
            <param name="y2">The y co-ordinate of the second point to translate.</param>
            <returns>A <see cref="T:Telogis.GeoBase.BoundingBox"/> representing the map co-ordinates of the given points.</returns>
        </member>
        <member name="M:Telogis.GeoBase.IMap.Contains(Telogis.GeoBase.LatLon)">
            <summary>
            Check whether the <see cref="T:Telogis.GeoBase.LatLon"/> co-ordinates
            lie within this IMap.
            </summary>
            <param name="aPoint">The <see cref="T:Telogis.GeoBase.LatLon"/> to test.</param>
            <returns><b>true</b> if this IMap contains the given <see cref="T:Telogis.GeoBase.LatLon"/>, <b>false</b> if it does not.</returns>
        </member>
        <member name="M:Telogis.GeoBase.IMap.ZoomToBoundingBox(Telogis.GeoBase.BoundingBox,System.Int32)">
            <summary>
            Zooms the map and centers on the given <see cref="T:Telogis.GeoBase.BoundingBox"/>.
            </summary>
            <remarks>
            Use to zoom the map to display the area of the given <see cref="T:Telogis.GeoBase.BoundingBox"/>.<br/>
            Use the <b>buffer</b> parameter to set the amount by which <b>abox</b> is inside the resulting
            visible map area. For example, setting <b>buffer</b> to 10 results in a map where the edges of
            <b>abox</b> are 10 pixels in from the edge of the map.
            </remarks>
            <param name="abox">The <see cref="T:Telogis.GeoBase.BoundingBox"/> on which to center and zoom.</param>
            <param name="buffer">The number of pixels between the edge of <b>abox</b> and the edge of the visible map area. See remarks.</param>
        </member>
        <member name="M:Telogis.GeoBase.IMap.SetProperty(System.String,System.Object)">
            <summary>
            Allows map-specific (internal) properties to be set. For internal use.
            </summary>
            <remarks>
            This method returns true if <b>name</b> matches a recognized
            property, and that property was succesfully updated with
            <b>prop_value</b>.
            It will return <b>false</b> if the <b>name</b> specified
            is not recognized by the implementation.
            </remarks>
            <param name="name">Name of the property to set.</param>
            <param name="prop_value">Value to set the property to.</param>
            <returns>true if the property was set, false otherwise.</returns>
        </member>
        <member name="P:Telogis.GeoBase.IMap.Perspective">
            <summary>
            Gets or sets the map perspective, if supported by the map
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.IMap.Busy">
            <summary>
            Returns <b>true</b> if the IMap is busy rendering a map, otheriwse <b>false</b>.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.IMap.Heading">
            <summary>
            Gets or sets the Heading for the map.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.IMap.RenderLabels">
            <summary>
            Gets or sets a boolean indicating whether labels should be
            drawn on this map.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.IMap.Center">
            <summary>
            Gets or sets the center point of the map.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.IMap.Size">
            <summary>
            Gets or sets the dimensions of the map in pixels.
            </summary>
            <remarks>
            <para>
            If Size is changed whilst Zoom is set to a very small value (in the order of 0.01 or
            smaller) then the map may cover too small an area to be accurately rendered.  If this
            happens then Zoom is increased until the map can be rendered correctly.
            </para>
            </remarks>
        </member>
        <member name="P:Telogis.GeoBase.IMap.Projected">
            <summary>
            Gets or sets whether the map is projected or not.
            </summary>
            <remarks><para><b>Related articles</b>: <a href="9af7c41f-fabe-48be-9317-1e019cc19c33.htm">Map Concept</a>.</para></remarks>
        </member>
        <member name="P:Telogis.GeoBase.IMap.Zoom">
            <summary>
            Gets or sets the zoom height of the map. Increasing this value causes the map to zoom out.
            </summary>
            <remarks>
            <para>
            A number of helpful preset zoom levels are defined in
            <see cref="T:Telogis.GeoBase.ZoomLevel"/>.
            </para>
            <para>
            If Zoom is set to a very small value (in the order of 0.01 or smaller) then the map may
            cover too small an area to be accurately rendered.  If this happens then the Zoom is
            increased until the map can be rendered correctly.
            </para>
            </remarks>
        </member>
        <member name="P:Telogis.GeoBase.IMap.PixelSizeMiles">
            <summary>
            Gets the number of miles each pixel of the map represents.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.IMap.PixelSizeMeters">
            <summary>
            Gets the number of meters each pixel of the map represents.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.IMap.Renderer">
            <summary>
            Gets or sets the current <see cref="T:Telogis.GeoBase.IMapRenderer"/> object for this
            map.
            <seealso cref="T:Telogis.GeoBase.IMapRenderer"/>
            <seealso cref="T:Telogis.GeoBase.RendererList"/>
            </summary>
            <value>
            The <see cref="T:Telogis.GeoBase.IMapRenderer"/> to be used for this map.
            </value>
            <remarks><para><b>Related articles</b>: <a href="685458eb-ffb4-4b03-b3fd-97997a647a7f.htm">How Renderers Work</a>, 
            <a href="929e54d5-f994-4e7e-aa42-c3920a2d7c30.htm">Using Multiple Renderers</a>.</para>
            </remarks>
        </member>
        <member name="P:Telogis.GeoBase.IMap.Satellite">
            <summary>
            Gets or sets whether the map uses satellite imagery.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.IMap.SatelliteLayerName">
            <summary>
            The name of the map layer that will be used to provide satellite imagery.  If 
            specified then the imagery will be taken from the appropriate WMS layer in the
            GeoStream's layers.config file.  Otherwise, standard Telogis GeoBase satellite imagery
            will be used.
            </summary>
            <remarks>
            <para>
            In order to get satellite imagery from a WMS layer, this property must be specified and
            Satellite must be true.
            </para>
            <para>
            "on", "off", "true" and "false" cannot be used as WMS satellite layer names.
            </para>
            </remarks>
        </member>
        <member name="P:Telogis.GeoBase.IMap.MapQuality">
            <summary>
            Gets or sets the current <see cref="P:Telogis.GeoBase.IMap.MapQuality"/> for this map.
            </summary>
            <remarks>Refer <see cref="T:Telogis.GeoBase.MapQuality"/>.</remarks>
        </member>
        <member name="P:Telogis.GeoBase.IMap.Style">
            <summary>
            Gets or sets the current <see cref="T:Telogis.GeoBase.MapStyle"/> for this map.
            </summary>
            <remarks>Refer <see cref="T:Telogis.GeoBase.MapStyle"/>.</remarks>
        </member>
        <member name="P:Telogis.GeoBase.IMap.MinZoom">
            <summary>
            Gets or sets the Minimum zoom level for this map. 
            </summary>
            <remarks>The zoom height is calculated from the distance between the left and right
            edges of the visible map (measured in degrees), multiplied by 50: 
            <i>zoom = distance * 50</i>. The zoom must be no less than 0.001 and 
            must be no greater than 18000 (as the earth has 360 degrees in circumference).
            </remarks>
        </member>
        <member name="P:Telogis.GeoBase.IMap.MaxZoom">
            <summary>
            Gets or sets the maximum zoom level for this map.
            </summary>
            <remarks>The zoom height is calculated from the distance between the left and right
            edges of the visible map (measured in degrees), multiplied by 50: 
            <i>zoom = distance * 50</i>. The zoom must be no less than 0.001 and 
            must be no greater than 18000 (as the earth has 360 degrees in circumference).
            </remarks>
        </member>
        <member name="M:Telogis.GeoBase.AbstractMap.GetMap">
            <summary>
            Implemented by derived classes to generate an <see cref="T:System.Drawing.Image"/> 
            of the map.
            </summary>
            <remarks>The Image is generated using the current <see cref="P:Telogis.GeoBase.Map.Center"/>, 
            <see cref="P:Telogis.GeoBase.Map.Size"/> and <see cref="P:Telogis.GeoBase.Map.Zoom"/>
            </remarks>
            <returns>A 32bpp <see cref="T:System.Drawing.Image"/></returns>
        </member>
        <member name="M:Telogis.GeoBase.AbstractMap.GetMap(System.Boolean,Telogis.GeoBase.MapProgress,System.Boolean@)">
            <summary>
            Implemented by derived classes to generate an <see cref="T:System.Drawing.Image"/> 
            of the map <b>for GeoStream applicatons</b>.
            </summary>
            <remarks>The Image is generated using the current <see cref="P:Telogis.GeoBase.Map.Center"/>, 
            <see cref="P:Telogis.GeoBase.Map.Size"/> and <see cref="P:Telogis.GeoBase.Map.Zoom"/>
            </remarks>
            <param name="isAsync">When <b>true</b> the map is requested asynchronously.</param>
            <param name="progressDelegate">Used to update the progress as the map is being drawn.
                <i>Only used for asynchronous maps.</i></param>
            <param name="done">Indicates when the map has been drawn (evaluates to <b>true</b>).</param>
            <returns>A 32bpp <see cref="T:System.Drawing.Image"/></returns>
        </member>
        <member name="M:Telogis.GeoBase.AbstractMap.CancelAsync">
            <summary>
            Implemented by derived classes to cancel an active pending 
            asynchronous map request (such as used by GeoStream clients).
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.AbstractMap.LatLontoXY(System.Int32@,System.Int32@,Telogis.GeoBase.LatLon)">
            <summary>
            Implemented by derived classes to convert a <see cref="T:Telogis.GeoBase.LatLon"/>
            to X,Y coordinates.
            </summary>
            <remarks>
            Because the projection of the earth is curved this function should be used to
            translate from <see cref="T:Telogis.GeoBase.LatLon"/> (map) to X,Y (screen) coordinates.
            <seealso cref="M:Telogis.GeoBase.Map.LatLontoXY(System.Int32@,System.Int32@,Telogis.GeoBase.LatLon)"/>
            </remarks>
            <param name="x">x-coordinate for the given <see cref="T:Telogis.GeoBase.LatLon"/>.</param>
            <param name="y">y-coordinate for the given <see cref="T:Telogis.GeoBase.LatLon"/>.</param>
            <param name="loc">the LatLon to convert to X,Y (screen) coordinates.</param>
            <returns>A <see cref="T:Telogis.GeoBase.LatLon"/> to convert.</returns>
        </member>
        <member name="M:Telogis.GeoBase.AbstractMap.XYtoLatLon(System.Int32,System.Int32)">
            <summary>
            Implemented by derived classes to convert X,Y (screen) coordinates to 
            <see cref="T:Telogis.GeoBase.LatLon"/> (map) coordinates.
            </summary>
            <remarks>
            Because the projection of the earth is curved this function should be used to
            translate from X,Y (screen) coordinates to <see cref="T:Telogis.GeoBase.LatLon"/>.
            <seealso cref="M:Telogis.GeoBase.Map.LatLontoXY(System.Int32@,System.Int32@,Telogis.GeoBase.LatLon)"/>
            </remarks>
            <param name="x">x-coordinate.</param>
            <param name="y">y-coordinate.</param>
            <returns>A <see cref="T:Telogis.GeoBase.LatLon"/> for the given X,Y (screen) coordinates.</returns>
        </member>
        <member name="M:Telogis.GeoBase.AbstractMap.XYtoBoundingBox(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Gets the <see cref="T:Telogis.GeoBase.BoundingBox"/> of two pixel locations, x1,y1 and x2,y2
            </summary>
            <remarks>
            </remarks>
            <param name="x1">The x co-ordinate of the first point to translate.</param>
            <param name="y1">The y co-ordinate of the first point to translate.</param>
            <param name="x2">The x co-ordinate of the second point to translate.</param>
            <param name="y2">The y co-ordinate of the second point to translate.</param>
            <returns>A <see cref="T:Telogis.GeoBase.BoundingBox"/> representing the map co-ordinates of the given points.</returns>
        </member>
        <member name="M:Telogis.GeoBase.AbstractMap.Contains(Telogis.GeoBase.LatLon)">
            <summary>
            Implemented by derived classes to evaluate whether a given coordinate
            (as a <see cref="T:Telogis.GeoBase.LatLon"/>) lies within the map.
            </summary>
            <param name="aPoint">A <see cref="T:Telogis.GeoBase.LatLon"/> to test.</param>
            <returns>True (coordinate is within the map) or false (coordinate is not 
            within the map)
            </returns>
        </member>
        <member name="M:Telogis.GeoBase.AbstractMap.ZoomToBoundingBox(Telogis.GeoBase.BoundingBox,System.Int32)">
            <summary>
            Implemented by derived classes to zoom and center the map on a
            given <see cref="T:Telogis.GeoBase.BoundingBox"/>.
            </summary>
            <param name="abox">A <see cref="T:Telogis.GeoBase.BoundingBox"/> to zoom and 
            center on</param>
            <param name="buffer">Sets the visible distance (in pixels) between the edge 
            of the zoomed map and <b>abox</b>.</param>
        </member>
        <member name="M:Telogis.GeoBase.AbstractMap.SetProperty(System.String,System.Object)">
            <summary>
            Derived classes may implement this to set internal properties of the map.
            </summary>
            <param name="name">Name of the property</param>
            <param name="prop_value">Value to set the property</param>
            <returns></returns>
        </member>
        <member name="M:Telogis.GeoBase.AbstractMap.Dispose">
            <summary>
            Implemented by derived classes to dispose of this map.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.AbstractMap.Heading">
            <summary>
            Implemented by derived classes to get and set the heading of the map.
            </summary>
            <remarks>The <see cref="P:Telogis.GeoBase.AbstractMap.Heading"/> controls the orientation of the map. It is 
            measured in degrees - where a heading of zero degrees represents due north.
            </remarks>
        </member>
        <member name="P:Telogis.GeoBase.AbstractMap.Perspective">
            <summary>
            Gets or sets the map drawing perspective if supported by the map
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.AbstractMap.Busy">
            <summary>
            Implemented by derived classes to indicate if this map is 
            busy processing an asynchronous map request. 
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.AbstractMap.Center">
            <summary>
            Implemented by derived classes to get and set the current (visible) <b>Center</b> 
            of the map (as a <see cref="T:Telogis.GeoBase.LatLon"/>). 
            </summary>
            <remarks>A call to <see cref="M:Telogis.GeoBase.Map.GetMap"/> will return an 
            image of the map centered on this point.
            </remarks>
        </member>
        <member name="P:Telogis.GeoBase.AbstractMap.Progressive">
            <summary>
            Whether the map should be drawn in progressive mode, a mode designed for a MapCtrl that
            is being used in a navigation context - where the bounding box of the map does not
            change a lot from one rendering to the next.
            </summary>
            <remarks>
            In non-progressive mode, each time the map is rendered the polygons, lines, points and
            streets are queried afresh from the data file.  In progressive mode, polygons and
            streets are only queried from the data file on every alternate rendering.  On
            renderings when they are not queried, the only features that are drawn are those that
            were drawn the previous time the map was rendered.  This causes a performance
            improvement.
            </remarks>
        </member>
        <member name="P:Telogis.GeoBase.AbstractMap.Size">
            <summary>
            Implemented by derived classes to get and set the map size in pixels. 
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.AbstractMap.Projected">
            <summary>
            Implemented by derived classes to get and set the projection state of the map.
            </summary>
            <remarks>
            The projection state is automatically updated when this property is set.
            </remarks>
        </member>
        <member name="P:Telogis.GeoBase.AbstractMap.Zoom">
            <summary>
            Implemented by derived classes to get and set the zoom height of the map.
            </summary>
            <remarks><para>The zoom height is calculated from the distance between the left and right
            edges of the visible map (<i>distance</i>, measured in degrees) multiplied by 50:</para>
            <para><center><i>zoom</i> = <i>distance</i> * 50</center></para>
            <para>The zoom must be no less than 0.001 and must be no greater than 18000 (as the earth 
            has 360 degrees in circumference).</para>
            <para>Note that <see cref="P:Telogis.GeoBase.AbstractMap.Zoom"/> will affect the <see cref="P:Telogis.GeoBase.AbstractMap.PixelSizeMiles"/> and 
            <see cref="P:Telogis.GeoBase.AbstractMap.PixelSizeMeters"/> values.</para>
            </remarks>
        </member>
        <member name="P:Telogis.GeoBase.AbstractMap.PixelSizeMiles">
            <summary>
            Implemented by derived classes to get the number of miles 
            each pixel of the map represents.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.AbstractMap.PixelSizeMeters">
            <summary>
            Implemented by derived classes to get the the number of 
            meters each pixel of the map represents.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.AbstractMap.Renderer">
            <summary>
            Implemented by derived classes to get and set a <see cref="T:Telogis.GeoBase.IMapRenderer"/>.
            </summary>
            <remarks>When the map is rendered this IMapRenderer will be called.</remarks>
        </member>
        <member name="P:Telogis.GeoBase.AbstractMap.MapQuality">
            <summary>
            Implemented by derived classes to get and set the quality of the map, as a 
            <see cref="T:Telogis.GeoBase.MapQuality"/>.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.AbstractMap.Style">
            <summary>
            Implemented by derived classes to get and set the style of the map, as a 
            <see cref="T:Telogis.GeoBase.MapStyle"/>.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.AbstractMap.RenderLabels">
            <summary>
            Implemented by derived classes to control whether labels are rendered on the map.
            </summary>
            <remarks>
            <para>This method should be used by derived classes to disable the rendering of
            labels. For example: when a map is zoomed out, labels can make the 
            view of the map cluttered. In this instance, this method could be called to
            disable the rendering of labels.</para>
            <para>When <see cref="P:Telogis.GeoBase.AbstractMap.RenderLabels"/> is <b>false</b> labels should not be rendered.</para>
            </remarks>
        </member>
        <member name="P:Telogis.GeoBase.AbstractMap.MinZoom">
            <summary>
            Gets or sets the minimum zoom height of the map. Defaults to 0.1.
            </summary>
            <remarks>
            <para>This method should be used to restrict the maximum extent to which
            the map can be zoomed in.</para>
            The minumum value for this property is 0.07 (see <see cref="P:Telogis.GeoBase.AbstractMap.Zoom"/>).
            </remarks>
        </member>
        <member name="P:Telogis.GeoBase.AbstractMap.MaxZoom">
            <summary>
            Gets or sets the maximum zoom height of the map. Defaults to 18000.
            </summary>
            <remarks>
            <para>This method should be used to restrict the maximum extent to which
            the map can be zoomed out.</para>
            The maximum value for this property is 18000 (see <see cref="P:Telogis.GeoBase.AbstractMap.Zoom"/>).
            </remarks>
        </member>
        <member name="M:Telogis.GeoBase.LocalMap.#ctor">
            <summary>
            Create with default size, center and zoom level.
            </summary>
            <remarks>
            Default size: 100 x 100<br/>
            Default zoom: <see cref="P:Telogis.GeoBase.Map.MaxZoom"/><br/>
            Default center: 40, -99<br/>
            </remarks>
        </member>
        <member name="M:Telogis.GeoBase.LocalMap.#ctor(Telogis.GeoBase.LatLon,System.Int32,System.Int32,System.Double)">
            <summary>
            Create a map with the given parameters.
            </summary>
            <param name="Center">A <see cref="T:Telogis.GeoBase.LatLon"/> specifying the point
            that the map should be centered upon when created.</param>
            <param name="Width">The width of this map in pixels.</param>
            <param name="Height">The height of this map in pixels.</param>
            <param name="Zoom">The zoom level that this map should be set to when created.
            Somewhere between <see cref="P:Telogis.GeoBase.Map.MinZoom"/> and <see cref="P:Telogis.GeoBase.Map.MaxZoom"/>.
            </param>
        </member>
        <member name="M:Telogis.GeoBase.LocalMap.GetMap">
            <summary>
            Generate an <see cref="T:System.Drawing.Image"/> of the map using the current <see cref="P:Telogis.GeoBase.Map.Center"/>, <see cref="P:Telogis.GeoBase.Map.Size"/>, and <see cref="P:Telogis.GeoBase.Map.Zoom"/>.		
            </summary>
            <returns>A 32bpp <see cref="T:System.Drawing.Image"/>.</returns>
        </member>
        <member name="M:Telogis.GeoBase.LocalMap.SetMaskAndOverlay(System.IntPtr,System.IntPtr)">
            <summary>
            If you are drawing a map and want to share a mask and overlay then you can supply it here.
            The supplied mask and overlay is expected to only exist the lifetime of one draw if you are
            getting it off another map.
            </summary>
            <param name="mask">The pointer to the mask.</param>
            <param name="overlay">The pointer to the overlay.</param>
        </member>
        <member name="M:Telogis.GeoBase.LocalMap.Contains(Telogis.GeoBase.LatLon)">
            <summary>
            Check whether the map contains the given <see cref="T:Telogis.GeoBase.LatLon"/>.
            </summary>
            <remarks></remarks>
            <param name="aPoint"></param>
            <returns></returns>
        </member>
        <member name="M:Telogis.GeoBase.LocalMap.GetCheckedZoom(System.Double,System.Drawing.Size,Telogis.GeoBase.MapState,Telogis.GeoBase.LatLon)">
            <summary>
            Sets the underlying map's zoom to either the supplied zoom or the minimum zoom that can
            be safely set for a map of the given size, whichever zoom is larger.  The zoom that's
            set might still result in a map covering an area of zero width, so EnsureNotTooZoomedIn
            should be called before returning to user code.
            </summary>
            <param name="newZoom">The intended new map zoom, which should have been clamped if
            supplied directly by the user.</param>
            <param name="newSize">The intended size of the map.</param>
            <param name="state">The state of the existing map. Not modified by this function.</param>
            <param name="projCenter"></param>		
        </member>
        <member name="M:Telogis.GeoBase.LocalMap.ZoomToBoundingBox(Telogis.GeoBase.BoundingBox,System.Int32)">
            <summary>
            Zooms and centers the map to the given <see cref="T:Telogis.GeoBase.BoundingBox"/>.
            </summary>
            <remarks>
            Use to zoom the map to display the area of the given <see cref="T:Telogis.GeoBase.BoundingBox"/>.<br/>
            Use the <b>buffer_pixels</b> parameter to set the amount by which <b>abox</b> is inside the resulting
            visible map area. For example, setting <b>buffer_pixels</b> to 10 results in a map where the edges of
            <b>abox</b> are 10 pixels in from the edge of the map.
            </remarks>
            <param name="abox">The <see cref="T:Telogis.GeoBase.BoundingBox"/> to zoom and center on.</param>
            <param name="buffer">The number of pixels between the edge of <b>abox</b> and the edge of the visible map area. See remarks.</param>
        </member>
        <member name="M:Telogis.GeoBase.LocalMap.LatLontoXY(System.Int32@,System.Int32@,Telogis.GeoBase.LatLon)">
            <summary>
            Convert from a <see cref="T:Telogis.GeoBase.LatLon"/> to an X,Y location on the map.
            </summary>
            <remarks>
            Because the projection is curved, this function should be used when translating from a <see cref="T:Telogis.GeoBase.LatLon"/>
            to X,Y co-ordinates.
            <seealso cref="M:Telogis.GeoBase.Map.XYtoLatLon(System.Int32,System.Int32)"/>
            </remarks>
            <param name="x">x co-ordinate.</param>
            <param name="y">y co-ordinate.</param>
            <param name="loc"><see cref="T:Telogis.GeoBase.LatLon"/> to convert from.</param>
        </member>
        <member name="M:Telogis.GeoBase.LocalMap.XYtoLatLon(System.Int32,System.Int32)">
            <summary>
            Convert from map X,Y co-ordinates to a <see cref="T:Telogis.GeoBase.LatLon"/>.
            </summary>
            <remarks>
            Because the projection is curved, this function should be used when translating from X,Y to a <see cref="T:Telogis.GeoBase.LatLon"/>.
            <seealso cref="M:Telogis.GeoBase.Map.LatLontoXY(System.Int32@,System.Int32@,Telogis.GeoBase.LatLon)"/>
            </remarks>
            <param name="x">x co-ordinate.</param>
            <param name="y">y co-ordinate/</param>
            <returns>A <see cref="T:Telogis.GeoBase.LatLon"/> for the given X,Y co-ordinates.</returns>
        </member>
        <member name="M:Telogis.GeoBase.LocalMap.SetProperty(System.String,System.Object)">
            <summary>
            Sets internal map parameters.
            </summary>
            <param name="name">Parameter to set.</param>
            <param name="prop_value">Value to set the parameter to.</param>
        </member>
        <member name="P:Telogis.GeoBase.LocalMap.Center">
            <summary>
            Gets or sets the current center point of the map.
            </summary>
            <remarks>
            This <b>LatLon</b> represents the current center
            of the map. A call to <see cref="M:Telogis.GeoBase.Map.GetMap"/> will return
            an image of the map, centered on this point.
            </remarks>
        </member>
        <member name="P:Telogis.GeoBase.LocalMap.CenterPixelOffset">
            <summary>
            Used to line up tiles. Sets an offset <see cref="T:System.Drawing.Point"/>, in pixels, for the center of this Map tile, relative to the <see cref="P:Telogis.GeoBase.Map.Center"/> point of the center Map tile.
            </summary>
            <remarks>
            <para>
            CenterPixelOffset allows you to treat the Map object conceptually as an infinitely
            large map. The map is centered around the <see cref="P:Telogis.GeoBase.LocalMap.Center"/> point. <see cref="M:Telogis.GeoBase.LocalMap.GetMap"/>
            returns a portion of the infinite map, <b>Width</b> wide and <b>Height</b>
            high. By setting CenterPixelOffset the portion of the underlying map that is
            rendered by <see cref="M:Telogis.GeoBase.LocalMap.GetMap"/> can be controlled.
            This allows you to request several smaller maps from the same <see cref="T:Telogis.GeoBase.Map"/>
            object and then reconstruct a larger map from these tiles. This is especially
            useful in web applications.
            </para>
            </remarks>
            <example>
            <para>
            The diagram below shows the underlying <see cref="T:Telogis.GeoBase.Map"/> object. Overlayed
            are four maps that would be generated by setting the <b>Width</b> and
            <b>Height</b> to 100 each, then adjusting the <see cref="P:Telogis.GeoBase.LocalMap.CenterPixelOffset"/>
            for each. Map 1 has the <see cref="P:Telogis.GeoBase.LocalMap.CenterPixelOffset"/> set to (0,0), so it
            renders a map exactly as normal, centered around it's <see cref="P:Telogis.GeoBase.LocalMap.Center"/>.
            Map 2 has the same <see cref="P:Telogis.GeoBase.LocalMap.Center"/> as Map 1 but since it has <see cref="P:Telogis.GeoBase.LocalMap.CenterPixelOffset"/>
            set to (-100,0) it renders an area to the left of Map 1.
            </para>
            <para>
            Similarly, Map 4 is positioned below Map 1 as it has the same <see cref="P:Telogis.GeoBase.LocalMap.Center"/>
            but a <see cref="P:Telogis.GeoBase.LocalMap.CenterPixelOffset"/> of (0,100) - no sideways shift, but 100 pixels lower.
            </para>
            <para>
            <img src="images/pixelOffsetDiagram.png"></img>
            </para>
            </example>
        </member>
        <member name="P:Telogis.GeoBase.LocalMap.MapQuality">
            <summary>
            Gets or sets the <see cref="T:Telogis.GeoBase.MapQuality">quality</see> at which this Map will be rendered.
            </summary>
            <remarks>
            See <see cref="T:Telogis.GeoBase.MapQuality"/> for more information.
            </remarks>
        </member>
        <member name="P:Telogis.GeoBase.LocalMap.PixelSizeMeters">
            <summary>
            Gets the number of meters each pixel of the map represents.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.LocalMap.PixelSizeMiles">
            <summary>
            Gets the number of miles each pixel of the map represents.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.LocalMap.Projected">
            <summary>
            Gets or sets whether this map is projected.
            </summary>
            <returns><b>true</b> is the map is projected, <b>false</b> if it is not.</returns>
            <remarks>The projection is updated automatically when this property is set.</remarks>
        </member>
        <member name="P:Telogis.GeoBase.LocalMap.ProjectionCentre">
            <summary>
            Represents the center of the map projection. By default this value is <b>null</b> and the center is always the center of the visible map area.
            </summary>
            <remarks>
            By setting ProjectionCentre one is able to lock the center of the map projection. Rather than updating the projection to center on
            the center of the displayed map, the center will remain fixed as the map is panned around. As the map is panned further
            away from the center the display will appear more skewed, however the constant center allows sections of
            map to be stitched together. This is only possible when the center is locked, as otherwise the automatically reprojected map
            segments will not match up.<br/>
            </remarks>
        </member>
        <member name="P:Telogis.GeoBase.LocalMap.Renderer">
            <summary>
            An <see cref="T:Telogis.GeoBase.IMapRenderer"/> that will be called when the map is rendered.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.LocalMap.SatelliteLayerName">
            <summary>
            The name of the map layer that will be used to provide satellite imagery.  If 
            specified then the imagery will be taken from the appropriate WMS layer in the
            GeoStream's layers.config file.  Otherwise, standard Telogis GeoBase satellite imagery
            will be used.
            </summary>
            <remarks>
            <para>
            In order to get satellite imagery from a WMS layer, this property must be specified and
            Satellite must be true.
            </para>
            <para>
            "on", "off", "true" and "false" cannot be used as WMS satellite layer names.
            </para>
            </remarks>
        </member>
        <member name="P:Telogis.GeoBase.LocalMap.Size">
            <summary>
            Gets or sets the map size in pixels.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.LocalMap.Style">
            <summary>
            The map style used to draw the map
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.LocalMap.Warnings">
            <summary>
            The Warnings generated during the last map render
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.LocalMap.Zoom">
            <summary>
            Gets or sets the zoom height of the map.
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.LocalMap.LinkCategoryDelegate">
            <summary>
            This is called by VMInterface.FilterLinks to obtain the category for each link.
            The category for each link should be written back to the LinkInfo object.
            No other members should be modified. This is usually used in conjunction with
            traffic rendering.
            </summary>
            <param name="linkInfo">A pointer to zero or more LinkInfo structs.</param>
            <param name="numLinks">The number of LinkInfo structs.</param>
        </member>
        <member name="T:Telogis.GeoBase.GraphicsEngine">
            <summary>
            The Graphics Engine used to draw the maps.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.GraphicsEngine.GDI">
            <summary>
            Use GDI
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.GraphicsEngine.GDIPlus">
            <summary>
            Use GDI+
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.GraphicsFlags">
            <summary>
            Flags used to control anti-aliasing.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.GraphicsFlags.None">
            <summary>
            Don't anti-alias the maps.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.GraphicsFlags.AntiAlias">
            <summary>
            Anti-alias the maps.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.GraphicsFlags.PerspectiveLines">
            <summary>
            Perspective lines for 2.5D maps
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.GraphicsFlags.WuLine">
            <summary>
            Anti-alias of lines using Xiaolin Wu's algorithm
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.ArrayUtils.ConvertAll``2(``0[],Telogis.GeoBase.Function{``1,``0})">
            <summary>
            Takes an array and calls converter on all its elements, and returns an array of the same size that
            contains the return value of converter for each element in the array
            </summary>
            <typeparam name="TSource">The source array type</typeparam>
            <typeparam name="TResult">The result array type</typeparam>
            <param name="array">The array whose elements are to be converted</param>
            <param name="converter">The function to call for each array element</param>
            <returns>An array of elements returned by the converter</returns>
        </member>
        <member name="M:Telogis.GeoBase.ArrayUtils.RemoveDuplicates``2(``0[],Telogis.GeoBase.Function{``1,``0})">
            <summary>
            Removes duplicate entries from an array. Duplicates are defined as multiple
            items within the array that have the same identity, as defined by the
            identity function.
            This function also assumes that the sort order of the data does not matter.
            If duplicate items are different, only the last duplicate of duplicates will
            remain in the array.
            </summary>
            <typeparam name="T">Type of item to be returned</typeparam>
            <typeparam name="TKey">Type of identity of each function (must have an
            implementation of hashcode that would separate them from each other, 
            if it is not already a primitive datatype like string, int, float or bool)
            </typeparam>
            <param name="items">The array from which duplicates are to be removed</param>
            <param name="identity">The function that extracts the identity value of
            the items
            </param>
            <returns>An array that has no duplicates as defined by identity</returns>
        </member>
        <member name="T:Telogis.GeoBase.Function`1">
            <summary>
            Delegate that returns a value of type T
            </summary>
            <typeparam name="T">Return Type</typeparam>
            <returns></returns>
        </member>
        <member name="T:Telogis.GeoBase.Function`2">
            <summary>
            Delegate that takes argument of type T1 and returns a value of type T
            </summary>
            <typeparam name="T">Return Type</typeparam>
            <typeparam name="T1">Argument Type</typeparam>
            <param name="arg1">Argument 1</param>
            <returns></returns>
        </member>
        <member name="T:Telogis.GeoBase.Function`3">
            <summary>
            Delegate that takes arguments of types T1, T2, and returns a value of type T
            </summary>
            <typeparam name="T">Return Type</typeparam>
            <typeparam name="T1">Type of first argument.</typeparam>
            <typeparam name="T2">Type of second argument.</typeparam>
            <param name="arg1">First argument.</param>
            <param name="arg2">Second argument.</param>
            <returns></returns>
        </member>
        <member name="T:Telogis.GeoBase.Traffic.TrafficInfo">
            <summary>
            This class describes a unit of traffic.
            </summary>
            <remarks>
            A traffic unit knows only its speed.
            <para>Related articles: <a href="60998f81-efa9-4743-afcc-6e6f943a4fa1.htm">Routing with Traffic</a>.</para>
            </remarks>
        </member>
        <member name="F:Telogis.GeoBase.Traffic.TrafficInfo.speed">
            <summary>
            The speed of this traffic unit, in miles per hour.
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.Traffic.TrafficInfo.#ctor(System.Int32)">
            <summary>
            Construct a new traffic unit with the given speed (in miles per hour).
            </summary>
            <param name="speed">Speed in miles per hour.</param>
        </member>
        <member name="M:Telogis.GeoBase.Traffic.TrafficInfo.GetSpeed(Telogis.GeoBase.SpeedUnit)">
            <summary>
            Returns the speed of this <b>TrafficInfo</b> in the given units.
            </summary>
            <param name="units"><see cref="T:Telogis.GeoBase.SpeedUnit"/></param>
            <returns>Returns the speed of this <b>TrafficInfo</b> in the given units.</returns>
        </member>
        <member name="T:Telogis.GeoBase.Traffic.InrixIncidentTrafficSource">
            <summary>
            This class supports real-time INRIX V1 incident traffic data.
            </summary>
            <remarks>Incidents include accidents, construction work and 
            major events that impact traffic flow.</remarks>
        </member>
        <member name="M:Telogis.GeoBase.Traffic.InrixIncidentTrafficSource.#ctor(System.Xml.XmlReader)">
            <summary>
            Create a new <see cref="T:Telogis.GeoBase.Traffic.ITrafficSource">TrafficSource</see> from a given
            INRIX V1 real-time incident data source.
            </summary>
            <param name="reader">An XML data stream containing INRIX realtime traffic incident data. <see cref="T:System.Xml.XmlReader"/></param>
        </member>
        <member name="T:Telogis.GeoBase.Adas.AdasQuery">
            <summary>
            The AdasQuery class may be used to obtain ADAS (Advanced Driver Assistance Systems) information for a given
            street link.
            </summary>
            <remarks>
            <para><b>Related articles</b>: <a href="043fa254-8683-47e9-b2db-247065aeb5c7.htm">Routing with ADAS Data</a>.</para>
            </remarks>
        </member>
        <member name="M:Telogis.GeoBase.Adas.AdasQuery.QueryLink(System.UInt64)">
            <summary>
            Retrieve ADAS information for a given street link. The street link
            is specified by linkId.
            </summary>
            <remarks>
            <ul>
                <li>ADAS information currently only includes road slope information. Other
                ADAS information (such as radius of curvature for corners) is expected to
                become available in the future.</li>    
                <li>Often only major roads have ADAS information. Where ADAS information
                is not available for a given street link a zero-length array will be returned.</li>
                <li>Typically the array returned will only have one element. However, in
                the case that overlapping (or multiple) sets of ADAS data are available 
                this array may contain multiple elements.</li>
            </ul>
            </remarks>
            <param name="linkid">ID of the street link.</param>
            <returns>An array of <see cref="T:Telogis.GeoBase.Adas.AdasInfo"/> for the given street link.</returns>
        </member>
        <member name="T:Telogis.GeoBase.Adas.AdasInfo">
            <summary>
            Represents ADAS(Advanced Driver Assistance Systems) information for a street link.
            </summary>
            <remarks>
            <para><b>Related articles</b>: <a href="043fa254-8683-47e9-b2db-247065aeb5c7.htm">Routing with ADAS Data</a>.</para>
            </remarks>
        </member>
        <member name="M:Telogis.GeoBase.Adas.AdasInfo.#ctor(System.UInt64,System.UInt64[],System.Single[])">
            <summary>
            Creates a new instance of AdasInfo.
            </summary>
            <param name="link">The link ID.</param>
            <param name="locations">Array of locations (expressed as Telogians).</param>
            <param name="slopedata">Array of slope data.</param>
        </member>
        <member name="P:Telogis.GeoBase.Adas.AdasInfo.LinkID">
            <summary>
            Gets the unique value used to identify this street link.
            </summary>
            <remarks>
            <para><b>Related articles</b>: <a href="043fa254-8683-47e9-b2db-247065aeb5c7.htm">Routing with ADAS Data</a>.</para>
            </remarks>
        </member>
        <member name="P:Telogis.GeoBase.Adas.AdasInfo.Slopes">
            <summary>
            Gets the Slopes array.
            Each element of the Slopes array describes the slope of the road
            (parallel to the direction of travel) at location specified by the
            corresponding element in the <see cref="P:Telogis.GeoBase.Adas.AdasInfo.Points"/> array. The slope
            is measured in degrees.
            </summary>
            <remarks>
            Slopes[n] is the slope of the road (parallel to the direction of travel)
            at location Points[n].
            </remarks>
        </member>
        <member name="P:Telogis.GeoBase.Adas.AdasInfo.Points">
            <summary>
            Gets the Points array.  This
            represents a series of measurement points along the street link. The slope 
            of the road at location Points[n] can be found at Slopes[n].
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.Mobile.PInvoke.SystemParametersInfo4Strings(System.UInt32,System.UInt32,System.Text.StringBuilder,System.UInt32)">
            <summary>
            to find whether you are running on a Smartphone or a Pocket PC
            </summary>
            <param name="uiAction"></param>
            <param name="uiParam"></param>
            <param name="pvParam"></param>
            <param name="fWinIni"></param>
            <returns></returns>
        </member>
        <member name="M:Telogis.GeoBase.Mobile.PInvoke.GetLastError">
            <summary>
            Get the last error after a call to WinAPI fails
            </summary>
            <returns>An error code explaining the last failed call to WinAPI</returns>
        </member>
        <member name="M:Telogis.GeoBase.Mobile.PInvoke.GetPlatformType">
            <summary>
            Get Platform Type: Pocket Pc or Windows CE
            </summary>
            <returns></returns>
        </member>
        <member name="T:Telogis.GeoBase.Mobile.PlatformDetection">
            <summary>
            Platform Detections methods
            </summary>
        </member>
        <member name="T:Telogis.Mobile.PlatformDetection">
            <summary>
            Platform Detections methods
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.Routing.VehicleSpec">
            <summary>
            Used to describe a vehicle's specifications.
            </summary>
            <remarks>
            <para>Each Route, Navigator and NavigationManager has a  <see cref="T:Telogis.GeoBase.Routing.VehicleSpec"/>. 
            When optimizing a route, or obtaining driving directions the Route, Navigator or NavigationManager will 
            consider the attributes specified in its VehicleSpec property to ensure that the route is safe.</para>
            <para>Use the <see cref="M:Telogis.GeoBase.Routing.VehicleSpec.SetLoadInfo(System.Int32,Telogis.GeoBase.Routing.LoadType,System.UInt32)"/> method to configure the load that the vehicle is carrying. This load
            may include HAZMAT designations. See <see cref="T:Telogis.GeoBase.Routing.LoadType"/> for possible designations.</para>
            <para>You may use the <see cref="M:Telogis.GeoBase.MathUtil.ConvertUnits(System.Double,Telogis.GeoBase.DistanceUnit,Telogis.GeoBase.DistanceUnit)"/> 
            to convert between distance units.
            </para>
            Note that it may be necessary to call <see cref="M:Telogis.GeoBase.Routing.IRoute.ForceRecalculate">ForceRecalculate</see> 
            if a vehicle's specifications are changed after a route has been calculated.
            <para><b>Related articles</b>: <a href="a2c819b0-e7ee-4fb5-8a05-1a1869978974.htm">Using Truck Attributes</a>.</para>
            </remarks>
            <example>
            <code lang="C#">
            VehicleSpec vs = new VehicleSpec();
            vs.VehicleType = VehicleType.StraightTruck; // straight flat-bed truck
            vs.Height_cm = 467; // about 15 feet
            vs.SetLoadInfo(0, LoadType.Forestry, 2000); // 2 tonnes of timber
            vs.SetLoadInfo(1, LoadType.Hazmat_3, 80); // 80 kg of paint 
            
            myRoute.VehicleSpec = vs;
            // now, when we call myRoute.GetDirections() the route will be calculated
            // for a 15'-high truck carrying 2 tonnes of timber and 80 kg of paint...
            </code></example>
        </member>
        <member name="F:Telogis.GeoBase.Routing.VehicleSpec.LoadLength">
            <summary>
            Maximum number of allowed loads.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Routing.VehicleSpec.Height_cm">
            <summary>
            Maximum height of the vehicle, measured in centimeters.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Routing.VehicleSpec.Width_cm">
            <summary>
            Maximum width of the vehicle, measured in centimeters.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Routing.VehicleSpec.Length_cm">
            <summary>
            Maximum length of the vehicle, measured in centimeters.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Routing.VehicleSpec.MaxTrailerLength_cm">
            <summary>
            Maximum length of the trailer, measured in centimeters.
            </summary>
            <remarks>This may not be applicable to all vehicle types.</remarks>
        </member>
        <member name="F:Telogis.GeoBase.Routing.VehicleSpec.TractorLength_cm">
            <summary>
            Maximum length of the tractor, measured in centimeters.
            </summary>
            <remarks>This may not be applicable to all vehicle types.</remarks>
        </member>
        <member name="F:Telogis.GeoBase.Routing.VehicleSpec.KingpinToLastAxle_cm">
            <summary>
            Distance from the kingpin to the last trailer axle, measured in centimeters.
            </summary>
            <remarks>This may not be applicable to all vehicle types.</remarks>
        </member>
        <member name="F:Telogis.GeoBase.Routing.VehicleSpec.KingpinToMiddleOfLastTandem_cm">
            <summary>
            Distance from the kingpin to the center of the last tandem axle, measured in centimeters.
            </summary>
            <remarks>This may not be applicable to all vehicle types.</remarks>
        </member>
        <member name="F:Telogis.GeoBase.Routing.VehicleSpec.KingpinToEnd_cm">
            <summary>
            Distance from the kingpin to the end of the trailer, measured in centimeters.
            </summary>
            <remarks>This may not be applicable to all vehicle types.</remarks>
        </member>
        <member name="F:Telogis.GeoBase.Routing.VehicleSpec.GrossWeight_kg">
            <summary>
            Total weight of the vehicle (including fuel, cargo and passengers), measured in kilograms.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Routing.VehicleSpec.MaxAxleWeight_kg">
            <summary>
            Maximum (distributed) weight supported by an axle, measured in kilograms.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Routing.VehicleSpec.UnladenWeight_kg">
            <summary>
            Unladen (without cargo) weight of the vehicle, measured in kilograms.
            </summary>
            <remarks>
            <i><see cref="F:Telogis.GeoBase.Routing.VehicleSpec.GrossWeight_kg"/> - <see cref="F:Telogis.GeoBase.Routing.VehicleSpec.UnladenWeight_kg"/> = LoadWeight.</i>
            </remarks>
        </member>
        <member name="F:Telogis.GeoBase.Routing.VehicleSpec.MaxTandemAxleWeight_kg">
            <summary>
            Maximum (distributed) weight supported by a tandem axle, measured in kilograms.
            </summary>
            <remarks>
            <para>A 'tandem axle' is a set of two axles.</para>
            <para>This may not be applicable to all vehicle types.</para>
            </remarks>
        </member>
        <member name="F:Telogis.GeoBase.Routing.VehicleSpec.MaxTridemAxleWeight_kg">
            <summary>
            Maximum (distributed) weight supported by a tridem axle, measured in kilograms.
            </summary>
            <remarks>
            <para>A 'tridem axle' is a set of three axles.</para>
            <para>This may not be applicable to all vehicle types.</para>
            </remarks>
        </member>
        <member name="F:Telogis.GeoBase.Routing.VehicleSpec.WeightPerInchWidthOfTire_kg">
            <summary>
            Maximum weight per inch of width of tire. This is a measure of the maximum pressure 
            exterted by this vehicle onto the road surface.
            </summary>
            <remarks>This may not be applicable to all vehicle types.</remarks>
        </member>
        <member name="F:Telogis.GeoBase.Routing.VehicleSpec.NumberOfAxles">
            <summary>
            Total number of axles on this vehicle (including trailers).
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Routing.VehicleSpec.NumberOfAxlesOnTrailers">
            <summary>
            Sum total of the number of axles on each trailer.
            </summary>
            <remarks>This may not be applicable to all vehicle types.</remarks>
        </member>
        <member name="F:Telogis.GeoBase.Routing.VehicleSpec.NumberOfWheels">
            <summary>
            Total number of wheels on this vehicle.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Routing.VehicleSpec.NumberOfTrailers">
            <summary>
            Total number of trailers pulled by this vehicle.
            </summary>
            <remarks>This may not be applicable to all vehicle types.</remarks>
        </member>
        <member name="F:Telogis.GeoBase.Routing.VehicleSpec.VehicleType">
            <summary>
            Classification of this vehicle, as a <see cref="T:Telogis.GeoBase.Routing.VehicleType"/>.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Routing.VehicleSpec.LoadCount">
            <summary>
            Number of Loads carried by this vehicle.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Routing.VehicleSpec.Load">
            <summary>
            Loads carried by this vehicle.
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.Routing.VehicleSpec.GetLoadInfo(System.Int32,Telogis.GeoBase.Routing.LoadType@,System.UInt32@)">
            <summary>
            Returns the <see cref="T:Telogis.GeoBase.Routing.LoadType">type</see> and weight (measured in kilograms)
            for one of the loads that the vehicle (represented by this <see cref="T:Telogis.GeoBase.Routing.VehicleSpec"/>) object
            is carrying.
            </summary>
            <param name="loadNum">A value from 0 to <see cref="F:Telogis.GeoBase.Routing.VehicleSpec.LoadLength">LoadLength</see> (excluding) identifying the load. 
            A vehicle may carry up to <see cref="F:Telogis.GeoBase.Routing.VehicleSpec.LoadLength">LoadLength</see> loads.</param>
            <param name="type">A <see cref="T:Telogis.GeoBase.Routing.LoadType"/> classification, representing the type of the given load.</param>
            <param name="kg">The weight of the given load, measured in kilograms.</param>
        </member>
        <member name="M:Telogis.GeoBase.Routing.VehicleSpec.SetLoadInfo(System.Int32,Telogis.GeoBase.Routing.LoadType,System.UInt32)">
            <summary>
            Sets the <see cref="T:Telogis.GeoBase.Routing.LoadType">type</see> and weight (measured in kilograms)
            of one of the loads that the vehicle (represented by this <see cref="T:Telogis.GeoBase.Routing.VehicleSpec"/>) object
            is carrying.
            </summary>
            <param name="loadNum">A value from 0 to <see cref="F:Telogis.GeoBase.Routing.VehicleSpec.LoadLength">LoadLength</see> (exclusive) identifying the load. 
            A vehicle may carry up to <see cref="F:Telogis.GeoBase.Routing.VehicleSpec.LoadLength">LoadLength</see> loads.</param>
            <param name="type">A <see cref="T:Telogis.GeoBase.Routing.LoadType"/> classification, representing the type of the this load.</param>
            <param name="kg">The weight of this load, measured in kilograms.</param>
        </member>
        <member name="M:Telogis.GeoBase.Routing.VehicleSpec.CheckLoadNumRange(System.Int32)">
            <summary>
            Checks if the LoadNumber is in the specified Range. Otherwise a InvalideLoadNumberException is thrown.
            </summary>
            <param name="LoadNumber">The Loadnumber to check.</param>
        </member>
        <member name="T:Telogis.GeoBase.Routing.LoadType">
            <summary>
            Describes a load carried by a vehicle. Hazardous loads should be categorized using
            a HAZMAT category (such as <see cref="F:Telogis.GeoBase.Routing.LoadType.Hazmat_1"/>).
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Routing.LoadType.None">
            <summary>
            An empty load
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Routing.LoadType.Hazardous">
            <summary>
            Some form of hazardous load. You may wish to identify the particular hazard
            more precisely using a HAZMAT load type (such as <see cref="F:Telogis.GeoBase.Routing.LoadType.Hazmat_1"/>) or 
            simply <see cref="F:Telogis.GeoBase.Routing.LoadType.GoodsHarmfulToWater"/>.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Routing.LoadType.Agricultural">
            <summary>
            Agricultural items (such as livestock, feed or produce)
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Routing.LoadType.BuildingMaterials">
            <summary>
            Building materials (for example, timber framing)
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Routing.LoadType.NaturalResource">
            <summary>
            Some form of natural resource (for example, masonry)
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Routing.LoadType.AllHazmat">
            <summary>
            This load contains items from each HAZMAT category
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Routing.LoadType.Hazmat_1">
            <summary>
            Class 1 HAZMAT (explosives)
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Routing.LoadType.Hazmat_2">
            <summary>
            Class 2 HAZMAT (compressed gases)
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Routing.LoadType.Hazmat_3">
            <summary>
            Class 3 HAZMAT (flammable liquids)
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Routing.LoadType.Hazmat_4">
            <summary>
            Class 4 HAZMAT (flammable solids)
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Routing.LoadType.Hazmat_5">
            <summary>
            Class 5 HAZMAT (oxidizers)
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Routing.LoadType.Hazmat_6">
            <summary>
            Class 6 HAZMAT (poisons)
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Routing.LoadType.Hazmat_7">
            <summary>
            Class 7 HAZMAT (radioactive materials)
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Routing.LoadType.Hazmat_8">
            <summary>
            Class 8 HAZMAT (corrosive liquids)
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Routing.LoadType.Hazmat_9">
            <summary>
            Class 9 HAZMAT (miscellaneous, not covered by HAZMAT classes 1-8)
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Routing.LoadType.Hazmat_I">
            <summary>
            Hazardous goods posing an inhalation risk
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Routing.LoadType.SanitaryWaste">
            <summary>
            Sanitary waste
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Routing.LoadType.GoodsHarmfulToWater">
            <summary>
            Goods harmful to water (such as oil)
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Routing.LoadType.Coal">
            <summary>
            Coal
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Routing.LoadType.Forestry">
            <summary>
            Forestry (such as unsawn timber)
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Routing.LoadType.Sand">
            <summary>
            Sand
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Routing.LoadType.Gravel">
            <summary>
            Gravel
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.Routing.VehicleType">
            <summary>
            Describes a type of vehicle
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Routing.VehicleType.Unknown">
            <summary>
            No information about this vehicle is available
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Routing.VehicleType.Auto">
            <summary>
            Automobile
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Routing.VehicleType.Bus">
            <summary>
            Bus
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Routing.VehicleType.Taxi">
            <summary>
            Taxi
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Routing.VehicleType.CarPool">
            <summary>
            Car-pooling vehicle
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Routing.VehicleType.Emergency">
            <summary>
            Emergency vehicle
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Routing.VehicleType.StraightTruck">
            <summary>
            Straight truck (as opposed to a tractor/trailer combination)
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Routing.VehicleType.TractorSemiTrailer">
            <summary>
            A tractor with a single trailer
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Routing.VehicleType.StandardDouble">
            <summary>
            A truck with two trailers
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Routing.VehicleType.IntermediateDouble">
            <summary>
            An intermediate-length truck with two trailers
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Routing.VehicleType.LongDouble">
            <summary>
            A long truck with two trailers
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Routing.VehicleType.Triple">
            <summary>
            A truck with three trailers
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Routing.VehicleType.OtherLCV">
            <summary>
            Other light commercial vehicle
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Routing.VehicleType.Truck">
            <summary>
            Truck, combination of the different truck types
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Routing.VehicleType.All">
            <summary>
            All vehicles
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Routing.VehicleType.AllButEmergency">
            <summary>
            Any vehicle, except for an emergency vehicle
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.Routing.LoadElementType">
            <summary>
            Summarizes the type and weight of one load element
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Routing.LoadElementType.LoadType">
            <summary>
            One of the loads carried by a vehicle, described by a 
            <see cref="T:Telogis.GeoBase.Routing.LoadType"/>. The weight of this load
            is described by <see cref="F:Telogis.GeoBase.Routing.LoadElementType.LoadWeight"/>
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Routing.LoadElementType.LoadWeight">
            <summary>
            Weight of <see cref="F:Telogis.GeoBase.Routing.LoadElementType.LoadType"/>, measured in kilograms
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Routing.TurnMovementEvent.NumLefts">
            <summary>
            The number of left turnings that have preceded this movement
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Routing.TurnMovementEvent.NumRights">
            <summary>
            The number of right turnings that have preceded this movement
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Routing.TurnMovementEvent.idesc">
            <summary>
            The description of this intersection
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.Routing.FreewayEndsNote">
            <summary>
            A Note informing that the freeway ends.
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.Routing.FerryMovement">
            <summary>
            A movement that occurs when embarking/disembarking a ferry.
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.ConfidencePart">
            <summary>
            The part of an address about which a confidence setting is given
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.ConfidencePart.num">
            <summary>
            Street number
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.ConfidencePart.bf">
            <summary>
            Prefixed type. e.g. In 'Rue Voltaire', 'Rue' is the prefixed type.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.ConfidencePart.pref">
            <summary>
            Street prefix. e.g. In 'North Main Street', 'North' is the prefix.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.ConfidencePart.name">
            <summary>
            Street name.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.ConfidencePart.suff">
            <summary>
            Street Suffix
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.ConfidencePart.af">
            <summary>
            Street type suffix e.g. In 'North Main Street', 'Street' is the street type suffix.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.ConfidencePart.city">
            <summary>
            City.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.ConfidencePart.region">
            <summary>
            Region or state.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.ConfidencePart.postcode">
            <summary>
            postcode or zipcode
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.ConfidencePart.subregion">
            <summary>
            subregion or county
            </summary>
        </member>
        <member name="T:Telogis.UI.Panel">
            <summary>
            A Panel layout control that may be divided into rows or columns
            </summary>
        </member>
        <member name="M:Telogis.UI.Panel.#ctor">
            <summary>
            Paramterless constructor for a new Panel layout
            </summary>
        </member>
        <member name="M:Telogis.UI.Panel.GetSplit(System.Int32)">
            <summary>
            Gets the split of a panel
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Telogis.UI.Panel.AddChild(System.Windows.Forms.Control,Telogis.UI.ControlInfo)">
            <summary>
            Add a child panel to this panel
            </summary>
            <param name="child"></param>
            <param name="info"></param>
        </member>
        <member name="M:Telogis.UI.Panel.OnLayout(System.Windows.Forms.LayoutEventArgs)">
            <summary>
            Handles a layout event.
            </summary>
            <param name="levent"></param>
        </member>
        <member name="P:Telogis.UI.Panel.Format">
            <summary>
            Gets or sets the onscreen arrangement of the panel. 
            See <see cref="T:Telogis.UI.PanelType">PanelType</see>
            </summary>
        </member>
        <member name="P:Telogis.UI.Panel.Splits">
            <summary>
            Sets an array of splits for this panel
            </summary>
        </member>
        <member name="P:Telogis.UI.Panel.NumOfSplits">
            <summary>
            Gets the number of splits in a panel
            </summary>
        </member>
        <member name="T:Telogis.UI.PanelType">
            <summary>
            Determines the on-screen arrangement of a panel
            </summary>
        </member>
        <member name="F:Telogis.UI.PanelType.Rows">
            <summary>
            Splits are Rows
            </summary>
        </member>
        <member name="F:Telogis.UI.PanelType.Columns">
            <summary>
            Splits are columns
            </summary>
        </member>
        <member name="F:Telogis.UI.PanelType.Auto">
            <summary>
            Splits are columns if the screen is wide. Splits are rows if the screen is high.
            </summary>
        </member>
        <member name="T:Telogis.UI.StackPanel">
            <summary>
            
            </summary>
        </member>
        <member name="F:Telogis.UI.StackPanel.alignment">
            <summary>
            
            </summary>
        </member>
        <member name="M:Telogis.UI.StackPanel.OnLayout(System.Windows.Forms.LayoutEventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="P:Telogis.UI.StackPanel.Alignment">
            <summary>
            
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.RegisterGb.GeoBaseLicenseServer">
            <remarks/>
        </member>
        <member name="M:Telogis.GeoBase.RegisterGb.GeoBaseLicenseServer.#ctor">
            <remarks/>
        </member>
        <member name="M:Telogis.GeoBase.RegisterGb.GeoBaseLicenseServer.RegisterGB(System.String,System.String)">
            <remarks/>
        </member>
        <member name="M:Telogis.GeoBase.RegisterGb.GeoBaseLicenseServer.BeginRegisterGB(System.String,System.String,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:Telogis.GeoBase.RegisterGb.GeoBaseLicenseServer.EndRegisterGB(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="T:Telogis.GeoBase.Navigation.NotifyType">
            <summary>
            A notification may be one of three types: A repeating notification, a notification before a turn
            or a notification after a turn.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Navigation.NotifyType.BeforeTurn">
            <summary>
            This notification should occur before the turn.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Navigation.NotifyType.AfterTurn">
            <summary>
            This notification should occur after the turn.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Navigation.NotifyType.RepeatEventEvery">
            <summary>
            This notification should repeat at a specified interval.
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.Navigation.DisplayNameMode">
            <summary>
            DisplayNameMode is used to control whether NavigationEvents include all names for the
            TargetStreet, or just the primary name.  The latter mode may be useful when screen space is
            limited.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Navigation.DisplayNameMode.FullName">
            <summary>
            When Full Name is used, NavigationEvents return all given names for a particular
            TargetStreet regardless of how many names a street has.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Navigation.DisplayNameMode.PrimaryName">
            <summary>
            When Primary Name is used, NavigationEvents only return the first name given to a
            TargetStreet. Therefore if a street has one or more alternative names they will be
            ignored.
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.Navigation.NavigatorKnobs">
            <summary>
            Class to allow customization of the <see cref="T:Telogis.GeoBase.Navigation.Navigator"/> through various parameters.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Navigation.NavigatorKnobs.sideStreetWarning">
            <summary>
            The number of seconds before we pass a sidestreet at which
            we should stop counting it when saying 'take the nth left'
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.Navigation.NotificationDelegate">
            <summary>
            Handles a Navigation Notification. See example.
            </summary>
            <remarks><para><b>Related articles</b>: <a href="db780b3f-ffb3-496b-b36d-a068907e7244.htm">Using Notifications and Events</a>, 
            <a href="7e963d53-c906-4fcb-8b71-595736b9f15b.htm">Using a TurnBox</a>.</para></remarks>
            <example>
            A delegate has the following structure:
            <code lang="C#">
            private void myNotificationDelegate(object sender, NavigationEvent e)
            {
                // do something useful
            }
            </code>
            The delegate is passed the corresponding
            <see cref="T:Telogis.GeoBase.Navigation.NavigationEvent">NavigationEvent</see>.
            This object may be used to retrieve the target street name, turn direction
            and other such information:
            <code lang="C#">
            private void UpcomingTurn(object sender, NavigationEvent e)
            {
                Console.WriteLine("Turn into " + e.TargetStreet);
            }
            </code>
            Finally, the delegate may be used in conjunction with an event, such as a
            <see cref="T:Telogis.GeoBase.Navigation.BeforeTurnDistanceNotification">BeforeTurnDistanceNotification</see>:
            <code lang="C#">
            myNavigator.AddNotification(new BeforeTurnDistanceNotification(100, 0, DistanceUnit.METERS, new NotificationDelegate(UpcomingTurn)));
            </code>
            This is a notification that fires no earlier than 100 meters before every turn. The notification,
            when fired, will call our UpcomingTurn function and output "Turn into (street name)" to the console.
            </example>
            <param name="sender"></param>
            <param name="desc"></param>
        </member>
        <member name="T:Telogis.GeoBase.Navigation.Navigator">
            <summary>
            Guides the user along a route using GPS updates.
            </summary>
            <remarks>Generally the Navigator is constructed, any desired notifications added
            and then a timer (or separate thread) instated to call the
            <see cref="M:Telogis.GeoBase.Navigation.Navigator.AddPoint">AddPoint</see> method
            at regular intervals.
            The <b>AddPoint</b> method updates the current location of the Navigator.
            <para><b>Related articles</b>: <a href="b05c2695-f388-4acd-af71-cc5b240a0def.htm">Navigation Tutorial</a>, 
            <a href="f95ae961-f645-4c92-a609-ca5b873f1c48.htm">Using a Navigator</a>, 
            <a href="7d529a6b-15f5-4cba-8dab-5f21cfbbdbd7.htm">Using an XmlWaveAnnouncer</a>, 
            <a href="af08a594-7b79-4b54-be4e-a689c43788f5.htm">Using a LabelBox</a>, 
            <a href="7e963d53-c906-4fcb-8b71-595736b9f15b.htm">Using a TurnBox</a>, 
            <a href="b0f30dda-fc24-4b79-aa45-2077f0a6df13.htm">Implementing an IGps Member</a>, 
            <a href="b60eb5b5-243d-455a-b8ac-bd33b46e510e.htm">Using Languages and Cultures</a>.</para>
            </remarks>
        </member>
        <member name="F:Telogis.GeoBase.Navigation.Navigator.EnglishMessagesBundle">
            <summary>
            US English messages bundle.  For back-compatibility with code written against GeoBase
            3.0.5 or earlier, which does not have access to language XML files.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Navigation.Navigator.MinPredictedLinkSpeed">
            <summary>
            Minimum speed (in rad/s) that we will predict for travelling along the current link.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Navigation.Navigator.RouteProgress">
            <summary>
            The progress of this Navigator's routing operation (when a routing operation is underway)
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Navigation.Navigator.m_holdNotify">
            <summary>
            When non-zero, the next GPS point won't fire any notifications. Only
            applies when following a route.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Navigation.Navigator.timeAtLastIntersection">
            <summary>
            Time that we were at the previous intersection.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Navigation.Navigator.dmSinceLastIntersection">
            <summary>
            Distance travelled since the previous intersection.
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.Navigation.Navigator.#ctor(Telogis.GeoBase.Navigation.IGps)">
            <summary>
            Create a new Navigator with the specified GPS unit.  The Navigator will print strings
            in US English.
            </summary>
            <param name="gps"><see cref="T:Telogis.GeoBase.Navigation.IGps"/></param>
            <remarks>
            This constuctor remains for back-compatibility with code written against GeoBase 3.0.5
            or earlier.  Code written against GeoBase 3.0.7 or later should use the other
            <see cref="T:Telogis.GeoBase.Navigation.Navigator"/> constructors, which have improved support for
            internationalization.  This constructor will be deprecated in the next major GeoBase
            release.
            <para><b>Related articles</b>: <a href="b0f30dda-fc24-4b79-aa45-2077f0a6df13.htm">Implementing an IGps Member</a>.</para>
            </remarks>
        </member>
        <member name="M:Telogis.GeoBase.Navigation.Navigator.#ctor(Telogis.GeoBase.Navigation.IGps,System.String,System.Globalization.CultureInfo)">
            <summary>
            Create a new Navigator with the specified GPS unit that will display strings in the
            given culture using a MessagesBundle from the given path.
            </summary>
            <param name="gps"><see cref="T:Telogis.GeoBase.Navigation.IGps"/></param>
            <param name="langPath">Path to languages directory.</param>
            <param name="culture"><see cref="T:System.Globalization.CultureInfo"/></param>
        </member>
        <member name="M:Telogis.GeoBase.Navigation.Navigator.#ctor(Telogis.GeoBase.Navigation.IGps,System.String,System.Globalization.CultureInfo,System.Boolean)">
            <summary>
            Create a new Navigator with the specified GPS unit that will display strings in the
            given culture using a MessagesBundle from the given path, with the option to perform
            all language-based operations in debug mode.
            </summary>
            <param name="gps"><see cref="T:Telogis.GeoBase.Navigation.IGps"/></param>
            <param name="langPath">Path to languages directory.</param>
            <param name="culture"><see cref="T:System.Globalization.CultureInfo"/></param>
            <param name="debugMode">Whether to perform all language-based operations in debug
            mode.</param>
            <remarks>
            When in debug mode, the Navigator will raise <see cref="T:Telogis.GeoBase.Exceptions.MessagesBundleException"/>s
            when errors are found in the language configuration file.  When errors are found in the
            language configuration file and the Navigator is not in debug mode it will proceed on a
            best effort basis.
            </remarks>
        </member>
        <member name="M:Telogis.GeoBase.Navigation.Navigator.#ctor(Telogis.GeoBase.Navigation.IGps,Telogis.GeoBase.Internationalization.MessagesBundle)">
            <summary>
            Create a new Navigator with the specified GPS unit, and MessagesBundle for displaying
            strings.
            </summary>
            <param name="gps"><see cref="T:Telogis.GeoBase.Navigation.IGps"/></param>
            <param name="messagesBundle">MessagesBundle for displaying strings.</param>
        </member>
        <member name="M:Telogis.GeoBase.Navigation.Navigator.AddNotification(Telogis.GeoBase.Navigation.Notification)">
            <summary>
            Add a <see cref="T:Telogis.GeoBase.Navigation.Notification"/> to the navigator.
            </summary>
            <remarks>The route may have more than one notification.
            <para><b>Related articles</b>: <a href="db780b3f-ffb3-496b-b36d-a068907e7244.htm">Using Notifications and Events</a>.</para>
            </remarks>
            <param name="n"><see cref="T:Telogis.GeoBase.Navigation.Notification"/></param>
        </member>
        <member name="M:Telogis.GeoBase.Navigation.Navigator.RemoveNotification(Telogis.GeoBase.Navigation.Notification)">
            <summary>
            Remove a <see cref="T:Telogis.GeoBase.Navigation.Notification"/> from the navigator.
            </summary>
            <param name="n"><see cref="T:Telogis.GeoBase.Navigation.Notification"/></param>
        </member>
        <member name="M:Telogis.GeoBase.Navigation.Navigator.ClearNotifications">
            <summary>
            Remove all <see cref="T:Telogis.GeoBase.Navigation.Notification"/>s from the navigator. These notifications
            will no longer be triggered during navigation.
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.Navigation.Navigator.CreateDefaultRouteCalculator">
            <summary>
            Creates a new RouteCalculator depending on the Current Thread Repository
            </summary>
            <returns></returns>
        </member>
        <member name="M:Telogis.GeoBase.Navigation.Navigator.SetRepository(Telogis.GeoBase.Repositories.Repository)">
            <summary>
            Set the repository that this navigator should use
            </summary>
            <param name="repository">The repository for this navigator to use</param>
        </member>
        <member name="M:Telogis.GeoBase.Navigation.Navigator.SetDeviationThreshold(Telogis.GeoBase.DistanceUnit,System.Double,System.Double)">
            <summary>
            Sets the distance threshold from which the navigator may deviate (for a maximum of
            <see cref="P:Telogis.GeoBase.Navigation.Navigator.DeviationGraceTime"/>) from the route before the navigator is rerouted.
            </summary>
            <remarks>Unaligned threshold defaults to 30 meters, aligned threshold defaults to
            100 meters.</remarks>
            <param name="unit">The <see cref="T:Telogis.GeoBase.DistanceUnit">units</see> in which <i>amount</i> is measured.</param>
            <param name="alignedAmount">The desired distance deviation threshold when aligned</param>
            <param name="unalignedAmount">The desired distance deviation threshold when unaligned</param>
        </member>
        <member name="M:Telogis.GeoBase.Navigation.Navigator.SetOffRouteSnapDistance(Telogis.GeoBase.DistanceUnit,System.Double)">
            <summary>
            Sets the distance threshold used to snap the navigator onto the nearest road.
            </summary>
            <remarks>Defaults to 20 meters.</remarks>
            <param name="unit">The <see cref="T:Telogis.GeoBase.DistanceUnit">units</see> in which <i>amount</i> is measured.</param>
            <param name="amount">The desired distance threshold.</param>
        </member>
        <member name="M:Telogis.GeoBase.Navigation.Navigator.RecalculateRoute">
            <summary>
            Recalculate the navigator's route using the defined <see cref="P:Telogis.GeoBase.Navigation.Navigator.Strategy">routing strategy</see>.
            </summary>
            <remarks>Requires a 3D <see cref="T:Telogis.GeoBase.Navigation.GpsFixType">GPS fix</see> for precision.</remarks>
        </member>
        <member name="M:Telogis.GeoBase.Navigation.Navigator.AddPoint">
            <summary>
            Add the current position (retrieved from the GPS that the Navigator was constructed
            with) to our route.
            <b>This method should be called regularly to ensure that the Navigator
            is aware of its current location.</b>
            </summary>
            <remarks><para><b>Related articles</b>: <a href="f95ae961-f645-4c92-a609-ca5b873f1c48.htm">Using a Navigator</a>.</para></remarks>
            <returns><b>false</b> if the position was not updated. Otherwise <b>true</b></returns>
        </member>
        <member name="M:Telogis.GeoBase.Navigation.Navigator.GetTotalDistanceRemaining(Telogis.GeoBase.DistanceUnit)">
            <summary>
            Gets the total remaining distance along the route (from the last recorded position to the destination) in
            the specified <see cref="T:Telogis.GeoBase.DistanceUnit">DistanceUnit</see>s.
            </summary>
            <param name="unit"><see cref="T:Telogis.GeoBase.DistanceUnit">DistanceUnit</see></param>
            <returns>Gets the total distance along the route, from the last recorded position to the destination.</returns>
        </member>
        <member name="M:Telogis.GeoBase.Navigation.Navigator.SnapPoint(Telogis.GeoBase.LatLon)">
            <summary>
            Snap a given <see cref="T:Telogis.GeoBase.LatLon">LatLon</see> to the nearest point on the route.
            </summary>
            <param name="point"><see cref="T:Telogis.GeoBase.LatLon"/></param>
            <returns>The snapped <see cref="T:Telogis.GeoBase.LatLon">LatLon</see></returns>
        </member>
        <member name="M:Telogis.GeoBase.Navigation.Navigator.Render(System.Drawing.Graphics,Telogis.GeoBase.RenderContext)">
            <summary>
            Render the navigator's directions.
            </summary>
            <param name="graphics"></param>
            <param name="renderContext"></param>
        </member>
        <member name="M:Telogis.GeoBase.Navigation.Navigator.Dispose">
            <summary>
            Disposes of this Navigator.
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.Navigation.Navigator.Finalize">
            <summary>
            Navigator destructor
            </summary>
            <remarks>Does not disposed of this Navigator</remarks>
        </member>
        <member name="E:Telogis.GeoBase.Navigation.Navigator.Update">
            <summary>
            An event handler fired when the position of this <b>Navigator</b> is updated. The object
            passed to the delegate is of type Telogis.GeoBase.Navigation.Navigator.
            </summary>
        </member>
        <member name="E:Telogis.GeoBase.Navigation.Navigator.OnCourse">
            <summary>
            Fired when the navigator is on-course again after being off-course.
            </summary>
        </member>
        <member name="E:Telogis.GeoBase.Navigation.Navigator.OffCourse">
            <summary>
            Fired when the navigator is off-course after being on-course.
            </summary>
            <remarks><para><b>Related articles</b>: <a href="db780b3f-ffb3-496b-b36d-a068907e7244.htm">Using Notifications and Events</a>.</para></remarks>
        </member>
        <member name="E:Telogis.GeoBase.Navigation.Navigator.RouteCalculating">
            <summary>
            Fired when a new route is being calculated.
            </summary>
            <remarks><para><b>Related articles</b>: <a href="db780b3f-ffb3-496b-b36d-a068907e7244.htm">Using Notifications and Events</a>.</para></remarks>
        </member>
        <member name="E:Telogis.GeoBase.Navigation.Navigator.RouteChanged">
            <summary>
            Fired when the route has changed, with or without intervention by the user.
            </summary>
        </member>
        <member name="E:Telogis.GeoBase.Navigation.Navigator.NewRoute">
            <summary>
            Fired after a new route has been set and the first direction is ready to be
            given.
            </summary>
        </member>
        <member name="E:Telogis.GeoBase.Navigation.Navigator.MovementListChanged">
            <summary>
            Fired whenever the movement list changes.
            </summary>
        </member>
        <member name="E:Telogis.GeoBase.Navigation.Navigator.GpsQuality">
            <summary>
            Fired whenever the GPS quality changes.
            </summary>
        </member>
        <member name="E:Telogis.GeoBase.Navigation.Navigator.Arrived">
            <summary>
            Fired when the navigator arrives at the destination.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Navigation.Navigator.CompletedGeneratingDirections">
            <summary>
            Gets the state of the IRouteCalculator; if it has completed generating the directions.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Navigation.Navigator.RouteCalculator">
            <summary>
            Gets or sets the implementation of IRouteCalculator - the method this Navigator uses
            for calculating the route.
            <br/>
            <b>Note: The Navigator will dispose of the IRouteCalculator when it is no longer 
            required. A caller should not maintain a reference to a Navigator's RouteCalculator 
            after setting it.</b>
            </summary>
            <remarks>
            <para>
            Setting this value to null will also set the Navigator's Destination to null, and 
            revert the Navigator's VehicleSpec to the default. To route with the default route 
            calculator, set this value to null, optionally set your VehicleSpec, THEN set your 
            Destination.
            </para>
            </remarks>
        </member>
        <member name="P:Telogis.GeoBase.Navigation.Navigator.MessagesBundle">
            <summary>
            The MessagesBundle used by this Navigator to generate strings.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Navigation.Navigator.Directions">
            <summary>
            Gets the <see cref="T:Telogis.GeoBase.Routing.Directions"/> for this navigator to
            the defined <see cref="P:Telogis.GeoBase.Navigation.Navigator.Destination"/>.
            </summary>
            <remarks>
            <para>The <see cref="T:Telogis.GeoBase.Routing.Directions"/> returned will be a single instruction
            only, that is, one instruction describing the next movement along the route. For a complete list of
            instructions describing a route, consider the
            <see cref="M:Telogis.GeoBase.Routing.Route.GetDirections"/> method in the <see cref="N:Telogis.GeoBase.Routing"/> namespace.</para>
            <para>The <see cref="P:Telogis.GeoBase.Navigation.Navigator.Gps"/> must have a <see cref="T:Telogis.GeoBase.Navigation.GpsFixType"/> of
            <see cref="F:Telogis.GeoBase.Navigation.GpsFixType.FixType3d"/> to provide sufficient precision
            to allow this navigator to calculate directions.</para>
            </remarks>
        </member>
        <member name="P:Telogis.GeoBase.Navigation.Navigator.DeviationGraceTime">
            <summary>
            Gets or sets the grace time (as a <see cref="T:System.TimeSpan"/>) for which to allow
            the navigator to deviate from the planned route.
            </summary>
            <remarks>If the navigator has been <see cref="P:Telogis.GeoBase.Navigation.Navigator.IsOffCourse">off-course</see> for more than
            this length of time the route is recalculated.</remarks>
        </member>
        <member name="P:Telogis.GeoBase.Navigation.Navigator.IsOffCourse">
            <summary>
            Will return true if this navigator is off course.
            </summary>
            <remarks><b>True</b> if the navigator is off-course, otherwise <b>false</b>.</remarks>
        </member>
        <member name="P:Telogis.GeoBase.Navigation.Navigator.Strategy">
            <summary>
            Gets or sets the navigator's routing strategy.
            </summary>
            <remarks><para>Defaults to <see cref="T:Telogis.GeoBase.Routing.RoutingStrategyFastest"/>.</para>
            <para>Recalculates the route every time the strategy is set. Use <see cref="M:Telogis.GeoBase.Navigation.Navigator.RecalculateRoute"/>
            to manually recalculate the route.</para>
            </remarks>
        </member>
        <member name="P:Telogis.GeoBase.Navigation.Navigator.Destination">
            <summary>
            Gets or sets the navigator's destination, as a <see cref="T:Telogis.GeoBase.RouteStop"/>.
            </summary>
            <remarks>
            If the destination is set to null then the navigator's RouteCalculator reverts to the
            default route calculator.
            <para><b>Related articles</b>: <a href="f95ae961-f645-4c92-a609-ca5b873f1c48.htm">Using a Navigator</a>, 
            <a href="7e963d53-c906-4fcb-8b71-595736b9f15b.htm">Using a TurnBox</a>.</para>
            </remarks>
        </member>
        <member name="P:Telogis.GeoBase.Navigation.Navigator.Gps">
            <summary>
            Gets or sets the <see cref="T:Telogis.GeoBase.Navigation.IGps"/> interface.
            </summary>
            <remarks>See <see cref="T:Telogis.GeoBase.Navigation.GpsSimulator"/> to simulate
            a GPS unit.</remarks>
        </member>
        <member name="P:Telogis.GeoBase.Navigation.Navigator.CurrentNavigationEvent">
            <summary>
            Gets the pending <see cref="T:Telogis.GeoBase.Navigation.NavigationEvent"/> that the
            navigator will need to execute.
            </summary>
            <remarks>See also <see cref="P:Telogis.GeoBase.Navigation.Navigator.NextNavigationEvent"/>.</remarks>
        </member>
        <member name="P:Telogis.GeoBase.Navigation.Navigator.NextNavigationEvent">
            <summary>
            Gets the next <see cref="T:Telogis.GeoBase.Navigation.NavigationEvent"/> that the
            navigator will need to execute.
            </summary>
            <remarks>See also <see cref="P:Telogis.GeoBase.Navigation.Navigator.CurrentNavigationEvent"/>.</remarks>
        </member>
        <member name="P:Telogis.GeoBase.Navigation.Navigator.Location">
            <summary>
            Gets the navigator's last recorded location, as a <see cref="T:Telogis.GeoBase.LatLon"/>, snapped to the closest point on the route.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Navigation.Navigator.Position">
            <summary>
            Gets the navigator's last recorded position, as a <see cref="T:Telogis.GeoBase.Navigation.Position"/>, as it came from the Gps.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Navigation.Navigator.Heading">
            <summary>
            Gets the navigator's last recording heading, in degrees, snapped to the heading of the closest point on the street.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Navigation.Navigator.Address">
            <summary>
            Gets the <see cref="T:Telogis.GeoBase.GeoCodeFull"/> of the navigator's last recorded location.
            </summary>
            <remarks>The <see cref="T:Telogis.GeoBase.GeoCodeFull"/> will (ideally) be the
            street address of the location, or (if the street address is for some reason
            unavailable) the nearest intersection.</remarks>
        </member>
        <member name="P:Telogis.GeoBase.Navigation.Navigator.AllowUTurns">
            <summary>
            When <b>true</b> the routing engine is permitted to instruct u-turns. When
            <b>false</b> the routing engine will instruct only the minimum number of u-turns
            possible. <b>False</b> by default.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Navigation.Navigator.TotalTimeRemaining">
            <summary>
            Gets the calculated total time remaining for the route currently being navigated.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Navigation.Navigator.RequiredRendermodes">
            <summary>
            Gets the <see cref="T:Telogis.GeoBase.RenderMode">RenderMode</see> required by this <b>Navigator</b>
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Navigation.Navigator.DisplayNameMode">
            <summary>
            Controls whether NavigationEvents include all the names for a TargetStreet or just
            the primary name.
            </summary>
        </member>
        <member name="T:Internal.BigInteger">
            <summary>
            Implements an large integer of arbitrary length.
            </summary>
        </member>
        <member name="M:Internal.BigInteger.#ctor">
            <summary>
            Initializes a new instance of the BigInteger class.
            </summary>
        </member>
        <member name="M:Internal.BigInteger.#ctor(System.UInt64)">
            <summary>
            Initializes a new instance of the BigInteger class from a UInt64 value.
            </summary>
            <param name="value">
            	The value to initialize with.
            </param>
        </member>
        <member name="M:Internal.BigInteger.#ctor(System.Int64)">
            <summary>
            Initializes a new instance of the BigInteger class from a Int64 value.
            </summary>
            <param name="value">
            	The value to initialize with.
            </param>
        </member>
        <member name="M:Internal.BigInteger.#ctor(Internal.BigInteger)">
            <summary>
            Initializes a new instance of the BigInteger class from an existing instance.
            </summary>
            <param name="bi">
            	The BigInteger to initialize from.
            </param>
        </member>
        <member name="M:Internal.BigInteger.#ctor(System.String,System.Int32)">
            <summary>
            Initializes a new instance of the BigInteger class from a string representation 
            in the given radix.
            </summary>
            <param name="value">
            	The string value to initialize from.
            </param>
            <param name="radix">
            	The radix (or base) the value is offered as.
            </param>
            <example>
            <para><b>Example in Base 10</b></para>
            <para><code>BigInteger a = new BigInteger( "1234", 10 );
            BigInteger b = new BigInteger( "-1234", 10 )</code></para>
            <para><b>Example in Base 16 (HEX)</b></para>
            <para><code>BigInteger a = new BigInteger( "1D4F", 16 );
            BigInteger b = new BigInteger( "-1D4F", 10 )</code></para>
            </example>
        </member>
        <member name="M:Internal.BigInteger.#ctor(System.Byte[])">
            <summary>
            Initializes a new instance of the BigInteger class from an array
            of existing bytes.
            </summary>
            <param name="inData">
            	The values to initialize from.
            </param>
            <remarks>
            	The lowest index of the input byte array (i.e [0]) should contain the
            	most significant byte of the number, and the highest index should
            	contain the least significant byte.
            </remarks>
        </member>
        <member name="M:Internal.BigInteger.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the BigInteger class from an array
            of existing bytes.
            </summary>
            <param name="inData">
            	The values to initialize from.
            </param>
            <param name="inLen">
            	The length of the initialization array to use.
            </param>
            <remarks>
            	The lowest index of the input byte array (i.e [0]) should contain the
            	most significant byte of the number, and the highest index should
            	contain the least significant byte.
            </remarks>
        </member>
        <member name="M:Internal.BigInteger.#ctor(System.UInt32[])">
            <summary>
            Initializes a new instance of the BigInteger class from an existing set of 
            packed values.
            </summary>
            <param name="inData"></param>
        </member>
        <member name="M:Internal.BigInteger.op_Implicit(System.Int64)~Internal.BigInteger">
            <summary>
            Provides implicit assignment of a Int64 value to a BigInteger.
            </summary>
            <param name="value">
            	The value to assign.
            </param>
            <returns>
            	Returns a new BigInteger intialized with the given value.
            </returns>
        </member>
        <member name="M:Internal.BigInteger.op_Implicit(System.UInt64)~Internal.BigInteger">
            <summary>
            Provides implicit assignment of a UInt64 value to a BigInteger.
            </summary>
            <param name="value">
            	The value to assign.
            </param>
            <returns>
            	Returns a new BigInteger intialized with the given value.
            </returns>
        </member>
        <member name="M:Internal.BigInteger.op_Implicit(System.Int32)~Internal.BigInteger">
            <summary>
            Provides implicit assignment of an Int32 value to a BigInteger.
            </summary>
            <param name="value">
            	The value to assign.
            </param>
            <returns>
            	Returns a new BigInteger intialized with the given value.
            </returns>
        </member>
        <member name="M:Internal.BigInteger.op_Implicit(System.UInt32)~Internal.BigInteger">
            <summary>
            Provides implicit assignment of an UInt32 value to a BigInteger.
            </summary>
            <param name="value">
            	The value to assign.
            </param>
            <returns>
            	Returns a new BigInteger intialized with the given value.
            </returns>
        </member>
        <member name="M:Internal.BigInteger.op_Addition(Internal.BigInteger,Internal.BigInteger)">
            <summary>
            Adds two BigInteger values together.
            </summary>
            <param name="bi1">
            	BigInteger 1.
            </param>
            <param name="bi2">
            	BigInteger 2.
            </param>
            <returns>
            	Returns the sum of the two values.
            </returns>
        </member>
        <member name="M:Internal.BigInteger.op_Increment(Internal.BigInteger)">
            <summary>
            Increments the BigInteger value by 1.
            </summary>
            <param name="bi1"></param>
            <returns></returns>
        </member>
        <member name="M:Internal.BigInteger.op_Subtraction(Internal.BigInteger,Internal.BigInteger)">
            <summary>
            Subtracts one BigInteger from another.
            </summary>
            <param name="bi1"></param>
            <param name="bi2"></param>
            <returns></returns>
        </member>
        <member name="M:Internal.BigInteger.op_Decrement(Internal.BigInteger)">
            <summary>
            Decrements the BigInteger value by one.
            </summary>
            <param name="bi1"></param>
            <returns></returns>
        </member>
        <member name="M:Internal.BigInteger.op_Multiply(Internal.BigInteger,Internal.BigInteger)">
            <summary>
            Multiplies two BigInteger values.
            </summary>
            <param name="bi1"></param>
            <param name="bi2"></param>
            <returns></returns>
        </member>
        <member name="M:Internal.BigInteger.op_LeftShift(Internal.BigInteger,System.Int32)">
            <summary>
            Shifts the bits to the left.
            </summary>
            <param name="bi1"></param>
            <param name="shiftVal"></param>
            <returns></returns>
        </member>
        <member name="M:Internal.BigInteger.op_RightShift(Internal.BigInteger,System.Int32)">
            <summary>
            Shifts the bits to the right.
            </summary>
            <param name="bi1"></param>
            <param name="shiftVal"></param>
            <returns></returns>
        </member>
        <member name="M:Internal.BigInteger.op_OnesComplement(Internal.BigInteger)">
            <summary>
            Implements a 1's compliment.
            </summary>
            <param name="bi1"></param>
            <returns></returns>
        </member>
        <member name="M:Internal.BigInteger.op_UnaryNegation(Internal.BigInteger)">
            <summary>
            Implements a 2's compliment (negative).
            </summary>
            <param name="bi1"></param>
            <returns></returns>
        </member>
        <member name="M:Internal.BigInteger.op_Equality(Internal.BigInteger,Internal.BigInteger)">
            <summary>
            Equality operator.
            </summary>
            <param name="bi1"></param>
            <param name="bi2"></param>
            <returns></returns>
        </member>
        <member name="M:Internal.BigInteger.op_Inequality(Internal.BigInteger,Internal.BigInteger)">
            <summary>
            Inequality operator.
            </summary>
            <param name="bi1"></param>
            <param name="bi2"></param>
            <returns></returns>
        </member>
        <member name="M:Internal.BigInteger.Equals(System.Object)">
            <summary>
            Overrides the equals comparison.
            </summary>
            <param name="o"></param>
            <returns></returns>
        </member>
        <member name="M:Internal.BigInteger.GetHashCode">
            <summary>
            Gets the hash code for the value.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Internal.BigInteger.op_GreaterThan(Internal.BigInteger,Internal.BigInteger)">
            <summary>
            Greater than operator.
            </summary>
            <param name="bi1"></param>
            <param name="bi2"></param>
            <returns></returns>
        </member>
        <member name="M:Internal.BigInteger.op_LessThan(Internal.BigInteger,Internal.BigInteger)">
            <summary>
            Less than operator.
            </summary>
            <param name="bi1"></param>
            <param name="bi2"></param>
            <returns></returns>
        </member>
        <member name="M:Internal.BigInteger.op_GreaterThanOrEqual(Internal.BigInteger,Internal.BigInteger)">
            <summary>
            Greater than or equal operator.
            </summary>
            <param name="bi1"></param>
            <param name="bi2"></param>
            <returns></returns>
        </member>
        <member name="M:Internal.BigInteger.op_LessThanOrEqual(Internal.BigInteger,Internal.BigInteger)">
            <summary>
            Less than or equal operator.
            </summary>
            <param name="bi1"></param>
            <param name="bi2"></param>
            <returns></returns>
        </member>
        <member name="M:Internal.BigInteger.op_Division(Internal.BigInteger,Internal.BigInteger)">
            <summary>
            Division operator.
            </summary>
            <param name="bi1"></param>
            <param name="bi2"></param>
            <returns></returns>
        </member>
        <member name="M:Internal.BigInteger.op_Modulus(Internal.BigInteger,Internal.BigInteger)">
            <summary>
            Modulus operator.
            </summary>
            <param name="bi1"></param>
            <param name="bi2"></param>
            <returns></returns>
        </member>
        <member name="M:Internal.BigInteger.op_BitwiseAnd(Internal.BigInteger,Internal.BigInteger)">
            <summary>
            Bitwise AND operator.
            </summary>
            <param name="bi1"></param>
            <param name="bi2"></param>
            <returns></returns>
        </member>
        <member name="M:Internal.BigInteger.op_BitwiseOr(Internal.BigInteger,Internal.BigInteger)">
            <summary>
            Bitwise OR operator.
            </summary>
            <param name="bi1"></param>
            <param name="bi2"></param>
            <returns></returns>
        </member>
        <member name="M:Internal.BigInteger.op_ExclusiveOr(Internal.BigInteger,Internal.BigInteger)">
            <summary>
            Bitwise XOR operator.
            </summary>
            <param name="bi1"></param>
            <param name="bi2"></param>
            <returns></returns>
        </member>
        <member name="M:Internal.BigInteger.Abs">
            <summary>
            Returns the absolute value of the BigInteger.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Internal.BigInteger.ToString">
            <summary>
            Returns a string representation of the value.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Internal.BigInteger.ToString(System.Int32)">
            <summary>
            Returns a string representing the BigInteger in sign-and-magnitude
            format in the specified radix.
            </summary>
            <param name="radix">
            	The radix (or base) of the value to output. Valid values are from 2 to 36.
            </param>
            <returns>
            	Returns the formatted string.
            </returns>
        </member>
        <member name="M:Internal.BigInteger.ModPow(Internal.BigInteger,Internal.BigInteger)">
            <summary>
            Modulo Exponentiation. ( this ^ exp ) % n.
            </summary>
            <param name="exp">
            	Exponent.
            </param>
            <param name="n">
            	Modulus.
            </param>
            <returns></returns>
        </member>
        <member name="M:Internal.BigInteger.Gcd(Internal.BigInteger)">
            <summary>
            Returns the GCD(this, bi)
            </summary>
            <param name="bi"></param>
            <returns></returns>
        </member>
        <member name="M:Internal.BigInteger.GenerateRandomBits(System.Int32,System.Random)">
            <summary>
            Fills the BigInteger with random bits.
            </summary>
            <param name="bits">
            	The minimum number of bits.
            </param>
            <param name="rand">
            	The random number generator.
            </param>
        </member>
        <member name="M:Internal.BigInteger.IsProbablePrime(System.Int32)">
            <summary>
            Determines whether a number is probably prime, using the Rabin-Miller's
            test.  Before applying the test, the number is tested for divisibility
            by primes &lt; 2000
            </summary>
            <param name="confidence">
            	Amount of confidence allowed.
            </param>
            <returns></returns>
        </member>
        <member name="M:Internal.BigInteger.IntValue">
            <summary>
            Returns the lowest 4 bytes of the BigInteger as an int. 
            </summary>
            <returns></returns>
        </member>
        <member name="M:Internal.BigInteger.LongValue">
            <summary>
            Returns the lowest 8 bytes of the BigInteger as a long.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Internal.BigInteger.ULongValue">
            <summary>
            Returns the lowest 8 bytes of the BigInteger as a long.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Internal.BigInteger.GeneratePseudoPrime(System.Int32,System.Int32,System.Random)">
            <summary>
            Makes a pseudoprime number that requires at least the given number of bits. 
            </summary>
            <param name="bits">
            	The number of bits to use.
            </param>
            <param name="confidence">
            	The amount of confidence required...a lower value is more confident.
            </param>
            <param name="rand">
            	The random number generator.
            </param>
            <returns>
            	Returns a pseudo prime number.
            </returns>
        </member>
        <member name="M:Internal.BigInteger.GenerateCoPrime(System.Int32,System.Random)">
            <summary>
            Generates a random number with the specified number of bits such
            that Gcd(number, this) = 1
            </summary>
            <param name="bits">
            	Bits to use.
            </param>
            <param name="rand">
            	Random number generator.
            </param>
            <returns>
            	Returns the co prime.
            </returns>
        </member>
        <member name="M:Internal.BigInteger.ModInverse(Internal.BigInteger)">
            <summary>
            Returns the modulo inverse of this.  Throws ArithmeticException if
            the inverse does not exist.  (i.e. Gcd(this, modulus) != 1)
            </summary>
            <param name="modulus"></param>
            <returns></returns>
        </member>
        <member name="M:Internal.BigInteger.GetBytes">
            <summary>
            Returns the value of the BigInteger as a byte array.  The lowest
            index contains the MSB.
            </summary>
        </member>
        <member name="M:Internal.BigInteger.Sqrt">
            <summary>
            Returns a value that is equivalent to the integer square root
            of the BigInteger.
            </summary>
            <returns></returns>
            <remarks>
            The integer square root of "this" is defined as the largest integer n
            such that (n * n) &lt;= this
            </remarks>
        </member>
        <member name="P:Internal.BigInteger.Bits">
            <summary>
            Gets the position of the most significant bit in the value.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.ImageUtils.BitmapFilter.Color32.Blue">
            <summary>
            Holds the blue component of the color
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.ImageUtils.BitmapFilter.Color32.Green">
            <summary>
            Holds the green component of the color
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.ImageUtils.BitmapFilter.Color32.Red">
            <summary>
            Holds the red component of the color
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.ImageUtils.BitmapFilter.Color32.Alpha">
            <summary>
            Holds the alpha component of the color
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.ImageUtils.BitmapFilter.Color32.ARGB">
            <summary>
            Permits the color32 to be treated as an int32
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.ImageUtils.BitmapFilter.Color32.Color">
            <summary>
            Return the color for this Color32 object
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Database.DBOpenFlags.OPEN_READWRITE">
            <summary>
            WARNING: Opening a database with this flag places an exclusive lock on it while it is open. This means no one can open the database while this lock is held
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.Database.PreparedStatement.Bind(System.String,System.Int32)">
            <summary>
            Bind a value to a parameter in the SQL statement. All labelled parameters in a PreparedStatement
            are alphanumeric values that begin with a '@'
            For example: SELECT * FROM table WHERE id = @id
            the parameter @id can thus be bound with a value using Bind("id", 1);
            </summary>
            <param name="col">The parameter in the SQL statment</param>
            <param name="value">The value to be bound</param>
        </member>
        <member name="M:Telogis.GeoBase.Database.PreparedStatement.BindNull(System.String)">
            <summary>
            Bind a null to a parameter in the SQL statement. All labelled parameters in a PreparedStatement
            are alphanumeric values that begin with a '@'
            For example: SELECT * FROM table WHERE id = @id
            the parameter @id can thus be bound with a value using Bind("id", 1);
            </summary>
            <param name="col">The parameter in the SQL statment</param>
        </member>
        <member name="M:Telogis.GeoBase.Database.PreparedStatement.Bind(System.String,System.Double)">
            <summary>
            Bind a value to a parameter in the SQL statement. All labelled parameters in a PreparedStatement
            are alphanumeric values that begin with a '@'
            For example: SELECT * FROM table WHERE id = @id
            the parameter @id can thus be bound with a value using Bind("id", 1);
            </summary>
            <param name="col">The parameter in the SQL statment</param>
            <param name="value">The value to be bound</param>
        </member>
        <member name="M:Telogis.GeoBase.Database.PreparedStatement.Bind(System.String,Telogis.GeoBase.LatLon)">
            <summary>
            Bind a value to a parameter in the SQL statement. All labelled parameters in a PreparedStatement
            are alphanumeric values that begin with a '@'
            For example: SELECT * FROM table WHERE id = @id
            the parameter @id can thus be bound with a value using Bind("id", 1);
            </summary>
            <param name="col">The parameter in the SQL statment</param>
            <param name="value">The value to be bound</param>
        </member>
        <member name="M:Telogis.GeoBase.Database.PreparedStatement.Bind(System.String,System.Int64)">
            <summary>
            Bind a value to a parameter in the SQL statement. All labelled parameters in a PreparedStatement
            are alphanumeric values that begin with a '@'
            For example: SELECT * FROM table WHERE id = @id
            the parameter @id can thus be bound with a value using Bind("id", 1);
            </summary>
            <param name="col">The parameter in the SQL statment</param>
            <param name="value">The value to be bound</param>
        </member>
        <member name="M:Telogis.GeoBase.Database.PreparedStatement.Bind(System.String,System.String)">
            <summary>
            Bind a value to a parameter in the SQL statement. All labelled parameters in a PreparedStatement
            are alphanumeric values that begin with a '@'
            For example: SELECT * FROM table WHERE id = @id
            the parameter @id can thus be bound with a value using Bind("id", 1);
            </summary>
            <param name="col">The parameter in the SQL statment</param>
            <param name="value">The value to be bound</param>
        </member>
        <member name="M:Telogis.GeoBase.Database.PreparedStatement.Bind(System.String,System.DateTime)">
            <summary>
            Bind a date to a parameter in the SQL statement. All labelled parameters in a PreparedStatement
            are alphanumeric values that begin with a '@'
            For example: SELECT * FROM table WHERE id = @id
            the parameter @id can thus be bound with a value using Bind("id", 1);
            </summary>
            <param name="col">The parameter in the SQL statment</param>
            <param name="value">The value to be bound</param>
        </member>
        <member name="M:Telogis.GeoBase.Database.PreparedStatement.BindNullInt(System.Int32,System.Int32)">
            <summary>
            Either bind the int value - or use null if it's 0
            </summary>
            <param name="col"></param>
            <param name="value"></param>
        </member>
        <member name="M:Telogis.GeoBase.Database.PreparedStatement.ReadBlobLength(System.Int32)">
            <summary>
            Return the length of the blob at the given column
            </summary>
            <param name="col"></param>
            <returns></returns>
        </member>
        <member name="M:Telogis.GeoBase.Database.PreparedStatement.ReadBlob(System.Int32)">
            <summary>
            Read a blob
            </summary>
            <param name="col"></param>
            <returns></returns>
        </member>
        <member name="M:Telogis.GeoBase.Database.PreparedStatement.ReadBlob(System.Int32,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Read a blob into the given buffer
            </summary>
            <param name="col"></param>
            <param name="ret"></param>
            <param name="startIndex"></param>
            <param name="length"></param>
        </member>
        <member name="M:Telogis.GeoBase.Database.DBConnection.#ctor(System.String)">
            <summary>
            Open the database readwrite and create if it doesn't exist
            </summary>
            <param name="filename"></param>
        </member>
        <member name="T:Telogis.GeoBase.Transactional.RangeFilter">
            <summary>
            A ColumnFilter that selects only those records where the specified
            field is within a specified range.
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.Transactional.RangeFilter.#ctor(System.String,System.Object,System.Object)">
            <summary>
            Create a new RangeFilter where the value of a given field of a Record should
            lie within a specified value range.
            </summary>
            <remarks>
            A RangeFilter will select Records with values that lie on the upper or lower bound of the range.
            </remarks>
            <param name="column">The name of the column. Case insensitive.</param>
            <param name="max">The upper bound of the range.</param>
            <param name="min">The lower bound of the range.</param>
        </member>
        <member name="T:Telogis.GeoBase.ShapeUI.State.PolygonEditState">
            <summary>
            An edit state for editing polygons.
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.ShapeUI.State.BaseState">
            <summary>
            A base state that all states should utilize.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.ShapeUI.State.BaseState.POINT_HIT_RADIUS">
            <summary>
            The distance in pixels from a vertex for hit-testing.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.ShapeUI.State.BaseState.EDGE_HIT_RADIUS">
            <summary>
            The distance in pixels from an edge for hit-testing.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.ShapeUI.State.BaseState.POINT_RADIUS">
            <summary>
            The radius of a vertex when rendered.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.ShapeUI.State.BaseState.m_layer">
            <summary>
            The layer that the BaseState will be used with.
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.ShapeUI.State.BaseState.#ctor(Telogis.GeoBase.ShapeUI.ShapeLayer)">
            <summary>
            Creates a BaseState that will be used with the specified layer.
            </summary>
            <param name="layer">The layer that the BaseState will be used with.</param>
        </member>
        <member name="M:Telogis.GeoBase.ShapeUI.State.BaseState.Begin">
            <summary>
            Called when the layer enters this state.
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.ShapeUI.State.BaseState.End">
            <summary>
            Called when the layer exits this state.
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.ShapeUI.State.BaseState.Render(System.Drawing.Graphics,Telogis.GeoBase.RenderContext)">
            <summary>
            Called to render this state.
            </summary>
            <param name="graphics">Graphics to render to.</param>
            <param name="rc">Render context.</param>
        </member>
        <member name="M:Telogis.GeoBase.ShapeUI.State.BaseState.OnMouseMove(System.Object,System.Windows.Forms.MouseEventArgs)">
            <summary>
            Mouse-move handler for this state.
            </summary>
            <param name="sender">The sender of the mouse event.</param>
            <param name="e">The event arguments.</param>
            <returns>Whether the state handled the event.</returns>
        </member>
        <member name="M:Telogis.GeoBase.ShapeUI.State.BaseState.OnMouseUp(System.Object,System.Windows.Forms.MouseEventArgs)">
            <summary>
            Mouse-up handler for this state.
            </summary>
            <param name="sender">The sender of the mouse event.</param>
            <param name="e">The event arguments.</param>
            <returns>Whether the state handled the event.</returns>
        </member>
        <member name="M:Telogis.GeoBase.ShapeUI.State.BaseState.OnMouseDown(System.Object,System.Windows.Forms.MouseEventArgs)">
            <summary>
            Mouse-down handler for this state.
            </summary>
            <param name="sender">The sender of the mouse event.</param>
            <param name="e">The event arguments.</param>
            <returns>Whether the state handled the event.</returns>
        </member>
        <member name="M:Telogis.GeoBase.ShapeUI.State.BaseState.OnMouseClick(System.Object,System.Windows.Forms.MouseEventArgs)">
            <summary>
            Mouse-click handler for this state.
            </summary>
            <param name="sender">The sender of the mouse event.</param>
            <param name="e">The event arguments.</param>
            <returns>Whether the state handled the event.</returns>
        </member>
        <member name="M:Telogis.GeoBase.ShapeUI.State.BaseState.OnMouseLeave(System.Object,System.EventArgs)">
            <summary>
            Mouse-leave handler for this state.
            </summary>
            <param name="sender">The sender of the mouse event.</param>
            <param name="e">The event arguments.</param>
            <returns>Whether the state handled the event.</returns>
        </member>
        <member name="M:Telogis.GeoBase.ShapeUI.State.BaseState.Apply">
            <summary>
            Applies any changes made whilst in this state.
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.ShapeUI.State.BaseState.RenderShapesExcept(System.Drawing.Graphics,Telogis.GeoBase.RenderContext,System.Predicate{Telogis.GeoBase.ShapeUI.ShapeEntity})">
            <summary>
            Renders all shapes within a map location expected those shapes that have been excluded.
            </summary>
            <param name="graphics">Graphics to render to</param>
            <param name="rc">Render context</param>
            <param name="pred">Predicate that returns true to exclude a shape.</param>
            <returns>A list of the excluded shapes.</returns>
        </member>
        <member name="M:Telogis.GeoBase.ShapeUI.State.BaseState.RenderShapes(System.Drawing.Graphics,Telogis.GeoBase.RenderContext)">
            <summary>
            Renders all shapes on a map 
            </summary>
            <param name="graphics">Graphics to render to</param>
            <param name="rc">Render context</param>
        </member>
        <member name="M:Telogis.GeoBase.ShapeUI.State.BaseState.Unproject(System.Drawing.Point)">
            <summary>
            Unprojects a point on the layer's map into a LatLon.
            </summary>
            <param name="pt">The point on the map.</param>
            <returns>The point as a LatLon.</returns>
        </member>
        <member name="M:Telogis.GeoBase.ShapeUI.State.BaseState.Project(Telogis.GeoBase.LatLon)">
            <summary>
            Projects a LatLon into a point on the layer's map.
            </summary>
            <param name="loc">The LatLon to project.</param>
            <returns>The point on the map that represents the LatLon.</returns>
        </member>
        <member name="F:Telogis.GeoBase.ShapeUI.State.PolygonEditState.HighlightFill">
            <summary>
            Brush for highlighting a polygon.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.ShapeUI.State.PolygonEditState.HighlightOutline">
            <summary>
            Pen for drawing the outline of a highlighted polygon.
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.ShapeUI.State.PolygonEditState.#ctor(Telogis.GeoBase.ShapeUI.ShapeLayer,Telogis.GeoBase.ShapeUI.PolygonEntity)">
            <summary>
            Creates a state for editing a polygon.
            </summary>
            <param name="layer">The layer holding the polygon.</param>
            <param name="entity">The polygon to edit.</param>
        </member>
        <member name="M:Telogis.GeoBase.ShapeUI.State.PolygonEditState.Render(System.Drawing.Graphics,Telogis.GeoBase.RenderContext)">
            <summary>
            Renders all relevant shapes to the render context in the following order:<br/>
            - All shapes apart from the entity being editing<br/>
            - The selected entity<br/>
            - The selected entity's edges (if highlighted)<br/>
            - The selected entity's vertices (if highlighted)<br/>
            - The selected entity's moving vertex (if a vertex is being moved).
            </summary>
            <param name="graphics">The drawing surface</param>
            <param name="rc">Control for the placement of objects</param>
        </member>
        <member name="M:Telogis.GeoBase.ShapeUI.State.PolygonEditState.Begin">
            <summary>
            Disables the map UI so that the map does not move following mouse events.
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.ShapeUI.State.PolygonEditState.End">
            <summary>
            Validates the edited shape and re-enables the map UI.
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.ShapeUI.State.PolygonEditState.OnMouseMove(System.Object,System.Windows.Forms.MouseEventArgs)">
            <summary>
            Handles mouse movements by either checking whether a vertex or edge should be
            highlighted or moving a selected vertex.
            </summary>
            <param name="sender">The object from the base event.</param>
            <param name="e">The mouse event arguments.</param>
            <returns>true</returns>
        </member>
        <member name="M:Telogis.GeoBase.ShapeUI.State.PolygonEditState.OnMouseUp(System.Object,System.Windows.Forms.MouseEventArgs)">
            <summary>
            Highlights the relevant edge or vertex if applicable
            </summary>
            <param name="sender">The object from the base event.</param>
            <param name="e">The mouse event arguments.</param>
            <returns>true</returns>
        </member>
        <member name="M:Telogis.GeoBase.ShapeUI.State.PolygonEditState.OnMouseDown(System.Object,System.Windows.Forms.MouseEventArgs)">
            <summary>
            Selects a vertex to move or, if none is highlighted, inserts a new vertex on a left
            click.
            </summary>
            <param name="sender">The object from the base event.</param>
            <param name="e">The mouse event arguments.</param>
            <returns>true</returns>
        </member>
        <member name="M:Telogis.GeoBase.ShapeUI.State.PolygonEditState.OnMouseClick(System.Object,System.Windows.Forms.MouseEventArgs)">
            <summary>
            On right click, deletes a highlighted vertex or applies any changes.
            </summary>
            <param name="sender">The object from the base event.</param>
            <param name="e">The mouse event arguments.</param>
            <returns>true</returns>
        </member>
        <member name="M:Telogis.GeoBase.ShapeUI.State.PolygonEditState.Apply">
            <summary>
            Finishes editing the polygon, saves any edits and returns to a selection state.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.ShapeUI.State.PolygonEditState.Selection">
            <summary>
            The selected polygon.
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.ShapeUI.State.PolygonEditState.EditMode">
            <summary>
            The specific mode of the edit state.
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.ShapeUI.ShapeEntityEventArgs">
            <summary>
            Wrapper for events relevant specific to shape entities.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.ShapeUI.ShapeEntityEventArgs.Entity">
            <summary>
            The entity that the event relates to.
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.IMapFeature">
            <summary>
            Classes that implement this interface represent map features returned
            from a GeoBase query.
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.FeatureType">
            <summary>
            The type (shape) of a map feature that can be returned by a DataQuery.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.FeatureType.All">
            <summary>
            All features
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.FeatureType.None">
            <summary>
            No features
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.FeatureType.Line">
            <summary>
            Line features such as railways or streams
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.FeatureType.Polygon">
            <summary>
            Polygon features such as lakes, parking lots, or parks
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.FeatureType.Point">
            <summary>
            Point features such as cities
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.GISObject">
            <summary>
            Abstract superclass of all feature types that can be returned from <see cref="T:Telogis.GeoBase.DataQuery"/>.
            Provides column data retrieval functionality for custom data objects.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.GISObject.m_columns">
            <summary>
            Columns in the order that they appear in the data.
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.GISObject.DistanceTo(Telogis.GeoBase.LatLon,Telogis.GeoBase.DistanceUnit)">
            <summary>
            Calculate the shortest distance from the given point to this GISObject.
            </summary>
            <remarks>
            This distance is calculated using an arc, as opposed to the (longer) straight-line distance.
            The use of an arc returns the true shortest distance, taking into account the curvature of
            the earth's surface.
            </remarks>
            <param name="location">The given point, as a <see cref="T:Telogis.GeoBase.LatLon"/>.</param>
            <param name="units">The desired <see cref="T:Telogis.GeoBase.DistanceUnit"/> of the calculated distance.</param>
            <returns>Distance in given units</returns>
        </member>
        <member name="P:Telogis.GeoBase.GISObject.FeatureType">
            <summary>
            The type (shape) of the feature this object represents.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.GISObject.Columns">
            <summary>
            Every GIS object comprises a series of columns.
            This function returns the names of the columns for this GISObject.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.GISObject.Item(System.String)">
            <summary>
            The field of the specified column for this object.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.GISObject.WKT">
            <summary>
            Returns the WKT representation of the Geometry.
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.Line">
             <summary>
             Represents a non-street line feature, such as a railway,
             stream or custom line data.
             </summary>
             <remarks>
             When this object represents a built-in GeoBase line, flags tell GeoBase whether
             this line is a railway, river etc.<br/>
             Flags are assigned automatically when data is loaded from the database.
             For custom data, the flags and name fields are ignored and the inherited column
             access methods from <see cref="T:Telogis.GeoBase.GISObject"/> should be used to access feature
             attributes.
             <para><b>Related articles</b>: <a href="154a60d1-c146-49bc-a913-3e4c067ae8c6.htm">Data Query Concept</a>.</para>
            </remarks>
        </member>
        <member name="F:Telogis.GeoBase.Line.Flags">
            <summary>
            The flag indicates the type of line feature being represented.
            </summary>
            <remarks>
            Possible flag values are:
            <list type="table">
            <listheader><term>Flag value</term><description>Represents</description></listheader>
            <item>
            <term>0</term>
            <description>A railway tunnel.</description>
            </item>
            <item>
            <term>1</term>
            <description>A railway.</description>
            </item>
            <item>
            <term>2</term>
            <description>A river.</description>
            </item>
            <item>
            <term>3</term>
            <description>A canal.</description>
            </item>
            <item>
            <term>4</term>
            <description>A county line.</description>
            </item>
            <item>
            <term>5</term>
            <description>A state line.</description>
            </item>
            <item>
            <term>6</term>
            <description>A country line (border).</description>
            </item>
            </list>
            </remarks>
        </member>
        <member name="M:Telogis.GeoBase.Line.#ctor">
            <summary>
            Create a new Line object.
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.Line.#ctor(Telogis.GeoBase.Geometry.LineString[])">
            <summary>
            Create a new line object for a specified sequence of points.
            </summary>
            <param name="lines">The geometric sequence of points describing the lines.</param>
        </member>
        <member name="M:Telogis.GeoBase.Line.DistanceTo(Telogis.GeoBase.LatLon,Telogis.GeoBase.DistanceUnit)">
            <summary>
            Calculates the shortest distance from the given point to this Line.
            </summary>
            <remarks>
            This distance is calculated using an arc, as opposed to the (longer) straight-line distance.
            The use of an arc returns the true shortest distance, taking into account the curvature of
            the earth's surface.
            </remarks>
            <param name="location">The given point, as a <see cref="T:Telogis.GeoBase.LatLon"/></param>
            <param name="units">Unit that measurement is returned in.</param>
            <returns>Distance in units.</returns>
        </member>
        <member name="P:Telogis.GeoBase.Line.FeatureType">
            <summary>
            Returns FeatureType.Line.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Line.Name">
            <summary>
            The label for this feature.
            </summary>
            <remarks>
            This field will only be populated for GeoBase features - custom data will not
            use this field.
            </remarks>
        </member>
        <member name="P:Telogis.GeoBase.Line.Geometries">
            <summary>
            The LineString geometries associated with this feature.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Line.Points">
            <summary>
            An array of <see cref="T:Telogis.GeoBase.LatLon"/> points that define this line.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Line.Geometry">
            <summary>
            The line geometry associated with this feature.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Line.WKT">
            <summary>
            Returns the WKT representation of the Geometry.
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.PointFeature">
            <summary>
            A PointFeature may be a city from a GeoBase data file,
            or a point feature from a custom dataset.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.PointFeature.Flags">
            <summary>
            Flags to describe the PointFeature.
            </summary>
            <remarks>
            List of defined flag values
            <list type="table">
            <listheader>
            <term>Flag value</term>
            <description>Meaning</description>
            </listheader>
            <item>
            <term>0</term>
            <description>Small Village</description>
            </item>
            <item>
            <term>1</term>
            <description>Village</description>
            </item>
            <item>
            <term>2</term>
            <description>Large Village</description>
            </item>
            <item>
            <term>3</term>
            <description>Town</description>
            </item>
            <item>
            <term>4</term>
            <description>Large Town</description>
            </item>
            <item>
            <term>5</term>
            <description>Small City</description>
            </item>
            <item>
            <term>6</term>
            <description>City</description>
            </item>
            <item>
            <term>7</term>
            <description>Major City</description>
            </item>
            </list>
            </remarks>
        </member>
        <member name="F:Telogis.GeoBase.PointFeature.Geometries">
            <summary>
            An array of points that represent the location of the point feature. 
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.PointFeature.#ctor">
            <summary>
            Creates a new point feature with no associated location.
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.PointFeature.#ctor(Telogis.GeoBase.LatLon[])">
            <summary>
            Creates a new point feature for a specified collection of locations.
            </summary>
            <param name="points">The <see cref="F:Telogis.GeoBase.PointFeature.Geometries"/> of the point feature.</param>
        </member>
        <member name="M:Telogis.GeoBase.PointFeature.DistanceTo(Telogis.GeoBase.LatLon,Telogis.GeoBase.DistanceUnit)">
             <summary>
             Measure distance between this and another LatLon (using <see cref="M:Telogis.GeoBase.MathUtil.GreatCircle(System.Double,System.Double,System.Double,System.Double)"/>).
             </summary>
             <param name="location">Destination LatLon.</param>
             <param name="units">Unit that measurement is returned in.</param>
             <returns>Distance in requested units.</returns>
             <remarks>The value returned represents the distance over the face of a sphere rather
             than the straight line distance. See <see cref="M:Telogis.GeoBase.MathUtil.GreatCircle(System.Double,System.Double,System.Double,System.Double)"/> for more information.
            </remarks>
        </member>
        <member name="P:Telogis.GeoBase.PointFeature.FeatureType">
            <summary>
            Returns FeatureType.Point to indicate that this is a point feature.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.PointFeature.Name">
            <summary>
            If this is a GeoBase city feature, then this is the name of the city.
            For custom data, this is a value of the "name" column if it exists.
            The default name can be overridden by setting this property.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.PointFeature.Point">
            <summary>
            A <see cref="T:Telogis.GeoBase.LatLon"/> representing the location of this feature.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.PointFeature.WKT">
            <summary>
            Returns the WKT representation of the Geometry.
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.Polygon">
            <summary>
            Represents a closed polygonal map feature such as a lake or national park.
            </summary>
            <remarks>
            The geometry associated with a polygon feature can be accessed via the Geometry property.
            <para><b>Related articles</b>: <a href="154a60d1-c146-49bc-a913-3e4c067ae8c6.htm">Data Query Concept</a>.</para>
            </remarks>
        </member>
        <member name="M:Telogis.GeoBase.Polygon.#ctor">
            <summary>
            Create a new Polygon object.
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.Polygon.#ctor(Telogis.GeoBase.Geometry.Polygon[])">
            <summary>
            Create a new Polygon object with the specified geometry.
            </summary>
            <param name="polygons">The polygon geometry for this Polygon object.</param>
        </member>
        <member name="F:Telogis.GeoBase.Polygon.Flags">
            <summary>
            The flag represents the type of polygon feature, for example a lake.
            </summary>
            <remarks>
            Different water size types are available so that the renderer may
            easily determine, for a given zoom level, which water polygons are visible and
            should be rendered. The sizes given here are approximations of typical values.<br/>
            Valid flag values are:
            <list type="table">
            <listheader><term>Flag value</term><description>Represents</description></listheader>
            <item>
            <term>0</term>
            <description>Oceans</description>
            </item>
            <item>
            <term>1</term>
            <description>States</description>
            </item>
            <item>
            <term>2</term>
            <description>Cities</description>
            </item>
            <item>
            <term>3</term>
            <description>Bays</description>
            </item>
            <item>
            <term>4</term>
            <description>Water</description>
            </item>
            <item>
            <term>5</term>
            <description>Buildings</description>
            </item>
            <item>
            <term>6</term>
            <description>Unused</description>
            </item>
            <item>
            <term>7</term>
            <description>Unused</description>
            </item>
            <item>
            <term>8</term>
            <description>Airports</description>
            </item>
            <item>
            <term>9</term>
            <description>Cemeteries</description>
            </item>
            <item>
            <term>10</term>
            <description>Hospitals</description>
            </item>
            <item>
            <term>11</term>
            <description>Industrial complexes</description>
            </item>
            <item>
            <term>12</term>
            <description>Military bases</description>
            </item>
            <item>
            <term>13</term>
            <description>National parks</description>
            </item>
            <item>
            <term>14</term>
            <description>State parks</description>
            </item>
            <item>
            <term>15</term>
            <description>County parks</description>
            </item>
            <item>
            <term>16</term>
            <description>Shopping centers</description>
            </item>
            <item>
            <term>17</term>
            <description>Sports complexes</description>
            </item>
            <item>
            <term>18</term>
            <description>Colleges</description>
            </item>
            <item>
            <term>19</term>
            <description>Aircraft roads (runways &amp; taxi-ways)</description>
            </item>
            <item>
            <term>20</term>
            <description>Golf courses</description>
            </item>
            <item>
            <term>21</term>
            <description>Native American reservations</description>
            </item>
            <item>
            <term>22</term>
            <description>Countries</description>
            </item>
            <item>
            <term>23</term>
            <description>Counties</description>
            </item>
            <item>
            <term>24</term>
            <description>Islands</description>
            </item>
            </list>
            </remarks>
        </member>
        <member name="M:Telogis.GeoBase.Polygon.Contains(Telogis.GeoBase.LatLon)">
            <summary>
            Check whether a given point is inside this polygon. If the point
            is inside a hole this will return false.
            </summary>
            <param name="point">The <see cref="T:Telogis.GeoBase.LatLon">point</see> to check.</param>
            <returns><b>True</b> if the point is inside the outer ring and outside all the
            inner rings, otherwise <b>false</b>.</returns>
        </member>
        <member name="M:Telogis.GeoBase.Polygon.DistanceTo(Telogis.GeoBase.LatLon,Telogis.GeoBase.DistanceUnit)">
            <summary>
            Gets the shortest distance from the given location to the edge of this Polygon,
            in the specified units. If the given location is inside this Polygon, the distance
            returned will be zero. See <see cref="M:Telogis.GeoBase.LatLon.PythagoreanDistanceTo(Telogis.GeoBase.LatLon,Telogis.GeoBase.DistanceUnit)"/> remarks for comment
            on the accuracy of this method.
            </summary>
            <param name="location">Location</param>
            <param name="units">The result will be measured in these units</param>
            <returns>Shortest distance from <i>loc</i> to the edge of this Polygon in <i>units</i> units,
            or zero if <i>loc</i> is inside the Polygon.</returns>
        </member>
        <member name="P:Telogis.GeoBase.Polygon.FeatureType">
            <summary>
            Returns FeatureType.Polygon.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Polygon.Name">
            <summary>
            The label attached to this feature. If this object represents a feature
            in a custom dataset then this field will be equal to the "name" column if one exists.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Polygon.Abbreviation">
            <summary>
            The abbreviated label attached to this feature. If this object represents a feature
            in a custom dataset then this field will be equal to the "abbrev" column if one exists.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Polygon.Geometries">
            <summary>
            The polygon geometries associated with this feature.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Polygon.Geometry">
            <summary>
            The polygon geometry associated with this feature.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Polygon.Rings">
            <summary>
            This property is obsolete. Please use Geometries.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Polygon.WKT">
            <summary>
            Returns the WKT representation of the Geometry.
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.Polygon.Ring">
            <summary>
            Represents a ring of a polygon.
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.Polygon.Ring.Contains(Telogis.GeoBase.LatLon)">
            <summary>
            Check whether a given point is inside this ring.
            </summary>
            <param name="point">The <see cref="T:Telogis.GeoBase.LatLon">point</see> to check.</param>
            <returns><b>True</b> if the point is inside the ring, otherwise <b>false</b>.</returns>
        </member>
        <member name="P:Telogis.GeoBase.Polygon.Ring.Points">
            <summary>
            The points in <see cref="T:Telogis.GeoBase.LatLon"/> that make up this ring.
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.MultiLine">
            <summary>
            A collection of <see cref="T:Telogis.GeoBase.Line"/> objects that represent a non-road linear map feature such as a railroad or political boundary. 
            </summary>
            <remarks>This class is obsolete. A <see cref="T:Telogis.GeoBase.Line"/> can now represent multiple line geometries.</remarks>
        </member>
        <member name="F:Telogis.GeoBase.MultiLine.Lines">
            <summary>
            The individual line segments that make up this MultiLine object.
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.MultiLine.DistanceTo(Telogis.GeoBase.LatLon,Telogis.GeoBase.DistanceUnit)">
            <summary>
            Calculate the shortest distance from a specified point to this multi-line.
            </summary>
            <param name="location">The specified point, as a LatLon.</param>
            <param name="units">The distance units of the calcualated distance.</param>
            <returns>The shortest distance, in the specified units.</returns>
        </member>
        <member name="P:Telogis.GeoBase.MultiLine.FeatureType">
            <summary>
            Returns FeatureType.None because MultiLine does not correspond to a 
            single feature type.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.MultiLine.WKT">
            <summary>
            The WKT representation of this multi-line's geometry.
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.MultiPointFeature">
            <summary>
            A map feature that is made up of a collection of points (<see cref="T:Telogis.GeoBase.LatLon"/> values).
            </summary>
            <remarks>This class is obsolete. A <see cref="T:Telogis.GeoBase.PointFeature"/> can now represent multiple points.</remarks>
        </member>
        <member name="F:Telogis.GeoBase.MultiPointFeature.Points">
            <summary>
            A set of <see cref="T:Telogis.GeoBase.LatLon"/> values representing the location of this feature.
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.MultiPointFeature.DistanceTo(Telogis.GeoBase.LatLon,Telogis.GeoBase.DistanceUnit)">
            <summary>
            Measure distance between this set of points and another LatLon (using <see cref="M:Telogis.GeoBase.MathUtil.GreatCircle(System.Double,System.Double,System.Double,System.Double)"/>).
            </summary>
            <param name="location">Destination LatLon.</param>
            <param name="units">Unit that measurement is returned in.</param>
            <returns>Distance in requested units.</returns>
            <remarks>The value returned represents the distance over the face of a sphere rather
            than the straight line distance. See <see cref="M:Telogis.GeoBase.MathUtil.GreatCircle(System.Double,System.Double,System.Double,System.Double)"/> for more information.
            </remarks>
            <returns>Distance in units.</returns>
        </member>
        <member name="P:Telogis.GeoBase.MultiPointFeature.WKT">
            <summary>
            Returns the WKT representation of the Geometry.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.MultiPointFeature.FeatureType">
            <summary>
            Returns FeatureType.None because a multi-point feature does not correspond
            to a single feature type.
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.MultiPolygon">
            <summary>
            Represents a collection of <see cref="T:Telogis.GeoBase.Polygon"/>s.
            </summary>
            <remarks>This class is obsolete. A <see cref="T:Telogis.GeoBase.Polygon"/> can now contain multiple polygon geometries.</remarks>
        </member>
        <member name="F:Telogis.GeoBase.MultiPolygon.Polygons">
            <summary>
            The polygon objects that make up this MultiPolygon.
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.MultiPolygon.DistanceTo(Telogis.GeoBase.LatLon,Telogis.GeoBase.DistanceUnit)">
            <summary>
            Returns the shortest distance from a specified point to this multi-polygon.
            </summary>
            <param name="location">The specified point.</param>
            <param name="units">The units of the result.</param>
            <returns>The shortest distance.</returns>
        </member>
        <member name="P:Telogis.GeoBase.MultiPolygon.WKT">
            <summary>
            Returns the WKT geometry of this multi-polygon.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.MultiPolygon.FeatureType">
            <summary>
            Returns FeatureType.None because multi-polygons do not correspond to
            a simple feature type.
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.GeoStream.TileMap">
            <summary>
            Provides an implementation of AbstractMap (and hence IMap) that fetches map tiles from a GeoStream server.
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.GeoStream.TileMap.#ctor">
            <summary>
            Constructs a new TileMap with default parameters.
            </summary>
            <remarks>Defaults: Centered on the middle of the United States, 100x100 pixels 
            and maximum zoom.</remarks>
        </member>
        <member name="M:Telogis.GeoBase.GeoStream.TileMap.#ctor(Telogis.GeoBase.LatLon,System.Int32,System.Int32,System.Double)">
            <summary>
            Constructs a new TileMap with the specified center, width, height and zoom.
            </summary>
            <param name="Center">Center of the map, as a <see cref="T:Telogis.GeoBase.LatLon"/>.</param>
            <param name="Width">Width of the map, pixels.</param>
            <param name="Height">Height of the map, pixels.</param>
            <param name="Zoom">Zoom of the map. See <see cref="P:Telogis.GeoBase.AbstractMap.Zoom"/>.</param>
        </member>
        <member name="M:Telogis.GeoBase.GeoStream.TileMap.#ctor(Telogis.GeoBase.LatLon,System.Int32,System.Int32,System.Double,System.Int32[],System.Int32,System.Int32)">
            <summary>
            Constructs a new TileMap with the specified center, width, height, zoom, zoom levels, tile size, and tiles per supertile.
            </summary>
            <remarks>
            Using this constructor is not reccommended unless you really know what you're doing. The default zoom levels, tile size, and tiles
            per supertile have been carefully chosen to be optimal for nearly all situations.
            </remarks>
            <param name="Center">Center of the map, as a <see cref="T:Telogis.GeoBase.LatLon"/>.</param>
            <param name="Width">Width of the map, pixels.</param>
            <param name="Height">Height of the map, pixels.</param>
            <param name="Zoom">Zoom of the map. See <see cref="P:Telogis.GeoBase.AbstractMap.Zoom"/>.</param>
            <param name="Zooms">Supported zoom levels.</param>
            <param name="TileSize">Size of the map tiles, in pixels.</param>
            <param name="TilesPerSupertile">Number of tiles per SuperTile.</param>
        </member>
        <member name="M:Telogis.GeoBase.GeoStream.TileMap.CancelAsync">
            <summary>
            Cancels an active pending asynchronous map request.
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.GeoStream.TileMap.GetMap">
            <summary>
            Generates an <see cref="T:System.Drawing.Image"/> of the map.
            </summary>
            <remarks>See also <see cref="M:Telogis.GeoBase.GeoStream.TileMap.GetMap(System.Boolean,Telogis.GeoBase.MapProgress,System.Boolean@)"/>.
            </remarks>
            <returns>A 32bpp <see cref="T:System.Drawing.Image"/>.</returns>
        </member>
        <member name="M:Telogis.GeoBase.GeoStream.TileMap.GetMap(System.Boolean,Telogis.GeoBase.MapProgress,System.Boolean@)">
            <summary>
            Generates an <see cref="T:System.Drawing.Image"/> of the map.
            </summary>
            <param name="isAsync">When <b>true</b> the map is requested asynchronously.</param>
            <param name="progressDelegate">Used to update the progress as the map is being drawn. <i>Only used for asynchronous maps.</i></param>
            <param name="done">Indicates when the map has been drawn (evaluates to <b>true</b>).</param>
            <returns>A 32bpp <see cref="T:System.Drawing.Image"/>.</returns>
        </member>
        <member name="M:Telogis.GeoBase.GeoStream.TileMap.GetMapAsync(Telogis.GeoBase.MapProgress,System.Boolean@)">
            <summary>
            Gets an <see cref="T:System.Drawing.Image"/> of the map by executing an asynchronous map request.
            </summary>
            <param name="progressDelegate">Used to update the progress as the map is being drawn. <i>Only used for asynchronous maps.</i></param>
            <param name="done">Indicates when the map has been drawn (evaluates to true).</param>
            <returns>A 32bpp <see cref="T:System.Drawing.Image"/>.</returns>
        </member>
        <member name="M:Telogis.GeoBase.GeoStream.TileMap.GetMapAsync(Telogis.GeoBase.IMap,Telogis.GeoBase.MapProgress,System.Boolean@)">
            <summary>
            Generates the map asynchronously, using the specified map as the map on the
            RenderContext when rendering.
            </summary>
            <param name="caller">Map to use on the RenderContext when rendering.</param>
            <param name="progressDelegate">Used to update the progress as the map is being
            drawn.</param>
            <param name="done">Indicates when the map has been drawn (evaluates to true).</param>
            <returns>A 32bpp <see cref="T:System.Drawing.Image"/>.</returns>
        </member>
        <member name="M:Telogis.GeoBase.GeoStream.TileMap.doRenderers(System.Drawing.Image,Telogis.GeoBase.IMap)">
            <summary>
            Render the renderers.
            </summary>
            <param name="img">Image to render on.</param>
            <param name="caller">Map to use in the RenderContext.</param>
        </member>
        <member name="M:Telogis.GeoBase.GeoStream.TileMap.LatLontoXY(System.Int32@,System.Int32@,Telogis.GeoBase.LatLon)">
            <summary>
            Converts a <see cref="T:Telogis.GeoBase.LatLon"/> to X,Y (screen) coordinates.
            </summary>
            <param name="x">x-coordinate.</param>
            <param name="y">y-coordinate.</param>
            <param name="loc">A <see cref="T:Telogis.GeoBase.LatLon"/> to convert.</param>
        </member>
        <member name="M:Telogis.GeoBase.GeoStream.TileMap.XYtoLatLon(System.Int32,System.Int32)">
            <summary>
            Converts X,Y (screen) coordinates to a <see cref="T:Telogis.GeoBase.LatLon"/>.
            </summary>
            <param name="x">x-coordinate.</param>
            <param name="y">y-coordinate.</param>
            <returns>A converted <see cref="T:Telogis.GeoBase.LatLon"/>.</returns>
        </member>
        <member name="M:Telogis.GeoBase.GeoStream.TileMap.Contains(Telogis.GeoBase.LatLon)">
            <summary>
            Returns <b>true</b> if a given <see cref="T:Telogis.GeoBase.LatLon">point</see> lies in
            the map.
            </summary>
            <param name="aPoint">A <see cref="T:Telogis.GeoBase.LatLon"/> (point) to test.</param>
            <returns><b>True</b> if the point lies within the map, otherwise <b>false</b>.</returns>
        </member>
        <member name="M:Telogis.GeoBase.GeoStream.TileMap.ZoomToBoundingBox(Telogis.GeoBase.BoundingBox,System.Int32)">
            <summary>
            Centers and zooms the map to encompass a given <see cref="T:Telogis.GeoBase.BoundingBox"/>.
            </summary>
            <remarks>If the map is asynchronously updating the update will be canceled before the
            center and zoom of the map is altered. See <see cref="M:Telogis.GeoBase.GeoStream.TileMap.CancelAsync"/>.</remarks>
            <param name="abox">A <see cref="T:Telogis.GeoBase.BoundingBox"/> to zoom onto.</param>
            <param name="buffer">The buffer value specifies the number of pixels on each side of <b>abox</b> 
            that must remain clear for the purpose of visual separation.</param>
        </member>
        <member name="M:Telogis.GeoBase.GeoStream.TileMap.GetNearestZoom(System.Double)">
            <summary>
            Given an arbitrary zoom level this method will match it to the nearest zoom level supported by this map.
            </summary>
            <param name="z"></param>
            <returns></returns>
        </member>
        <member name="M:Telogis.GeoBase.GeoStream.TileMap.SetProperty(System.String,System.Object)">
            <summary>
            Sets a custom property for the map.
            </summary>
            <param name="name">Name of the property to set.</param>
            <param name="prop_value">Desired value of the property.</param>
            <returns><b>True</b> if the property name was recognized and the value set, otherwise <b>false</b>.</returns>
        </member>
        <member name="M:Telogis.GeoBase.GeoStream.TileMap.Dispose">
            <summary>
            <i>Performs no function. See <see cref="T:Telogis.GeoBase.AbstractMap"/>.</i>
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.GeoStream.TileMap.Busy">
            <summary>
            Indicate if this map is busy processing an asynchronous map request. 
            </summary>
            <remarks><b>True</b> is the map is busy, otherwise <b>false</b>.</remarks>
        </member>
        <member name="P:Telogis.GeoBase.GeoStream.TileMap.Center">
            <summary>
            Gets or sets the center of the map, given a <see cref="T:Telogis.GeoBase.LatLon"/>.
            </summary>
            <remarks>If the map is asynchronously updating the update will be canceled before the
            center of the map is altered. See <see cref="M:Telogis.GeoBase.GeoStream.TileMap.CancelAsync"/>.</remarks>
        </member>
        <member name="P:Telogis.GeoBase.GeoStream.TileMap.Heading">
            <summary>
            Gets or sets the current heading of the map. Map labels will be rotated.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.GeoStream.TileMap.MapQuality">
            <summary>
            Gets or sets the <see cref="T:Telogis.GeoBase.MapQuality">quality</see> of this map.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.GeoStream.TileMap.Perspective">
            <summary>
            Gets or sets <see cref="T:Telogis.GeoBase.MapPerspective">Telogis.GeoBase.MapPerspective</see>
            for this map. Defaults to 2D (the only perspective supported on a TileMap). 
            </summary>
            <remarks>An exception will be thrown if you attempt to modify the drawing perspective.
            The 2D perspective is the only perspective supported on a TileMap.</remarks>
        </member>
        <member name="P:Telogis.GeoBase.GeoStream.TileMap.PixelSizeMeters">
            <summary>
            Gets the number of meters on the map that each pixel represents.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.GeoStream.TileMap.PixelSizeMiles">
            <summary>
            Gets the number of miles on the map that each pixel represents.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.GeoStream.TileMap.Projected">
            <summary>
            Defines whether the map may be projected. Always <b>false</b> as Tile Maps cannot be projected.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.GeoStream.TileMap.Renderer">
            <summary>
            Gets or sets the <see cref="T:Telogis.GeoBase.IMapRenderer">renderer</see> used on this map.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.GeoStream.TileMap.RenderLabels">
            <summary>
            Gets whether labels are to be rendered. Always <b>true</b> as Tile Maps must
            have labels.
            </summary>
            <remarks>Does not allow modification - throws an exception.</remarks>
        </member>
        <member name="P:Telogis.GeoBase.GeoStream.TileMap.Satellite">
            <summary>
            Whether satellite imagery is turned on.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.GeoStream.TileMap.SatelliteLayerName">
            <summary>
            The name of the satellite layer.  "" means no satellite imagery.  "on" means Digital
            Globe.  Anything else is the WMS layer name.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.GeoStream.TileMap.Size">
            <summary>
            Gets or sets the size of the map.
            </summary>
            <remarks>If the map is asynchronously updating the update will be canceled before the
            size of the map is altered. See <see cref="M:Telogis.GeoBase.GeoStream.TileMap.CancelAsync"/>.</remarks>
        </member>
        <member name="P:Telogis.GeoBase.GeoStream.TileMap.Style">
            <summary>
            Gets or sets the <see cref="T:Telogis.GeoBase.MapStyle">style</see> of this map.
            </summary>
            <remarks>To set a style the tileserver must allow the upload of styles.</remarks>
        </member>
        <member name="P:Telogis.GeoBase.GeoStream.TileMap.TilePerSuperTile">
            <summary>
            The number of tiles per super tile. See
            <a href="44c61d28-c568-44b3-9ab4-5136a51a56ae.htm">GeoStream Tile Coordinates</a>.
            </summary>
            <remarks>If the map is asynchronously updating the update will be canceled before the
            number of tiles per super tile is altered. See <see cref="M:Telogis.GeoBase.GeoStream.TileMap.CancelAsync"/>.</remarks>
        </member>
        <member name="P:Telogis.GeoBase.GeoStream.TileMap.TileSize">
            <summary>
            Gets or sets the tilesize of the map, in pixels.
            </summary>
            <remarks>If the map is asynchronously updating the update will be canceled before the
            tilesize of the map is altered. See <see cref="M:Telogis.GeoBase.GeoStream.TileMap.CancelAsync"/>.</remarks>
        </member>
        <member name="P:Telogis.GeoBase.GeoStream.TileMap.Zoom">
            <summary>
            Gets or sets the zoom level of the map.
            </summary>
            <remarks><para>See <see cref="P:Telogis.GeoBase.AbstractMap.Zoom"/> for an
            explanation of zoom levels</para><para>If the map is asynchronously updating the update will be canceled before the
            zoom of the map is altered. See <see cref="M:Telogis.GeoBase.GeoStream.TileMap.CancelAsync"/>.</para>
            </remarks>
        </member>
        <member name="P:Telogis.GeoBase.GeoStream.TileMap.ZoomLevel">
            <summary>
            Gets or sets the zoom level of the map.
            </summary>
            <remarks><para>See <see cref="P:Telogis.GeoBase.AbstractMap.Zoom"/> for an explanation of zoom levels.</para>
            <para>If the map is asynchronously updating the update will be canceled before the
            zoom level of the map is altered. See <see cref="M:Telogis.GeoBase.GeoStream.TileMap.CancelAsync"/>.</para>
            </remarks>
        </member>
        <member name="P:Telogis.GeoBase.GeoStream.TileMap.Zooms">
            <summary>
            Gets or sets the supported zoom levels of the map.
            </summary>
            <remarks>If the map is asynchronously updating the update will be canceled before the
            zoom levels of the map are altered. See <see cref="M:Telogis.GeoBase.GeoStream.TileMap.CancelAsync"/>.</remarks>
        </member>
        <member name="T:Telogis.GeoBase.GeoStream.TileMap.TileAction">
            <summary>
            An action to be performed for each tile on the map. If this action returns true it
            tells the loop function to break out.
            </summary>
            <param name="drawLocation"></param>
            <param name="tileParams"></param>
            <returns></returns>
        </member>
        <member name="M:Telogis.GeoBase.GeoStream.Server.JSONReachableArea.WithinTimeSpan(Telogis.GeoBase.LatLon,System.Double,Telogis.GeoBase.Routing.RoutingStrategy)">
            <summary>
            Computes the reachable area within a given time. 
            </summary>
            <param name="start">The location to start from.</param>
            <param name="maxTime">The maximum travel time from <paramref name="start"/> in seconds.</param>
            <param name="strategy">The strategy used to conduct the routing algorithm.</param>
        </member>
        <member name="M:Telogis.GeoBase.GeoStream.Server.JSONReachableArea.WithinDistance(Telogis.GeoBase.LatLon,System.Double,Telogis.GeoBase.DistanceUnit,Telogis.GeoBase.Routing.RoutingStrategy)">
            <summary>
            Computes the reachable area within a given distance. 
            </summary>
            <param name="start">The location to start from.</param>
            <param name="maxDistance">The maximum travel distance from <paramref name="start"/>.</param>
            <param name="unit">The unit <paramref name="maxDistance"/> is given in.</param>
            <param name="strategy">The strategy used to conduct the routing algorithm.</param>
        </member>
        <member name="M:Telogis.GeoBase.GeoStream.Server.JSONReachableArea.Destroy(System.String)">
            <summary>
            Free all resources associated with a given area.
            </summary>
            <param name="guid">The area's GUID.</param>
        </member>
        <member name="M:Telogis.GeoBase.GeoStream.Server.JSONReachableArea.ComputeConvexPolygon(System.String)">
            <summary>
            Computes the smallest convex polygon which contains every reachable link.
            </summary>
            <param name="guid">The area's GUID.</param>
            <returns>A PolygonFence representing the convex polygon</returns>
        </member>
        <member name="M:Telogis.GeoBase.GeoStream.Server.JSONReachableArea.ComputeConcavePolygon(System.String)">
            <summary>
            Computes the smallest concave polygon which contains every reachable link.
            </summary>
            <param name="guid">The area's GUID.</param>/
        </member>
        <member name="M:Telogis.GeoBase.GeoStream.Server.JSONReachableArea.ComputeStreetLinks(System.String)">
            <summary>
            Computes all reachable streets links
            </summary>
            <param name="guid">The area's GUID.</param>/
            <returns>A GeoFenceCollection containing every reachable street link</returns>
        </member>
        <member name="T:Telogis.GeoBase.Geometry.LineString">
            <summary>
            A geometric line described by a string of points.
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.Geometry.LineString.#ctor(Telogis.GeoBase.LatLon[])">
            <summary>
            Creates a LineString from the given points.
            </summary>
            <param name="points">
            Points to be used for the LineString.
            These points will not be copied.
            </param>
        </member>
        <member name="M:Telogis.GeoBase.Geometry.LineString.#ctor(System.String)">
            <summary>
            Construct a LineString from WKT.
            </summary>
            <param name="wkt">Well-known text (WKT) containing polygon geometry.</param>
        </member>
        <member name="M:Telogis.GeoBase.Geometry.LineString.Add(Telogis.GeoBase.LatLon)">
            <summary>
            Add the given point to the end of the LineString.
            </summary>
            <param name="point">The point to add.</param>
        </member>
        <member name="M:Telogis.GeoBase.Geometry.LineString.LineLength(Telogis.GeoBase.DistanceUnit)">
            <summary>
            Calculate the length of this LineString in the specified <see cref="T:Telogis.GeoBase.DistanceUnit"/>s.
            </summary>
            <param name="unit"></param>
            <returns>Length of the LineString in the given units</returns>
        </member>
        <member name="M:Telogis.GeoBase.Geometry.LineString.GetEnumerator">
            <summary>
            Enumerate all points in the line string.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Telogis.GeoBase.Geometry.LineString.Substring(System.Int32,System.Int32)">
            <summary>
            Gets a LineString that is a sub-string of the current LineString
            </summary>
            <returns>A LineString</returns>
        </member>
        <member name="M:Telogis.GeoBase.Geometry.LineString.DistanceTo(Telogis.GeoBase.LatLon,System.Int32@)">
            <summary>
            Calculates the shortest distance (in degrees) from the given point to this LineString.
            </summary>
            <remarks>
            This distance is calculated using an arc, as opposed to the (longer) straight-line distance.
            The use of an arc returns the true shortest distance, taking into account the curvature of 
            the earth's surface.
            </remarks>
            <param name="point">The given point, as a <see cref="T:Telogis.GeoBase.LatLon"/></param>
            <param name="segment">The zero-based index representing the segment of the LineString that 
            is nearest to <i>point</i></param>
            <returns>Distance in degrees</returns>
        </member>
        <member name="M:Telogis.GeoBase.Geometry.LineString.PythagoreanDistanceTo(Telogis.GeoBase.LatLon,System.Int32@)">
            <summary>
            Calculates the distance (in degrees) from the given point to this LineString.
            </summary>
            <remarks>
            This distance is calculated using the (longer) straight-line distance. To find the true
            shortest distance use the <see cref="M:Telogis.GeoBase.Geometry.LineString.DistanceTo(Telogis.GeoBase.LatLon)"/> method.
            </remarks>
            <param name="point">The given point, as a <see cref="T:Telogis.GeoBase.LatLon"/></param>
            <param name="segment">The zero-based index representing the segment of the LineString that 
            is nearest to <i>point</i></param>
            <returns>Distance in degrees</returns>
        </member>
        <member name="M:Telogis.GeoBase.Geometry.LineString.DistanceTo(Telogis.GeoBase.LatLon,System.Int32@,Telogis.GeoBase.DistanceUnit)">
            <summary>
            Calculates the shortest distance (in degrees) from the given point to this LineString.
            </summary>
            <remarks>
            This distance is calculated using an arc, as opposed to the (longer) straight-line distance.
            The use of an arc returns the true shortest distance, taking into account the curvature of 
            the earth's surface.
            </remarks>
            <param name="point">The given point, as a <see cref="T:Telogis.GeoBase.LatLon"/></param>
            <param name="segment">The zero-based index representing the segment of the LineString that 
            is nearest to <i>point</i></param>
            <param name="unit">The unit for the returned distance.</param>
            <returns>Distance in the specified units.</returns>
        </member>
        <member name="M:Telogis.GeoBase.Geometry.LineString.DistanceTo(Telogis.GeoBase.LatLon)">
            <summary>
            Calculates the shortest distance from the given point to this LineString.
            </summary>
            <remarks>
            This distance is calculated using an arc, as opposed to the (longer) straight-line distance.
            The use of an arc returns the true shortest distance, taking into account the curvature of 
            the earth's surface.
            </remarks>
            <param name="point">The given point, as a <see cref="T:Telogis.GeoBase.LatLon"/></param>
            <returns>Distance in degrees</returns>
        </member>
        <member name="M:Telogis.GeoBase.Geometry.LineString.DistanceTo(Telogis.GeoBase.LatLon,Telogis.GeoBase.DistanceUnit)">
            <summary>
            Calculates the shortest distance from the given point to this LineString.
            </summary>
            <remarks>
            This distance is calculated using an arc, as opposed to the (longer) straight-line distance.
            The use of an arc returns the true shortest distance, taking into account the curvature of 
            the earth's surface.
            </remarks>
            <param name="point">The given point, as a <see cref="T:Telogis.GeoBase.LatLon"/></param>
            <param name="units">The unit for the returned distance.</param>
            <returns>Distance in degrees</returns>
        </member>
        <member name="M:Telogis.GeoBase.Geometry.LineString.PercentAlong(Telogis.GeoBase.LatLon,System.Boolean@)">
            <summary>
            Returns the distance that loc is from the start of the linestring, as a percentage.
            </summary>
            <param name="Loc"></param>
            <param name="left"></param>
            <returns></returns>
        </member>
        <member name="P:Telogis.GeoBase.Geometry.LineString.Points">
            <summary>
            Gets/sets an array of <see cref="T:Telogis.GeoBase.LatLon">LatLon</see>s.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Geometry.LineString.Length">
            <summary>
            The number of points in this LineString.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Geometry.LineString.Item(System.Int32)">
            <summary>
            Gets the nth point from this LineString.
            </summary>
            <param name="n">The index of the point on this LineString. The index is zero-based.</param>
            <returns>The nth point in this LineString.</returns>
        </member>
        <member name="P:Telogis.GeoBase.Geometry.LineString.IsLoop">
            <summary>
            Returns true of this LineString forms a connected loop.
            A loop has at least 4 points, where the first and last points are equal.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Geometry.LineString.Reverse">
            <summary>
            Returns a LineString with the points in the opposite order to this LineString.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Geometry.LineString.BoundingBox">
            <summary>
            Return the minimum-sized BoundingBox encapsulating all the points on this LineString.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Geometry.LineString.FirstPoint">
            <summary>
            The first point of this LineString.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Geometry.LineString.LastPoint">
            <summary>
            The last point of this LineString.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Geometry.LineString.WKT">
            <summary>
            Returns this LineString in WKT string format.
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.Clustering.ClusterVisualization">
            <summary>
            An abstract cluster visualization that sets the feature icon to be a purple dot.
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.Clustering.IClusterVisualization">
            <summary>
            Generates images to represent clusters. Each image has a unique image ID.
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.Clustering.IClusterVisualization.GetImageId(Telogis.GeoBase.Clustering.Cluster)">
            <summary>
            The image ID for a specified cluster.
            </summary>
            <param name="cluster">The cluster to be visualized.</param>
            <returns>The image id for the cluster.</returns>
            <remarks>The image id for a cluster can be assigned to the
            <see cref="P:Telogis.GeoBase.Clustering.ImageId"/> property of the cluster.</remarks>
        </member>
        <member name="M:Telogis.GeoBase.Clustering.IClusterVisualization.GetImage(System.String)">
            <summary>
            Obtain a cluster image for a specified image ID.
            The image ID should have been generated by a call to GetImageId on this visualization
            </summary>
            <param name="imageId">The image ID for the cluster.</param>
            <returns>The image that represents the cluster.</returns>
        </member>
        <member name="P:Telogis.GeoBase.Clustering.IClusterVisualization.MinimumClusterSize">
            <summary>
            Get the minimum cluster size (pixels) for this visualization.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Clustering.IClusterVisualization.FeatureSize">
            <summary>
            Gets the size of an unclusted feature.
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.Clustering.ClusterVisualization.#ctor">
            <summary>
            Creates a new ClusterVisualization with default settings.
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.Clustering.ClusterVisualization.#ctor(System.Int32,System.Int32)">
            <summary>
            Creates a new ClusterVisualization with a specified minimum cluster size.
            </summary>
            <param name="minimumClusterWidth">The minimum width of the cluster, in pixels.</param>
            <param name="minimumClusterHeight">The minimum height of the cluster, in pixels.</param>
        </member>
        <member name="M:Telogis.GeoBase.Clustering.ClusterVisualization.SetFeatureImage(System.Drawing.Image,System.Drawing.Point)">
            <summary>
            Sets a new feature image. A feature image is displayed for clusters of only one item.
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.Clustering.ClusterVisualization.GetImageId(Telogis.GeoBase.Clustering.Cluster)">
            <summary>
            The image ID for a specified cluster.
            </summary>
            <param name="cluster">The cluster to be visualized.</param>
            <returns>The image id for the cluster.</returns>
            <remarks>The image id for a cluster can be assigned to the <see cref="P:Telogis.GeoBase.Clustering.ImageId"/> property of the cluster.</remarks>
        </member>
        <member name="M:Telogis.GeoBase.Clustering.ClusterVisualization.GetImage(System.String)">
            <summary>
            Obtain a cluster image for a specified image ID.
            The image ID should have been generated by a call to GetImageId on this visualization
            </summary>
            <param name="imageId">The image ID for the cluster.</param>
            <returns>The image that represents the cluster.</returns>
        </member>
        <member name="P:Telogis.GeoBase.Clustering.ClusterVisualization.MinimumClusterSize">
            <summary>
            The minimum size (pixels) of a Cluster.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Clustering.ClusterVisualization.FeatureSize">
            <summary>
            The size (pixels) of a Feature.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Clustering.ClusterVisualization.FeatureImage">
            <summary>
            An image drawn when a cluster contains only one feature.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Clustering.ClusterVisualization.FeatureImageAnchor">
            <summary>
            The offset of the point on FeatureImage that will be located at (0,0) on the image
            returned by the visualization.
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.Clustering.Cluster">
            <summary>
            A cluster that represents multiple items on the map that are spatially close together
            relative to the map zoom.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Clustering.Cluster.Rectangle">
            <summary>
            The rectangle for this cluster - defined in terms of IMap space.
            When running on a GeoStream server the coordinates are in terms of the world-bitmap.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Clustering.Cluster.CenterOffset">
            <summary>
            Obsolete, use <see cref="P:Telogis.GeoBase.Clustering.Cluster.CenterOfGravityOffset"/> instead.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Clustering.Cluster.CenterOfGravityOffset">
            <summary>
            The center of the cluster in IMap space, relative to the Rectangle.XY.
            Not necessarily the center of the rectangle, as the center is calculated based on the
            locations of the items within the cluster.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Clustering.Cluster.BoundingBox">
            <summary>
            The BoundingBox of the cluster in LatLon space.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Clustering.Cluster.CenterLatLon">
            <summary>
            Obsolete, use <see cref="P:Telogis.GeoBase.Clustering.Cluster.CenterOfGravityLatLon"/> instead.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Clustering.Cluster.CenterOfGravityLatLon">
            <summary>
            The center of the cluster in LatLon space.
            Not necessarily the center of the rectangle, as the center is calculated based on the
            locations of the items within the cluster.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Clustering.Cluster.Count">
            <summary>
            The number of items in the cluster.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Clustering.Cluster.ImageId">
            <summary>
            A string used to create the cluster image.  This string is set by the
            <see cref="T:Telogis.GeoBase.Clustering.IClusterVisualization"/> and contains
            sufficient information for the
            <see cref="T:Telogis.GeoBase.Clustering.IClusterVisualization"/> to render an image of
            the cluster without access to any other information about the cluster or its items.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Clustering.Cluster.Summary">
            <summary>
            An object created by <see cref="T:Telogis.GeoBase.Clustering.ClusterSummaryDelegate"/>
            for containing information that is used to visualize the cluster.  The summary
            information can be used by an
            <see cref="T:Telogis.GeoBase.Clustering.IClusterVisualization"/> to produce an ImageId.
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.Repositories.IllegalRepository">
            <summary>
            A repository that cannot be used.  Any attempts to use this repository results in an
            InternalRepositoryException.  This repository exists to police situations where a
            thread's current repository must be expressly set.
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.Internal.Mapping.AuxLayerOperationHandler">
            <summary>
            Applies auxiliary overlays at stages during the map rendering process, and flattens the
            image at the end of the rendering.
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.Internal.Mapping.AuxLayerOperationHandler.ApplyOverlays(Telogis.GeoBase.RenderMode)">
            <summary>
            Applies "OVERLAY LAYER" statements from the CAM file by moving the layers from source
            onto target with the specified alpha.  For example,
            OVERLAY LAYER [PRELABELLING], SOURCE 1, TARGET 0, ALPHA 50
            will move the first aux layer onto the base layer with an alpha of 50.  The moved layer
            is reset to be fully transparent.
            </summary>
            <param name="renderMode">Current stage of rendering</param>
        </member>
        <member name="M:Telogis.GeoBase.Internal.Mapping.AuxLayerOperationHandler.FlattenOverlays(System.Int32)">
            <summary>
            Flattens all unrequested auxiliary layers onto the final requested layer with an alpha
            of 255.  For example, in a local map we only ever request layer 0.  So anything that
            was drawn on an auxiliary layer since that layer was last applied to layer 0 will
            get flattened.
            </summary>
            <param name="finalLayer">The index of the final requested layer</param>
        </member>
        <member name="M:Telogis.GeoBase.Internal.Mapping.AuxLayerOperationHandler.ApplyOverlay(System.Int32,System.Int32,System.Int32)">
            <summary>
            Moves a single layer from source to target, with the specified alpha.
            </summary>
            <param name="sourceLayer">Index of the source layer.  0 is base layer, 1+ are
            auxiliary layers.</param>
            <param name="targetLayer">Index of the target layer.  0 is base layer, 1+ are
            auxiliary layers.</param>
            <param name="alpha">Alpha to apply to the source layer as it's moved.</param>
        </member>
        <member name="T:Telogis.GeoBase.Authentication.TEA">
            <summary>
            TEA - Tiny Encryption Algorithm
            
            This class server as the symmetric encryption algorithm for
             encryping session tokens on the GeoStream server.
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.Routing.RampMovement">
            <summary>
            An abstract class detailing freeway ramp movements- Geobase provides three sub-classes of this: <see cref="T:Telogis.GeoBase.Routing.FFRampMovement"/>, <see cref="T:Telogis.GeoBase.Routing.FSRampMovement"/>, and <see cref="T:Telogis.GeoBase.Routing.SFRampMovement"/>.
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.Routing.FFRampMovement">
            <summary>
            Freeway to freeway ramp movement - occurs when moving from one freeway to another.
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.Routing.FSRampMovement">
            <summary>
            Freeway to surface ramp movement
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.Routing.SFRampMovement">
            <summary>
            Surface to freeway ramp movement
            </summary>
        </member>
        <member name="T:Telogis.UI.GBXMLException">
            <summary>
            An exception thrown by GeoBase on invalid XML data
            </summary>
        </member>
        <member name="M:Telogis.UI.GBXMLException.#ctor(System.String,System.Object[])">
            <summary>
            A generic GBXML exception
            </summary>
            <param name="details"></param>
            <param name="fmt"></param>
        </member>
        <member name="T:Telogis.UI.VerticalAlignment">
            <summary>
            Describes the vertical alignment of a control.
            </summary>
        </member>
        <member name="F:Telogis.UI.VerticalAlignment.Stretch">
            <summary>
            Control stretches to fill the height of the container
            </summary>
        </member>
        <member name="F:Telogis.UI.VerticalAlignment.Top">
            <summary>
            Control is aligned with the top of the container
            </summary>
        </member>
        <member name="F:Telogis.UI.VerticalAlignment.Center">
            <summary>
            Control is aligned vertically with the center of the container
            </summary>
        </member>
        <member name="F:Telogis.UI.VerticalAlignment.Bottom">
            <summary>
            Control is aligned with the bottom of the container
            </summary>
        </member>
        <member name="T:Telogis.UI.HorizontalAlignment">
            <summary>
            Describes the horizontal alignment of a control
            </summary>
        </member>
        <member name="F:Telogis.UI.HorizontalAlignment.Stretch">
            <summary>
            Control stretches to fill the width of the container
            </summary>
        </member>
        <member name="F:Telogis.UI.HorizontalAlignment.Left">
            <summary>
            Control is aligned with the left edge of the container
            </summary>
        </member>
        <member name="F:Telogis.UI.HorizontalAlignment.Center">
            <summary>
            Control is aligned horizontally with the center of the container
            </summary>
        </member>
        <member name="F:Telogis.UI.HorizontalAlignment.Right">
            <summary>
            Control is aligned with the right ede of the container
            </summary>
        </member>
        <member name="T:Telogis.UI.ContainerShape">
            <summary>
            Describes the shape of the container
            </summary>
        </member>
        <member name="F:Telogis.UI.ContainerShape.Wide">
            <summary>
            Horizontal width &gt; vertical height
            </summary>
        </member>
        <member name="F:Telogis.UI.ContainerShape.High">
            <summary>
            Vertical height &gt; horizontal width
            </summary>
        </member>
        <member name="F:Telogis.UI.ContainerShape.Square">
            <summary>
            Vertical height and horizontal width are equal
            </summary>
        </member>
        <member name="T:Telogis.UI.ControlInfo">
            <summary>
            Used to specify additional layout information for a control in GAML.  
            </summary>
        </member>
        <member name="F:Telogis.UI.ControlInfo.margins">
            <summary>
            Top, Left, Bottom, Right 
            </summary>
        </member>
        <member name="P:Telogis.UI.ControlInfo.VerticalAlignment">
            <summary>
            Gets or sets the vertical alignment for this control
            </summary>
            <remarks>Defaults to stretch - this allows the size of the control to be specified relative
            to the margins around the edge</remarks>
        </member>
        <member name="P:Telogis.UI.ControlInfo.HorizontalAlignment">
            <summary>
            Gets or sets the horizontal alignment for this control
            </summary>
            <remarks>Defaults to stretch - this allows the size of the control to be specified relative
            to the margins around the edge</remarks>
        </member>
        <member name="P:Telogis.UI.ControlInfo.Width">
            <summary>
            Gets or sets the width of the control, in pixels
            </summary>
        </member>
        <member name="P:Telogis.UI.ControlInfo.Height">
            <summary>
            Gets or sets the height of the control, in pixels
            </summary>
        </member>
        <member name="P:Telogis.UI.ControlInfo.Split">
            <summary>
            Gets or sets the number of splits in this control
            </summary>
        </member>
        <member name="P:Telogis.UI.ControlInfo.Margin">
            <summary>
            Sets the margins around the control: (top, left, bottom, right)
            </summary>
        </member>
        <member name="P:Telogis.UI.ControlInfo.Margins">
            <summary>
            Gets or sets the margins around the control (in pixels). The margins are
            specified in an array of integers: (top, left, bottom, right)
            </summary>
            <remarks>An exception will be thrown if an attempt is made to set Margins 
            to anything but an array of four integer elements</remarks>
        </member>
        <member name="P:Telogis.UI.ControlInfo.TopMargin">
            <summary>
            Gets or sets the margin between the top of the control and the top of the container (in pixels)
            </summary>
        </member>
        <member name="P:Telogis.UI.ControlInfo.LeftMargin">
            <summary>
            Gets or sets the margin between the left edge of the control and the left edge of the container (in pixels)
            </summary>
        </member>
        <member name="P:Telogis.UI.ControlInfo.BottomMargin">
            <summary>
            Gets or sets the margin between the bottom of the control and the bottom of the container (in pixels)
            </summary>
        </member>
        <member name="P:Telogis.UI.ControlInfo.RightMargin">
            <summary>
            Gets or sets the margin between the right edge of the control and the right edge of the container (in pixels)
            </summary>
        </member>
        <member name="P:Telogis.UI.ControlInfo.Top">
            <summary>
            Gets or sets the position of the top of the control relative to the container's top edge. 
            May be used in conjunction with <see cref="P:Telogis.UI.ControlInfo.Left">Left</see> to position the control.
            </summary>
        </member>
        <member name="P:Telogis.UI.ControlInfo.Left">
            <summary>
            Gets or sets the position of the left of the control relative to the container's left edge. 
            May be used in conjunction with <see cref="P:Telogis.UI.ControlInfo.Top">Top</see> to position the control.
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.GBFSStream">
            <summary>
            Do not work directly with GBFS data. Use the properties and methods of a Repository instead.
            </summary>
            <remarks>GeoBase data is contained within a GBFS data structure. This class is used internally to
            treat the GBFS data as a <see cref="T:System.IO.Stream"/> for simple manipulation.</remarks>
        </member>
        <member name="M:Telogis.GeoBase.GBFSStream.Close">
            <summary>
            Close the <see cref="T:System.IO.Stream"/>.
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.GBFSStream.Flush">
            <summary>
            <i>Implemented, but non-functional (it is not possible to flush a read-only stream).</i>
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.GBFSStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Read a sequence of bytes from the stream and advance the stream pointer accordingly.
            </summary>
            <param name="buffer">A byte array to read into as a buffer.</param>
            <param name="offset">The offset in <b>buffer</b>, which we start reading into.</param>
            <param name="count">The maximum number of bytes to read from the stream.</param>
            <returns></returns>
        </member>
        <member name="M:Telogis.GeoBase.GBFSStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            Set the position within the <see cref="T:System.IO.Stream"/> for successive <see cref="M:Telogis.GeoBase.GBFSStream.Read(System.Byte[],System.Int32,System.Int32)">reads</see>.
            </summary>
            <param name="offset">Position offset to set, relative to <b>origin</b>.</param>
            <param name="origin">The beginning of the stream, end of the stream or current
            position in the stream. See <see cref="T:System.IO.SeekOrigin"/>.</param>
            <returns></returns>
        </member>
        <member name="M:Telogis.GeoBase.GBFSStream.SetLength(System.Int64)">
            <summary>
            Adjusting the length of a read-only stream is not supported.
            </summary>
            <remarks>Throws a NotSupportedException.</remarks>
            <param name="value"></param>
        </member>
        <member name="M:Telogis.GeoBase.GBFSStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            <i>Writing to a read-only stream is not supported.</i>
            </summary>
            <exception cref="T:System.NotSupportedException">Thrown when this method is called.</exception>
            <param name="buffer"></param>
            <param name="offset"></param>
            <param name="count"></param>
        </member>
        <member name="M:Telogis.GeoBase.GBFSStream.#ctor(System.String,System.String)">
            <summary>
            Encapsulates a new <see cref="T:Telogis.GeoBase.GBFSStream"/> around a given file.
            </summary>
            <param name="file">This can be either the GBFS file or the path to a directory.</param>
            <param name="filename">This is the name of an internal file within the GBFS file or directory.</param>
        </member>
        <member name="M:Telogis.GeoBase.GBFSStream.#ctor(System.IntPtr,System.IntPtr)">
            <summary>
            This constructor is for internal use only.
            </summary>
            <param name="repos"></param>
            <param name="handle"></param>
        </member>
        <member name="M:Telogis.GeoBase.GBFSStream.#ctor(System.IntPtr,System.String)">
            <summary>
            This constructor is for internal use only.
            </summary>
            <param name="repos"></param>
            <param name="filename"></param>
        </member>
        <member name="P:Telogis.GeoBase.GBFSStream.CanRead">
            <summary>
            Reading from the stream is allowed (always <b>true</b>).
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.GBFSStream.CanSeek">
            <summary>
            Seeking within the stream is allowed (always <b>true</b>).
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.GBFSStream.CanWrite">
            <summary>
            Writing to the stream is not allowed (always <b>false</b>).
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.GBFSStream.Length">
            <summary>
            Gets the length of the <see cref="T:System.IO.Stream"/>.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.GBFSStream.Position">
            <summary>
            Gets or sets the position in the <see cref="T:System.IO.Stream"/>.
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.FeatureSupport">
            <summary>
            Specified the features supported by a <see cref="N:Telogis.GeoBase.Repositories">Repository</see>, 
            such as mapping or geocoding.</summary>
        </member>
        <member name="F:Telogis.GeoBase.FeatureSupport.SupportNone">
            <summary>
            No features are supported.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.FeatureSupport.SupportMapping">
            <summary>
            Mapping is supported.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.FeatureSupport.SupportReverseGeocoding">
            <summary>
            Reverse GeoCoding is supported.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.FeatureSupport.SupportForwardGeocoding">
            <summary>
            Forward GeoCoding is supported.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.FeatureSupport.SupportRouting">
            <summary>
            Routing is supported.
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.LibraryMode">
            <summary>
            Describes the mode of operation of the GeoBase library: Local or GeoStream.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.LibraryMode.Local">
            <summary>
            Operations are performed on the local GeoBase database.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.LibraryMode.GeoStream">
            <summary>
            Operations are performed on a GeoStream server, configured via Telogis.GeoBase.GeoStream.GeoStreamSettings.
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.Platform">
            <summary>
            Describes the operating platform: desktop or mobile
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Platform.Windows">
            <summary>
            Windows (Desktop)
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Platform.WindowsCE">
            <summary>
            Windows CE (Mobile)
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.Settings">
            <summary>
            Configures the GeoBase settings and loads required datafiles.
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.Settings.CleanUp">
            <summary>
            Clean up unmanaged resources used by the application.
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.Settings.HaveCountry(Telogis.GeoBase.Country)">
            <summary>
            <b>Deprecated - see example</b>. Returns true if data for the given country is available.
            </summary>
            <param name="country"><see cref="T:Telogis.GeoBase.Country"/></param>
            <returns><b>true</b> if data for the given <i>country</i> is available.</returns>
            <example>
            We should test for available country data using the current thread repository:
            <code lang="C#">
            bool dataPresent = Repository.CurrentThreadRepository.HasCountry(country);
            </code>
            </example>
        </member>
        <member name="F:Telogis.GeoBase.Settings.ContactInfo">
            <summary>
            Contact information for the vendor using this GeoBase component.
            </summary>
            <remarks>See <see cref="T:Telogis.GeoBase.ContactInfo"/>.</remarks>
        </member>
        <member name="F:Telogis.GeoBase.Settings.UseMobileGeocoder">
            <summary>
            Use an alternate geocoder to perform forward geocoding.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Settings.LoadError">
            <summary>
            If an error occurred this string will contain the error.
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.Settings.Main(System.String[])">
            <summary>
            For internal use.
            </summary>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="M:Telogis.GeoBase.Settings.GeoBasePath(System.String)">
            <summary>
            Looks up the given path in the GeoBase folder and returns an absolute path.  The
            GeoBase folder is looked up in the registry at HKCU\Software\Telogis\GeoBase\path.  If
            that key is not found then it is looked up at HKLM\Software\Telogis\GeoBase\path.  If
            that key is not found either then the folder containing the GeoBase .NET DLL is used,
            except on Windows CE where the GeoBaseFolder path is used instead.
            </summary>
            <param name="path">The subpath to look up in the GeoBase folder</param>
            <returns>An absolute path to the search path.</returns>
        </member>
        <member name="M:Telogis.GeoBase.Settings.GetGeoBasePath(Microsoft.Win32.RegistryKey)">
            <summary>
            Finds the GeoBasePath given the top level of the registry key, to give the option of looking in the current user directory first.
            </summary>
            <param name="topLevelKey"> Specifies which directory to look in. </param>
            <returns> Returns the GeoBase directory path </returns>
        </member>
        <member name="F:Telogis.GeoBase.Settings.Units">
            <summary>
            Default units that will be used in
            <see cref="T:Telogis.GeoBase.Routing.Directions"/>.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Settings.MessagesBundle">
            <summary>
            Default MessagesBundle that will be used in
            <see cref="T:Telogis.GeoBase.Routing.Directions"/>.
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.Settings.GetAvailableCultures">
            <summary>
            Gets the cultures available for generating directions. The head of the array is the default culture of the application.
            </summary>
            <returns>An array of cultures.</returns>
        </member>
        <member name="P:Telogis.GeoBase.Settings.Version">
            <summary>
            A string representation of the GeoBase version number.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Settings.GlobalNumOfWaitingThreads">
            <summary>
            The number of execution threads waiting for an asynchronous operation to complete. 
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Settings.HaveGlobalData">
            <summary>
            <b>Deprecated - see example</b>. Returns true if global data is available.
            </summary>
            <example>
            We should test for global data using the current thread repository:
            <code lang="C#">
            bool gData = Repository.CurrentThreadRepository.HasGlobalData;
            </code>
            </example>
        </member>
        <member name="P:Telogis.GeoBase.Settings.Platform">
            <summary>
            Gets the operating platform that version of GeoBase is designed to run on.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Settings.IsBeta">
            <summary>
            Gets whether this version of GeoBase is a beta version.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Settings.LibraryMode">
            <summary>
            <b>Deprecated - see example</b>. Gets or sets the <see cref="T:Telogis.GeoBase.LibraryMode"/>: Local or GeoStream.
            </summary>
            <example>
            We should should test for GeoStream mode using the current thread repository:
            <code lang="C#">
            bool isGeoStream = (Repository.IsCurrentRepositoryGeoStream);
            </code>
            Changing the LibraryMode (as done historically) is now equivalent to setting the CurrentThreadRepository.
            For example, to change to GeoStream mode:
            <code lang="C#">
            Repository.CurrentThreadRepository = new GeoStreamRepository({"http://tileserver/GeoStream"});
            </code>
            </example>
        </member>
        <member name="T:Telogis.GeoBase.Navigation.Notification">
            <summary>
            An abstract class implemented to provide event notifications, such as just prior to making a 
            turn or a notification that occurs every mile traveled. It is envisaged that this is used with a GPS unit.
            </summary>
            <remarks>
            <para><b>Related articles</b>: <a href="db780b3f-ffb3-496b-b36d-a068907e7244.htm">Using Notifications and Events</a>, 
            <a href="7d529a6b-15f5-4cba-8dab-5f21cfbbdbd7.htm">Using an XmlWaveAnnouncer</a>, 
            <a href="7e963d53-c906-4fcb-8b71-595736b9f15b.htm">Using a TurnBox</a>, 
            <a href="b05c2695-f388-4acd-af71-cc5b240a0def.htm">Navigation Tutorial</a>.</para>
            </remarks>
        </member>
        <member name="M:Telogis.GeoBase.Navigation.Notification.ShouldRaiseMapFollow(Telogis.GeoBase.Navigation.Position,Telogis.GeoBase.LatLon)">
            <summary>
            Checks if this notification should be raised in map follow mode for the provided position.
            </summary>
            <param name="pos">The current Position as returned by the GPS.</param>
            <param name="loc">The latlon on the street grid. May be the same as pos if no streets are close enough.</param>
            <returns><b>True</b> if this notification should be raised in map follow mode,
            otherwise <b>false</b>.</returns>
        </member>
        <member name="M:Telogis.GeoBase.Navigation.Notification.ShouldRaise(Telogis.GeoBase.Navigation.NavigationEvent,Telogis.GeoBase.Navigation.Position,Telogis.GeoBase.LatLon,Telogis.GeoBase.DistanceMeter)">
            <summary>
            Checks if this notification should be raised in navigation mode.
            </summary>
            <param name="desc">The current NavigationEvent</param>
            <param name="pos">The current Position as returned by the GPS.</param>
            <param name="loc">The latlon on the street grid. May be the same as pos if no streets are close enough.</param>
            <param name="interDist">The distance since the last intersection.</param>
            <returns><b>True</b> if this notification should be raised in navigation mode,
            otherwise <b>false</b>.</returns>
        </member>
        <member name="F:Telogis.GeoBase.Navigation.Notification.m_Handler">
            <summary>
            The handler used in handling each event.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Navigation.Notification.Handler">
            <summary>
            Gets the event handler.
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.Navigation.TimeNotification">
            <summary>
            An abstract class implemented to handle timed notifications.
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.Navigation.BeforeTurnTimeNotification">
            <summary>
            A Notification that will trigger once per NavigationEvent, as long
            as it is queried between its earliest and latest times.
            </summary>
            <remarks>
            <para>This notification will never trigger when in map follow mode.</para>
            <para>See <see cref="T:Telogis.GeoBase.Navigation.NotificationDelegate"/> for an example
            on how notifications may be used.</para>
            <para><b>Related articles</b>: <a href="db780b3f-ffb3-496b-b36d-a068907e7244.htm">Using Notifications and Events</a>, 
            <a href="7d529a6b-15f5-4cba-8dab-5f21cfbbdbd7.htm">Using an XmlWaveAnnouncer</a>.</para>
            </remarks>
            <example>
            Constructing a BeforeTurnTimeNotification that is called whenever the user is less than 30 seconds
            but more than 10 seconds from their next turn:
            <code>BeforeTurnTimeNotification notify = new BeforeTurnTimeNotification(TimeSpan.FromSeconds(30), TimeSpan.FromSeconds(10), MyHandler);</code>
            </example>
        </member>
        <member name="F:Telogis.GeoBase.Navigation.BeforeTurnTimeNotification.earliest">
            <summary>
            The earliest time (in seconds) from the turn before the event triggers.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Navigation.BeforeTurnTimeNotification.latest">
            <summary>
            The latest time (in seconds) from the turn before the event triggers.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Navigation.BeforeTurnTimeNotification.lastEvent">
            <summary>
            The last <see cref="T:Telogis.GeoBase.Navigation.NavigationEvent"/> to trigger.
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.Navigation.BeforeTurnTimeNotification.#ctor(System.TimeSpan,System.TimeSpan,Telogis.GeoBase.Navigation.NotificationDelegate)">
            <summary>
            Constructs a new BeforeTurnTimeNotification.
            </summary>
            <param name="earliest">The earliest time at which this notification should be triggered (eg, 30 seconds before a turn).</param>
            <param name="latest">The latest time at which this notification should be triggered (eg, 10 seconds before a turn).</param>
            <param name="handler">The <see cref="T:Telogis.GeoBase.Navigation.NotificationDelegate"/> used to handle the event.</param>
        </member>
        <member name="M:Telogis.GeoBase.Navigation.BeforeTurnTimeNotification.ShouldRaiseMapFollow(Telogis.GeoBase.Navigation.Position,Telogis.GeoBase.LatLon)">
            <summary>
            Checks if this notification should be raised in navigation mode.
            </summary>
            <param name="pos"></param>
            <param name="loc"></param>
            <returns><b>False</b> - this notification should not be raised in navigation mode.</returns>
        </member>
        <member name="M:Telogis.GeoBase.Navigation.BeforeTurnTimeNotification.ShouldRaise(Telogis.GeoBase.Navigation.NavigationEvent,Telogis.GeoBase.Navigation.Position,Telogis.GeoBase.LatLon,Telogis.GeoBase.DistanceMeter)">
            <summary>
            Checks if this notification should be raised in navigation mode.
            </summary>
            <param name="desc">The current NavigationEvent</param>
            <param name="pos">The current Position as returned by the GPS.</param>
            <param name="loc">The latlon on the street grid. May be the same as pos if no streets are close enough.</param>
            <param name="interDist">The distance since the last intersection.</param>
            <returns><b>True</b> if this notification should be raised in navigation mode,
            otherwise <b>false</b>.</returns>
        </member>
        <member name="T:Telogis.GeoBase.Navigation.DistanceNotification">
            <summary>
            An abstract class used to handle distance notifications.
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.Navigation.BeforeTurnDistanceNotification">
            <summary>
            A Notification that will trigger once per NavigationEvent, as long
            as it is queried between its earliest and latest distances.
            </summary>
            <remarks>
            <para>This notification will never trigger when in map follow mode.</para>
            <para>See <see cref="T:Telogis.GeoBase.Navigation.NotificationDelegate"/> for an example
            on how notifications may be used.</para>
            <para><b>Related articles</b>: <a href="7e963d53-c906-4fcb-8b71-595736b9f15b.htm">Using a TurnBox</a>.</para>
            </remarks>
            <example>
            Constructing a BeforeTurnDistanceNotification that is called whenever the user is less than 1000 meters
            but more than 500 meters from their next turn:
            <code>BeforeTurnDistanceNotification notify = new BeforeTurnDistanceNotification(1000, 500, DistanceUnit.Meters, MyHandler);</code>
            </example>
        </member>
        <member name="F:Telogis.GeoBase.Navigation.BeforeTurnDistanceNotification.earliest">
            <summary>
            The furthest distance from the turn after which the event will trigger (measured in <i>units</i>).
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Navigation.BeforeTurnDistanceNotification.latest">
            <summary>
            The event will not trigger if the user is closer than <i>latest</i> to the turn (measured in <i>units</i>).
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Navigation.BeforeTurnDistanceNotification.units">
            <summary>
            The units in which <i>earliest</i> and <i>latest</i> are measured. See <see cref="T:Telogis.GeoBase.DistanceUnit"/>.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Navigation.BeforeTurnDistanceNotification.lastEvent">
            <summary>
            The last <see cref="T:Telogis.GeoBase.Navigation.NavigationEvent"/> to trigger.
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.Navigation.BeforeTurnDistanceNotification.#ctor(System.Double,System.Double,Telogis.GeoBase.DistanceUnit,Telogis.GeoBase.Navigation.NotificationDelegate)">
            <summary>
            Creates a new notification that triggers when the user is in a defined distance window
            from the next turn.
            </summary>
            <param name="earliest">Notification occurs when we are less than this distance from the turn.</param>
            <param name="latest">Notification occurs when we are more than this distance from the turn.</param>
            <param name="units"><see cref="T:Telogis.GeoBase.DistanceUnit"/> in which <i>earliest</i> and <i>latest</i> are measured in.</param>
            <param name="handler">The <see cref="T:Telogis.GeoBase.Navigation.NotificationDelegate"/> used to handle the event.</param>
        </member>
        <member name="M:Telogis.GeoBase.Navigation.BeforeTurnDistanceNotification.ShouldRaiseMapFollow(Telogis.GeoBase.Navigation.Position,Telogis.GeoBase.LatLon)">
            <summary>
            This notification is not raised in map follow mode.
            </summary>
            <param name="pos"></param>
            <param name="loc"></param>
            <returns>Always returns <b>false</b>.</returns>
        </member>
        <member name="M:Telogis.GeoBase.Navigation.BeforeTurnDistanceNotification.ShouldRaise(Telogis.GeoBase.Navigation.NavigationEvent,Telogis.GeoBase.Navigation.Position,Telogis.GeoBase.LatLon,Telogis.GeoBase.DistanceMeter)">
            <summary>
            Checks if this notification should be raised in navigation mode.
            </summary>
            <param name="desc">The current NavigationEvent</param>
            <param name="pos">The current Position as returned by the GPS.</param>
            <param name="loc">The LatLon on the street grid. May be the same as pos if no streets are close enough.</param>
            <param name="interDist">The distance since the last intersection.</param>
            <returns><b>True</b> if this notification should be raised in navigation mode,
            otherwise <b>false</b>.</returns>
        </member>
        <member name="T:Telogis.GeoBase.Navigation.AfterTurnDistanceNotification">
            <summary>
            A Notification that will trigger once per NavigationEvent, at the
            specified distance after a turn.
            </summary>
            <remarks>
            <para>This notification will never trigger when in map follow mode.</para>
            <para>See <see cref="T:Telogis.GeoBase.Navigation.NotificationDelegate"/> for an example
            on how notifications may be used.</para>
            <para><b>Related articles</b>: <a href="db780b3f-ffb3-496b-b36d-a068907e7244.htm">Using Notifications and Events</a>, 
            <a href="7e963d53-c906-4fcb-8b71-595736b9f15b.htm">Using a TurnBox</a>.</para>
            </remarks>
            <example>
            Constructing an AfterTurnDistanceNotification that is called 10 meters after any turn:
            <code>AfterTurnDistanceNotification notify = new AfterTurnDistanceNotification(10, DistanceUnit.Meters, MyHandler);</code>
            </example>
        </member>
        <member name="F:Telogis.GeoBase.Navigation.AfterTurnDistanceNotification.distance">
            <summary>
            The distance (measured in <i>units</i>) after every turn when the notification should be raised.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Navigation.AfterTurnDistanceNotification.units">
            <summary>
            The units in which <i>distance</i> is measured. See <see cref="T:Telogis.GeoBase.DistanceUnit"/>.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Navigation.AfterTurnDistanceNotification.lastEvent">
            <summary>
            The last <see cref="T:Telogis.GeoBase.Navigation.NavigationEvent"/> which was triggered.
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.Navigation.AfterTurnDistanceNotification.#ctor(System.Double,Telogis.GeoBase.DistanceUnit,Telogis.GeoBase.Navigation.NotificationDelegate)">
            <summary>
            Creates a notification that occurs a given distance after <i>any</i> turn.
            </summary>
            <param name="distance">The distance after a turn to trigger the event.</param>
            <param name="units">The <see cref="T:Telogis.GeoBase.DistanceUnit">units</see> in which <i>distance</i> is measured.</param>
            <param name="handler">The <see cref="T:Telogis.GeoBase.Navigation.NotificationDelegate"/> to handle the event.</param>
        </member>
        <member name="M:Telogis.GeoBase.Navigation.AfterTurnDistanceNotification.#ctor(Telogis.GeoBase.Navigation.NotificationDelegate)">
            <summary>
            Creates a notification that occurs at every turn.
            </summary>
            <param name="handler">The <see cref="T:Telogis.GeoBase.Navigation.NotificationDelegate"/> to handle the event.</param>
        </member>
        <member name="M:Telogis.GeoBase.Navigation.AfterTurnDistanceNotification.ShouldRaiseMapFollow(Telogis.GeoBase.Navigation.Position,Telogis.GeoBase.LatLon)">
            <summary>
            This notification is not raised in map follow mode.
            </summary>
            <param name="pos"></param>
            <param name="loc"></param>
            <returns>Always returns <b>false</b>.</returns>
        </member>
        <member name="M:Telogis.GeoBase.Navigation.AfterTurnDistanceNotification.ShouldRaise(Telogis.GeoBase.Navigation.NavigationEvent,Telogis.GeoBase.Navigation.Position,Telogis.GeoBase.LatLon,Telogis.GeoBase.DistanceMeter)">
            <summary>
            Checks if this notification should be raised in navigation mode.
            </summary>
            <param name="desc">The current NavigationEvent</param>
            <param name="pos">The current Position as returned by the GPS.</param>
            <param name="loc">The LatLon on the street grid. May be the same as pos if no streets are close enough.</param>
            <param name="interDist">The distance since the last intersection.</param>
            <returns><b>True</b> if this notification should be raised in navigation mode,
            otherwise <b>false</b>.</returns>
        </member>
        <member name="T:Telogis.GeoBase.Navigation.DistanceIntervalNotification">
            <summary>
            A DistanceIntervalNotification is a Notification that will trigger every time the object has moved a
            specified distance.
            </summary>
            <remarks>
            <para>This notification behaves identically in map follow and routing mode.</para>
            <para>See <see cref="T:Telogis.GeoBase.Navigation.NotificationDelegate"/> for an example
            on how notifications may be used.</para>
            <para><b>Related articles</b>: <a href="db780b3f-ffb3-496b-b36d-a068907e7244.htm">Using Notifications and Events</a>.</para>
            </remarks>
            <example>
            Constructing a DistanceIntervalNotification that is called every 10 meters:
            <code>DistanceIntervalNotification notify = new DistanceIntervalNotification(10, DistanceUnit.Meters, MyHandler);</code>
            </example>
        </member>
        <member name="F:Telogis.GeoBase.Navigation.DistanceIntervalNotification.distance">
            <summary>
            The distance interval (measured in <i>units</i>) after which every notification is raised.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Navigation.DistanceIntervalNotification.units">
            <summary>
            The units in which <i>distance</i> is measured. See <see cref="T:Telogis.GeoBase.DistanceUnit"/>.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Navigation.DistanceIntervalNotification.lastloc">
            <summary>
            The last location at which the notification is raised. Used in conjunction with the current
            location to determine whether a new notification should be raised.
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.Navigation.DistanceIntervalNotification.#ctor(System.Double,Telogis.GeoBase.DistanceUnit,Telogis.GeoBase.Navigation.NotificationDelegate)">
            <summary>
            Creates a new notification that is called every time a given distance is traveled.
            </summary>
            <param name="distance">The distance interval at which to call the notification, meausured in <i>units</i>.</param>
            <param name="units">The <see cref="T:Telogis.GeoBase.DistanceUnit">units</see> in which <i>distance</i> is measured.</param>
            <param name="handler">The <see cref="T:Telogis.GeoBase.Navigation.NotificationDelegate"/> to handle the event.</param>
        </member>
        <member name="M:Telogis.GeoBase.Navigation.DistanceIntervalNotification.ShouldRaiseMapFollow(Telogis.GeoBase.Navigation.Position,Telogis.GeoBase.LatLon)">
            <summary>
            Checks if this notification should be raised in map follow mode for the provided position.
            </summary>
            <param name="pos">The current Position as returned by the GPS.</param>
            <param name="loc">The latlon on the street grid. May be the same as pos if no streets are close enough.</param>
            <returns><b>True</b> if this notification should be raised in map follow mode,
            otherwise <b>false</b>.</returns>
        </member>
        <member name="M:Telogis.GeoBase.Navigation.DistanceIntervalNotification.ShouldRaise(Telogis.GeoBase.Navigation.NavigationEvent,Telogis.GeoBase.Navigation.Position,Telogis.GeoBase.LatLon,Telogis.GeoBase.DistanceMeter)">
            <summary>
            This notification should never be raised in navigation mode.
            </summary>
            <param name="desc"></param>
            <param name="pos"></param>
            <param name="loc"></param>
            <param name="interDist"></param>
            <returns>Always returns <b>false</b>.</returns>
        </member>
        <member name="T:Telogis.GeoBase.Navigation.RoundaboutExitNotification">
            <summary>
            A Notification that will trigger every time an exit is made off a roundabout.
            </summary>
            <remarks>
            This notification will never trigger when in map follow mode.
            </remarks>
            <example>
            Constructing a RoundaboutExitNotification:
            <code>RoundaboutExitNotification notify = new RoundaboutExitNotification(MyHandler);</code>
            </example>
        </member>
        <member name="F:Telogis.GeoBase.Navigation.RoundaboutExitNotification.roundabout">
            <summary>
            See <see cref="T:Telogis.GeoBase.Routing.RoundAboutMovement"/>.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Navigation.RoundaboutExitNotification.notifyDist">
            <summary>
            Distance after a roundabout that the notification should occur.
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.Navigation.RoundaboutExitNotification.#ctor(Telogis.GeoBase.Navigation.NotificationDelegate)">
            <summary>
            Constructs a new notification that is called every time we leave a roundabout.
            </summary>
            <param name="handler">The <see cref="T:Telogis.GeoBase.Navigation.NotificationDelegate"/> to handle the event.</param>
        </member>
        <member name="M:Telogis.GeoBase.Navigation.RoundaboutExitNotification.ShouldRaiseMapFollow(Telogis.GeoBase.Navigation.Position,Telogis.GeoBase.LatLon)">
            <summary>
            This nofication is never raised in map follow mode.
            </summary>
            <param name="pos"></param>
            <param name="loc"></param>
            <returns>Always returns <b>false</b>.</returns>
        </member>
        <member name="M:Telogis.GeoBase.Navigation.RoundaboutExitNotification.ShouldRaise(Telogis.GeoBase.Navigation.NavigationEvent,Telogis.GeoBase.Navigation.Position,Telogis.GeoBase.LatLon,Telogis.GeoBase.DistanceMeter)">
            <summary>
            Checks if this notification should be raised in navigation mode.
            </summary>
            <param name="desc">The current NavigationEvent</param>
            <param name="pos">The current Position as returned by the GPS.</param>
            <param name="loc">The latlon on the street grid. May be the same as pos if no streets are close enough.</param>
            <param name="interDist">The distance since the last intersection.</param>
            <returns><b>True</b> if this notification should be raised in navigation mode,
            otherwise <b>false</b>.</returns>
        </member>
        <member name="T:Telogis.GeoBase.Navigation.DepartureNotification">
            <summary>
            A Notification that will trigger every time a stop is departed
            </summary>
            <remarks>
            <para>This notification will never trigger when in map follow mode.</para>
            <para>See <see cref="T:Telogis.GeoBase.Navigation.NotificationDelegate"/> for an example
            on how notifications may be used.</para>
            </remarks>
            <example>
            Constructing a DepartureNotification:
            <code>DepartureNotification notify = new DepartureNotification(MyHandler);</code>
            </example>
        </member>
        <member name="M:Telogis.GeoBase.Navigation.DepartureNotification.#ctor(Telogis.GeoBase.Navigation.NotificationDelegate)">
            <summary>
            Constructs a new notification that is called every time we depart a stop.
            </summary>
            <param name="handler">The <see cref="T:Telogis.GeoBase.Navigation.NotificationDelegate"/> to handle the event.</param>
        </member>
        <member name="M:Telogis.GeoBase.Navigation.DepartureNotification.ShouldRaiseMapFollow(Telogis.GeoBase.Navigation.Position,Telogis.GeoBase.LatLon)">
            <summary>
            Checks if this notification should be raised in map follow mode for the provided position.
            </summary>
            <param name="pos">The current Position as returned by the GPS.</param>
            <param name="loc">The latlon on the street grid. May be the same as pos if no streets are close enough.</param>
            <returns><b>True</b> if this notification should be raised in map follow mode,
            otherwise <b>false</b>.</returns>
        </member>
        <member name="M:Telogis.GeoBase.Navigation.DepartureNotification.ShouldRaise(Telogis.GeoBase.Navigation.NavigationEvent,Telogis.GeoBase.Navigation.Position,Telogis.GeoBase.LatLon,Telogis.GeoBase.DistanceMeter)">
            <summary>
            Checks if this notification should be raised in navigation mode.
            </summary>
            <param name="desc">The current NavigationEvent</param>
            <param name="pos">The current Position as returned by the GPS.</param>
            <param name="loc">The latlon on the street grid. May be the same as pos if no streets are close enough.</param>
            <param name="interDist">The distance since the last intersection.</param>
            <returns><b>True</b> if this notification should be raised in navigation mode,
            otherwise <b>false</b>.</returns>
        </member>
        <member name="T:Xheo.Licensing.TrialLimit">
            <summary>
            Marks a license as a trial license and limits the time they can use the
            product.
            </summary>
            <remarks>
            By including a trial limit, developers can determine allow end users to try
            their product before purchasing. Developers can also check the IsTrial property on the
            license returned from LicenseManger.Validate to see if the license is a trial 
            and alter code accordingly.
            <para>
            	If the end date of the limit is more then 1 year from the started
            	date, the license is not considered a timed trial.
            </para>
            <para>
            	The expiration date of the license should be long after the end date of 
            	the trial so that the GUI will still be displayed with only the buy option
            	selected.
            </para>
            <p>
            	See <see href="../Backgrounders/TrialVersions.html">Trial Versions</see> for
            	more information how XHEO|Licensing supports trial versions.
            </p>
            <seealso href="../Backgrounders/TrialVersions.html">Trial Versions</seealso>
            </remarks>
        </member>
        <member name="M:Xheo.Licensing.TrialLimit.#ctor">
            <summary>
            Initializes a new instance of the TrialLimit class.
            </summary>
        </member>
        <member name="M:Xheo.Licensing.TrialLimit.#ctor(System.String)">
            <summary>
            Initializes a new instance of the TrialLimit class.
            </summary>
        </member>
        <member name="M:Xheo.Licensing.TrialLimit.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the TrialLimit class.
            </summary>
        </member>
        <member name="M:Xheo.Licensing.TrialLimit.#ctor(System.String,System.String,System.Boolean,System.String,System.DateTime,System.DateTime,System.String,System.String)">
            <summary>
            Initializes a new instance of the TrialLimit class.
            </summary>
        </member>
        <member name="M:Xheo.Licensing.TrialLimit.#ctor(System.String,System.String,System.Boolean,System.String,System.DateTime,System.DateTime)">
            <summary>
            Initializes a new instance of the TrialLimit class.
            </summary>
        </member>
        <member name="M:Xheo.Licensing.TrialLimit.Validate(System.ComponentModel.LicenseContext,System.Type,System.Object)">
            <summary>
            Validates that the license being granted is within the limits enforced by
            this object.
            </summary>
            <param name="context">
            	The LicenseContext passed to <see cref="M:System.ComponentModel.LicenseProvider.GetLicense(System.ComponentModel.LicenseContext,System.Type,System.Object,System.Boolean)"/>.
            </param>
            <param name="type">
            	The Type of the object being licensed.
            </param>
            <param name="instance">
            	The instance of the object being licensed.
            </param>
            <returns>
            	Returns true if the limits are valid, otherwise false.
            </returns>
        </member>
        <member name="M:Xheo.Licensing.TrialLimit.LoadFromXml(System.Xml.XmlNode)">
            <summary>
            Loads the contents of a Limit from an XML string.
            </summary>
            <param name="node">
            	The XML string to load from.
            </param>
            <returns>
            	Returns true if the load was successful, otherwise false.
            </returns>
        </member>
        <member name="M:Xheo.Licensing.TrialLimit.SaveToXml(System.Xml.XmlNode)">
            <summary>
            Saves the contents of the Limit as an XML string.
            </summary>
            <returns>
            	Returns the saved XML.
            </returns>
        </member>
        <member name="M:Xheo.Licensing.TrialLimit.GetDetailsDescription">
            <summary>
            Overrides <see cref="M:Xheo.Licensing.Limit.GetDetailsDescription"/>.
            </summary>
        </member>
        <member name="P:Xheo.Licensing.TrialLimit.Terms">
            <summary>
            Gets the terms of the trial. If the terms contains a URL, the page will be
            displayed.
            </summary>
        </member>
        <member name="P:Xheo.Licensing.TrialLimit.PurchaseUrl">
            <summary>
            Gets the URL where the full version can be purchased. The license 
            <see cref="P:Xheo.Licensing.ExtendedLicense.SerialNumber"/> and a <see cref="T:Xheo.Licensing.MachineProfile"/> hash are
            appended to the end of the url automatically.
            </summary>
        </member>
        <member name="P:Xheo.Licensing.TrialLimit.InfoUrl">
            <summary>
            Gets or sets the URL where the more information can be found.
            </summary>
        </member>
        <member name="P:Xheo.Licensing.TrialLimit.UseGui">
            <summary>
            Gets or sets a value that indicates if a trial form should be displayed.
            </summary>
        </member>
        <member name="P:Xheo.Licensing.TrialLimit.UsePurchaseGui">
            <summary>
            used to purchase the a license, or if a new browser window should be opened
            to the purchase url instead.
            </summary>
        </member>
        <member name="P:Xheo.Licensing.TrialLimit.Started">
            <summary>
            Gets or sets the date when the trial was started.
            </summary>
        </member>
        <member name="P:Xheo.Licensing.TrialLimit.Ends">
            <summary>
            Gets or sets the date when the trial ends.
            </summary>
        </member>
        <member name="P:Xheo.Licensing.TrialLimit.Duration">
            <summary>
            Gets or sets the duration of the trial in days.
            <seealso href="../Backgrounders/TrialVersions.html">Trial Versions</seealso>
            </summary>
        </member>
        <member name="P:Xheo.Licensing.TrialLimit.BitmapResource">
            <summary>
            Gets or sets the assembly qualified name of a resource to display in the bitmap
            area of the form. Should be 456 x 280. You can also specify a remote JPEG or GIF
            image by using a fully qualified URL.
            </summary>
            <remarks>
            Only URLs beginning with http or https can be used.
            </remarks>
        </member>
        <member name="P:Xheo.Licensing.TrialLimit.LogoResource">
            <summary>
            Gets or sets the assembly qualified name of a resource to display in the logo 
            area of the form. Should be 88x88.  You can also specify a remote JPEG or GIF
            image by using a fully qualified URL.
            </summary>
            <remarks>
            Only URLs beginning with http or https can be used.
            </remarks>
        </member>
        <member name="P:Xheo.Licensing.TrialLimit.ShowRegisterIfAvailable">
            <summary>
            Gets or sets a value that indicates if a Register button should be
            displayed when a registration limit is available in the same license.
            </summary>
        </member>
        <member name="P:Xheo.Licensing.TrialLimit.Description">
            <summary>
            Gets the description of the limit.
            </summary>
        </member>
        <member name="P:Xheo.Licensing.TrialLimit.Name">
            <summary>
            Gets the display name of the limit.
            </summary>
        </member>
        <member name="P:Xheo.Licensing.TrialLimit.IsGui">
            <summary>
            Gets a value that indicates if a GUI is displayed to interact with the user.
            </summary>
        </member>
        <member name="P:Xheo.Licensing.TrialLimit.GuiShown">
            <summary>
            Gets a value that indicates if the GUI was shown.
            </summary>
        </member>
        <member name="P:Xheo.Licensing.TrialLimit.UnprotectedAttributes">
            <summary>
            Gets a comma separated list of attributes that can be ignored for creating and
            validating the license signature.
            </summary>
        </member>
        <member name="P:Xheo.Licensing.TrialLimit.IsTimeSensitive">
            <summary>
            Gets a value that indicates if the beta limit is time sensitive.
            </summary>
        </member>
        <member name="T:Xheo.Licensing.NonCommercialLimit">
            <summary>
            Describes, but does not enforce a Non-Commercial limit.
            </summary>
        </member>
        <member name="M:Xheo.Licensing.NonCommercialLimit.Validate(System.ComponentModel.LicenseContext,System.Type,System.Object)">
            <summary>
            Validates that the license being granted is within the limits enforced by
            this object.
            </summary>
            <param name="context">
            	The LicenseContext passed to <see cref="M:System.ComponentModel.LicenseProvider.GetLicense(System.ComponentModel.LicenseContext,System.Type,System.Object,System.Boolean)"/>.
            </param>
            <param name="type">
            	The Type of the object being licensed.
            </param>
            <param name="instance">
            	The instance of the object being licensed.
            </param>
            <returns>
            	Returns true if the limits are valid, otherwise false.
            </returns>
        </member>
        <member name="M:Xheo.Licensing.NonCommercialLimit.LoadFromXml(System.Xml.XmlNode)">
            <summary>
            Loads the contents of a Limit from an XML string.
            </summary>
            <param name="node">
            	The XML string to load from.
            </param>
            <returns>
            	Returns true if the load was successful, otherwise false.
            </returns>
        </member>
        <member name="M:Xheo.Licensing.NonCommercialLimit.SaveToXml(System.Xml.XmlNode)">
            <summary>
            Saves the contents of the Limit as an XML string.
            </summary>
            <returns>
            	Returns the saved XML.
            </returns>
        </member>
        <member name="P:Xheo.Licensing.NonCommercialLimit.Description">
            <summary>
            Gets the description of the limit.
            </summary>
        </member>
        <member name="P:Xheo.Licensing.NonCommercialLimit.Name">
            <summary>
            Gets the display name of the limit.
            </summary>
        </member>
        <member name="T:Xheo.Licensing.ComUtility">
            <summary>
            Implements various utility methods for COM interoperability.
            </summary>
        </member>
        <member name="M:Xheo.Licensing.ComUtility.#ctor">
            <summary>
            Initializes a new instance of the ComUtility class.
            </summary>
        </member>
        <member name="M:Xheo.Licensing.ComUtility.GetAssemblyForTypeLib(System.String)">
            <summary>
            Gets an assembly used to interop with the objects defined in the type
            library.
            </summary>
            <param name="typeLibraryName">
            	Name of the type library such as SHDocVw.dll
            </param>
            <returns>
            	Returns the assembly if found/created otherwise null.
            </returns>
        </member>
        <member name="T:Xheo.Licensing.ComUtility.ConversionEventHandler">
            <summary>
            
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Mercator.MAX_RADIUS">
            <summary>
            Maximum world radius that we support.
            Pixels per Radian
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.Mercator.GetMinRelExtLonForWidth(System.Int32)">
            <summary>
            Returns a value for relExtLon (ctor parameter) that, for the supplied width, would not
            cause the projection to require a world radius that's larger than the maximum value.
            </summary>
            <param name="width">The width of the map.</param>
            <returns>The minimum relExtLon that the projection supports.</returns>
        </member>
        <member name="M:Telogis.GeoBase.Internal.GeoBaseLicense.CheckCanDesign">
            <summary>
            Allows the map to be used in Designer mode.  Set if the license is an SDK, Trial or Test.
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.Internal.GeoBaseLicense.CheckCanReBrand">
            <summary>
            Allows the "branding_notice" property to be set on a map.
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.Internal.GeoBaseLicense.CheckCanUseNavigation">
            <summary>
            Allows the Navigator to be created.
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.Internal.GeoBaseLicense.CheckCanUseTraffic">
            <summary>
            Allows traffic sources.
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.Internal.GeoBaseLicense.CheckCanGeoCode">
            <summary>
            Allows reverse geocoding, drill down geocoding and forward geocoding.
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.Internal.GeoBaseLicense.CheckCanQuery">
            <summary>
            Allows query methods on LocalDataQuery to be used.
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.Internal.GeoBaseLicense.CheckCanUseRouteFitting">
            <summary>
            Allows fitted routes (route highlights) to be requested.
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.Internal.GeoBaseLicense.CheckCanMap">
            <summary>
            Allows maps and MapCtrls to be created and drawn.
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.Internal.GeoBaseLicense.CheckCanUseTransactional">
            <summary>
            Allows transactional database to be used.
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.Internal.GeoBaseLicense.CheckCanUseChameleon">
            <summary>
            Allows Style to be set on a map.
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.Internal.GeoBaseLicense.CheckCanUseAlchemy">
            <summary>
            Throws an InvalidLicenseException if the license does not permit custom data.
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.Internal.GeoBaseLicense.CheckCanUseTurnPenalties">
            <summary>
            Throws an InvalidLicenceException if the license does not permit Turn Penalties.
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.Internal.GeoBaseLicense.CheckCanUseClustering">
            <summary>
            Throws an InvalidLicenseException if the license does not permit clustering.
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.Internal.GeoBaseLicense.CheckIsGeoStreamClient">
            <summary>
            Allows GS requests to be sent.
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.Internal.GeoBaseLicense.CheckIsGeoStreamServer">
            <summary>
            Allows GS requests to be processed.
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.Internal.GeoBaseLicense.CheckCanUseTelogisNavigation">
            <summary>
            Throws an InvalidLicenseException if the license does not permit TelogisNavigation.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Internal.GeoBaseLicense.IsTrial">
            <summary>
            Adds trial branding to maps, limited to 1000000 uses, allows designing.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Internal.GeoBaseLicense.AllowBeta">
            <summary>
            Allows beta versions to be run.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Internal.GeoBaseLicense.IsSDK">
            <summary>
            Adds "Licensed for development only." to maps, limited to 1000000 uses, allows
            designing.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Internal.GeoBaseLicense.IsTest">
            <summary>
            Adds "Licensed for testing only." to maps, limited to 1000000 uses, allows designing.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Internal.GeoBaseLicense.TrialRemaining">
            <summary>
            Number of trial days remaining.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Internal.GeoBaseLicense.MapBranding">
            <summary>
            Branding displayed on maps after the copyright symbol, supplied to string.Format.
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.Repositories.GeoStreamRepository">
            <summary>
            A <see cref="T:Telogis.GeoBase.Repositories.GeoStreamRepository">GeoStreamRepository</see> uses one or more GeoStream servers to support
            local GeoBase services (such as routing and mapping).
            </summary>
            <remarks><para><b>Related articles</b>: <a href="5a8e7c38-67e2-47fe-8bb0-2cd0b1a6547a.htm">Using Repositories to manage data</a>.</para></remarks>
        </member>
        <member name="M:Telogis.GeoBase.Repositories.GeoStreamRepository.#ctor(System.String[])">
            <summary>
            Construct a new GeoStreamRepository from an array of server URL strings. See remarks and example.
            </summary>
            <remarks>
            <para>GeoStream servers are known by the URL pointing to the server's GeoStream directory
            (the GeoStream directory contains 'tile.aspx'). The URL should be of the form:
            <i>http://myserver/path_to_geostream_directory/</i></para><br />
            <para>The default installation of GeoBase configures IIS with the following URL:
            <i>http://myserver/GeoStream/</i></para>
            </remarks>
            <example>
            <code lang="C#">
            string[] myServers = {
            	"http://tiles.mycompany.net/GeoStream/",
                "http://tiles2.mycompany.net/GeoStream/"
            };
            GeoStreamRepository myRepo = new GeoStreamRepository(myServers);
            </code></example>
            <param name="servers">An array of server URL strings</param>
        </member>
        <member name="M:Telogis.GeoBase.Repositories.GeoStreamRepository.#ctor(System.String,System.String,System.String[])">
            <summary>
            Construct a new GeoStreamRepository, connecting to one or more servers using specified credentials.
            The same credentials will be used for all GeoStream servers in the servers array.
            </summary>
            <remarks>
            <para>GeoStream servers are known by the URL pointing to the server's GeoStream directory
            (the GeoStream directory contains 'tile.aspx'). The URL should be of the form:
            <i>http://myserver/path_to_geostream_directory/</i></para><br />
            <para>The default installation of GeoBase configures IIS with the following URL:
            <i>http://myserver/GeoStream/</i></para>
            </remarks>
            <example>
            <code lang="C#">
            string[] myServers = {
                "http://tiles.mycompany.net/GeoStream/",
                "http://tiles2.mycompany.net/GeoStream/"
            };
            GeoStreamRepository myRepo = new GeoStreamRepository("username", "password", myServers);
            </code></example>
            <param name="username">GeoStream username</param>
            <param name="password">Password for the GeoStream user</param>
            <param name="servers">An array of server URL strings</param>
        </member>
        <member name="M:Telogis.GeoBase.Repositories.GeoStreamRepository.#ctor(System.String,System.String,System.Int32,System.String[])">
            <summary>
            Construct a new GeoStreamRepository, connecting to one or more servers using specified credentials
            and a given session duration. After the session duration has passed the GeoStreamRepository will
            automatically reauthenticate. The same credentials will be used for all GeoStream servers in the 
            servers array.
            </summary>
            <remarks>
            <para>GeoStream servers are known by the URL pointing to the server's GeoStream directory
            (the GeoStream directory contains 'tile.aspx'). The URL should be of the form:
            <i>http://myserver/path_to_geostream_directory/</i></para><br />
            <para>The default installation of GeoBase configures IIS with the following URL:
            <i>http://myserver/GeoStream/</i></para>
            </remarks>
            <example>
            <code lang="C#">
            string[] myServers = {
                "http://tiles.mycompany.net/GeoStream/",
                "http://tiles2.mycompany.net/GeoStream/"
            };
            GeoStreamRepository myRepo = new GeoStreamRepository("username", "password", 15, myServers);
            </code></example>
            <param name="username">GeoStream username</param>
            <param name="password">Password for the GeoStream user</param>
            <param name="duration">Session duration, in minutes. Minimum of 1 minute (enforced by the server)</param>
            <param name="servers">An array of server URL strings</param>
        </member>
        <member name="M:Telogis.GeoBase.Repositories.GeoStreamRepository.#ctor(System.String,System.String,System.Int32,System.Net.WebProxy,System.String[])">
            <summary>
            Construct a new GeoStreamRepository which is accessed through a proxy server, connecting to one or more servers using specified credentials
            and a given session duration. After the session duration has passed the GeoStreamRepository will
            automatically reauthenticate. The same credentials will be used for all GeoStream servers in the 
            servers array.
            </summary>
            <remarks>
            <para>GeoStream servers are known by the URL pointing to the server's GeoStream directory
            (the GeoStream directory contains 'tile.aspx'). The URL should be of the form:
            <i>http://myserver/path_to_geostream_directory/</i></para><br />
            <para>The default installation of GeoBase configures IIS with the following URL:
            <i>http://myserver/GeoStream/</i></para>
            </remarks>
            <example>
            <code lang="C#">
            WebProxy proxy = new WebProxy("http:\\myproxy:9012", true)
            {
                Credentials = new NetworkCredential("proxyusername", "proxypassword")
            };
            
            string[] myServers = {
                "http://tiles.mycompany.net/GeoStream/",
                "http://tiles2.mycompany.net/GeoStream/"
            };
            GeoStreamRepository myRepo = new GeoStreamRepository("geostreamusername", "geostreampassword", 15, proxy, myServers);
            </code></example>
            <param name="geoStreamUsername">GeoStream username</param>
            <param name="geoStreamPassword">Password for the GeoStream user</param>
            <param name="duration">Session duration, in minutes. Minimum of 1 minute (enforced by the server)</param>
            <param name="proxy">Proxy server information, including the server address and authentication credentials</param>
            <param name="servers">An array of server URL strings</param>
        </member>
        <member name="M:Telogis.GeoBase.Repositories.GeoStreamRepository.#ctor(System.Net.WebProxy,System.String[])">
            <summary>
            Construct a new GeoStreamRepository which is accesssed through a proxy server.
            </summary>
            <remarks>
            <para>GeoStream servers are known by the URL pointing to the server's GeoStream directory
            (the GeoStream directory contains 'tile.aspx'). The URL should be of the form:
            <i>http://myserver/path_to_geostream_directory/</i></para><br />
            <para>The default installation of GeoBase configures IIS with the following URL:
            <i>http://myserver/GeoStream/</i></para>
            </remarks>
            <example>
            <code lang="C#">
            
            WebProxy proxy = new WebProxy("http:\\myproxy:9012", true)
            {
                Credentials = new NetworkCredential("proxyusername", "proxypassword")
            };
            
            string[] myServers = {
            	"http://tiles.mycompany.net/GeoStream/",
                "http://tiles2.mycompany.net/GeoStream/"
            };
            GeoStreamRepository myRepo = new GeoStreamRepository(proxy, myServers);
            </code></example>
            <param name="proxy">Proxy server information, including the server address and authentication credentials</param>
            <param name="servers">An array of server URL strings</param>
        </member>
        <member name="M:Telogis.GeoBase.Repositories.GeoStreamRepository.HasCountry(Telogis.GeoBase.Country)">
            <summary>
            Returns true only if the GeoStream server (represented by this GeoStreamRepository object)
            has data for the given <see cref="T:Telogis.GeoBase.Country"/>.
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.Repositories.GeoStreamRepository.UseDataSets(Telogis.GeoBase.GeoStream.Server.DataSet[])">
            <summary>
            Specify the server-side datasets to be used.
            </summary>
            <param name="datasets">The DataSets to use with this GeoStream server</param>
            <remarks>
            <para>When setting up a GeoStreamRepository, users can specify the server-side datasets that they wish to use. 
            Datasets can be grouped according to vendor and country, and to be able to use the datasets, the user must have permission to use them. These permissions are set up on the server-side's 
            <b>userinfo.config</b> file. For each <b>&lt;user id&gt;</b> the userinfo.config file lists the 
            <b>&lt;AllowedDataSets&gt;</b> for which the user is entitled to use. Each &lt;DataSet&gt; has a <b>Ref</b> 
            attribute which points to the DataSet groupings (&lt;DataFolder&gt;) in the <b>repository.config</b> file. Furthermore, 
            a default dataset is listed in the <b>&lt;AllowedDataSets&gt;</b> should the user fail to specify a dataset.</para> 
            <para>For more information on the server-side configuration files, see <b>Configuring the Server</b>, under the <b>GeoStream Security</b> section.</para>
            </remarks>
            <example>
            <code lang="C#">
            //Set up a GeoStreamRepository with an array of server URL strings
            GeoStreamRepository myGS = new GeoStreamRepository(myServerURLs);
            
            //Set which datasets to use, using the property  <see cref="P:Telogis.GeoBase.Repositories.GeoStreamRepository.AvailableDataSets"/>
            myGS.UseDataSets(myGS.AvailableDataSets);
            </code>
            </example>
        </member>
        <member name="M:Telogis.GeoBase.Repositories.GeoStreamRepository.UseDataSets(System.String[])">
            <summary>
            Specify the server-side datasets to be used.
            </summary>
            <param name="datasets">The DataSets to use with this GeoStream server</param>
            <remarks>
            <para>When setting up a GeoStreamRepository, users can specify the server-side datasets that they wish to use. 
            Datasets can be grouped according to vendor and country, and to be able to use the datasets, the user must have permission to use them. These permissions are set up on the server-side's 
            <b>userinfo.config</b> file. For each <b>&lt;user id&gt;</b> the userinfo.config file lists the 
            <b>&lt;AllowedDataSets&gt;</b> for which the user is entitled to use. Each &lt;DataSet&gt; has a <b>Ref</b> 
            attribute which points to the DataSet groupings (&lt;DataFolder&gt;) in the <b>repository.config</b> file. Furthermore, 
            a default dataset is listed in the <b>&lt;AllowedDataSets&gt;</b> should the user fail to specify a dataset.</para> 
            <para>For more information on the server-side configuration files, see <b>Configuring the Server</b>, under the <b>GeoStream Security</b> section.</para>
            </remarks>
            <example>
            <code lang="C#">
            //Set up a GeoStreamRepository with an array of server URL strings
            GeoStreamRepository myGS = new GeoStreamRepository(myServerURLs);
            
            //Set which datasets to use.
            myGS.UseDataSets("Navteq_NA","NavteqCanada");
            </code></example>
        </member>
        <member name="P:Telogis.GeoBase.Repositories.GeoStreamRepository.AuthToken">
            <summary>
            The authentication token used by the server to validate requests.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Repositories.GeoStreamRepository.UseKeepAlive">
            <summary>
            When true this GeoStreamRepository object will attempt to open persistent connections to the 
            GeoStream server, by setting the Connection HTTP header to 'Keep-Alive'.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Repositories.GeoStreamRepository.Expect100Continue">
            <summary>
            When this property is set to true this GeoStreamRepository object will wait for a 100 (Continue) 
            header from the GeoStream server before sending a PUT or POST request body. This allows the 
            GeoStreamRepository object to determine if the GeoStream server is willing to accept the GeoStream 
            request. As RFC2616 says, "In some cases, it might either be inappropriate or highly inefficient 
            for the client to send the body if the server will reject the message without looking at the body".
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Repositories.GeoStreamRepository.CompressJsonResponses">
            <summary>
            When this is set to true, this GeoStreamRepository will indicate to the GeoStream 
            server that it accepts JSON responses compressed using gzip or deflate. 
            </summary>
            <remarks>This does not guarantee the server will reply with compressed responses, 
            however, uncompressed responses will still be understood regardless of this setting.
            </remarks>
        </member>
        <member name="P:Telogis.GeoBase.Repositories.GeoStreamRepository.DatasetHashCode">
            <summary>
            Gets the hashcode for this Repository's dataset. The hashcode may be used to identify the dataset.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Repositories.GeoStreamRepository.AvailableDataSets">
            <summary>
            Returns an array of available <see cref="T:Telogis.GeoBase.GeoStream.Server.DataSet"/> objects for this
            user on this GeoStream server.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Repositories.GeoStreamRepository.CurrentDataSetNames">
            <summary>
            Returns an array of server-side data set names used by this GeoStreamRepository object.
            The <see cref="M:Telogis.GeoBase.Repositories.GeoStreamRepository.UseDataSets(System.String[])"/> method
            allows you to select which server-side data sets should be used to service
            requests from this GeoStreamRepository object.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Repositories.GeoStreamRepository.DefaultDataSet">
            <summary>
            Returns the default <see cref="T:Telogis.GeoBase.GeoStream.Server.DataSet"/> object used by the
            GeoStream server to provide data to this GeoStreamRepository object. This property will be 
            null for GeoStream server versions below 3.1.
            </summary>
            <remarks>Use the <see cref="P:Telogis.GeoBase.Repositories.GeoStreamRepository.ServerVersion"/> property to determine the version of the GeoStream
            server.</remarks>
        </member>
        <member name="P:Telogis.GeoBase.Repositories.GeoStreamRepository.HasGlobalData">
            <summary>
            Not implemented. Will throw a <see cref="T:System.NotImplementedException"/>.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Repositories.GeoStreamRepository.Countries">
            <summary>
            Returns an array of <see cref="T:Telogis.GeoBase.Country"/> objects representing
            geographies that the GeoStream server has data for.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Repositories.GeoStreamRepository.CopyrightString">
            <summary>
            The copyright string for the map source data.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Repositories.GeoStreamRepository.Regions">
            <summary>
            Not implemented. Will thrown a <see cref="T:System.NotImplementedException"/>
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Repositories.GeoStreamRepository.UseDiskTileCache">
            <summary>
            Whether a tile cache on disk should be created and used.  If true, then the disk cache
            used is at %TEMP%\GeoStreamCache.  The default value on desktop is true.  The value
            must always be false on mobile.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Repositories.GeoStreamRepository.ServerURLs">
            <summary>
            Returns the servers used by this GeoStreamRepository, as an array of URLs.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Repositories.GeoStreamRepository.Servers">
            <summary>
            The <see cref="T:Telogis.GeoBase.GeoStream.ServerSet"/> to use for this GeoStreamRepository object.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Repositories.GeoStreamRepository.RequestTimeoutMs">
            <summary>
            This property is used to change the Request timeout.
            The default timeout is 100,000 milliseconds.
            Ensure that the server is confiqured to serve a request of 
            this timespan. In IIS the MaxSessionLength/Session timeout property may need
            to be greater than this timeout. Note that these settings may
            vary between IIS versions.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Repositories.GeoStreamRepository.ServerVersion">
            <summary>
            Returns the version string of the GeoStream server (which is backing this
            GeoStreamRepository object).
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.PartialCamRenderer">
             <summary>
             Provides a means to apply partial cam files to a GeoBase map.
             </summary>
             <remarks>
             <para>If the partial cam file is written to render custom data, that data must be
             in the same repository as the rest of the map data.</para>
             <para> Anything in the map style that
             the cam file defines is drawn on top of the map. Thus, if the partial cam file includes
             instructions for rendering features that are already rendered by the 
             default map style (or another partial cam renderer), those features will be drawn twice.</para>
             </remarks>
             <example>
             In this example, a partial cam renderer is used to draw custom map data on top of a
             map that uses the default map style for rendering the other map features.
            
             <code lang="C#">
                 public MyForm() {
                     InitializeComponent();
                   
                     // Use a multirepository to ensure that we use the same repository for
                     // custom data that we use for the map data.
                     SimpleRepository usa = new SimpleRepository(@"..\Data\USA.gbfs");
                     SimpleRepository customData = new SimpleRepository(@"..\Data\MyCustomData.gbfs");
                     MultiRepository mr = new MultiRepository();
                     mr.AddRepository(usa);
                     mr.AddRepository(customData);
            
                     // set our current thread to use our MultiRepository
                     Repository.CurrentThreadRepository = mr;
            
                     // Create a PartialCamRenderer to draw the custom data on top of the map data
                     // (The map data is rendered using the default map style.)
                     PartialCamRenderer pcr = new PartialCamRenderer();
                     // MyCustomData.cam is a partial cam file with commands for rendering the custom data
                     pcr.Style = MapStyle.Create(@"..\Data\MyCustomData.cam");
            
                     mapCtrl1.Renderer = pcr;
                 }
             </code>
             </example>
        </member>
        <member name="F:Telogis.GeoBase.PartialCamRenderer.Style">
            <summary>
            The map style created from the partial CAM file
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.PartialCamRenderer.showLabels">
            <summary>
            Set to true to display labels
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.PartialCamRenderer.Render(System.Drawing.Graphics,Telogis.GeoBase.RenderContext)">
            <summary>
            Called when this item should render itself on the map. 
            </summary>
            <param name="graphics">The <see cref="T:System.Drawing.Graphics"/> object that can be used to draw on the map.</param>
            <param name="rc">The <see cref="T:Telogis.GeoBase.RenderContext"/> information for this call.</param>
        </member>
        <member name="P:Telogis.GeoBase.PartialCamRenderer.RequiredRendermodes">
            <summary>
            Specifies which stages of rendering this renderer should be called.
            </summary>
        </member>
        <member name="T:Telogis.NativeSerial.NativeBuffer">
            <summary>
            wrap a .NET byte array and provide a pinned address of same for calls into native code
            </summary>
            <remarks>pinned object free'd on dispose</remarks>
        </member>
        <member name="T:Telogis.GeoBase.Indexes.RTree">
            <summary>
            Used for indexing spatial data.
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.Indexes.RTree.#ctor">
            <summary>
            Parameterless constructor.
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.Indexes.RTree.Insert(Telogis.GeoBase.Indexes.IRTreeItem)">
            <summary>
            Insert a new node into this <b>RTRee</b>.
            </summary>
            <param name="item"><see cref="T:Telogis.GeoBase.Indexes.IRTreeItem"/></param>
        </member>
        <member name="M:Telogis.GeoBase.Indexes.RTree.Insert(Telogis.GeoBase.Indexes.RTreeRect,System.Object)">
            <summary>
            Insert a new <b>RTreeRect</b> with an associated object into this <b>RTree</b>.
            </summary>
            <param name="rect"><see cref="T:Telogis.GeoBase.Indexes.RTreeRect"/></param>
            <param name="data">Object to associate with <i>rect</i></param>
        </member>
        <member name="M:Telogis.GeoBase.Indexes.RTree.Query(Telogis.GeoBase.Indexes.RTreeRect,Telogis.GeoBase.Indexes.RTreeResult)">
            <summary>
            Query the <b>RTree</b> for a given <see cref="T:Telogis.GeoBase.Indexes.RTreeRect">RTreeRect</see> with a result delegate.
            </summary>
            <param name="rect"><see cref="T:Telogis.GeoBase.Indexes.RTreeRect"/></param>
            <param name="result"><see cref="T:Telogis.GeoBase.Indexes.RTreeResult"/></param>
        </member>
        <member name="M:Telogis.GeoBase.Indexes.RTree.Query(Telogis.GeoBase.Indexes.RTreeResult)">
            <summary>
            Query all items in the <b>RTree</b> with a result delegate.
            </summary>
            <param name="result"><see cref="T:Telogis.GeoBase.Indexes.RTreeResult"/></param>
        </member>
        <member name="M:Telogis.GeoBase.Indexes.RTree.QueryAbortable(Telogis.GeoBase.Indexes.RTreeRect,Telogis.GeoBase.Indexes.RTreeAbortableResult)">
            <summary>
            Query the <b>RTree</b> for a given <see cref="T:Telogis.GeoBase.Indexes.RTreeRect">RTreeRect</see> with a result delegate.
            This query is abortable: if result sets abort to true, no more results are read from the tree.
            This is useful if a query with a potentially large result set needs to be aborted.
            </summary>
            <param name="rect"><see cref="T:Telogis.GeoBase.Indexes.RTreeRect"/></param>
            <param name="result"><see cref="T:Telogis.GeoBase.Indexes.RTreeResult"/></param>
        </member>
        <member name="M:Telogis.GeoBase.Indexes.RTree.QueryAbortable(Telogis.GeoBase.Indexes.RTreeAbortableResult)">
            <summary>
            Query all items in the <b>RTree</b> with a result delegate.
            This query is abortable: if result sets abort to true, no more results are read from the tree.
            This is useful if a query with a potentially large result set needs to be aborted.
            </summary>
            <param name="result"><see cref="T:Telogis.GeoBase.Indexes.RTreeResult"/></param>
        </member>
        <member name="M:Telogis.GeoBase.Indexes.RTree.Delete(Telogis.GeoBase.Indexes.IRTreeItem)">
            <summary>
            Delete an item from this <b>RTree</b>
            </summary>
            <param name="item"><see cref="T:Telogis.GeoBase.Indexes.IRTreeItem"/></param>
            <returns><b>true</b> if the item was successfully removed. Otherwise <b>false</b>.</returns>
        </member>
        <member name="M:Telogis.GeoBase.Indexes.RTree.Dump(System.Int32,System.IO.StreamWriter)">
            <summary>
            Dumps the <b>RTree</b> to file with each node represented in WKT format.
            </summary>
            <param name="level">Number of levels of the tree to dump</param>
            <param name="wr"><see cref="T:System.IO.StreamWriter">StreamWriter</see> to 
            dump the <b>RTree</b> to</param>
        </member>
        <member name="P:Telogis.GeoBase.Indexes.RTree.Boundary">
            <summary>
            Return an RTreeRect that bounds the RTree.
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.Indexes.RTreeResult">
            <summary>
            Delegate used when querying this RTree.
            </summary>
            <param name="item"></param>
        </member>
        <member name="T:Telogis.GeoBase.Indexes.RTreeAbortableResult">
            <summary>
            Delegate used when querying this RTree.
            The abort value can be used to abort the query.
            </summary>
            <param name="item">An item that is part of the result set</param>
            <param name="abort">Set to true to abort the query</param>
        </member>
        <member name="T:Telogis.GeoBase.Indexes.RTreeContainer">
            <summary>
            An <b>RTreeContainer</b> allows an RTree node to be associated with an object.
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.Indexes.IRTreeItem">
            <summary>
            Describes a common interface for items that exist on an RTree.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Indexes.IRTreeItem.BoundingBox">
            <summary>
            Implemented to return an <b>RTreeRect</b> that describes the spatial bounds of the item.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Indexes.RTreeContainer.rect">
            <summary>
            <see cref="T:Telogis.GeoBase.Indexes.RTreeRect"/>
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Indexes.RTreeContainer.data">
            <summary>
            An object to associate with this node.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Indexes.RTreeContainer.BoundingBox">
            <summary>
            Gets the minimum <b>RTreeRect</b> that entirely 
            encapsulates this <b>RTreeContainer</b>.
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.Indexes.RTreeDimension">
            <summary>
            Describes a single dimension of an <b>RTree</b> (using two coordinates).
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Indexes.RTreeDimension.l">
            <summary>
            Lower coordinate value
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Indexes.RTreeDimension.h">
            <summary>
            Upper coordinate value
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.Indexes.RTreeRect">
            <summary>
            An <b>RTreeRect</b> is a two-dimensional spatial entity that may be 
            indexed in an <see cref="T:Telogis.GeoBase.Indexes.RTree">RTree</see>.
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.Indexes.RTreeRect.Intersects(Telogis.GeoBase.Indexes.RTreeRect)">
            <summary>
            Determine if this <b>RTreeRect</b> intersects with another given <b>RTreeRect</b>.
            </summary>
            <param name="other">The <b>RTreeRect</b> to check for intersection with this <b>RTreeRect</b></param>
            <returns><b>true</b> if the two <b>RTreeRect</b>s intersect. Otherwise <b>false</b>.</returns>
        </member>
        <member name="M:Telogis.GeoBase.Indexes.RTreeRect.Contains(Telogis.GeoBase.Indexes.RTreeRect)">
            <summary>
            Determine if this <b>RTreeRect</b> contains another <b>RTreeRect</b>.
            </summary>
            <param name="other">An <b>RTreeRect</b> to test</param>
            <returns><b>true</b> if the <i>other</i> <b>RTreeRect</b> lies completely within this <b>RTreeRect</b>.
            Otherwise <b>false</b>.</returns>
        </member>
        <member name="M:Telogis.GeoBase.Indexes.RTreeRect.AddBox(Telogis.GeoBase.Indexes.RTreeRect)">
            <summary>
            Expand this <b>RTreeRect</b> to fully enclose another <b>RTreeRect</b>.
            </summary>
            <param name="other"><b>RTreeRect</b> to add to this <b>RTreeRect</b></param>
            <returns>An <b>RTreeRect</b> that fully encloses both this and the <i>other</i> <b>RTreeRect</b>.</returns>
        </member>
        <member name="M:Telogis.GeoBase.Indexes.RTreeRect.Intersection(Telogis.GeoBase.Indexes.RTreeRect)">
            <summary>
            Shrink this <b>RTreeRect</b> to become the intersection of this and another <b>RTreeRect</b>.
            </summary>
            <param name="other"></param>
            <returns>An <b>RTreeRect</b> representing the intersection of this 
            and the <i>other</i> <b>RTreeRect</b>.</returns>
        </member>
        <member name="M:Telogis.GeoBase.Indexes.RTreeRect.Copy">
            <summary>
            Return a copy of this <b>RTreeRect</b>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Telogis.GeoBase.Indexes.RTreeRect.AddBox(Telogis.GeoBase.Rectangle)">
            <summary>
            Resize this <b>RTreeRect</b> to the size of a given <see cref="T:Telogis.GeoBase.Rectangle">Rectangle</see>.
            </summary>
            <param name="rect"><see cref="T:Telogis.GeoBase.Rectangle"/></param>
        </member>
        <member name="M:Telogis.GeoBase.Indexes.RTreeRect.AddBox(Telogis.GeoBase.BoundingBox)">
            <summary>
            Resize this <b>RTreeRect</b> to the size of a given <see cref="T:Telogis.GeoBase.BoundingBox">BoundingBox</see>.
            </summary>
            <param name="bb"><see cref="T:Telogis.GeoBase.BoundingBox"/></param>
        </member>
        <member name="M:Telogis.GeoBase.Indexes.RTreeRect.Equals(Telogis.GeoBase.Indexes.RTreeRect)">
            <summary>
            Compare this <b>RTreeRect</b> with another for equality.
            </summary>
            <param name="other"><see cref="T:Telogis.GeoBase.Indexes.RTreeRect"/></param>
            <returns><b>true</b> if the two are equal. Otherwise <b>false</b>.</returns>
        </member>
        <member name="M:Telogis.GeoBase.Indexes.RTreeRect.AreaOfUnion(Telogis.GeoBase.Indexes.RTreeRect)">
            <summary>
            Get the net area enclosed by both this <b>RTreeRect</b> and a given <b>RTreeRect</b>.
            </summary>
            <param name="other">The second <b>RTreeRect</b> to union with this <b>RTreeRect</b></param>
            <returns>The area of union (ie, the net total area enclosed by both <b>RTreeRect</b>s)</returns>
        </member>
        <member name="M:Telogis.GeoBase.Indexes.RTreeRect.AreaIncrease(Telogis.GeoBase.Indexes.RTreeRect)">
            <summary>
            Get the amount by which the area of the <b>RTreeRect</b> would increase if a given
            <b>RTreeRect</b> would be added to this <b>RTreeRect</b>.
            </summary>
            <param name="add"><see cref="T:Telogis.GeoBase.Indexes.RTreeRect"/></param>
            <returns><para>Given two <b>RTreeRect</b>s, <i>This</i> and <i>Other</i> this method 
            will return:</para>
            <para><center><i>(net area enclosed by This and Other) - (area enclosed by This)</i></center></para>
            </returns>
        </member>
        <member name="M:Telogis.GeoBase.Indexes.RTreeRect.#ctor">
            <summary>
            Paramaterless constructor.
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.Indexes.RTreeRect.#ctor(System.UInt32,System.UInt32)">
            <summary>
            Construct a new <b>RTreeRect</b> with the lower corner centered at 
            the given coordinates and sides of length 1.
            </summary>
            <param name="x">The x coordinate of the lower corner.</param>
            <param name="y">The y coordinate of the lower corner.</param>
        </member>
        <member name="M:Telogis.GeoBase.Indexes.RTreeRect.#ctor(System.Double,System.Double)">
            <summary>
            Construct a new <b>RTreeRect</b> from a latitude/longitude coordinate pair.
            </summary>
            <param name="lat">The latitude that must be contained in the RTreeRect.</param>
            <param name="lon">The longitude that must be contained in the RTreeRect.</param>
        </member>
        <member name="M:Telogis.GeoBase.Indexes.RTreeRect.#ctor(Telogis.GeoBase.BoundingBox)">
            <summary>
            Construct a new <b>RTreeRect</b> from a given <see cref="T:Telogis.GeoBase.BoundingBox">BoundingBox</see>.
            </summary>
            <param name="bb">The bounding box giving the dimensions for the new RTreeRect.</param>
        </member>
        <member name="M:Telogis.GeoBase.Indexes.RTreeRect.#ctor(Telogis.GeoBase.Rectangle)">
            <summary>
            Construct a new <b>RTreeRect</b> from a given <see cref="T:Telogis.GeoBase.Rectangle">Rectangle</see>.
            </summary>
            <param name="rect">The rectangle giving the dimensions for the new RTreeRect.</param>
        </member>
        <member name="M:Telogis.GeoBase.Indexes.RTreeRect.AddPoint(System.Double,System.Double)">
            <summary>
            Expand this <b>RTreeRect</b> to encompass the given latitude/longitude coordinate pair. 
            </summary>
            <param name="lat">The latitude of the point to include.</param>
            <param name="lon">The longitude of the point to include.</param>
        </member>
        <member name="M:Telogis.GeoBase.Indexes.RTreeRect.AddPoint(Telogis.GeoBase.LatLon)">
            <summary>
            Expand this <b>RTreeRect</b> to include the given <see cref="T:Telogis.GeoBase.LatLon">LatLon</see>.
            </summary>
            <param name="latlon">The point to include.</param>
        </member>
        <member name="M:Telogis.GeoBase.Indexes.RTreeRect.WriteWKT(System.IO.StreamWriter)">
            <summary>
            Write this <b>RTreeRect</b> to a given stream in WKT format.
            </summary>
            <param name="wr">A <see cref="T:System.IO.StreamWriter"/> to which the RTreeRect should be written.</param>
        </member>
        <member name="M:Telogis.GeoBase.Indexes.RTreeRect.Mid(System.Int32)">
            <summary>
            Get the midpoint between the upper and lower coordinates of the given 
            dimension of this <b>RTreeRect</b>.
            </summary>
            <param name="dim">Dimension number (zero-based). Values: 0-1</param>
            <returns></returns>
        </member>
        <member name="P:Telogis.GeoBase.Indexes.RTreeRect.X1">
            <summary>
            Gets the lower x-coordinate.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Indexes.RTreeRect.X2">
            <summary>
            Gets the upper x-coordinate.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Indexes.RTreeRect.Y1">
            <summary>
            Gets the lower y-coordinate.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Indexes.RTreeRect.Y2">
            <summary>
            Gets the upper y-coordinate.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Indexes.RTreeRect.P1">
            <summary>
            Get the coordinates (as a LatLon) of the lower corner (X1, Y1).
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Indexes.RTreeRect.P2">
            <summary>
            Get the coordinates (as a LatLon) of the higher corner (X2, Y2).
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Indexes.RTreeRect.Area">
            <summary>
            Get the area enclosed by this <b>RTreeRect</b>.
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.GeoStream.Server.TrafficHandler.GetLatestTraffic(System.String)">
            <summary>
            Gets the latest traffic for the specified source.
            </summary>
            <returns>An array of two elements:
            		* The time to specify when requesting traffic.
            		* How many seconds this traffic is valid for.
            </returns>
        </member>
        <member name="T:Telogis.GeoBase.GeoStream.Server.JsonRpcMethodAttribute">
            <summary>
            Indicates a method should be exposed for JSON-RPC calls. Only valid on members of classes
            that implement JSONHandler.
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.GeoStream.Server.JsonRpcMethodAttribute.#ctor(System.String)">
            <summary>
            Used to expose a method for JSON-RPC calls.
            </summary>
            <example>
            <code lang="C#">
            [JsonRpcMethod("Defrobulator")]
            public void myDefrobulator(Widget toDefrob)
            {
                ...
            }
            </code></example>
            <remarks>See also <see cref="P:Telogis.GeoBase.GeoStream.Server.JsonRpcMethodAttribute.Name"/>.</remarks>
            <param name="name">Name of the attribute.</param>
        </member>
        <member name="P:Telogis.GeoBase.GeoStream.Server.JsonRpcMethodAttribute.Name">
            <summary>
            Gets or sets the attribute.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.GeoStream.MemoryImageCache.maxImages">
            <summary>
            The maximum number of images to store in the cache before we start
            throwing images out.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.GeoStream.CDOLT.CDOLT.c_columnToRemove">
            <summary>
            Column to remove from query results, as it's for internal use on the CDOLT server only.
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.GeoStream.CDOLT.UserConfig.Load(System.String)">
            <summary>
            If filename exists, loads from file else return null.
            </summary>
            <param name="userDataFileName"></param>
            <returns></returns>
        </member>
        <member name="M:Telogis.GeoBase.GeoStream.CDOLT.UserConfig.Create(System.String)">
            <summary>
            Creates a new UserConfig with the given filename if that file does not exist.
            If file does exist, returns null.
            </summary>
            <param name="userDataFileName"></param>
            <returns></returns>
        </member>
        <member name="M:Telogis.GeoBase.GeoStream.Authentication.ServerAuthenticator.GetUser(System.Web.HttpRequest)">
            <summary>
            Validates the authentication token if there is one and returns a user for this 
            <see cref="T:System.Web.HttpRequest"/>.
            </summary>
            <exception cref="T:Telogis.GeoBase.GeoStream.Authentication.AuthenticationTokenExpiredException">
            Thrown when the time limit on the authentication token has ran out.
            </exception>
            <exception cref="T:Telogis.GeoBase.GeoStream.Authentication.UnauthorizedIpException">
            Thrown when the request was made from an IP address outside the range the token allows.
            </exception>
            <exception cref="T:Telogis.GeoBase.GeoStream.Authentication.NoSuchUserException">
            Thrown when the user name could not be found.
            </exception>
            <exception cref="T:Telogis.GeoBase.GeoStream.Authentication.NoSuchUserIdException">
            Thrown when the user id could not be found.
            </exception>
            <exception cref="T:Telogis.GeoBase.GeoStream.Authentication.AuthenticationRequiredException">
            Thrown when no authentication token was provided and the IP address the request was 
            made from is not in the FriendNetworks list.
            </exception>
            <param name="Request">The current <see cref="T:System.Web.HttpRequest"/></param>
            <returns>The <see cref="T:Telogis.GeoBase.GeoStream.Authentication.AuthenticatedUser"/> 
            for this <see cref="T:System.Web.HttpRequest"/> </returns>
        </member>
        <member name="M:Telogis.GeoBase.GeoStream.Authentication.ServerAuthenticator.GetAuthToken(System.Web.HttpRequest)">
            <summary>
            Reads the authentication token from a cookie or value in the supplied request, if any. 
            </summary>
            <param name="request">the HTTP request to find the authentication token of.</param>
            <returns>The authentication token for the request, or Guid.Empty if the request 
            contains no token or a malformed token.</returns>
        </member>
        <member name="M:Telogis.GeoBase.GeoStream.AsyncWebFetcher.#ctor(Telogis.GeoBase.GeoStream.ServerSet,System.Int32)">
            <summary>
            Creates a new AsyncWebFetcher
            </summary>
            <param name="servers"></param>
            <param name="numthreads">The number of threads to start.</param>
        </member>
        <member name="M:Telogis.GeoBase.GeoStream.AsyncWebFetcher.#ctor(Telogis.GeoBase.GeoStream.ServerSet,System.Int32,System.Int32)">
            <summary>
            Creates a new AsyncWebFetcher
            </summary>
            <param name="servers"></param>
            <param name="numthreads">The number of threads to start</param>
            <param name="maxpending">The maximum pending requests. If another request
            is queued when there are already maxpending requests queued, the oldest
            pending request is thrown out. 0 indicates no maximum.</param>
        </member>
        <member name="M:Telogis.GeoBase.GeoStream.AsyncWebFetcher.Fetch(System.String,Telogis.GeoBase.GeoStream.WebResponseEventHandler,System.Object,System.String)">
            <summary>
            Fetches the requested URI, calling handler when it has received a response.
            param specifies an object to be included in the WebResponseEventArgs object
            passed to the handler.
            </summary>
            <param name="uri"></param>
            <param name="handler"></param>
            <param name="param"></param>
            <param name="authToken"></param>
        </member>
        <member name="T:Telogis.GeoBase.Traffic.TrafficFetcher">
             <summary>
             The TrafficFetcher class is used to retrieve an up-to-date <see cref="T:Telogis.GeoBase.Traffic.Traffic"/> object based on traffic information from 
             the <see cref="T:Telogis.GeoBase.Traffic.Traffic"/>'s sources.
             </summary>
             <remarks>
             <para>The TrafficFetcher class is used to retrieve an up-to-date <see cref="T:Telogis.GeoBase.Traffic.Traffic"/> object based on traffic information from 
             the <see cref="T:Telogis.GeoBase.Traffic.Traffic"/>'s sources. The TrafficFetcher does not automate the process of obtaining an updated <see cref="T:Telogis.GeoBase.Traffic.Traffic"/>, 
             but instead, provides the <see cref="M:Telogis.GeoBase.Traffic.TrafficFetcher.GetLatestTraffic(System.DateTime)"/> method, which can be called synchronously, or asynchronously.
             </para>
             <para>
             For synchronous mode, set blocking to true. In this mode, the <see cref="T:Telogis.GeoBase.Traffic.Traffic"/> object will not be returned until all the <see cref="T:Telogis.GeoBase.Traffic.ITrafficSource"/>s 
             have been updated, or the timeout time has elapsed.
             </para>
             <para>
             For asynchronous mode, set blocking to false, and wait until the <see cref="E:Telogis.GeoBase.Traffic.TrafficFetcher.TrafficUpdated"/> event is called, signalling that the <see cref="T:Telogis.GeoBase.Traffic.ITrafficSource"/> data has been updated.
             </para>
             <para>Related articles: <a href="60998f81-efa9-4743-afcc-6e6f943a4fa1.htm">Routing with Traffic</a>.</para>
             </remarks>
             <example>
             <code lang="C#">
             
             using Telogis.GeoBase.Traffic;
             
             //...
             
             void initFetcher(){
                 //Create a TrafficFetcher 
                 private TrafficFetcher trafficFetcher;
             
                 //Create a Traffic
                 private Traffic traffic;
             
                 //Traffic src URL
                 string urlSrc = "www.sourceOfData.com";
            
                 private DateTime routeTime;
                 private DateTime timeRange;
             
                 //Create rendererlist
                 private RendererList trafficRendererList;
             
             
                 //Add real-time traffic source
                 trafficFetcher.AddSource(urlSrc, InrixRealTimeTrafficSource, timeRange, myUnZipMethod );
             
                 routeTime = DateTime.Now;
                 trafficRendererList = new RendererList();
                 trafficRendererList.Add(new TrafficRenderer(traffic, routeTime));
             } 
             
             //...
             //Set up TrafficFetcher
             initFetcher();
             
             //...
             
             traffic = trafficFetcher.GetLatestTraffic(DateTime.Now);
             </code>
             </example>
        </member>
        <member name="M:Telogis.GeoBase.Traffic.TrafficFetcher.#ctor">
            <summary>
            Create a new TrafficFetcher
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.Traffic.TrafficFetcher.GetLatestTraffic(System.DateTime)">
            <summary>
            Synchronously, get the latest traffic data update from the list of <see cref="T:Telogis.GeoBase.Traffic.ITrafficSource"/>s, based on the given date/time.
            </summary>
            <param name="RoutingTime">The date/time to retrieve the traffic data for.</param>
            <returns>Returns a <see cref="T:Telogis.GeoBase.Traffic.Traffic"/> based on the newly retrieved traffic data.</returns>
            <remarks>
            Note: this is a synchronous call - the <see cref="T:Telogis.GeoBase.Traffic.Traffic"/> will not be returned until all traffic sources have been updated.
            </remarks>
        </member>
        <member name="M:Telogis.GeoBase.Traffic.TrafficFetcher.GetLatestTrafficAsync(System.DateTime)">
            <summary>
            Asynchronously, get the latest traffic data update from the list of <see cref="T:Telogis.GeoBase.Traffic.ITrafficSource"/>s, based on the given date/time.
            </summary>
            <param name="RoutingTime">The date/time to retrieve the traffic data for.</param>
            <returns>Returns a <see cref="T:Telogis.GeoBase.Traffic.Traffic"/>. Note, that this may not be the latest <see cref="T:Telogis.GeoBase.Traffic.Traffic"/> at the time of calling this method, due 
            to the nature of the asynchronous mode. When this method is called, if, for example, the traffic source data has expired, then a <see cref="T:Telogis.GeoBase.Traffic.Traffic"/> object will be returned with no 
            new data, while the TrafficFetcher deals with downloading more up-to-date information.</returns>
        </member>
        <member name="M:Telogis.GeoBase.Traffic.TrafficFetcher.GetLatestTraffic(System.DateTime,System.TimeSpan)">
            <summary>
            Get the latest traffic data update from the list of <see cref="T:Telogis.GeoBase.Traffic.ITrafficSource"/>s, based on the given date/time.
            </summary>
            <remarks>
            Fetches the latest Traffic data.
            If timeout is TimeSpan.Zero this function will return immediately. The TrafficUpdated event may be fired multiple times as updates are received.
            If timeout is not TimeSpan.Zero this function will wait until all traffic sources have been updated or the timeout expires. The TrafficUpdated
             event may be fired multiple times as updates are received. Use -1 Milliseconds to indicate to wait indefinately.
            </remarks>
            <param name="RoutingTime">The date/time to retrieve the traffic data for.</param>
            <param name="timeout">The maximum time to wait (block) for the traffic sources to be updated. Set to -1 milliseconds to wait indefinitely. Set to 0 to return immediately.</param>
            <exception cref="T:System.TimeoutException">Thrown if the timeout value is exceeded.</exception>
            <returns>Returns a <see cref="T:Telogis.GeoBase.Traffic.Traffic"/> based on the newly retrieved traffic data.</returns>
        </member>
        <member name="M:Telogis.GeoBase.Traffic.TrafficFetcher.AddSource(Telogis.GeoBase.Traffic.IGenericTrafficSource)">
            <summary>
            Add a new <see cref="T:Telogis.GeoBase.Traffic.ITrafficSource"/> to the TrafficFetcher's traffic source list.
            </summary>
            <param name="trafficSource">The <see cref="T:Telogis.GeoBase.Traffic.ITrafficSource"/> to add to the list.</param>
        </member>
        <member name="M:Telogis.GeoBase.Traffic.TrafficFetcher.AddSource(Telogis.GeoBase.Traffic.IGenericTrafficSource,System.TimeSpan)">
            <summary>
            Add a new <see cref="T:Telogis.GeoBase.Traffic.ITrafficSource"/> to the TrafficFetcher's traffic source list.
            </summary>
            <param name="trafficSource">The <see cref="T:Telogis.GeoBase.Traffic.ITrafficSource"/> to add to the list.</param>
            <param name="expiry">The amount of time that the traffic data from the traffic source is valid for, before an update is permitted.</param>
        </member>
        <member name="M:Telogis.GeoBase.Traffic.TrafficFetcher.AddSource(System.String,System.Type,System.TimeSpan,Telogis.GeoBase.Traffic.HandleDataDelegate)">
            <summary>
            Add a new traffic source to the TrafficFetcher's traffic source list.
            </summary>
            <param name="url">The URL of the traffic source.</param>
            <param name="type">The type of the traffic source.</param>
            <param name="expiry">The amount of time that the traffic data from the traffic source is valid for, before an update is permitted.</param>
            <param name="zipFunction">The function to use to decompress the response stream.</param>
        </member>
        <member name="M:Telogis.GeoBase.Traffic.TrafficFetcher.AddSource(System.String,System.Type,System.TimeSpan,Telogis.GeoBase.Traffic.HandleDataDelegate,System.Net.ICredentials)">
            <summary>
            Add a new traffic source to the TrafficFetcher's traffic source list.
            </summary>
            <param name="url">The URL of the traffic source.</param>
            <param name="type">The type of the traffic source.</param>
            <param name="expiry">The amount of time that the traffic data from the traffic source is valid for, before an update is permitted.</param>
            <param name="zipFunction">The function to use to decompress the response stream</param>
            <param name="credentials">The credentials to use when requesting data.</param>
        </member>
        <member name="M:Telogis.GeoBase.Traffic.TrafficFetcher.InsertSource(Telogis.GeoBase.Traffic.ITrafficSource,System.Int32)">
            <summary>
            Insert an <see cref="T:Telogis.GeoBase.Traffic.ITrafficSource"/> to the TrafficFetcher's traffic source list at the given position.
            </summary>
            <param name="source">The <see cref="T:Telogis.GeoBase.Traffic.ITrafficSource"/> to be inserted at the given position.</param>
            <param name="pos">The position in the list to insert the <see cref="T:Telogis.GeoBase.Traffic.ITrafficSource"/></param>
        </member>
        <member name="M:Telogis.GeoBase.Traffic.TrafficFetcher.GetSourceByURL(System.String)">
            <summary>
            Creates an <see cref="T:Telogis.GeoBase.Traffic.ITrafficSource"/> from the given URL.
            </summary>
            <param name="url">The URL of the traffic source.</param>
            <returns>The <see cref="T:Telogis.GeoBase.Traffic.ITrafficSource"/> from the given URL.</returns>
        </member>
        <member name="M:Telogis.GeoBase.Traffic.TrafficFetcher.GetSourcesByType(System.Type)">
            <summary>
            Creates an <see cref="T:Telogis.GeoBase.Traffic.ITrafficSource"/> from the given type.
            </summary>
            <param name="type">The type of the traffic source.</param>
            <returns>The <see cref="T:Telogis.GeoBase.Traffic.ITrafficSource"/> from the given type.</returns>
        </member>
        <member name="M:Telogis.GeoBase.Traffic.TrafficFetcher.GetExpiry">
            <summary>
            Get the date/time that the traffic data is still valid.
            </summary>
            <returns>The date/time that the traffic data becomes out of date, or expires. If the TrafficFetcher has more than one traffic source, then 
            the shortest time is returned from the traffic sources in the traffic source list.</returns>
        </member>
        <member name="E:Telogis.GeoBase.Traffic.TrafficFetcher.TrafficUpdated">
            <summary>
            This event handler is called when an update is received from an 
            <see cref="T:Telogis.GeoBase.Traffic.ITrafficSource"/>.  It might not be called on the thread that called
            GetLatestTraffic, so event handler implementations need to be careful not to use
            synchronous calls that might deadlock.  For example, if GetLatestTraffic was called from
            a UI thread then the event handler must use BeginInvoke to update UI elements.
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.Routing.TspGA">
            <summary>
            Summary description for TspGA.
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.Routing.TspGA.GASol.Contains(System.Int32[],System.Int32)">
            <summary>
            Does arr contain val
            </summary>
            <param name="arr"></param>
            <param name="val"></param>
            <returns></returns>
        </member>
        <member name="M:Telogis.GeoBase.Routing.TspGA.GASol.ConvertToTimeSpan(System.Double)">
            <summary>
            seconds to 100ns ticks
            </summary>
            <param name="time"></param>
            <returns></returns>
        </member>
        <member name="M:Telogis.GeoBase.Routing.TspGA.GASol.ConvertTimeToCentiSecondCost(System.TimeSpan)">
            <summary>
            TimeSpan (100ns) ticks to centiseconds
            </summary>
            <param name="time"></param>
            <returns></returns>
        </member>
        <member name="M:Telogis.GeoBase.Routing.TspGA.GASol.CalcStopCost(System.DateTime,System.Int32,System.DateTime@)">
            <summary>
            Calculates the Cost and time for one stop, including waiting time, 
            penalty for being too late and the avarage time at the stop
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.Routing.IRouteMatrix">
            <summary>
            <para>
            Classes that implement this interface perform routing calculations on a matrix of
            <see cref="T:Telogis.GeoBase.RouteStop"/> objects.
            </para>
            <para>
            See <see cref="T:Telogis.GeoBase.Routing.RouteMatrix"/> and <see cref="T:Telogis.GeoBase.Routing.MultiThreadMatrix"/>.
            </para>
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.Routing.IRouteMatrix.AddStop(Telogis.GeoBase.RouteStop)">
            <summary>
            Add a new <see cref="T:Telogis.GeoBase.RouteStop"/> to the matrix.
            </summary>
            <remarks>
            Once the new stop has been added, retrieve time/distance arrays using 
            <see cref="M:Telogis.GeoBase.Routing.IRouteMatrix.Times(System.Int32,System.Int32,Telogis.GeoBase.Routing.LinkCost)"/> and 
            <see cref="M:Telogis.GeoBase.Routing.IRouteMatrix.Distances(System.Int32,System.Int32,Telogis.GeoBase.Routing.LinkCost)"/> methods respectively. 
            </remarks>
            <param name="newStop">The <see cref="T:Telogis.GeoBase.RouteStop"/> to add to the matrix.</param>
            <returns>Offset of the new stop in the stop array.</returns>
        </member>
        <member name="M:Telogis.GeoBase.Routing.IRouteMatrix.AddStops(Telogis.GeoBase.RouteStop[])">
            <summary>
            Add new <see cref="T:Telogis.GeoBase.RouteStop"/>s to the matrix.
            </summary>
            <remarks>
            Once the new stops have been added, retrieve time/distance arrays using 
            <see cref="M:Telogis.GeoBase.Routing.IRouteMatrix.Times(System.Int32,System.Int32,Telogis.GeoBase.Routing.LinkCost)"/> and 
            <see cref="M:Telogis.GeoBase.Routing.IRouteMatrix.Distances(System.Int32,System.Int32,Telogis.GeoBase.Routing.LinkCost)"/> methods respectively. 
            </remarks>
            <param name="newStops">The <see cref="T:Telogis.GeoBase.RouteStop"/>s to add to the matrix.</param>
            <returns>Offset of the new stops in the stop array.</returns>
        </member>
        <member name="M:Telogis.GeoBase.Routing.IRouteMatrix.Distances(System.Int32,System.Int32,Telogis.GeoBase.Routing.LinkCost)">
            <summary>
            Returns an array of distances (in meters) from the specified stop to all other stops.
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.Routing.IRouteMatrix.RecalculateFull">
            <summary>
            Clear the cached results from the matrix's times/distances/costs calculations.
            </summary>
            <remarks>
            The RecalculateFull method clears the cached results from the matrix's times/distances/costs calculations. This is 
            useful for when a RouteMatrix has been re-configured (for example, changes to Strategy, or VehicleSpec), and the 
            most up to date calculation is required. It should be noted that the RecalculateFull method is automatically 
            called when the RouteMatrix's RoutingStrategy is set, but it is not called automatically when the RoutingStrategy is simply modified. 
            For example, when modifying the routing strategy's <see cref="P:Telogis.GeoBase.Routing.RoutingStrategy.AllowUTurns">AllowUTurns</see> 
            property, RecalculateFull should be called.
            <para><b>Related articles</b>: <a href="60b7ec5d-a96d-4143-a76b-2231d01dd002.htm">Using a RouteMatrix</a>.</para>
            </remarks>
        </member>
        <member name="M:Telogis.GeoBase.Routing.IRouteMatrix.Times(System.Int32,System.Int32,Telogis.GeoBase.Routing.LinkCost)">
            <summary>
            Returns an array of times (in seconds) from the specified stop to all other stops.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Routing.IRouteMatrix.Stops">
            <summary>
            Return the array of stops in the order of the matrix.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Routing.IRouteMatrix.Strategy">
            <summary>
            Sets the routing strategy. When the routing strategy is changed
            the existing network is recalculated rather than rebuilt. Changing the
            strategy on an existing RouteMatrix object is much faster than creating
            a new one.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Routing.IRouteMatrix.VehicleSpec">
            <summary>
            Applies a VehicleSpec to this RouteMatrix.  When this value is changed the existing
            network is recalculated rather than rebuilt, and constraints are enabled 
            automatically.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Routing.IRouteMatrix.ObeyConstraints">
            <summary>
            Setting this true ensures that constraints are obeyed when calculating routes.
            </summary>
            <remarks>Constraints are restrictions based on the <see cref="P:Telogis.GeoBase.Routing.RouteMatrix.VehicleSpec"/> property as well
            as restrictions set using the properties of the routing strategy such as <see cref="P:Telogis.GeoBase.Routing.RoutingStrategy.AllowUTurns"/>,
            <see cref="P:Telogis.GeoBase.Routing.RoutingStrategy.RoadCrossingBehavior"/> and <see cref="P:Telogis.GeoBase.Routing.RoutingStrategy.UseTollRoads"/>.
            When ObeyConstraints is true, any route that violates these constraints is discarded. When ObeyConstraints is false,
            the constraints are ignored when generating the route matrix. Setting ObeyConstraints to true can result in a
            noticable performance penalty.</remarks>
        </member>
        <member name="P:Telogis.GeoBase.Routing.IRouteMatrix.CurrentTime">
            <summary>
            Sets the start time for the routes from each of the stops in the matrix.
            This will be used to guide time-specific routing features such as traffic
            and constraints.
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.Routing.RouteMatrix">
            <summary>
            RouteMatrix maintains a cost matrix calculated from a set of <see cref="T:Telogis.GeoBase.RouteStop"/>s.
            Due to enconomies-of-scale benefits, a RouteMatrix provides a quick and efficient means of calculating
            times and distances between a number of RouteStops.
            </summary>
            <remarks><para><b>Related articles</b>: <a href="60b7ec5d-a96d-4143-a76b-2231d01dd002.htm">Using a RouteMatrix</a>.</para></remarks>
        </member>
        <member name="M:Telogis.GeoBase.Routing.RouteMatrix.#ctor(Telogis.GeoBase.RouteStop[],Telogis.GeoBase.Routing.RoutingStrategy)">
            <summary>
            Create a new Matrix from the given set of <see cref="T:Telogis.GeoBase.RouteStop"/>s.
            </summary>
            <remarks>Duplicates are allowed and stops are not reordered before they are added to the
            matrix's collection.</remarks>
            <param name="InitialStops">The stops to be used to intitalize the matrix,
            as an array of <see cref="T:Telogis.GeoBase.RouteStop"/>s.</param>
            <param name="Strategy">A <see cref="T:Telogis.GeoBase.Routing.RoutingStrategy"/>
            to be used to calculate the costs within this matrix.</param>
        </member>
        <member name="M:Telogis.GeoBase.Routing.RouteMatrix.#ctor(Telogis.GeoBase.RouteStop[],Telogis.GeoBase.Routing.RoutingStrategy,System.String)">
            <summary>
            Create a new Matrix from the given set of <see cref="T:Telogis.GeoBase.RouteStop"/>s, and record the 
            actions taken during calculation of this RouteMatrix to the given journal file. The journal file can then be 
            loaded later to speed up the construction of an identical RouteMatrix.
            </summary>
            <param name="InitialStops">The stops to be used to intitalize the matrix,
            as an array of <see cref="T:Telogis.GeoBase.RouteStop"/>s.</param>
            <param name="Strategy">A <see cref="T:Telogis.GeoBase.Routing.RoutingStrategy"/>
            to be used to calculate the costs within this matrix.</param>
            <param name="journalFile">A string to record all of the actions taken to calculate this RouteMatrix.</param>
        </member>
        <member name="M:Telogis.GeoBase.Routing.RouteMatrix.#ctor(Telogis.GeoBase.Routing.RoutingStrategy,System.String)">
            <summary>
            Load the RouteMatrix from the given journal file.
            </summary>
            <param name="Strategy">A <see cref="T:Telogis.GeoBase.Routing.RoutingStrategy"/>
            to be used to calculate the costs within this matrix.</param>
            <param name="journalFile">The journal file with the previously recorded RouteMatrix data</param>
            <remarks>
            Any changes made to the matrix will be recorded in the same journal file, making it 
            possible to load the matrix again at a later time.
            </remarks>
        </member>
        <member name="M:Telogis.GeoBase.Routing.RouteMatrix.AddStop(Telogis.GeoBase.RouteStop)">
            <summary>
            Add a new <see cref="T:Telogis.GeoBase.RouteStop"/> to the matrix.
            </summary>
            <remarks>
            Once the new stop has been added, retrieve time/distance arrays using 
            <see cref="M:Telogis.GeoBase.Routing.RouteMatrix.Times(System.Int32)"/> and 
            <see cref="M:Telogis.GeoBase.Routing.RouteMatrix.Distances(System.Int32)"/> methods respectively. 
            </remarks>
            <param name="newStop">The <see cref="T:Telogis.GeoBase.RouteStop"/> to add to the matrix.</param>
            <returns>Offset of the new stop in the stop array.</returns>
        </member>
        <member name="M:Telogis.GeoBase.Routing.RouteMatrix.AddStops(Telogis.GeoBase.RouteStop[])">
            <summary>
            Add new <see cref="T:Telogis.GeoBase.RouteStop"/>s to the matrix.
            </summary>
            <remarks>
            Once the new stops have been added, retrieve time/distance arrays using 
            <see cref="M:Telogis.GeoBase.Routing.RouteMatrix.Times(System.Int32)"/> and 
            <see cref="M:Telogis.GeoBase.Routing.RouteMatrix.Distances(System.Int32)"/> methods respectively. 
            </remarks>
            <param name="newStops">The <see cref="T:Telogis.GeoBase.RouteStop"/>s to add to the matrix.</param>
            <returns>Offset of the new stops in the stop array.</returns>
        </member>
        <member name="M:Telogis.GeoBase.Routing.RouteMatrix.Distances(System.Int32)">
            <summary>
            Returns an array of distances (in meters) from the specified stop to all other stops.
            </summary>
            <remarks><para><b>Related articles</b>: <a href="60b7ec5d-a96d-4143-a76b-2231d01dd002.htm">Using a RouteMatrix</a>.</para></remarks>
            <param name="stopNumber">The stop from which all distances are referenced to.</param>
        </member>
        <member name="M:Telogis.GeoBase.Routing.RouteMatrix.Distances(System.Int32,System.Int32,Telogis.GeoBase.Routing.LinkCost)">
            <summary>
            Returns an array of distances (in meters) from the specified stop to all other stops.
            </summary>
            <remarks><para><b>Related articles</b>: <a href="60b7ec5d-a96d-4143-a76b-2231d01dd002.htm">Using a RouteMatrix</a>.</para></remarks>
            <param name="stopNumber">The stop from which all distances are referenced to.</param>
            <param name="maxStops">The maximum number of stops to be calculated.</param>
            <param name="maxCost">The maximum acceptable cost.</param>
            <returns></returns>
        </member>
        <member name="M:Telogis.GeoBase.Routing.RouteMatrix.RecalculateFull">
            <summary>
            Clear the cached results from the matrix's times/distances/costs calculations.
            </summary>
            <remarks>
            The RecalculateFull method clears the cached results from the matrix's times/distances/costs calculations. This is 
            useful for when a RouteMatrix has been re-configured (for example, changes to Strategy, or VehicleSpec), and the 
            most up to date calculation is required. It should be noted that the RecalculateFull method is automatically 
            called when the RouteMatrix's RoutingStrategy is set, but it is not called automatically when the RoutingStrategy is simply modified. 
            For example, when modifying the routing strategy's <see cref="P:Telogis.GeoBase.Routing.RoutingStrategy.AllowUTurns">AllowUTurns</see> 
            property, RecalculateFull should be called.
            <para><b>Related articles</b>: <a href="60b7ec5d-a96d-4143-a76b-2231d01dd002.htm">Using a RouteMatrix</a>.</para>
            </remarks>
        </member>
        <member name="M:Telogis.GeoBase.Routing.RouteMatrix.Times(System.Int32)">
            <summary>
            Returns an array of times (in seconds) from the specified stop to all others.
            </summary>
            <remarks><para><b>Related articles</b>: <a href="60b7ec5d-a96d-4143-a76b-2231d01dd002.htm">Using a RouteMatrix</a>.</para></remarks>
        </member>
        <member name="M:Telogis.GeoBase.Routing.RouteMatrix.Times(System.Int32,System.Int32,Telogis.GeoBase.Routing.LinkCost)">
            <summary>
             Returns an array of times (in seconds) from the specified stop to all 
             others, the maximum number of stops and the route cost.
            </summary>
            <param name="stopNumber"></param>
            <param name="maxStops"></param>
            <param name="maxCost"></param>
            <returns></returns>
        </member>
        <member name="P:Telogis.GeoBase.Routing.RouteMatrix.Stops">
            <summary>
            Return the array of stops in the order of the matrix.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Routing.RouteMatrix.Strategy">
            <summary>
            Sets the routing strategy. When the routing strategy is changed
            the existing network is recalculated rather than rebuilt. Changing the
            strategy on an existing RouteMatrix object is much faster than creating
            a new RouteMatrix object.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Routing.RouteMatrix.CurrentTime">
            <summary>
            Sets the start time for the routes from each of the stops in the matrix.
            This will be used to guide time-specific routing features such as traffic
            and constraints.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Routing.RouteMatrix.VehicleSpec">
            <summary>
            Applies a VehicleSpec to this RouteMatrix.  When this value is changed the existing
            network is recalculated rather than rebuilt, and constraints are enabled 
            automatically.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Routing.RouteMatrix.ObeyConstraints">
            <summary>
            Setting this true ensures that constraints are obeyed when calculating routes.
            </summary>
            <remarks>
            Obeying constraints incurs a noticable performance penalty.
            </remarks>
        </member>
        <member name="M:Telogis.GeoBase.Routing.IRouteCostProvider.GetCostTime(System.DateTime,System.Int32,System.Int32,Telogis.GeoBase.Routing.CostTime,Telogis.GeoBase.Routing.TrafficMode)">
            <summary>
            Returns the cost from one stop to another.
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.Routing.IRouteCostProvider.StopWorkerThreads">
            <summary>
            Stops the worker threads, if there are some running. Do this for clean up.
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.Routing.SimpleRouteCostProvider">
            <summary>
            Simple cost provider uses a simple matrix and ignores the time.
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.Routing.CostTime">
            <summary>
            Cost or Time
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.Routing.RowTimeKey">
            <summary>
            Represents a Key for the row of a route matrix at a certain time.
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.Routing.TimeCostRow">
            <summary>
            One Row of a route matrix.
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.Routing.RowEntry">
            <summary>
            Entry in the matrix dictionary.
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.Routing.RouteCostProvider">
            <summary>
            Encapsulates the calculation and storing of route matrices for optimizing stops.
            Just calculates the rowes when they are really needed.
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.Routing.RouteCostProvider.AddResultMatrix(Telogis.GeoBase.Routing.RowTimeKey,Telogis.GeoBase.Routing.TimeCostRow)">
            <summary>
            Add a Result to the dictionary and signalize its done
            </summary>
            <param name="key"></param>
            <param name="matrix"></param>
        </member>
        <member name="M:Telogis.GeoBase.Routing.RouteCostProvider.AddJob(Telogis.GeoBase.Routing.RowTimeKey)">
            <summary>
            Adds a job to the list of pending jobs
            </summary>
            <param name="key"></param>
        </member>
        <member name="M:Telogis.GeoBase.Routing.RouteCostWorker.CopyRouteObject(Telogis.GeoBase.Routing.LocalRoute,Telogis.GeoBase.Routing.LocalRoute@)">
            <summary>
            Create a new routing object and copy the informatio on it
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.Routing.RouteCostWorker.Run">
            <summary>
            This method does the work
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.Routing.NotFoundInHeapException">
            <summary>
            This exception is thrown when an intersection can't be found in the route's heap.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Routing.NotFoundInHeapException.Message">
            <summary>
            Gets the exception message.
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.Routing.MinHeap">
            <summary>
            Summary description for MinHeap.
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.GeocodeAddress">
            <summary>
            Represents a <see cref="T:Telogis.GeoBase.LatLon"/> and a street
            address. A GeoCodeAddress is returned as the result of <see cref="M:Telogis.GeoBase.GeoCoder.GeoCode(System.String,Telogis.GeoBase.Country)">forward geocoding</see>
            (the conversion of a string address, eg "85 enterprise, aliso viejo, ca", to a street address containing detailed location information).</summary>
            <remarks>
            <para>If <see cref="M:Telogis.GeoBase.GeoCoder.GeoCode(System.String,Telogis.GeoBase.Country)">GeoCoding</see>
            was unable to return an exact street number, <see cref="F:Telogis.GeoBase.GeocodeAddress.MinNumber"/>
            and <see cref="F:Telogis.GeoBase.GeocodeAddress.MaxNumber"/> will represent (respectively) the minimum and
            maximum street numbers between which the address lies.</para>
            <para>See <see cref="T:Telogis.GeoBase.GeoCoder"/> for more information
            on geocoding.</para>
            <para><b>Related articles</b>: <a href="243b2474-98eb-4087-902d-c206207674b3.htm">Geocoding Concept</a>, 
            <a href="00cee350-f9af-4050-8dcc-7baec54b4374.htm">Searching for a Location</a>.</para>
            </remarks>
        </member>
        <member name="M:Telogis.GeoBase.GeocodeAddress.GetFields">
            <summary>
            Gets the fields contained within this address; such as street name, city and postal (zip) code.
            </summary>
            <remarks>The fields are returned in the default language (English), although if this function
            other languages are supported by passing a three-letter ISO country code the fields may be
            returned in an alternate language. See <see cref="M:Telogis.GeoBase.GeocodeAddress.GetFields(System.String)"/>.</remarks>
            <returns>An array of strings, each representing a field contained within this address.</returns>
        </member>
        <member name="M:Telogis.GeoBase.GeocodeAddress.GetFields(System.String)">
            <summary>
            Implemented by derived classes to get the fields contained within this address, in the specified language.
            </summary>
            <param name="lang">A three-character string specifying the language by ISO country code.
            Eg, "ENG" for English and "SPA" for Spanish.</param>
            <returns><para>Given an arbitrary GeoCodeAddress:</para>
            <para><center><code lang="C#">GetFields("SPA");</code></center></para>
            <para>might return {"calle", "ciudad", "estado", "código del poste"}, and correspondingly</para>
            <para><center><code lang="C#">string[] fields = GetFields("ENG");</code></center></para>
            <para>would return {"street", "city", "state", "postcode"}.</para></returns>
        </member>
        <member name="M:Telogis.GeoBase.GeocodeAddress.GetOrdinal(System.String)">
            <summary>
            Finds the ordinal number of the specified field within the GeoCodeAddress structure, in the
            default language (English).
            </summary>
            <param name="field">Name of the field, such as "street".</param>
            <returns>The ordinal number of the specified field within the GeoCodeAddress structure.</returns>
        </member>
        <member name="M:Telogis.GeoBase.GeocodeAddress.GetOrdinal(System.String,System.String)">
            <summary>
            Finds the ordinal number of the specified field within the GeoCodeAddress structure, in a
            language specified by three-letter ISO country code.
            </summary>
            <param name="field">Name of the field, such as "street".</param>
            <param name="lang">A three-character string specifying the language by ISO country code.
            Eg, "ENG" for English and "SPA" for Spanish.</param>
            <returns>The ordinal number of the specified field within the GeoCodeAddress structure.</returns>
        </member>
        <member name="F:Telogis.GeoBase.GeocodeAddress.m_values">
            <summary>
            Internal representation of the fields in the GeoCodeAddress.
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.GeocodeAddress.MarshalString(System.IntPtr,System.Int32)">
            <summary>
            Convert UTF8 pointer of a specified length to a string.
            </summary>
            <param name="ptr"></param>
            <param name="len"></param>
            <returns></returns>
        </member>
        <member name="M:Telogis.GeoBase.GeocodeAddress.MarshalString(System.IntPtr)">
            <summary>
            Convert UTF8 pointer to string.
            </summary>
            <param name="ptr"></param>
            <returns></returns>
        </member>
        <member name="M:Telogis.GeoBase.GeocodeAddress.#ctor(System.Int32)">
            <summary>
            Creates a new GeoCodeAddress with the specified number of fields.
            </summary>
            <param name="numVals"></param>
        </member>
        <member name="M:Telogis.GeoBase.GeocodeAddress.#ctor">
            <summary>
            Paramaterless constructor.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.GeocodeAddress.Number">
            <summary>
            The exact street number (if the exact street number is not available
            this value will be &lt; 1).
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.GeocodeAddress.MinNumber">
            <summary>
            Represents the minimum value of the range of street numbers between
            which this address lies.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.GeocodeAddress.MaxNumber">
            <summary>
            Represents the maximum value of the range of street numbers between
            which this address lies.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.GeocodeAddress.Confidence">
            <summary>
            An expression of confidence of the geocoding engine in nominating this result as being
            the correct result. The confidence is a decimal number between 0 and 1; with 1
            representing the highest confidence. The confidence is only applicable to forward
            geocode results; it is not applicable to drill down geocode results.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.GeocodeAddress.Country">
            <summary>
            The name of the country that this GeoCodeAddress is in.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.GeocodeAddress.Location">
            <summary>
            A <see cref="T:Telogis.GeoBase.LatLon"/> representing the
            coordinate location of the address.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.GeocodeAddress.HasBoundingBox">
            <summary>
            Whether this GeoCodeAddress has a bounding box, in which case BoundingBox is set to the
            bounding box and Location is set to its centroid.  Bounding boxes are only currently
            returned for region-level GeoCodeAddresses.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.GeocodeAddress.BoundingBox">
            <summary>
            A <see cref="T:Telogis.GeoBase.BoundingBox">bounding box</see> containing the address.
            Only present if HasBoundingBox is true.  If a bounding box is present then Location is
            set to the centroid of the bounding box.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.GeocodeAddress.MatchType">
            <summary>
            Indicates the primary <see cref="T:Telogis.GeoBase.GeoCodeMatch">search method type</see> that was used to find
            this result.
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.GeocodeAddress.ToString">
            <summary>
            Format the address for display, depending on the
            information available.</summary>
            <remarks>Will take one of the following forms:<br/>
            <ul>
                <li>1234 Main St, City, Region, Zip, Country</li>
                <li>1200-1300 Main St, City, Region, Zip, Country</li>
                <li>City, Region, Zip, Country</li>
                <li>Region, Country</li>
            </ul>
            </remarks>
            <returns>String representation of the address.</returns>
        </member>
        <member name="F:Telogis.GeoBase.GeocodeAddress.StreetOffsets">
            <summary>
            We store a list of offsets to all streets which make up this address. If this address
            is not a street, then this list will be null.
            </summary>		
        </member>
        <member name="P:Telogis.GeoBase.GeocodeAddress.defaultLang">
            <summary>
            Gets the default language for this GeoCodeAddress, as a three-letter ISO country code.
            </summary>
            <remarks>Always returns "ENG" (English).</remarks>
        </member>
        <member name="P:Telogis.GeoBase.GeocodeAddress.Item(System.String)">
            <summary>
            Gets or sets a field given the field's name.
            </summary>
            <param name="field"></param>
            <returns></returns>
        </member>
        <member name="P:Telogis.GeoBase.GeocodeAddress.Item(System.String,System.String)">
            <summary>
            Gets or sets a field based on the given language and field name.
            </summary>
            <param name="field"></param>
            <param name="lang"></param>
            <returns></returns>
        </member>
        <member name="P:Telogis.GeoBase.GeocodeAddress.Item(System.Int32)">
            <summary>
            Gets or sets the value of a field, given the field's index.
            </summary>
            <param name="ord"></param>
            <returns></returns>
        </member>
        <member name="P:Telogis.GeoBase.GeocodeAddress.Street">
            <summary>
            The name of the street.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.GeocodeAddress.City">
            <summary>
            The name of the city.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.GeocodeAddress.Region">
            <summary>
            The name of the region.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.GeocodeAddress.Subregions">
            <summary>
            The name of the regions within a city
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.GeocodeAddress.PostalCode">
            <summary>
            The zip code of this address.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.GeocodeAddress.Line1">
            <summary>
            The first line of this address in the form "1234 Main St".
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.GeocodeAddress.ConfidenceScores">
            <summary>
            The confidence that this address matches the Geocoded address.  The confidence is only
            applicable to forward geocode results; it is not applicable to drill down geocode
            results.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.GeocodeAddress.AddressRanges_m_addressRanges">
            <summary>
            Before 3.6, AddressRanges was serialized as m_addressRanges.    This property is only
            for serialization.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.GeocodeAddress.AddressRanges">
            <summary>
            Gets the known street-number ranges for the result of this geocode. If this address is not
            a street, or if a specific street-number was provided as part of the search,
            null will be returned. If there is no known number data for this street, an empty
            array will be returned.
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.UnknownGeocodeAddress">
            <summary>
            Represents a generic (or 'unknown') <see cref="T:Telogis.GeoBase.GeocodeAddress"/>. It
            contains no more than a street address, city, zip code and region.
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.UnknownGeocodeAddress.GetFields(System.String)">
            <summary>
            Gets the fields contained within this UnknownGeoCodeAddress.
            </summary>
            <remarks>Regardless of the language specified, the fields are returned in English.</remarks>
            <param name="lang">A three-letter (uppercase) ISO country code.</param>
            <returns>A string array containing the fields defined for a
            <see cref="T:Telogis.GeoBase.UnknownGeocodeAddress"/>: street, city, region and post (zip) code.</returns>
        </member>
        <member name="P:Telogis.GeoBase.UnknownGeocodeAddress.Street">
            <summary>
            The street number (if available) and name.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.UnknownGeocodeAddress.City">
            <summary>
            The name of the city.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.UnknownGeocodeAddress.Region">
            <summary>
            The name of the region.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.UnknownGeocodeAddress.PostalCode">
            <summary>
            The zip code of this address.
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.USGeocodeAddress">
            <summary>
            Represents a US-specific <see cref="T:Telogis.GeoBase.GeocodeAddress"/>. It
            contains no more than a street address, city, zip code and state.
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.USGeocodeAddress.GetFields(System.String)">
            <summary>
            Gets the fields associated with a USGeoCodeAddress, in the specified language.
            </summary>
            <remarks>Regardless of the language specified, the fields are returned in English.</remarks>
            <param name="lang">A three-letter (uppercase) ISO country code.</param>
            <returns>A string array containing the fields defined for a
            <see cref="T:Telogis.GeoBase.UnknownGeocodeAddress"/>: street, city, region and post (zip) code.</returns>
        </member>
        <member name="P:Telogis.GeoBase.USGeocodeAddress.Street">
            <summary>
            The name of the street.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.USGeocodeAddress.City">
            <summary>
            The name of the city.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.USGeocodeAddress.Region">
            <summary>
            The name of the region.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.USGeocodeAddress.PostalCode">
            <summary>
            The zip code of this address.
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.NoPostcodeGeocodeAddress">
            <summary>
            This class represents a generic GeoCode <i>without</i> a postcode. It encapsulates
            only three fields: street, city and region.
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.NoPostcodeGeocodeAddress.GetFields(System.String)">
            <summary>
            Returns all fields defined for a <see cref="T:Telogis.GeoBase.NoPostcodeGeocodeAddress"/>.
            </summary>
            <param name="lang">Fields are always returned in English.</param>
            <returns>A string array containing the fields defined for a
            <see cref="T:Telogis.GeoBase.NoPostcodeGeocodeAddress"/>: street, city and region.
            </returns>
        </member>
        <member name="P:Telogis.GeoBase.NoPostcodeGeocodeAddress.Street">
            <summary>
            The street address.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.NoPostcodeGeocodeAddress.City">
            <summary>
            The name of the city.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.NoPostcodeGeocodeAddress.Region">
            <summary>
            The name of the region.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.NoPostcodeGeocodeAddress.PostalCode">
            <summary>
            The zip code of this address.
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.CanadaGeocodeAddress">
            <summary>
            Represents a <see cref="T:Telogis.GeoBase.GeocodeAddress"/> for Canada. This class
            may contain a street, city, state and zip code.
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.CanadaGeocodeAddress.GetFields(System.String)">
            <summary>
            Returns all fields defined for a Canadian GeoCodeAddress (in French, or English).
            </summary>
            <remarks>Depending on the given language the names of these fields may be
            returned in English or French. These fields may or may not be populated,
            depending on how much the <see cref="T:Telogis.GeoBase.GeoCoder">GeoCoder</see>
            knows about this address.
            </remarks>
            <param name="lang">
            Language to return field names in: "ENG" (English) or "FRE" (French). Defaults to English.
            </param>
            <returns>An array of the fields defined for a Canadian GeoCodeAddress.<br/>
            If <b>lang</b> is "ENG" fields are returned in English ("street", "city" etc).<br/>
            If <b>lang</b> is "FRE" fields are returned in French ("rue", "ville" etc).
            </returns>
        </member>
        <member name="P:Telogis.GeoBase.CanadaGeocodeAddress.Street">
            <summary>
            The name of the street on which this address is located.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.CanadaGeocodeAddress.City">
            <summary>
            The name of the city in which this address is located.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.CanadaGeocodeAddress.Region">
            <summary>
            The name of the region.
            </summary>
            <remarks>This may be either a minor region (such as "Vulcan") or a major region (such as "Ontario").
            </remarks>
        </member>
        <member name="P:Telogis.GeoBase.CanadaGeocodeAddress.PostalCode">
            <summary>
            The postal (ZIP) code of this address.
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.IrelandGeocodeAddress">
            <summary>
            Represents a <see cref="T:Telogis.GeoBase.GeocodeAddress"/> for Ireland. This class
            may contain a street, city and region.
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.DataQuery">
            <summary>
            Allows spatial data to be queried directly. Example queries are to
            find <see cref="T:Telogis.GeoBase.Street"/>s that pass through a given
            <see cref="T:Telogis.GeoBase.BoundingBox"/> (see <see cref="M:Telogis.GeoBase.DataQuery.QueryStreets(Telogis.GeoBase.BoundingBox,Telogis.GeoBase.StreetType)"/>)
            or to find the nearest feature to a given point (see <see cref="M:Telogis.GeoBase.DataQuery.QueryPolygonsAtPoint(Telogis.GeoBase.LatLon,System.String)"/>).
            </summary>
            <remarks>
            <para>
            <b>Related articles</b>: <a href="154a60d1-c146-49bc-a913-3e4c067ae8c6.htm">Data Query Concept</a>.
            <a href="c9365c7a-7f17-4bc6-910e-9c64519b3a2c.htm">Alchemy Data Import Tool</a>, 
            <a href="b72c3637-a62d-4adb-be50-693575f35f4b.htm">Predefined Query Tables</a>.
            </para>
            </remarks>
        </member>
        <member name="M:Telogis.GeoBase.DataQuery.QueryStreets(Telogis.GeoBase.BoundingBox,Telogis.GeoBase.StreetType)">
            <summary>
            Gets an array of <see cref="T:Telogis.GeoBase.Street"/>s, of
            the specified <see cref="T:Telogis.GeoBase.StreetType"/>, that
            lie underneath the given <see cref="T:Telogis.GeoBase.BoundingBox"/>.</summary>
            <remarks>
            <para>This method also matches <see cref="T:Telogis.GeoBase.Street"/>s that pass through <b>bbox</b> and continue
            outside its area.<br/> Further, Streets with <see cref="T:Telogis.GeoBase.BoundingBox">BoundingBoxes</see>
            that intersect <b>bbox</b> will also be returned by this method, thus it is possible
            that streets will be returned that appear to lie outside <b>rect</b>.</para>
            <para><b>Note:</b></para><para>The maximum number of results that can be returned is limited, depending on the application's platform. 
            For desktop applications, this value is 262144; for mobile applications, the limit is 4096.</para>
            </remarks>
            <param name="bbox">The <see cref="T:Telogis.GeoBase.BoundingBox"/> representing the area to be queried.</param>
            <param name="type">The <see cref="T:Telogis.GeoBase.StreetType"/> that should be matched.</param>
            <returns>An array of <see cref="T:Telogis.GeoBase.Street"/>s matching the specified type.</returns>
        </member>
        <member name="M:Telogis.GeoBase.DataQuery.QueryStreets(Telogis.GeoBase.LatLon[],Telogis.GeoBase.StreetType)">
            <summary>
            Gets an array of <see cref="T:Telogis.GeoBase.Street"/> objects, of the specified 
            <see cref="T:Telogis.GeoBase.StreetType"/>, that lie at the specified 
            <see cref="T:Telogis.GeoBase.LatLon"/> objects.  The resulting streets have bounding boxes that 
            contain one or more of the supplied points, but might not actually go through any of
            the points directly.  
            </summary>
            <param name="points">The points to be queried.</param>
            <param name="type">The <see cref="T:Telogis.GeoBase.StreetType"/> that should be
            matched.</param>
            <returns>An array of <see cref="T:Telogis.GeoBase.Street"/>s matching the specified
            type.</returns>
        </member>
        <member name="M:Telogis.GeoBase.DataQuery.FindNearestPolygons(Telogis.GeoBase.LatLon,System.String)">
             <summary>
             Gets an array of <see cref="T:Telogis.GeoBase.Polygon"/> objects from a given table that
             are near the given location. Polygons are used to represent features such as lakes, golf courses,
             parking lots and forests.
             </summary>
             <remarks>
             <para>See <see cref="T:Telogis.GeoBase.CustomTable"/> for a list of predefined tables.</para>
             </remarks> 
             <example><code lang="C#">
             //
             // This example will use a GPS unit to find the current location,
             // and then perform a DataQuery to find the nearest hospital to our
             // current location...
             //
            
             IGps myGps = new CEGps(); // create GPS unit, this will work on Windows Mobile devices
             myGps.PowerUp(); // power up the GPS, ready for use
            
             LatLon myLoc = myGps.Position.location; // get the current location
            
             // then get the nearest hospital, as a polygon...
             Polygon hospital = DataQuery.FindNearestPolygons(myLoc, "hospitals")[0];
             </code></example>
             <param name="location">Polygon objects nearest to this location will be returned.</param>
             <param name="tableName">The name of the table to query. See <see cref="T:Telogis.GeoBase.CustomTable"/> 
             for a list of predefined tables.</param>
             <returns>The nearest <see cref="T:Telogis.GeoBase.Polygon"/>s. There may be more than one if the
             query point touches one or more Polygon objects. An empty array is returned if there are no results.</returns>
        </member>
        <member name="M:Telogis.GeoBase.DataQuery.FindNearestPolygons(Telogis.GeoBase.LatLon,System.String,System.Double)">
             <summary>
             Gets an array of <see cref="T:Telogis.GeoBase.Polygon"/> objects from a given table that
             are near the given location. Polygons are used to represent features such as lakes, golf courses,
             parking lots and forests.
             </summary>
             <remarks>
             <para>See <see cref="T:Telogis.GeoBase.CustomTable"/> for a list of predefined tables.</para>
             </remarks> 
             <para>Use this method with caution as it only returns one result, even if multiple polygons are within the search location. 
             It is recommended that <see cref="M:Telogis.GeoBase.DataQuery.FindNearestPolygons(Telogis.GeoBase.LatLon,System.String)">FindNearestPolygons</see> is used instead, which 
             returns an <b>array</b> of polygons from within the search location.</para>
             <example><code lang="C#">
             //
             // This example will use a GPS unit to find the current location,
             // and then perform a DataQuery to find the nearest hospital to our
             // current location...
             //
            
             IGps myGps = new CEGps(); // create GPS unit, this will work on Windows Mobile devices
             myGps.PowerUp(); // power up the GPS, ready for use
            
             LatLon myLoc = myGps.Position.location; // get the current location
            
             // then get the nearest hospital, as a polygon...
             Polygon hospital = DataQuery.FindNearestPolygons(myLoc, "hospitals", 5)[0];
             </code></example>
             <param name="location">Polygon objects nearest to this location will be returned.</param>
             <param name="tableName">The name of the table to query. See <see cref="T:Telogis.GeoBase.CustomTable"/> 
             for a list of predefined tables.</param>
             <param name="simplificationLevel">Level used to simplify results, given as meters per pixel</param>
             <returns>The nearest <see cref="T:Telogis.GeoBase.Polygon"/>s. There may be more than one if the
             query point touches one or more Polygon objects. An empty array is returned if there are no results.</returns>
        </member>
        <member name="M:Telogis.GeoBase.DataQuery.FindNearestLines(Telogis.GeoBase.LatLon,System.String)">
             <summary>
             Finds the nearest <see cref="T:Telogis.GeoBase.Line"/> (such as a stream or railway line)
             to the location given, in the specified table. See <see cref="T:Telogis.GeoBase.CustomTable"/>
             for a list of predefined tables.
             </summary>
             <param name="location">The location to query.</param>
             <param name="tableName">The line table to query. See <see cref="T:Telogis.GeoBase.CustomTable"/>
             for a list of predefined tables</param>
             <returns>The nearest <see cref="T:Telogis.GeoBase.Line"/>s. There may be more than one if the
             query point touches one or more Line objects. An empty array is returned if there are no results.</returns>
             <remarks>Map features are stored in named tables. See <see cref="M:Telogis.GeoBase.DataQuery.QueryLines(Telogis.GeoBase.BoundingBox,System.String)"/>
             <seealso cref="M:Telogis.GeoBase.DataQuery.QueryLines(Telogis.GeoBase.BoundingBox,System.String)"/>
             </remarks>
             <example><code lang="C#">
             //
             // This example will use a GPS unit to find the current location,
             // and then perform a DataQuery to find the nearest canal to our
             // current location...
             //
            
             IGps myGps = new CEGps(); // create GPS unit, this will work on Windows Mobile devices
             myGps.PowerUp(); // power up the GPS, ready for use
            
             LatLon myLoc = myGps.Position.location; // get the current location
            
             Line canal = DataQuery.FindNearestLines(myLoc, "canals")[0];
             // ^^ get the nearest canal
            
             ...
            
             // if we have a map, we can center it on the midpoint of the canal...
             int idx = canal.Points.Length / 2;
             myMap.Center(canal.Points[idx]);
             </code></example>
        </member>
        <member name="M:Telogis.GeoBase.DataQuery.FindNearestLines(Telogis.GeoBase.LatLon,System.String,System.Double)">
            <summary>
            Finds the nearest <see cref="T:Telogis.GeoBase.Line"/> (such as a stream or railway line)
            to the location given, in the specified table. See <see cref="T:Telogis.GeoBase.CustomTable"/>
            for a list of predefined tables.
            </summary>
            <param name="location">The location to query.</param>
            <param name="tableName">The line table to query. See <see cref="T:Telogis.GeoBase.CustomTable"/>
            for a list of predefined tables</param>
            <param name="simplificationLevel">Level used to simplify results, given as meters per pixel</param>
            <returns>The nearest <see cref="T:Telogis.GeoBase.Line"/>s. There may be more than one if the
            query point touches one or more Line objects. An empty array is returned if there are no results.</returns>
            <remarks>Map features are stored in named tables. See <see cref="M:Telogis.GeoBase.DataQuery.QueryLines(Telogis.GeoBase.BoundingBox,System.String)"/>
            <seealso cref="M:Telogis.GeoBase.DataQuery.QueryLines(Telogis.GeoBase.BoundingBox,System.String)"/>
            </remarks>
        </member>
        <member name="M:Telogis.GeoBase.DataQuery.FindNearestPoints(Telogis.GeoBase.LatLon,System.String)">
             <summary>
             Finds the nearest <see cref="T:Telogis.GeoBase.PointFeature"/> (usually a city)
             to the location given, in the specified table. See <see cref="T:Telogis.GeoBase.CustomTable"/>
             for a list of predefined tables.
             </summary>
             <param name="location">The location to query.</param>
             <param name="tableName">The point table to query. See <see cref="T:Telogis.GeoBase.CustomTable"/>
             for a list of predefined tables</param>
             <returns>The nearest <see cref="T:Telogis.GeoBase.PointFeature"/>s. There may be more than one if the
             query point touches one or more points. An empty array is returned if there are no results.</returns>
             <remarks>Map features are stored in named tables. See <see cref="M:Telogis.GeoBase.DataQuery.QueryPoints(Telogis.GeoBase.BoundingBox,System.String)"/>
             <seealso cref="M:Telogis.GeoBase.DataQuery.QueryPoints(Telogis.GeoBase.BoundingBox,System.String)"/>
             </remarks>
             <example><code lang="C#">
             //
             // This example will use a GPS unit to find the current location,
             // and then perform a DataQuery to find the nearest canal to our
             // current location...
             //
            
             IGps myGps = new CEGps; // create GPS unit, this will work on Windows Mobile devices
             myGps.PowerUp(); // power up the GPS, ready for use
            
             LatLon myLoc = myGps.Position.location; // get the current location
            
             PointFeature mCity = DataQuery.FindNearestPoints(myLoc, "major_cities")[0];
             // ^^ get the nearest major city to our current location
            
             ...
            
             // if we have a map, we can center it on the city
             myMap.Center(mCity.Point);
             </code></example>
        </member>
        <member name="M:Telogis.GeoBase.DataQuery.QueryIndex(System.String,System.Object)">
            <summary>
            Queries a given object for an index. See also <see cref="T:Telogis.GeoBase.CustomTable"/> and <see cref="T:Telogis.GeoBase.CustomColumn"/>.
            </summary>
            <remarks>Given a table of power pylons (containing location, height and ID information) this method
            could be used to return a selection of power pylons above a certain height, or with names that begin
            with a certain string.</remarks>
            <param name="index">Index to query</param>
            <param name="query">Key to search for</param>
            <returns>An array of <see cref="T:Telogis.GeoBase.GISObject"/> that match the query.</returns>
        </member>
        <member name="M:Telogis.GeoBase.DataQuery.QueryIndex(System.String,System.String,System.Object)">
            <summary>
            Queries a given object for an index. See also <see cref="T:Telogis.GeoBase.CustomTable"/> and <see cref="T:Telogis.GeoBase.CustomColumn"/>.
            </summary>
            <remarks>Given a table of power pylons (containing location, height and ID information) this method
            could be used to return a selection of power pylons above a certain height, or with names that begin
            with a certain string.</remarks>
            <param name="index">Index to query</param>
            <param name="table">Table to query the index from</param>
            <param name="query">Key to search for</param>
            <returns>An array of <see cref="T:Telogis.GeoBase.GISObject"/> that match the query.</returns>
        </member>
        <member name="M:Telogis.GeoBase.DataQuery.QueryIndex(System.String,Telogis.GeoBase.QueryType,System.Object)">
            <summary>
            Queries a given object for an index. See also <see cref="T:Telogis.GeoBase.CustomTable"/> and <see cref="T:Telogis.GeoBase.CustomColumn"/>.
            </summary>
            <remarks>Given a table of power pylons (containing location, height and ID information) this method
            could be used to return a selection of power pylons matching certain location criteria.</remarks>
            <param name="index">Index to query</param>
            <param name="condition">Condition to filter the key on</param>
            <param name="query">Key to search for</param>
            <returns>An array of <see cref="T:Telogis.GeoBase.GISObject"/> that match the query and condition.</returns>
        </member>
        <member name="M:Telogis.GeoBase.DataQuery.QueryIndex(System.String,System.String,Telogis.GeoBase.QueryType,System.Object)">
            <summary>
            Queries a given object for an index. See also <see cref="T:Telogis.GeoBase.CustomTable"/> and <see cref="T:Telogis.GeoBase.CustomColumn"/>.
            </summary>
            <remarks>Given a table of power pylons (containing location, height and ID information) this method
            could be used to return a selection of power pylons matching certain location criteria.</remarks>
            <param name="index">Index to query</param>
            <param name="table">Table to query the index from</param>
            <param name="condition">Condition to filter the key on</param>
            <param name="query">Key to search for</param>
            <returns>An array of <see cref="T:Telogis.GeoBase.GISObject"/> that match the query and condition.</returns>
        </member>
        <member name="M:Telogis.GeoBase.DataQuery.QueryIndex(System.String,Telogis.GeoBase.QueryType,System.Object,System.Double)">
            <summary>
            Queries a given object for an index. See also <see cref="T:Telogis.GeoBase.CustomTable"/> and <see cref="T:Telogis.GeoBase.CustomColumn"/>.
            </summary>
            <remarks>Given a table of power pylons (containing location, height and ID information) this method
            could be used to return a selection of power pylons matching certain location criteria.</remarks>
            <param name="index">Index to query</param>
            <param name="condition">Condition to filter the key on</param>
            <param name="query">Key to search for</param>
            <param name="simplificationLevel">Level used to simplify line and polygon results, given as meters per pixel</param>
            <returns>An array of <see cref="T:Telogis.GeoBase.GISObject"/> that match the query and condition.</returns>
        </member>
        <member name="M:Telogis.GeoBase.DataQuery.QueryIndex(System.String,System.String,Telogis.GeoBase.QueryType,System.Object,System.Double)">
            <summary>
            Queries a given object for an index. See also <see cref="T:Telogis.GeoBase.CustomTable"/> and <see cref="T:Telogis.GeoBase.CustomColumn"/>.
            </summary>
            <remarks>Given a table of power pylons (containing location, height and ID information) this method
            could be used to return a selection of power pylons matching certain location criteria.</remarks>
            <param name="index">Index to query</param>
            <param name="table">Table to query the index from</param>
            <param name="condition">Condition to filter the key on</param>
            <param name="query">Key to search for</param>
            <param name="simplificationLevel">Level used to simplify line and polygon results, given as meters per pixel</param>
            <returns>An array of <see cref="T:Telogis.GeoBase.GISObject"/> that match the query and condition.</returns>
        </member>
        <member name="M:Telogis.GeoBase.DataQuery.QueryPolygons(Telogis.GeoBase.BoundingBox,System.String)">
            <summary>
            Gets an array of <see cref="T:Telogis.GeoBase.Polygon"/>s that
            lie underneath the given <see cref="T:Telogis.GeoBase.Rectangle"/>.
            </summary>
            <param name="bbox">The <see cref="T:Telogis.GeoBase.BoundingBox"/> representing the area to be queried.</param>
            <param name="tableName">The name of the polygon table to query</param>
            <returns>An array of <see cref="T:Telogis.GeoBase.Polygon"/>s matching the specified type.</returns>
            <remarks>
            <para>This method matches <see cref="T:Telogis.GeoBase.Polygon"/>s that pass through <b>rect</b> and continue
            outside its area.<br/> Further, Polygons with <see cref="T:Telogis.GeoBase.BoundingBox">BoundingBoxes</see>
            that intersect <b>rect</b> will also be returned by this method, thus it is possible
            that streets will be returned that appear to lie outside <b>rect</b>.</para>
            <para>Map features are stored in tables, named according to type. Developers with custom data should avoid using
            the table names in the list below.</para>
            <list type="table">
            <listheader><term>Pre-defined polygon query tables</term><description>Polygon Import Type</description></listheader>
            <item><term>all</term><description>All</description></item>
            <item><term>countries</term><description>Countries (22)</description></item>
            <item><term>states</term><description>States (1)</description></item>
            <item><term>counties</term><description>Counties (23)</description></item>
            <item><term>islands</term><description>Islands (24)</description></item>
            <item><term>cities</term><description>Cities (2)</description></item>
            <item><term>airports</term><description>Airports (8)</description></item>
            <item><term>runways</term><description>Aircraft roads (runways &amp; taxi-ways)(19)</description></item>
            <item><term>cemeteries</term><description>Cemeteries (9)</description></item>
            <item><term>hospitals</term><description>Hospitals (10)</description></item>
            <item><term>industrial</term><description>Industrial complexes (11)</description></item>
            <item><term>major_parks</term><description>National parks (13)</description></item>
            <item><term>state_parks</term><description>State parks (14)</description></item>
            <item><term>parks</term><description>County parks (15)</description></item>
            <item><term>shopping</term><description>Shopping centers (16)</description></item>
            <item><term>sports</term><description>Sports complexes (17)</description></item>
            <item><term>universities</term><description>Colleges (18)</description></item>
            <item><term>golf_courses</term><description>Golf courses (20)</description></item>
            <item><term>native</term><description>Native American reservations (21)</description></item>
            <item><term>military</term><description>Military bases (12)</description></item>
            <item><term>buildings</term><description>Buildings (5)</description></item>
            <item><term>oceans</term><description>Oceans (0)</description></item>
            <item><term>bays</term><description>Bays (3)</description></item>
            <item><term>water</term><description>Water (4)</description></item>
            </list>
            </remarks>
        </member>
        <member name="M:Telogis.GeoBase.DataQuery.QueryPolygons(Telogis.GeoBase.BoundingBox,System.String,System.Double)">
            <summary>
            Gets an array of <see cref="T:Telogis.GeoBase.Polygon"/>s that
            lie underneath the given <see cref="T:Telogis.GeoBase.Rectangle"/>.
            </summary>
            <param name="bbox">The <see cref="T:Telogis.GeoBase.BoundingBox"/> representing the area to be queried.</param>
            <param name="tableName">The name of the polygon table to query</param>
            <param name="simplificationLevel">Level used to simplify results, given as meters per pixel</param>
            <returns>An array of <see cref="T:Telogis.GeoBase.Polygon"/>s matching the specified type.</returns>
            <remarks>
            <para>This method matches <see cref="T:Telogis.GeoBase.Polygon"/>s that pass through <b>rect</b> and continue
            outside its area.<br/> Further, Polygons with <see cref="T:Telogis.GeoBase.BoundingBox">BoundingBoxes</see>
            that intersect <b>rect</b> will also be returned by this method, thus it is possible
            that streets will be returned that appear to lie outside <b>rect</b>.</para>
            <para>Map features are stored in tables, named according to type. Developers with custom data should avoid using
            the table names in the list below.</para>
            <list type="table">
            <listheader><term>Pre-defined polygon query tables</term><description>Polygon Import Type</description></listheader>
            <item><term>all</term><description>All</description></item>
            <item><term>countries</term><description>Countries (22)</description></item>
            <item><term>states</term><description>States (1)</description></item>
            <item><term>counties</term><description>Counties (23)</description></item>
            <item><term>islands</term><description>Islands (24)</description></item>
            <item><term>cities</term><description>Cities (2)</description></item>
            <item><term>airports</term><description>Airports (8)</description></item>
            <item><term>runways</term><description>Aircraft roads (runways &amp; taxi-ways)(19)</description></item>
            <item><term>cemeteries</term><description>Cemeteries (9)</description></item>
            <item><term>hospitals</term><description>Hospitals (10)</description></item>
            <item><term>industrial</term><description>Industrial complexes (11)</description></item>
            <item><term>major_parks</term><description>National parks (13)</description></item>
            <item><term>state_parks</term><description>State parks (14)</description></item>
            <item><term>parks</term><description>County parks (15)</description></item>
            <item><term>shopping</term><description>Shopping centers (16)</description></item>
            <item><term>sports</term><description>Sports complexes (17)</description></item>
            <item><term>universities</term><description>Colleges (18)</description></item>
            <item><term>golf_courses</term><description>Golf courses (20)</description></item>
            <item><term>native</term><description>Native American reservations (21)</description></item>
            <item><term>military</term><description>Military bases (12)</description></item>
            <item><term>buildings</term><description>Buildings (5)</description></item>
            <item><term>oceans</term><description>Oceans (0)</description></item>
            <item><term>bays</term><description>Bays (3)</description></item>
            <item><term>water</term><description>Water (4)</description></item>
            </list>
            </remarks>
        </member>
        <member name="M:Telogis.GeoBase.DataQuery.QueryPolygonsAtPoint(Telogis.GeoBase.LatLon,System.String)">
             <summary>
             Gets an array of <see cref="T:Telogis.GeoBase.Polygon"/> objects that
             encapsulate the given <see cref="T:Telogis.GeoBase.LatLon"/>. This method can be used to find
             polygons (such as golf courses, parks, airports, political/geographical entities and bodies of water)
             at a given location. See example.
             </summary>
             <param name="loc">A <see cref="T:Telogis.GeoBase.LatLon"/> location to query.</param>
             <param name="tableName">The name of the polygon table to query (this specifies
             the <see cref="T:Telogis.GeoBase.PolygonType"/> to return).</param>
             <returns>An array of <see cref="T:Telogis.GeoBase.Polygon"/>s matching the specified type.</returns>
             <remarks>
             <para>Map features are stored in tables, named according to type. Developers with custom data should avoid using
             the table names in the list below.</para>
             <list type="table">
             <listheader><term>Pre-defined polygon query tables</term></listheader>
             <item><term>all</term></item>
             <item><term>countries</term></item>
             <item><term>states</term></item>
             <item><term>counties</term></item>
             <item><term>islands</term></item>
             <item><term>cities</term></item>
             <item><term>airports</term></item>
             <item><term>runways</term></item>
             <item><term>cemeteries</term></item>
             <item><term>hospitals</term></item>
             <item><term>industrial</term></item>
             <item><term>major_parks</term></item>
             <item><term>state_parks</term></item>
             <item><term>parks</term></item>
             <item><term>shopping</term></item>
             <item><term>sports</term></item>
             <item><term>universities</term></item>
             <item><term>golf_courses</term></item>
             <item><term>native</term></item>
             <item><term>military</term></item>
             <item><term>buildings</term></item>
             <item><term>oceans</term></item>
             <item><term>bays</term></item>
             <item><term>water</term></item>
             </list>
             </remarks>
             <example><code lang="C#">
             //
             // Get the golf course (if one exists) at the given location...
             //
             LatLon loc = new LatLon(33.919432,-118.31181); // location in Los Angeles, USA
             Polygon[] gcs = DataQuery.QueryPolygonsAtPoint(loc, "golf_courses");
             Console.WriteLine("There is " + gcs.Length + " golf course at the location " + loc.ToString());
            
             //
             // Get all polygons at the given location...
             //
             gcs = DataQuery.QueryPolygonsAtPoint(loc, "all");
             Console.WriteLine("There are a total of " + gcs.Length + " polygons at the location " + loc.ToString());
             int counter = 1;
             	foreach (Polygon p in gcs) {
             		Console.WriteLine("\t" + (counter++) + ") " + p.Name);
             }
             </code>
             <para>The above code snippet produces the following output:</para>
             <table><column><row>There is 1 golf course at the location 33.919432,-118.311809<br/>
             There are a total of 3 polygons at the location 33.919432,-118.311809<br/>
             1) Chester L Washington Golf Course<br/>
             2) Los Angeles<br/>
             3) California<br/></row></column>
             </table>
             </example>
        </member>
        <member name="M:Telogis.GeoBase.DataQuery.QueryPolygonsAtPoint(Telogis.GeoBase.LatLon,System.String,System.Double)">
             <summary>
             Gets an array of <see cref="T:Telogis.GeoBase.Polygon"/> objects that
             encapsulate the given <see cref="T:Telogis.GeoBase.LatLon"/>. This method can be used to find
             polygons (such as golf courses, parks, airports, political/geographical entities and bodies of water)
             at a given location. See example.
             </summary>
             <param name="loc">A <see cref="T:Telogis.GeoBase.LatLon"/> location to query.</param>
             <param name="tableName">The name of the polygon table to query (this specifies
             the <see cref="T:Telogis.GeoBase.PolygonType"/> to return).</param>
             <param name="simplificationLevel">Level used to simplify results, given as meters per pixel</param>
             <returns>An array of <see cref="T:Telogis.GeoBase.Polygon"/>s matching the specified type.</returns>
             <remarks>
             <para>Map features are stored in tables, named according to type. Developers with custom data should avoid using
             the table names in the list below.</para>
             <list type="table">
             <listheader><term>Pre-defined polygon query tables</term></listheader>
             <item><term>all</term></item>
             <item><term>countries</term></item>
             <item><term>states</term></item>
             <item><term>counties</term></item>
             <item><term>islands</term></item>
             <item><term>cities</term></item>
             <item><term>airports</term></item>
             <item><term>runways</term></item>
             <item><term>cemeteries</term></item>
             <item><term>hospitals</term></item>
             <item><term>industrial</term></item>
             <item><term>major_parks</term></item>
             <item><term>state_parks</term></item>
             <item><term>parks</term></item>
             <item><term>shopping</term></item>
             <item><term>sports</term></item>
             <item><term>universities</term></item>
             <item><term>golf_courses</term></item>
             <item><term>native</term></item>
             <item><term>military</term></item>
             <item><term>buildings</term></item>
             <item><term>oceans</term></item>
             <item><term>bays</term></item>
             <item><term>water</term></item>
             </list>
             </remarks>
             <example><code lang="C#">
             //
             // Get the golf course (if one exists) at the given location...
             //
             LatLon loc = new LatLon(33.919432,-118.31181); // location in Los Angeles, USA
             Polygon[] gcs = DataQuery.QueryPolygonsAtPoint(loc, "golf_courses", 1);
             Console.WriteLine("There is " + gcs.Length + " golf course at the location " + loc.ToString());
            
             //
             // Get all polygons at the given location...
             //
             gcs = DataQuery.QueryPolygonsAtPoint(loc, "all", 1);
             Console.WriteLine("There are a total of " + gcs.Length + " polygons at the location " + loc.ToString());
             int counter = 1;
             	foreach (Polygon p in gcs) {
             		Console.WriteLine("\t" + (counter++) + ") " + p.Name);
             }
             </code>
             <para>The above code snippet produces the following output:</para>
             <table><column><row>There is 1 golf course at the location 33.919432,-118.311809<br/>
             There are a total of 3 polygons at the location 33.919432,-118.311809<br/>
             1) Chester L Washington Golf Course<br/>
             2) Los Angeles<br/>
             3) California<br/></row></column>
             </table>
             </example>
        </member>
        <member name="M:Telogis.GeoBase.DataQuery.QueryPoints(Telogis.GeoBase.BoundingBox,System.String)">
             <summary>
             Finds <see cref="T:Telogis.GeoBase.PointFeature"/> objects that lie within the given
             <see cref="T:Telogis.GeoBase.Rectangle"/>.
             </summary>
             <param name="bbox">The <see cref="T:Telogis.GeoBase.BoundingBox"/> representing the area to query.</param>
             <param name="tableName">The name of the table to query.</param>
             <returns></returns>
             <remarks>Map features are stored in named tables according to their type.
             Developers with custom data should avoid using the table names in the list below.
             <list type="table">
             <listheader><term>Pre-defined data query tables</term></listheader>
             <item><term>all</term></item>
             <item><term>small_villages</term></item>
             <item><term>villages</term></item>
             <item><term>large_villages</term></item>
             <item><term>towns</term></item>
             <item><term>large_towns</term></item>
             <item><term>small_cities</term></item>
             <item><term>cities</term></item>
             <item><term>major_cities</term></item>
             </list>
             </remarks>
             <example><code lang="C#">
             //
             // Create new BoundingBox, NE Los Angeles (USA)
             //
             BoundingBox bbox = new BoundingBox(new LatLon(34, -117), new LatLon(33.75, -117.5));
            
             //
             // Get all PointFeatures in the bounding box...
             //
             PointFeature[] parray = DataQuery.QueryPoints(bbox, "all");
             Console.WriteLine("There are a total of " + parray.Length + " PointFeatures in the given BoundingBox");
             </code></example>
        </member>
        <member name="M:Telogis.GeoBase.DataQuery.QueryLines(Telogis.GeoBase.BoundingBox,System.String,System.Double)">
             <summary>
             Gets an array of <see cref="T:Telogis.GeoBase.Line"/>s that
             lie underneath the given <see cref="T:Telogis.GeoBase.BoundingBox"/>.
             </summary>
             <remarks>
             <para>This method also matches <see cref="T:Telogis.GeoBase.Line"/>s that pass
             through <b>rect</b> and continue outside its area.<br/> Further, Lines with
             <see cref="T:Telogis.GeoBase.BoundingBox">BoundingBoxes</see> that intersect
             <b>rect</b> will also be returned by this method, thus it is possible
             that lines will be returned that appear to lie outside <b>rect</b>.</para>
             <para>Map features are stored in named tables according to their type.
             Developers with custom data should avoid using the table names in the list below.</para>
             <list type="table">
             <listheader><term>Pre-defined <see cref="T:Telogis.GeoBase.Line"/> query tables</term></listheader>
             <item><term>all</term></item>
             <item><term>railways</term></item>
             <item><term>rivers</term></item>
             <item><term>canals</term></item>
             </list>
             </remarks>
             <param name="bbox">The <see cref="T:Telogis.GeoBase.BoundingBox"/> representing the area to be queried.</param>
             <param name="tableName">The lines table to query</param>
             <param name="simplificationLevel">Level used to simplify results, given as meters per pixel</param>
             <returns>An array of <see cref="T:Telogis.GeoBase.Line"/>s.</returns>
             <example><code lang="C#">
             //
             // Create new BoundingBox, NE Los Angeles (USA)
             //
             BoundingBox bbox = new BoundingBox(new LatLon(34, -117), new LatLon(33.75, -117.5));
            
             //
             // Get all the Lines in the bounding box... these could be railways, rivers or canals
             //
             Line[] ls = DataQuery.QueryLines(bbox, "all");
             Console.WriteLine("There are a total of " + ls.Length + " Lines in the given BoundingBox");
             </code></example>
        </member>
        <member name="M:Telogis.GeoBase.DataQuery.QueryPoi(Telogis.GeoBase.BoundingBox)">
             <summary>
             Gets all the Points of Interest that lie within the given <see cref="T:Telogis.GeoBase.BoundingBox"/>.
             </summary>
             <param name="bbox">The <see cref="T:Telogis.GeoBase.BoundingBox"/> in which to query.</param>
             <returns>An array of <see cref="T:Telogis.GeoBase.Poi"/> objects.</returns>
             <example><code lang="C#">
             //
             // Create new BoundingBox, NE Los Angeles (USA)
             //
             BoundingBox bbox = new BoundingBox(new LatLon(34, -117), new LatLon(35, -118));
            
             //
             // Get all POIs in the bounding box...
             //
             Poi[] ps = DataQuery.QueryPoi(bbox);
             Console.WriteLine("There are a total of " + ps.Length + " POIs in the given BoundingBox, but only these sell pizza:");
            
             //
             // Display only the pizza restaurants...
             //
             // See DataQuery.QueryPoi(BoundingBox, PoiType, String) to filter on POI type
             // and POI name...
             for (int i = 0; i &lt; ps.Length; i++) {
                 if (ps[i].FoodType == PoiRestaurantType.PIZZA) {
                     Console.WriteLine("Name: " + ps[i].Name + "\nPhone: " + ps[i].Phone + "\n");
                 }
             }
            
             Console.ReadLine();
             </code></example>
        </member>
        <member name="M:Telogis.GeoBase.DataQuery.QueryPoi(Telogis.GeoBase.BoundingBox,Telogis.GeoBase.PoiType[],System.String)">
            <summary>
            Gets all the Points of Interest of a given type that lie underneath the given 
            <see cref="T:Telogis.GeoBase.BoundingBox"/>, with the ability to filter on a POI's name.
            </summary>
            <remarks>
            To show only a certain type of POI on a map, consider using a <see cref="T:Telogis.GeoBase.PoiRenderer"/> 
            object. A PoiRenderer object will draw only POI objects of a specified type (or types) on a map.
            </remarks>
            <param name="bbox">The area to search.</param>
            <param name="type">The type of POIs to look for.</param>
            <param name="nameSubstring">The query will only return POI objects that have names containing this substring.
            If set to null POI objects will not be filtered by name.</param>
            <returns></returns>
            <example><code lang="C#">
            // This BoundingBox covers NE Los Angeles
            BoundingBox bbox = new BoundingBox(new LatLon(34, -117), new LatLon(35, -118));
            
            // This query looks only for POIs with type PetrolStation. The null parameter
            // tells GeoBase not to filter on the POI name.
            Poi[] pois = DataQuery.QueryPoi(bbox, new PoiType[] { PoiType.PetrolStation }, null);
            foreach (Poi poi in pois) {
            	Console.WriteLine("Name: " + poi.Name + "\nPhone: " + poi.Phone + "\n");
            }
            </code></example>
        </member>
        <member name="M:Telogis.GeoBase.DataQuery.BeginQueryPoi(Telogis.GeoBase.BoundingBox,Telogis.GeoBase.PoiType[],System.String,System.AsyncCallback,System.Object)">
            <summary>
             Begins an asynchronous search for points of interest within a bounding box, starting from the center of
             the box and moving outwards.
             </summary>
             <remarks>
             <para>An asynchronous query is performed in a spiral fashion, starting from the center of the given bounding box.</para>
             <para>Initially, a search area, with 3km x 3km dimensions, is centered on the bounding box's center. If the bounding box is smaller
             than the search area, then the search area is clipped down to size. If all sides are clipped, no more queries will be performed.</para>
             <para>If not all sides are clipped, the search starts working in a spiral. After each iteration of the algorithm, it will have queried
             a square area (unless it hits the bounding box), so at the beginning of each iteration the following queries are planned:</para>
            <img src="Art/AsyncPOI.png"></img>
            <para>Each box (A,B,C and D) is calculated, and fed into GeoBase for querying. These boxes are clipped to the bounding
            box if necessary. If a box is clipped entirely (to zero width or height) then the query needn't be performed.</para>
            <para>Once all boxes are clipping to zero width or height, the query is complete.</para>
            <para>The thickness of the spiral boxes is controlled by T.</para>
             </remarks>
             <example> <code lang="C#">
            
             class Program
             {
                 //Poi list
                 static List&lt;Poi&gt; async;
            
                 //thread wait
                 static ManualResetEvent mre;
            
                 //Create new bounding box, and center on LatLon
                 static BoundingBox box;
                 static int count;
            
                 static void Main(string[] args)
                 {
            
                     mre = new ManualResetEvent(false);
            
                     //Callback
                     AsyncCallback cb = new AsyncCallback(ar);
            
                     //Dimensions
                     box = new BoundingBox();
                     box.Add(new LatLon(34, -118));
                     box.Inflate(0.25);
            
            
                     Console.WriteLine(DateTime.Now);
                     count = 0;
            
                     //Create list
                     async = new List&lt;Poi&gt;();
            
                     //start query - using boundary box and callback
                     DataQuery.BeginQueryPoi(box, null, null, cb, null);
            
                     //thread wait (until signalled)
                     mre.WaitOne();
                     Console.WriteLine(count);
            
                     //Stop console closing automatically
                     Console.ReadKey();
                 }
            
                 //Callback method
                 static void ar(IAsyncResult cb)
                 {
            
                     bool comp;
            
                     Poi[] res = DataQuery.EndQueryPoi(cb, out comp);
            
                     if (res.Length &gt; 0)
                     {
                         //update list
                         count += res.Length;
                         async.AddRange(res);
                         Console.WriteLine("{0}:{1} - {2} - {3:0.0}", DateTime.Now, res.Length, res[0].Name, res[0].Location.DistanceTo(box.Center, DistanceUnit.KILOMETERS));
                     }
                     else
                     {
                         Console.WriteLine("{0}:{1}", DateTime.Now, res.Length);
                     }
            
                     if (cb.IsCompleted)
                     {
                         //set to signalled state
                         mre.Set();
                     }
                 }
             }
             </code></example>
             <param name="bbox">The <see cref="T:Telogis.GeoBase.BoundingBox"/> within which to search</param>
             <param name="type">An array of PoiTypes to restrict the search to. If this is null or empty all PoiTypes are returned.</param>
             <param name="nameSubstring">A substring to search for in POI names.</param>
             <param name="resultsCallback">The callback to call when more results become available. This may be called multiple times.</param>
             <param name="state">The state of the asynchronous query.</param>
             <returns></returns>
        </member>
        <member name="M:Telogis.GeoBase.DataQuery.EndQueryPoi(System.IAsyncResult,System.Boolean@)">
            <summary>
            Receive the next set of Poi results from an asynchronous Poi query.
            </summary>
            <param name="handle"></param>
            <param name="searchComplete">Set to true if there are no more results to receive. False if more results are still to come.</param>
            <returns>An array of <see cref="T:Telogis.GeoBase.Poi"/> objects. Any results that have been returned in a previous call to EndQueryPoi will not be included</returns>
        </member>
        <member name="M:Telogis.GeoBase.DataQuery.AbortQueryPoi(System.IAsyncResult)">
            <summary>
            Ends or cancels an asynchronous search for points of interest.
            </summary>
            <param name="handle">Must be a PoiAsyncResult</param>
            <remarks>This call will block until the query thread finshes it current opertation.
            If the AsyncCallback passed to the PoiAsyncResult is executing when AbortQueryPoi is called,
            the calling thread will be blocked until the callback has finished.</remarks>
        </member>
        <member name="M:Telogis.GeoBase.DataQuery.AbortQueryPoiAsynchronously(System.IAsyncResult)">
            <summary>
            Ends or cancels an asynchronous search for points of interest.
            </summary>
            <param name="handle">Must be a PoiAsyncResult</param>
            <remarks>This call will not wait for the query thread to finish and will return immediately.
            If the AsyncCallback passed to the PoiAsyncResult is executing when AbortQueryPoiAsynchronously is called,
            it will run until the callback is completed.</remarks>
        </member>
        <member name="M:Telogis.GeoBase.DataQuery.QueryLinks(Telogis.GeoBase.BoundingBox)">
            <summary>
            Gets an array of <see cref="T:Telogis.GeoBase.StreetLink"/>s that
            lie underneath the given <see cref="T:Telogis.GeoBase.BoundingBox"/>.
            </summary>
            <remarks>
            This method also matches <see cref="T:Telogis.GeoBase.StreetLink"/>s that pass through <b>rect</b> and continue
            outside its area.<br/> Further, StreetLinks with <see cref="T:Telogis.GeoBase.BoundingBox">BoundingBoxes</see>
            that intersect <b>rect</b> will also be returned by this method, thus it is possible
            that StreetLinks will be returned that appear to lie outside <b>rect</b>.
            </remarks>
            <param name="bbox">The <see cref="T:Telogis.GeoBase.BoundingBox"/> representing the area to be queried.</param>
            <returns>An array of <see cref="T:Telogis.GeoBase.StreetLink"/>s</returns>
        </member>
        <member name="T:Telogis.GeoBase.Poi">
            <summary>
            A Point of Interest (POI) represents a location that contains some structure,
            facility or service that may be of special interest. An array of <b>Pois</b> may be returned
            by a <see cref="T:Telogis.GeoBase.DataQuery"/>.
            </summary>
            <remarks>
            A number of common types have been defined in <see cref="T:Telogis.GeoBase.PoiType"/>
            and restaurant sub-types are defined in <see cref="T:Telogis.GeoBase.PoiRestaurantType"/>.
            <seealso cref="T:Telogis.GeoBase.PoiRenderer"/>.
            <para><b>Related articles</b>: <a href="154a60d1-c146-49bc-a913-3e4c067ae8c6.htm">Data Query Concept</a>.</para>
            </remarks>
        </member>
        <member name="F:Telogis.GeoBase.Poi.Location">
            <summary>
            A <see cref="T:Telogis.GeoBase.LatLon"/> representing the exact location of
            this <see cref="T:Telogis.GeoBase.Poi"/>.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Poi.Type">
            <summary>
            A value from the <see cref="T:Telogis.GeoBase.PoiType"/> enumeration representing
            the type of this <see cref="T:Telogis.GeoBase.Poi"/>.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Poi.FoodType">
            <summary>
            A special sub-type value from the <see cref="T:Telogis.GeoBase.PoiType"/>
            enumeration representing the type of food served.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Poi.Name">
            <summary>
            The name of this <see cref="T:Telogis.GeoBase.Poi"/>.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Poi.Phone">
            <summary>
            The Phone number of this <see cref="T:Telogis.GeoBase.Poi"/>.
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.StreetLink">
            <summary>
            Represents a single street link. A link is typically a section of street running
            between two intersections.
            </summary>
            <remarks>
            A street link may terminate between intersections if street type or the local post (zip)
            code changes. Thus an apparently contiguous street may be made up of multiple different
            street links.
            <para><b>Related articles</b>: <a href="301bf297-670b-4b0d-8b89-6601fd8dca8f.htm">Geofences Concept</a>, 
            <a href="154a60d1-c146-49bc-a913-3e4c067ae8c6.htm">Data Query Concept</a>.</para>
            </remarks>
        </member>
        <member name="M:Telogis.GeoBase.StreetLink.GetHashCode">
            <summary>
            Gets a hash code for this StreetLink. This will be identical for two
            objects representing the same link.
            </summary>
            <returns>The hash code for this link.</returns>
        </member>
        <member name="M:Telogis.GeoBase.StreetLink.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Used for serialization (internal use).
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="P:Telogis.GeoBase.StreetLink.Flags">
            <summary>
            Implemented by derived classes to get a <see cref="T:Telogis.GeoBase.Routing.RouteFlag"/> object that contains information
            about the flags on this street.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.StreetLink.LAddrNRef">
            <summary>
            Implemented by derived classes to get the number of the last property on the left of the street.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.StreetLink.LAddrRef">
            <summary>
            Implemented by derived classes to get the number of the first property on the left of the street at the
            reference end.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.StreetLink.Names">
            <summary>
            Implemented by derived classes to get an array of the names of this street.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.StreetLink.Points">
            <summary>
            Implemented by derived classes to get an array of the points representing this street. Points are returned
            with the reference end at position 0 and the non-reference end at <i>Points.Length - 1</i>
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.StreetLink.FirstPoint">
            <summary>
            The first point on the street (this point will be at the reference end).
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.StreetLink.LastPoint">
            <summary>
            The last point on the street (this point will be at the non-reference end).
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.StreetLink.RAddrNRef">
            <summary>
            Implemented by derived classes to get the number of the last property on the right of the street.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.StreetLink.LPostcode">
            <summary>
            Implemented by derived classes to get the postcode for the left hand side of the street.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.StreetLink.RPostcode">
            <summary>
            Implemented by derived classes to get the postcode for the right hand size of the street.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.StreetLink.RAddrRef">
            <summary>
            Implemented by derived classes to get the number of the first property on the right of the street at the
            reference end.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.StreetLink.Street">
            <summary>
            Implemented by derived classes to get the <see cref="T:Telogis.GeoBase.Street"/> that this StreetLink
            is a part of.
            </summary>
            <remarks>
            Most <see cref="T:Telogis.GeoBase.Street"/>s consist of more than one
            StreetLink.
            </remarks>
        </member>
        <member name="P:Telogis.GeoBase.StreetLink.Z_End">
            <summary>
            Implemented by derived classes to get the Z level at the non-reference end of the street link.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.StreetLink.Z_Start">
            <summary>
            Implemented by derived classes to get the Z level at the reference end of the street link.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.StreetLink.LinkId">
            <summary>
            Implemented by derived classes to get the unique identifier for this link as from the underlying dataset.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.StreetLink.TimeZone">
            <summary>
            Implemented by derived classes to get the time zone where this street link is located.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.StreetLink.ExtraData">
            <summary>
            Implemented by derived classes to get the extra data for this link.
            Extra data includes information such as the existance of traffic signals
            at the end of the link. It is not available in all data files.
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.LocalStreetLink.CheckDivider(Telogis.GeoBase.LatLon)">
            <summary>
            Checks whether a turn across the traffic would be legal at the given end
            of this street.
            </summary>
            <param name="turnLoc">The end of the street that the turn would be made.</param>
            <returns>true if it would be legal to turn across the traffic.</returns>
        </member>
        <member name="M:Telogis.GeoBase.LocalStreetLink.LegalTurn(System.Collections.Generic.List{Telogis.GeoBase.LocalStreetLink},Telogis.GeoBase.LocalStreetLink,Telogis.GeoBase.Routing.Intersection,System.Boolean,Telogis.GeoBase.Country,System.Boolean@)">
            <summary>
            Determines whether a turn should be treated as legal.
            </summary>
            <param name="allLinks">All the links that begin or end at the turn
            intersection.</param>
            <param name="toLink">The target link of the turn.</param>
            <param name="turnInt">The intersection at which the turn is made.</param>
            <param name="allowUTurns">Are U-turns allowed?</param>
            <param name="country">Country we're in.</param>
            <param name="justPenalize">If the turn should be treated as illegal and justPenalize is
            set to true then on the re-route the constraint we add should be slow rather than
            illegal.</param>
            <returns>Whether the turn should be treated as legal.</returns>
        </member>
        <member name="M:Telogis.GeoBase.LocalStreetLink.Equals(System.Object)">
            <summary>
            Determines whether two StreetLink objects represent the same street link
            </summary>
            <param name="obj">StreetLink to compare to.</param>
            <returns><b>true</b> if this StreetLink and <b>obj</b> represent the same street link, <b>false</b> if they do not.</returns>
        </member>
        <member name="M:Telogis.GeoBase.LocalStreetLink.GetHashCode">
            <summary>
            Generates a hash code for this street that is the same for all
            street link objects that represent this link.
            </summary>
            <returns>The generated hash code</returns>
        </member>
        <member name="P:Telogis.GeoBase.LocalStreetLink.Names">
            <summary>
            Gets an array of the names of this street
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.LocalStreetLink.Flags">
            <summary>
            Gets a <see cref="T:Telogis.GeoBase.Routing.RouteFlag"/> object that contains information
            about the flags on this street.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.LocalStreetLink.Points">
            <summary>
            Gets an array of the points representing this street. Points are returned
            with the reference end at position 0 and the non-reference end at Points.Length-1
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.LocalStreetLink.Z_Start">
            <summary>
            Gets the Z level at the reference end of the street link.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.LocalStreetLink.Z_End">
            <summary>
            Gets the Z level at the non-reference end of the street link.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.LocalStreetLink.LAddrRef">
            <summary>
            Gets the number of the first property on the left of the street at the
            reference end.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.LocalStreetLink.LAddrNRef">
            <summary>
            Gets the number of the last property on the left of the street.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.LocalStreetLink.RAddrRef">
            <summary>
            Gets the number of the first property on the right of the street at the
            reference end.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.LocalStreetLink.RAddrNRef">
            <summary>
            Gets the number of the last property on the right of the street.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.LocalStreetLink.Street">
            <summary>
            Gets the <see cref="T:Telogis.GeoBase.Street"/> that this StreetLink
            is a part of.
            </summary>
            <remarks>
            Most <see cref="T:Telogis.GeoBase.Street"/>s consist of more than one
            StreetLink.
            </remarks>
        </member>
        <member name="M:Telogis.GeoBase.RemoteStreetLink.Equals(System.Object)">
            <summary>
            Determines whether two StreetLink objects represent the same street link
            </summary>
            <param name="obj">StreetLink to compare to.</param>
            <returns><b>true</b> if this StreetLink and <b>obj</b> represent the same street link, <b>false</b> if they do not.</returns>
        </member>
        <member name="P:Telogis.GeoBase.RemoteStreetLink.Flags">
            <summary>
            Gets a <see cref="T:Telogis.GeoBase.Routing.RouteFlag"/> object that contains information
            about the flags on this street.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.RemoteStreetLink.LAddrNRef">
            <summary>
            Gets the number of the last property on the left of the street
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.RemoteStreetLink.LAddrRef">
            <summary>
            Gets the number of the first property on the left of the street (this will be at the
            reference end of the street)
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.RemoteStreetLink.LPostcode">
            <summary>
            Gets the post code for the left of the street
            </summary>
            <remarks>On some streets there are different post codes on each side</remarks>
        </member>
        <member name="P:Telogis.GeoBase.RemoteStreetLink.RPostcode">
            <summary>
            Gets the post code for the right of the street
            </summary>
            <remarks>On some streets there are different post codes on each side</remarks>
        </member>
        <member name="P:Telogis.GeoBase.RemoteStreetLink.Names">
            <summary>
            Gets an array of the names of this street
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.RemoteStreetLink.Points">
            <summary>
            Gets an array of the points representing this street. Points are returned
            with the reference end at position 0 and the non-reference end at Points.Length-1
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.RemoteStreetLink.RAddrNRef">
            <summary>
            Gets the number of the last property on the right of the street
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.RemoteStreetLink.RAddrRef">
            <summary>
            Gets the number of the first property on the right of the street at the
            reference end
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.RemoteStreetLink.Street">
            <summary>
            Gets the <see cref="T:Telogis.GeoBase.Street"/> that this StreetLink
            is a part of.
            </summary>
            <remarks>
            Most <see cref="T:Telogis.GeoBase.Street"/>s consist of more than one
            StreetLink.
            </remarks>
        </member>
        <member name="P:Telogis.GeoBase.RemoteStreetLink.Z_End">
            <summary>
            Gets the Z level at the non-reference end of the street link
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.RemoteStreetLink.Z_Start">
            <summary>
            Gets the Z level at the reference end of the street link
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.RemoteStreetLink.ExtraData">
            <summary>
            Gets the extra data for this link
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.StreetLinkCollection">
            <summary>
            A collection of <see cref="T:Telogis.GeoBase.StreetLink"/>s.
            </summary>
            <remarks>
            The <see cref="T:Telogis.GeoBase.StreetLinkCollection"/> class implements both <see cref="T:Telogis.GeoBase.IMapRenderer"/>
            and <see cref="T:Telogis.GeoBase.GeoFence.IGeoFence"/>. This allows it to be used for rendering street
            links and for GeoFencing operations.
            <para><b>Related articles</b>: <a href="154a60d1-c146-49bc-a913-3e4c067ae8c6.htm">Data Query Concept</a>.</para>
            </remarks>
        </member>
        <member name="M:Telogis.GeoBase.StreetLinkCollection.#ctor(Telogis.GeoBase.StreetLink[])">
            <summary>
            Construct a new <see cref="T:Telogis.GeoBase.StreetLinkCollection"/> to render the
            specified <see cref="T:Telogis.GeoBase.StreetLink">street links.</see>
            </summary>
            <param name="l">The array of <see cref="T:Telogis.GeoBase.StreetLink"/>s to render.</param>
        </member>
        <member name="M:Telogis.GeoBase.StreetLinkCollection.Add(Telogis.GeoBase.StreetLink)">
            <summary>
            Add a new <see cref="T:Telogis.GeoBase.StreetLink">street link</see>
            to the collection.
            </summary>
            <param name="l">The <see cref="T:Telogis.GeoBase.StreetLink">street link</see>
            to add.</param>
        </member>
        <member name="M:Telogis.GeoBase.StreetLinkCollection.AddRange(Telogis.GeoBase.StreetLink[])">
            <summary>
            Add a number of <see cref="T:Telogis.GeoBase.StreetLink">street links</see>
            to the collection.
            </summary>
            <param name="l"></param>
        </member>
        <member name="M:Telogis.GeoBase.StreetLinkCollection.Clear">
            <summary>
            Remove all <see cref="T:Telogis.GeoBase.StreetLink">street links</see>
            from the collection.
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.StreetLinkCollection.Render(System.Drawing.Graphics,Telogis.GeoBase.RenderContext)">
            <summary>
            Renders the street links. Implements <see cref="T:Telogis.GeoBase.IMapRenderer"/>.
            </summary>
            <param name="graphics"></param>
            <param name="rc"></param>
        </member>
        <member name="M:Telogis.GeoBase.StreetLinkCollection.CopyTo(System.Array,System.Int32)">
            <summary>
            Copies the contents of this collection to an array.
            </summary>
            <param name="array">The array to copy into.</param>
            <param name="index">The offset to begin copying to.</param>
        </member>
        <member name="M:Telogis.GeoBase.StreetLinkCollection.GetEnumerator">
            <summary>
            Gets an enumerator for this collection.
            </summary>
            <returns>An enumerator.</returns>
        </member>
        <member name="M:Telogis.GeoBase.StreetLinkCollection.Contains(Telogis.GeoBase.LatLon)">
            <summary>
            Determines whether the specified point is included in this fence.
            </summary>
            <param name="point">The point to test</param>
            <returns><b>true</b> if the point is on a street in this collection,
            <b>false</b> otherwise.</returns>
        </member>
        <member name="P:Telogis.GeoBase.StreetLinkCollection.RequiredRendermodes">
            <summary>
            Gets the <see cref="T:Telogis.GeoBase.RenderMode">RenderMode</see> required by this <b>StreetLinkCollection</b>
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.StreetLinkCollection.IsSynchronized">
            <summary>
            Gets a value indicating whether access to this collection is thread-safe.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.StreetLinkCollection.Count">
            <summary>
            Gets the number of entries in this collection.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.StreetLinkCollection.SyncRoot">
            <summary>
            Gets an object that can be used to synchronise access
            to the collection.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.StreetLinkCollection.RenderPen">
            <summary>
            <b>Set to null by default, as this is a Collection.</b>
            Gets or sets the <see cref="T:System.Drawing.Pen"/> used to draw
            the border around the GeoFence, or <b>null</b> for no border.
            </summary>
            Default color is <see cref="P:System.Drawing.Color.Blue"/>, default width is 1.
        </member>
        <member name="P:Telogis.GeoBase.StreetLinkCollection.RenderBrush">
            <summary>
            <b>Set to null by default, as this is a Collection.</b>
            Gets or sets the <see cref="T:System.Drawing.Brush"/> used to fill
            the GeoFence, or <b>null</b> for no fill.
            </summary>
            <remarks>
            Default color is <see cref="P:System.Drawing.Color.Blue"/>.
            </remarks>
        </member>
        <member name="P:Telogis.GeoBase.StreetLinkCollection.BoundingBox">
            <summary>
            Calculates and returns a bounding box that includes all the streets
            in this collection.
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.QueryType">
            <summary>
            Describes a condition that must be met in order for an object to be returned 
            from a dataquery (see <see cref="M:Telogis.GeoBase.DataQuery.QueryIndex(System.String,Telogis.GeoBase.QueryType,System.Object)"/>).
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.QueryType.GREATER">
            <summary>
            &gt;
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.QueryType.LESS">
            <summary>
            &lt;
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.QueryType.EQUALS">
            <summary>
            ==
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.QueryType.CONTAINS">
            <summary>
            Contains
            </summary>
        </member>
        <member name="T:Telogis.UI.Keyboard">
            <summary>
            A keyboard for devices that don't have one
            </summary>
        </member>
        <member name="M:Telogis.UI.Keyboard.#ctor">
            <summary>
            Create a new keyboard. Defaults to an alpha keyboard.
            </summary>
        </member>
        <member name="M:Telogis.UI.Keyboard.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <summary>
            Paint event
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Telogis.UI.Keyboard.OnPaintBackground(System.Windows.Forms.PaintEventArgs)">
            <summary>
            Paint background event
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Telogis.UI.Keyboard.OnMouseDown(System.Windows.Forms.MouseEventArgs)">
            <summary>
            MouseDown event
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Telogis.UI.Keyboard.OnMouseUp(System.Windows.Forms.MouseEventArgs)">
            <summary>
            MouseUp event
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Telogis.UI.Keyboard.OnResize(System.EventArgs)">
            <summary>
            Resize event
            </summary>
            <param name="e"></param>
        </member>
        <member name="P:Telogis.UI.Keyboard.Text">
            <summary>
            The line of text that the keyboard contains
            </summary>
        </member>
        <member name="P:Telogis.UI.Keyboard.Type">
            <summary>
            Sets the type of keyboard.
            </summary>
        </member>
        <member name="P:Telogis.UI.Keyboard.EnabledKeys">
            <summary>
            Gets or sets the enabled keys.
            </summary>
        </member>
        <member name="E:Telogis.UI.Keyboard.TextChanged">
            <summary>
            An eventhandler for when the text of the keyboard is changed.
            </summary>
        </member>
        <member name="T:Telogis.UI.KeyboardType">
            <summary>
            Describes the keyboard type
            </summary>
        </member>
        <member name="F:Telogis.UI.KeyboardType.Alpha">
            <summary>
            An alpha (letters-only) keyboard
            </summary>
        </member>
        <member name="F:Telogis.UI.KeyboardType.AlphaNumeric">
            <summary>
            An alpha-numberic (mixed) keyboard
            </summary>
        </member>
        <member name="F:Telogis.UI.KeyboardType.Numeric">
            <summary>
            A numeric (numbers-only) keyboard
            </summary>
        </member>
        <member name="T:Xheo.Licensing.PublisherLimit">
            <summary>
            Restricts the use of a protected Type to the assemblies strongly named by
            a certain publisher.
            </summary>
            <remarks>
            If an assembly signed with the publisher's strong name key exists anywhere
            on the stack then the license is considered valid.
            </remarks>
        </member>
        <member name="M:Xheo.Licensing.PublisherLimit.Validate(System.ComponentModel.LicenseContext,System.Type,System.Object)">
            <summary>
            Validates that the license being granted is within the limits enforced by
            this object.
            </summary>
            <param name="context">
            	The LicenseContext passed to <see cref="M:System.ComponentModel.LicenseProvider.GetLicense(System.ComponentModel.LicenseContext,System.Type,System.Object,System.Boolean)"/>.
            </param>
            <param name="type">
            	The Type of the object being licensed.
            </param>
            <param name="instance">
            	The instance of the object being licensed.
            </param>
            <returns>
            	Returns true if the limits are valid, otherwise false.
            </returns>
        </member>
        <member name="M:Xheo.Licensing.PublisherLimit.Granted(System.ComponentModel.LicenseContext,System.Type,System.Object)">
            <summary>
            Called every time the limit is granted. Makes sure a publisher assembly is always
            in the call chain when validated.
            </summary>
            <param name="context">
            	The LicenseContext used to determine the environment and settings
            	of the licensing.
            </param>
            <param name="instance">
            	The instance of the object being licensed.
            </param>
            <param name="type">
            	The Type of the object being licensed.
            </param>
        </member>
        <member name="M:Xheo.Licensing.PublisherLimit.LoadFromXml(System.Xml.XmlNode)">
            <summary>
            Loads the contents of a Limit from an XML string.
            </summary>
            <param name="node">
            	The XML string to load from.
            </param>
            <returns>
            	Returns true if the load was successful, otherwise false.
            </returns>
        </member>
        <member name="M:Xheo.Licensing.PublisherLimit.SaveToXml(System.Xml.XmlNode)">
            <summary>
            Saves the contents of the Limit as an XML string.
            </summary>
            <returns>
            	Returns the saved XML.
            </returns>
        </member>
        <member name="P:Xheo.Licensing.PublisherLimit.Description">
            <summary>
            Gets the description of the limit.
            </summary>
        </member>
        <member name="P:Xheo.Licensing.PublisherLimit.Name">
            <summary>
            Gets the display name of the limit.
            </summary>
        </member>
        <member name="P:Xheo.Licensing.PublisherLimit.PublicKeyToken">
            <summary>
            Gets or sets the public key token of the publishers strong name key used to
            sign their assemblies.
            </summary>
        </member>
        <member name="T:Xheo.Licensing.MachineLimit">
            <summary>
            Enforces a limit for a Machine name.
            </summary>
        </member>
        <member name="M:Xheo.Licensing.MachineLimit.#ctor">
            <summary>
            Initializes a new instance of the MachineLimit class.
            </summary>
        </member>
        <member name="M:Xheo.Licensing.MachineLimit.#ctor(System.String)">
            <summary>
            Initializes a new instance of the MachineLimit class.
            </summary>
            <param name="machineName">
            	The machine name to limit to.
            </param>
        </member>
        <member name="M:Xheo.Licensing.MachineLimit.Validate(System.ComponentModel.LicenseContext,System.Type,System.Object)">
            <summary>
            Validates that the license being granted is within the limits enforced by
            this object.
            </summary>
            <param name="context">
            	The LicenseContext passed to <see cref="M:System.ComponentModel.LicenseProvider.GetLicense(System.ComponentModel.LicenseContext,System.Type,System.Object,System.Boolean)"/>.
            </param>
            <param name="type">
            	The Type of the object being licensed.
            </param>
            <param name="instance">
            	The instance of the object being licensed.
            </param>
            <returns>
            	Returns true if the limits are valid, otherwise false.
            </returns>
        </member>
        <member name="M:Xheo.Licensing.MachineLimit.LoadFromXml(System.Xml.XmlNode)">
            <summary>
            Loads the contents of a Limit from an XML string.
            </summary>
            <param name="node">
            	The XML string to load from.
            </param>
            <returns>
            	Returns true if the load was successful, otherwise false.
            </returns>
        </member>
        <member name="M:Xheo.Licensing.MachineLimit.SaveToXml(System.Xml.XmlNode)">
            <summary>
            Saves the contents of the Limit as an XML string.
            </summary>
            <returns>
            	Returns the saved XML.
            </returns>
        </member>
        <member name="P:Xheo.Licensing.MachineLimit.MachineName">
            <summary>
            Gets or sets the name of the Machine that the limit applies to.
            </summary>
        </member>
        <member name="P:Xheo.Licensing.MachineLimit.Description">
            <summary>
            Gets the description of the limit.
            </summary>
        </member>
        <member name="P:Xheo.Licensing.MachineLimit.Name">
            <summary>
            Gets the display name of the limit.
            </summary>
        </member>
        <member name="T:Xheo.Licensing.DomainLimit">
            <summary>
            Restricts the use of a protected Type to a collection of domain names.
            </summary>
            <remarks>
            	The current request must be for the given domain name. If the IPAddress is
            	specified then the domain must also resolve to that address.
            	<para>
            	Domain names can include wild cards in their names. You can use the standard
            	* and ? characters for any word or character respectively. If the name is
            	prefixed with the # character, the text following it is treated as a
            	regular expression and is compared with the given pattern.
            	</para>
            </remarks>
        </member>
        <member name="M:Xheo.Licensing.DomainLimit.#ctor">
            <summary>
            Initializes a new instance of the DomainLimit class.
            </summary>
        </member>
        <member name="M:Xheo.Licensing.DomainLimit.#ctor(System.String[])">
            <summary>
            Initializes a new instance of the DomainLimit class.
            </summary>
            <param name="domains">
            	Collection of domains to add to the limit.
            </param>
        </member>
        <member name="M:Xheo.Licensing.DomainLimit.#ctor(System.Net.IPAddress,System.String[])">
            <summary>
            Initializes a new instance of the DomainLimit class.
            </summary>
            <param name="domains">
            	Collection of domains to add to the limit.
            </param>
            <param name="ipaddress">
            	The IP address all domains must resolve to.
            </param>
        </member>
        <member name="M:Xheo.Licensing.DomainLimit.Validate(System.ComponentModel.LicenseContext,System.Type,System.Object)">
            <summary>
            Validates that the license being granted is within the limits enforced by
            this object.
            </summary>
            <param name="context">
            	The LicenseContext passed to <see cref="M:System.ComponentModel.LicenseProvider.GetLicense(System.ComponentModel.LicenseContext,System.Type,System.Object,System.Boolean)"/>.
            </param>
            <param name="type">
            	The Type of the object being licensed.
            </param>
            <param name="instance">
            	The instance of the object being licensed.
            </param>
            <returns>
            	Returns true if the limits are valid, otherwise false.
            </returns>
        </member>
        <member name="M:Xheo.Licensing.DomainLimit.Granted(System.ComponentModel.LicenseContext,System.Type,System.Object)">
            <summary>
            Summary of Granted.
            </summary>
            <param name="context"></param>
            <param name="type"></param>
            <param name="instance"></param>
        </member>
        <member name="M:Xheo.Licensing.DomainLimit.CompareDomain(System.String,System.String)">
            <summary>
            Determines if the current domain matches the desired domain.
            </summary>
        </member>
        <member name="M:Xheo.Licensing.DomainLimit.ValidateDomainName(System.String,System.Boolean)">
            <summary>
            Validates that the format of the domain name is correct.
            </summary>
            <param name="domainName">
            	The name of the domain to validate.
            </param>
            <param name="resolve">
            	Indicates if the domain should be resolved as well.
            </param>
            <returns>
            	Returns true if the domain is valid, otherwise false.
            </returns>
        </member>
        <member name="M:Xheo.Licensing.DomainLimit.LoadFromXml(System.Xml.XmlNode)">
            <summary>
            Loads the contents of a Limit from an XML string.
            </summary>
            <param name="node">
            	The XML string to load from.
            </param>
            <returns>
            	Returns true if the load was successful, otherwise false.
            </returns>
        </member>
        <member name="M:Xheo.Licensing.DomainLimit.SaveToXml(System.Xml.XmlNode)">
            <summary>
            Saves the contents of the Limit as an XML string.
            </summary>
            <returns>
            	Returns the saved XML.
            </returns>
        </member>
        <member name="M:Xheo.Licensing.DomainLimit.GetDetailsDescription">
            <summary>
            Overrides <see cref="M:Xheo.Licensing.Limit.GetDetailsDescription"/>.
            </summary>
        </member>
        <member name="P:Xheo.Licensing.DomainLimit.Domains">
            <summary>
            Gets the collection of valid domains. When the license is read only, the
            collection returned is a copy of the original and any changes to the
            collection are lost.
            </summary>
        </member>
        <member name="P:Xheo.Licensing.DomainLimit.IPAddress">
            <summary>
            Gets or sets the IP address that the domains must resolve to. If empty then
            the address is ignored.
            </summary>
        </member>
        <member name="P:Xheo.Licensing.DomainLimit.Description">
            <summary>
            Gets the description of the limit.
            </summary>
        </member>
        <member name="P:Xheo.Licensing.DomainLimit.Name">
            <summary>
            Gets the display name of the limit.
            </summary>
        </member>
        <member name="T:Xheo.Licensing.ApplicationLimit">
            <summary>
            Limits the number of applications on a single machine that can simultaneously
            license a component.
            </summary>
        </member>
        <member name="M:Xheo.Licensing.ApplicationLimit.#ctor">
            <summary>
            Initializes a new instance of the ApplicationLimit class.
            </summary>
        </member>
        <member name="M:Xheo.Licensing.ApplicationLimit.#ctor(System.Int32,System.Int32)">
            <summary>
             Initializes a new instance of the ApplicationLimit class.
            </summary>
            <param name="allowedInstances">
            	The total number of application Applications allowed per type
            	on the machine.
            </param>
            <param name="port">
            	The remoting port to use for managing Applications. Default is 8937.
            </param>
        </member>
        <member name="M:Xheo.Licensing.ApplicationLimit.#ctor(System.Int32)">
            <summary>
             Initializes a new instance of the ApplicationLimit class.
            </summary>
            <param name="allowedInstances">
            	The total number of application Applications allowed per type
            	on the machine.
            </param>
        </member>
        <member name="M:Xheo.Licensing.ApplicationLimit.Validate(System.ComponentModel.LicenseContext,System.Type,System.Object)">
            <summary>
            Validates that the license being granted is within the limits enforced by
            this object.
            </summary>
            <param name="context">
            	The LicenseContext passed to <see cref="M:System.ComponentModel.LicenseProvider.GetLicense(System.ComponentModel.LicenseContext,System.Type,System.Object,System.Boolean)"/>.
            </param>
            <param name="type">
            	The Type of the object being licensed.
            </param>
            <param name="instance">
            	The instance of the object being licensed.
            </param>
            <returns>
            	Returns true if the limits are valid, otherwise false.
            </returns>
        </member>
        <member name="M:Xheo.Licensing.ApplicationLimit.LoadFromXml(System.Xml.XmlNode)">
            <summary>
            Loads the contents of a Limit from an XML string.
            </summary>
            <param name="node">
            	The XmlNode to load from.
            </param>
            <returns>
            	Returns true if the load was successful, otherwise false.
            </returns>
        </member>
        <member name="M:Xheo.Licensing.ApplicationLimit.SaveToXml(System.Xml.XmlNode)">
            <summary>
            Saves the contents of the Limit as an XML string.
            </summary>
            <returns>
            	Returns the saved XML.
            </returns>
        </member>
        <member name="M:Xheo.Licensing.ApplicationLimit.GetDetailsDescription">
            <summary>
            Overrides <see cref="M:Xheo.Licensing.Limit.GetDetailsDescription"/>.
            </summary>
        </member>
        <member name="P:Xheo.Licensing.ApplicationLimit.Description">
            <summary>
            Gets the description of the limit.
            </summary>
        </member>
        <member name="P:Xheo.Licensing.ApplicationLimit.Name">
            <summary>
            Gets the display name of the limit.
            </summary>
        </member>
        <member name="P:Xheo.Licensing.ApplicationLimit.AllowedInstances">
            <summary>
            Gets or sets the total number of applications allowed per type
            on the machine.
            </summary>
        </member>
        <member name="P:Xheo.Licensing.ApplicationLimit.Port">
            <summary>
            Gets or sets the remoting port to use for managing Applications. Default is 8937.
            </summary>
        </member>
        <member name="P:Xheo.Licensing.ApplicationLimit.IsRemote">
            <summary>
            Gets a value of bool.
            </summary>
        </member>
        <member name="T:Xheo.Licensing.ApplicationLimit.UnregisterFromBroker">
            <summary>
            When an instance of this class is disposed it will unregister the cookies
            from the InstanceBroker for the application.
            </summary>
        </member>
        <member name="M:Xheo.Licensing.ApplicationLimit.UnregisterFromBroker.Dispose">
            <summary>
            Summary of Dispose.
            </summary>
        </member>
        <member name="M:Xheo.Licensing.ApplicationLimit.UnregisterFromBroker.Dispose(System.Boolean)">
            <summary>
            Summary of Dispose.
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:Xheo.Licensing.ApplicationLimit.UnregisterFromBroker.Finalize">
            <summary>
            Summary of ~UnregisterFromBroker.
            </summary>
        </member>
        <member name="P:Xheo.Licensing.ApplicationLimit.UnregisterFromBroker.Cookies">
            <summary>
            Gets the collection of application cookies to unregister.
            </summary>
        </member>
        <member name="T:Xheo.Licensing.ActivationForm">
            <summary>
            Displays an interface for the user to activate a license. Used by the
            <see cref="T:Xheo.Licensing.ActivationLimit"/> when validating a license that has not
            been activated.
            </summary>
        </member>
        <member name="M:Xheo.Licensing.ActivationForm.#ctor">
            <summary>
            Included for COM compliance only, do not use. 
            </summary>
        </member>
        <member name="M:Xheo.Licensing.ActivationForm.#ctor(Xheo.Licensing.ExtendedLicense,Xheo.Licensing.ActivationLimit,System.Type)">
            <summary>
            Initializes a new instance of the ActivationForm class.
            </summary>
            <param name="license">
            	The license to be activated.
            </param>
            <param name="limit">
            	The ActivationLimit containing the parameters for the activation.
            </param>
            <param name="type">
            	The Type being created that required a license.
            </param>
        </member>
        <member name="M:Xheo.Licensing.ActivationForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:Xheo.Licensing.ActivationForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:Xheo.Licensing.ActivationForm._continue_Click(System.Object,System.EventArgs)">
            <summary>
            Summary of _continue_Click.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Xheo.Licensing.ActivationForm._copyTo_Click(System.Object,System.EventArgs)">
            <summary>
            Summary of _copyTo_Click.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Xheo.Licensing.ActivationForm._back_Click(System.Object,System.EventArgs)">
            <summary>
            Summary of _back_Click.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Xheo.Licensing.ActivationForm._link_LinkClicked(System.Object,System.Windows.Forms.LinkLabelLinkClickedEventArgs)">
            <summary>
            Summary of _link_LinkClicked.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="P:Xheo.Licensing.ActivationForm.CanContinue">
            <summary>
            Gets a value indicating if the license validation can continue.
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.Internal.BinaryFile">
            <summary>
            Summary description for BinaryFile.
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.Internal.BinaryFile.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="filename"></param>
        </member>
        <member name="M:Telogis.GeoBase.Internal.BinaryFile.#ctor(System.String,System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="filename"></param>
            <param name="header_a"></param>
            <param name="header_b"></param>
        </member>
        <member name="M:Telogis.GeoBase.Internal.BinaryFile.#ctor(System.String,System.Boolean)">
            <summary>
            
            </summary>
            <param name="filename"></param>
            <param name="append"></param>
        </member>
        <member name="M:Telogis.GeoBase.Internal.BinaryFile.WriteString(System.String)">
            <summary>
            
            </summary>
            <param name="str"></param>
        </member>
        <member name="M:Telogis.GeoBase.Internal.BinaryFile.Close">
            <summary>
            
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.Internal.BinaryFile.WriteInt32(System.Data.IDataReader,System.Int32)">
            <summary>
            
            </summary>
            <param name="reader"></param>
            <param name="col"></param>
            <returns></returns>
        </member>
        <member name="P:Telogis.GeoBase.Internal.BinaryFile.OffSet">
            <summary>
            
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Internal.BinaryFile.Out">
            <summary>
            
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.Navigation.VehicleMarker">
             <summary>
             Used to display a vehicle's location on a map.
             </summary>
             <remarks>
             <img src="Art/geobase_vehiclemarker.png"></img>
             <para>The VehicleMarker object uses a Navigator object to determine the location of the vehicle.
             The VehicleMarker object will not redraw its position automatically. It is your responsibility to
             update the position of the VehicleMarker object by forcing a redraw (typically by invalidating
             the <see cref="T:Telogis.GeoBase.MapCtrl"/> that the VehicleMarker object is drawn on). You may wish 
             to do this by attaching to the <see cref="E:Telogis.GeoBase.Navigation.Navigator.Update"/> 
             event, or by using a Timer object.</para>
             <para>
             A red arrow is drawn when the vehicle is on-course, this color can be changed by modifying
             the <see cref="P:Telogis.GeoBase.Navigation.VehicleMarker.Color"/> property. When the vehicle 
             deviates off-course a gray arrow will be drawn instead.
             </para>
             </remarks>
             <example>
             <code lang="C#">
             ...
            		// a Navigator object requires an IGps member,
            		// and a VehicleMarker object requires a Navigator.
            		// this means that you'll need a Navigator and some 
            		// form of GPS to use a VehicleMarker object...
            		myNavigator = new Navigator(myGps);
            		myVehicleMarker = new VehicleMarker(myNavigator);
            
            		// draw the VehicleMarker object on the map. Use a 
            		// RendererList object to draw multiple objects on 
            		// the same map
            		myMapCtrl.Renderer = myVehicleMarker;
            
            		// use a Timer object to redraw the location of the 
            		// VehicleMarker object once a second.
            		Timer myTimer = new Timer();
            		myTimer.Interval = 1000;
            		myTimer.Tick += new EventHandler(myTimer_Tick);
            		myTimer.Start();
            	...
            
             
            	void myTimer_Tick (object sender, EventArgs e) {
            		// invalidating a map causes all the objects on the map
            		// to be redrawn. Redrawing a VehicleMarker object
            		// will cause the VehicleMarker object to update its
            		// location.
            		myMapCtrl.Invalidate();
            	}
             </code>
             </example>
        </member>
        <member name="F:Telogis.GeoBase.Navigation.VehicleMarker.m_nav">
            <summary>
            The Navigator object that holds the positional information for the vehicle associated with this VehicleMarker object.
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.Navigation.VehicleMarker.#ctor(Telogis.GeoBase.Navigation.Navigator)">
            <summary>
            Create a new VehicleMarker object, using the specified Navigator object
            to provide location information.
            </summary>
            <param name="nav"><see cref="T:Telogis.GeoBase.Navigation.Navigator">Telogis.GeoBase.Navigation.Navigator</see></param>
        </member>
        <member name="M:Telogis.GeoBase.Navigation.VehicleMarker.Render(System.Drawing.Graphics,Telogis.GeoBase.RenderContext)">
            <summary>
            Renders the VehicleMarker on a given graphics output with a given context. (Desktop version).
            </summary>
            <param name="graphics">The <see cref="T:System.Drawing.Graphics"/> object that can be used to draw on the map.</param>
            <param name="rc">The <see cref="T:Telogis.GeoBase.RenderContext"/> information for this call.</param>
        </member>
        <member name="P:Telogis.GeoBase.Navigation.VehicleMarker.Navigator">
            <summary>
            Gets or sets the <see cref="T:Telogis.GeoBase.Navigation.Navigator">Telogis.GeoBase.Navigation.Navigator</see>
            object associated with this marker.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Navigation.VehicleMarker.CircleColor">
            <summary>
            The color of the circle drawn around the arrow. Blue by default.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Navigation.VehicleMarker.CircleDashStyle">
            <summary>
            The style of the circle drawn around the arrow. Dashed by default.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Navigation.VehicleMarker.CircleDashPattern">
            <summary>
            The length of the dashes and spaces, in pixels. {5, 5} by default.
            </summary>
            <example>
            <code lang="C#">
            // 5px dash, 10px space
            myVehicleMarker.CircleDashPattern = new float[] {5, 10};
            </code>
            </example>
        </member>
        <member name="P:Telogis.GeoBase.Navigation.VehicleMarker.DrawActual">
            <summary>
            Gets or sets whether to draw the vehicle's actual or estimated position. If <b>true</b> the actual
            position is drawn. If <b>false</b> the estimated position is drawn.
            </summary>
            <remarks>By default the VehicleMarker object is drawn slightly ahead of the vehicle's current position 
            to allow for update delays.</remarks>
        </member>
        <member name="P:Telogis.GeoBase.Navigation.VehicleMarker.Color">
            <summary>
            Gets or sets the color (ARGB) used to draw the vehicle marker.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Navigation.VehicleMarker.OffCourseColor">
            <summary>
            Gets or sets the color (ARGB) used to draw the vehicle marker when the vehicle is
            either off-course or there is no GPS fix.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Navigation.VehicleMarker.Size">
            <summary>
            Gets or sets the size of the vehicle marker (in pixels). Defaults to 20px.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Navigation.VehicleMarker.OffCourseThreshold">
            <summary>
            Gets or sets the distance (in pixels) the vehicle marker is allowed to deviate before
            drawing the off-course marker. Defaults to 35px.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Navigation.VehicleMarker.DrawOffCourseMarker">
            <summary>
            Whether to draw the off-course marker if the vehicle deviates from the route.  If set
            to false then the only time the off-course marker will be displayed is if there is not
            a GPS fix.  Defaults to true.  Only valid if DrawActual is true.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Navigation.VehicleMarker.RequiredRendermodes">
            <summary>
            Gets the <see cref="T:Telogis.GeoBase.RenderMode">RenderMode</see> required by this <b>VehicleMarker</b>
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.Navigation.VehicleMarker.CircleMode">
            <summary>
            Draw an ellipse around the vehicle marker.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Navigation.VehicleMarker.CircleMode.Off">
            <summary>
            Ellipse not drawn.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Navigation.VehicleMarker.CircleMode.On">
            <summary>
            Ellipse drawn.
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.Navigation.LocalLazyRouteCalculator">
            <summary>
            LocalLazyRouteCalculator calculates the directions for a route lazily so that navigation can
            begin before we have finished processing the directions.
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.Navigation.ILazyRouteCalculator.DescribeNext">
            <summary>
            This method is called by the navigator to describe the next turn on the route.
            DescribeNext().
            </summary>
            <returns>
            Returns true if there are more turns to be described. The Navigator will
            call this repetatively for a certain period of time so that the upcoming movement will
            likely always be described.
            </returns>
        </member>
        <member name="M:Telogis.GeoBase.Navigation.ILazyRouteCalculator.IsRouteLegal">
            <summary>
            Called by the Navigator to check whether the current route is free from constraint violations
            and if not, apply a routing constraint so that the next route calculated will be different.
            Geobase uses the directions generator to check whether a constraint has been violated, and if 
            so, recalculates the route.
            </summary>
            <returns> 
            Returns true if the route is legal and hence does not need to be recalculated.
            </returns>
        </member>
        <member name="P:Telogis.GeoBase.Navigation.ILazyRouteCalculator.Completed">
            <summary>
            Returns true if the DirectionsGenerator has described all the movements in the route.
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.ShapeUI.PolygonEntity">
            <summary>
            A polygon implementation of the shape entity type with relevant functionality
            for rendering polygons.
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.ShapeUI.ShapeEntity">
            <summary>
            An abstract class which can be implemented to repesent any kind of shape that can be
            rendered. The methods within this class are the base methods that every entity should
            require, but further methods will most likely be required to make any shape functional.
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.ShapeUI.ShapeEntity.#ctor(Telogis.GeoBase.ShapeUI.ShapeLayer)">
            <summary>
            Creates a shape entity that will belong to the supplied layer.
            </summary>
            <param name="layer">The layer that the entity will belong to.</param>
        </member>
        <member name="M:Telogis.GeoBase.ShapeUI.ShapeEntity.ShapeChanged(Telogis.GeoBase.Indexes.RTreeRect,System.Boolean)">
            <summary>
            Update the shape's bounding box if it has changed.
            </summary>
            <param name="oldBB">The previous (or old) bounding box (rectangle) for the entity</param>
            <param name="shapeChanged">Whether this is an entirely new shape or just a modified existing shape.</param>
        </member>
        <member name="M:Telogis.GeoBase.ShapeUI.ShapeEntity.ValidateShape">
            <summary>
            Determines whether the shape is valid (e.g. a polygon with two vertices is not valid).
            </summary>
            <returns>True if the shape is valid</returns>
        </member>
        <member name="M:Telogis.GeoBase.ShapeUI.ShapeEntity.Render(System.Drawing.Graphics,Telogis.GeoBase.RenderContext)">
            <summary>
            Renders the current shape.
            </summary>
            <param name="graphics">The drawing surface</param>
            <param name="rc">Control for the placement of objects</param>
        </member>
        <member name="M:Telogis.GeoBase.ShapeUI.ShapeEntity.GetArea">
            <summary>
            Gets the area that the shape occupies.
            </summary>
            <returns>The area of the shape</returns>
        </member>
        <member name="M:Telogis.GeoBase.ShapeUI.ShapeEntity.BeginEditing">
            <summary>
            Each shape will be edited differently, when this method is implemented it will
            return the edit object relevant to this shape.
            </summary>
            <returns>The edit state relevant to this shape</returns>
        </member>
        <member name="M:Telogis.GeoBase.ShapeUI.ShapeEntity.HitTest(Telogis.GeoBase.LatLon)">
            <summary>
            A method to test whether a specific location is within this shape.
            </summary>
            <param name="loc">The location to look for</param>
            <returns>True if the location is within this shape, else false.</returns>
        </member>
        <member name="E:Telogis.GeoBase.ShapeUI.ShapeEntity.TagChanged">
            <summary>
            Event that is fired when the shape's tag changes.
            </summary>
        </member>
        <member name="E:Telogis.GeoBase.ShapeUI.ShapeEntity.OutlineChanged">
            <summary>
            Event that is fired when the shape's outline pen changes.
            </summary>
        </member>
        <member name="E:Telogis.GeoBase.ShapeUI.ShapeEntity.FillChanged">
            <summary>
            Event that is fired when the shape's fill brush changes.
            </summary>
        </member>
        <member name="E:Telogis.GeoBase.ShapeUI.ShapeEntity.GeometryChanged">
            <summary>
            Event that is fired when the shape's geometry changes.
            </summary>
        </member>
        <member name="E:Telogis.GeoBase.ShapeUI.ShapeEntity.BoundingBoxChanged">
            <summary>
            Event that is fired when the shape's bounding box changes.
            </summary>
        </member>
        <member name="E:Telogis.GeoBase.ShapeUI.ShapeEntity.IsSelectedChanged">
            <summary>
            Event that is fired when the shape is selected or unselected.
            </summary>
        </member>
        <member name="E:Telogis.GeoBase.ShapeUI.ShapeEntity.IsHighlightedChanged">
            <summary>
            Event that is fired when the shape is highlighted or unhighlighted.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.ShapeUI.ShapeEntity.Tag">
            <summary>
            A tag for the entity, can be used to model any relevant data for the entity.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.ShapeUI.ShapeEntity.Outline">
            <summary>
            Determines the colour / style of the outline of the shape.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.ShapeUI.ShapeEntity.Fill">
            <summary>
            Determines the colour / style of the inside of the shape.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.ShapeUI.ShapeEntity.Priority">
            <summary>
            The rendering priority of this shape.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.ShapeUI.ShapeEntity.BoundingBox">
            <summary>
            The bounding box of this shape.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.ShapeUI.ShapeEntity.IsSelected">
            <summary>
            Whether this shape is selected.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.ShapeUI.ShapeEntity.IsHighlighted">
            <summary>
            Whether the entire shape is highlighted
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.ShapeUI.PolygonEntity.#ctor(Telogis.GeoBase.ShapeUI.ShapeLayer,Telogis.GeoBase.Geometry.Polygon)">
            <summary>
            Creates a polygon entity on the supplied layer with the supplied geometry.
            </summary>
            <param name="layer">The layer that the polygon will belong to.</param>
            <param name="geometry">The polygon's geometry.</param>
        </member>
        <member name="M:Telogis.GeoBase.ShapeUI.PolygonEntity.GetPoints">
            <summary>
            Gets the polygon's vertices.
            </summary>
            <returns>A list of all the vertices in the outer ring of the polygon.</returns>
        </member>
        <member name="M:Telogis.GeoBase.ShapeUI.PolygonEntity.ValidateShape">
            <summary>
            Determines whether the polygon is a complete loop, in which case it is valid.
            </summary>
            <returns>True if the polygon is a loop, else false.</returns>
        </member>
        <member name="M:Telogis.GeoBase.ShapeUI.PolygonEntity.DeleteVertex">
            <summary>
            Deletes the last modified (added, inserted or moved) point.
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.ShapeUI.PolygonEntity.DeleteVertex(System.Int32)">
            <summary>
            Deletes the vertex with the specifix index.
            </summary>
            <param name="idx">The index of the vertex</param>
        </member>
        <member name="M:Telogis.GeoBase.ShapeUI.PolygonEntity.InsertVertex(System.Int32,Telogis.GeoBase.LatLon)">
            <summary>
            Inserts a vertex inbetween two other vertices.
            </summary>
            <param name="idx">The index to insert the vertex at</param>
            <param name="location">The location of the vertex</param>
            <returns>The index of the vertex.</returns>
        </member>
        <member name="M:Telogis.GeoBase.ShapeUI.PolygonEntity.AddVertex(Telogis.GeoBase.LatLon)">
            <summary>
            Add a new vertex at the end of the polygon.
            </summary>
            <param name="location">The location of the vertex to be added</param>
            <returns>The index of the vertex added.</returns>
        </member>
        <member name="M:Telogis.GeoBase.ShapeUI.PolygonEntity.MoveVertex(System.Int32,Telogis.GeoBase.LatLon)">
            <summary>
            Moves an existing vertex to a new location.
            </summary>
            <param name="idx">The index of the vertex to move</param>
            <param name="location">The new location to move the vertex to</param>
        </member>
        <member name="M:Telogis.GeoBase.ShapeUI.PolygonEntity.ModifyPoints(System.Action{System.Collections.Generic.List{Telogis.GeoBase.LatLon}})">
            <summary>
            Modifies the polygon by supplying its points to a delegate.
            </summary>
            <param name="pointsDel">A delegate that represents the points to update.</param>
        </member>
        <member name="M:Telogis.GeoBase.ShapeUI.PolygonEntity.GetArea">
            <summary>
            Gets the total area of the polygon.
            </summary>
            <returns>The area of the polygon</returns>
        </member>
        <member name="M:Telogis.GeoBase.ShapeUI.PolygonEntity.Render(System.Drawing.Graphics,Telogis.GeoBase.RenderContext)">
            <summary>
            Renders the underlying polygon.
            </summary>
            <param name="graphics">The drawing surface</param>
            <param name="rc">Control for the placement of objects</param>
        </member>
        <member name="M:Telogis.GeoBase.ShapeUI.PolygonEntity.RenderVertex(System.Drawing.Graphics,Telogis.GeoBase.RenderContext,System.Int32)">
            <summary>
            Renders a specific vertex.
            </summary>
            <param name="graphics">The drawing surface</param>
            <param name="rc">Control for the placement of objects</param>
            <param name="idx">The index of the vertex to update</param>
        </member>
        <member name="M:Telogis.GeoBase.ShapeUI.PolygonEntity.RenderEdge(System.Drawing.Graphics,Telogis.GeoBase.RenderContext,System.Int32)">
            <summary>
            Renders a specific edge.  The edge is the one that starts at the vertex with the
            specified index and ends at the next vertex.
            </summary>
            <param name="graphics">The drawing surface</param>
            <param name="rc">Control for the placement of objects</param>
            <param name="idx">The index of the first vertex of the edge</param>
        </member>
        <member name="M:Telogis.GeoBase.ShapeUI.PolygonEntity.GetProjectedPoints">
            <summary>
            Gets an array of all of the points of the polygon.
            </summary>
            <returns>An array of the polygon's points</returns>
        </member>
        <member name="M:Telogis.GeoBase.ShapeUI.PolygonEntity.BeginEditing">
            <summary>
            Returns the PolygonEditState when the layer begins editing this shape.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Telogis.GeoBase.ShapeUI.PolygonEntity.HitTest(Telogis.GeoBase.LatLon)">
            <summary>
            Checks whether a location is within this polygon.
            </summary>
            <param name="loc">The location to look for</param>
            <returns>True if the polygon contains the location</returns>
        </member>
        <member name="P:Telogis.GeoBase.ShapeUI.PolygonEntity.Polygon">
            <summary>
            The underlying polygon object.
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.GeoStream.Server.WorkerPool.#ctor(System.String,System.Int32,System.Int32)">
            <summary>
            Creates a WorkerPool.
            </summary>
            <param name="name">The name that should be given to threads in this pool.</param>
            <param name="threadCount">Total number of threads in the pool.</param>
            <param name="lowPriorityCount">Number of threads in this pool that should be low 
            priority. Should be less than or equal to <paramref name="threadCount"/>.</param>
        </member>
        <member name="M:Telogis.GeoBase.GeoStream.Server.WorkerPool.GetActiveRequests">
            <summary>
            We do not keep track of active requests, though this can be inferred. An active
            request is something that is still in the request register, but no longer in
            the list of queued requests.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Telogis.GeoBase.GeoStream.Server.WorkerPool.AddRequestToQueue(Telogis.GeoBase.GeoStream.Server.IWorkerPoolRequest)">
            <summary>
            Use this method to add a request to a worker pool
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.GeoStream.Server.JSONRoute">
            <summary>
            Implements a JSON interface to the routing functionality.
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.GeoStream.Server.JSONRoute.Route(System.String)">
            <summary>
            Create a new route for the given user.
            </summary>
            <remarks>A route must be created before the user may perform actions (such as adding
            and removing stops, optimizing stops and finding directions).</remarks>
            <param name="guid">The user's GUID.</param>
            <returns></returns>
        </member>
        <member name="M:Telogis.GeoBase.GeoStream.Server.JSONRoute.AddStop(System.String,Telogis.GeoBase.RouteStop)">
            <summary>
            Adds a <see cref="T:Telogis.GeoBase.RouteStop">stop</see> to the given route.
            Refer to <see cref="M:Telogis.GeoBase.Routing.Route.AddStop(Telogis.GeoBase.RouteStop)"/>.
            </summary>
            <param name="guid">The route's GUID.</param>
            <param name="stop"><see cref="T:Telogis.GeoBase.RouteStop"/></param>
        </member>
        <member name="M:Telogis.GeoBase.GeoStream.Server.JSONRoute.AddStops(System.String,System.Object[])">
            <summary>
            Adds a number of <see cref="T:Telogis.GeoBase.RouteStop">stops</see> to the given route.
            Refer to <see cref="M:Telogis.GeoBase.Routing.Route.AddStops(Telogis.GeoBase.RouteStop[])"/>.
            </summary>
            <param name="guid">The route's GUID.</param>
            <param name="stops">An array of <see cref="T:Telogis.GeoBase.RouteStop"/>s.</param>
        </member>
        <member name="M:Telogis.GeoBase.GeoStream.Server.JSONRoute.AddStop(System.String,Telogis.GeoBase.RouteStop,System.Int32)">
            <summary>
            Adds a <see cref="T:Telogis.GeoBase.RouteStop">stop</see> to the given route.
            Refer to <see cref="M:Telogis.GeoBase.Routing.Route.AddStop(Telogis.GeoBase.RouteStop,System.Int32)"/>.
            </summary>
            <param name="guid">The route's GUID.</param>
            <param name="stop"><see cref="T:Telogis.GeoBase.RouteStop"/></param>
            <param name="at">The desired location of the stop in the list.</param>
        </member>
        <member name="M:Telogis.GeoBase.GeoStream.Server.JSONRoute.Calculate(System.String)">
            <summary>
            Calculate the given route from start to end, passing through each stop.
            Refer to <see cref="M:Telogis.GeoBase.Routing.Route.Calculate"/>.
            </summary>
            <param name="guid">The route's GUID.</param>
        </member>
        <member name="M:Telogis.GeoBase.GeoStream.Server.JSONRoute.CalculateCostMatrix(System.String)">
            <summary>
            Calculate a matrix of costs to travel between all stops in the given route.
            Refer to <see cref="M:Telogis.GeoBase.Routing.Route.CalculateCostMatrix"/>.
            </summary>
            <param name="guid">The route's GUID.</param>
            <returns>A 2D array containing the costs from traveling between any two given points.</returns>
        </member>
        <member name="M:Telogis.GeoBase.GeoStream.Server.JSONRoute.Clear(System.String)">
            <summary>
            Clear <i>all</i> stops from the route.
            Refer to <see cref="M:Telogis.GeoBase.Routing.Route.Clear"/>.
            </summary>
            <param name="guid">The route's GUID.</param>
        </member>
        <member name="M:Telogis.GeoBase.GeoStream.Server.JSONRoute.ClearStops(System.String)">
            <summary>
            Clear all intermediate stops from the given route, but retain the start and end stops.
            Refer to <see cref="M:Telogis.GeoBase.Routing.Route.ClearStops"/>.
            </summary>
            <param name="guid">The route's GUID.</param>
        </member>
        <member name="M:Telogis.GeoBase.GeoStream.Server.JSONRoute.DeleteStop(System.String,System.Int32)">
            <summary>
            Delete a stop in a given route by specifying the location of the stop in the list.
            Refer to <see cref="M:Telogis.GeoBase.Routing.Route.DeleteStop(Telogis.GeoBase.RouteStop)"/>.
            </summary>
            <param name="guid">The route's GUID.</param>
            <param name="at">Location of the stop in the list.</param>
        </member>
        <member name="M:Telogis.GeoBase.GeoStream.Server.JSONRoute.SetStart(System.String,Telogis.GeoBase.RouteStop)">
            <summary>
            Set the start of a given route.
            Refer to <see cref="P:Telogis.GeoBase.Routing.Route.Start"/>.
            </summary>
            <param name="guid">The route's GUID.</param>
            <param name="stop">A <see cref="T:Telogis.GeoBase.RouteStop"/> representing the desired start of the route.</param>
        </member>
        <member name="M:Telogis.GeoBase.GeoStream.Server.JSONRoute.SetEnd(System.String,Telogis.GeoBase.RouteStop)">
            <summary>
            Set the end of a given route.
            Refer to <see cref="P:Telogis.GeoBase.Routing.Route.End"/>.
            </summary>
            <param name="guid">The route's GUID.</param>
            <param name="stop">A <see cref="T:Telogis.GeoBase.RouteStop"/> representing the desired end of the route.</param>
        </member>
        <member name="M:Telogis.GeoBase.GeoStream.Server.JSONRoute.ForceRecalculate(System.String)">
            <summary>
            If a change has been made (unknown to the route) this forces the given route to recalculate itself.
            Refer to <see cref="M:Telogis.GeoBase.Routing.Route.ForceRecalculate"/>.
            </summary>
            <param name="guid">The route's GUID.</param>
        </member>
        <member name="M:Telogis.GeoBase.GeoStream.Server.JSONRoute.GetQuickDirections(System.String)">
            <summary>
            Get the 'quick directions' for a given route, ignoring legality and without generating
            natural language directions.
            Refer to <see cref="M:Telogis.GeoBase.Routing.Route.GetQuickDirections"/>.
            </summary>
            <param name="guid">The route's GUID.</param>
            <returns><see cref="T:Telogis.GeoBase.Routing.Directions"/></returns>
        </member>
        <member name="M:Telogis.GeoBase.GeoStream.Server.JSONRoute.GetTimeAndDistance(System.String,Telogis.GeoBase.DistanceUnit)">
             <summary>
            
             </summary>
             <param name="guid"></param>
             <param name="units"></param>
             <returns></returns>
        </member>
        <member name="M:Telogis.GeoBase.GeoStream.Server.JSONRoute.GetDirections(System.String)">
            <summary>
            Calculate the given route and return directions.
            Refer to <see cref="M:Telogis.GeoBase.Routing.Route.GetQuickDirections"/>.
            </summary>
            <param name="guid">The route's GUID.</param>
            <returns><see cref="T:Telogis.GeoBase.Routing.Directions"/></returns>
        </member>
        <member name="M:Telogis.GeoBase.GeoStream.Server.JSONRoute.GetHumanDirections(System.String,System.String)">
            <summary>
            Get the concise ('Human') directions for the route. These directions
            include distances, headings, instructions, times and streets.
            </summary>
            <param name="guid">The route's GUID.</param>
            <param name="units">The units for the directions.</param>
            <returns><see cref="T:Telogis.GeoBase.GeoStream.Server.JSONRoute.HumanDirection"/></returns>
        </member>
        <member name="M:Telogis.GeoBase.GeoStream.Server.JSONRoute.OptimizeStops(System.String)">
            <summary>
            Reorder the given route's stops optimally, according to the defined routing strategy.
            </summary>
            <param name="guid">The route's GUID.</param>
        </member>
        <member name="M:Telogis.GeoBase.GeoStream.Server.JSONRoute.GetStops(System.String)">
            <summary>
            Get an array of all the <see cref="T:Telogis.GeoBase.RouteStop">stops</see>
            on a given route.
            </summary>
            <param name="guid">The route's GUID.</param>
            <returns>An array of <see cref="T:Telogis.GeoBase.RouteStop"/>s.</returns>
        </member>
        <member name="M:Telogis.GeoBase.GeoStream.Server.JSONRoute.Destroy(System.String)">
            <summary>
            Free all resources associated with a given route.
            </summary>
            <param name="guid">The route's GUID.</param>
        </member>
        <member name="M:Telogis.GeoBase.GeoStream.Server.JSONRoute.SetStrategy(System.String,Telogis.GeoBase.Routing.RoutingStrategy)">
            <summary>
            Set a custom <see cref="T:Telogis.GeoBase.Routing.RoutingStrategy">routing strategy</see>
            for the given route. Refer to <see cref="T:Telogis.GeoBase.Routing.RoutingStrategy"/>.
            </summary>
            <param name="guid">The route's GUID.</param>
            <param name="strategy"><see cref="T:Telogis.GeoBase.Routing.RoutingStrategy"/></param>
        </member>
        <member name="M:Telogis.GeoBase.GeoStream.Server.JSONRoute.BoundingBox(System.String)">
            <summary>
            Create a <see cref="T:Telogis.GeoBase.Rectangle">bounding box</see> around the given route.
            </summary>
            <param name="guid">The route's GUID.</param>
            <returns><see cref="T:Telogis.GeoBase.Rectangle"/></returns>
        </member>
        <member name="M:Telogis.GeoBase.GeoStream.Server.JSONRoute.GetDirectionsStateless(Telogis.GeoBase.Routing.Route)">
            <summary>
            Finds directions for a route described as a sequence of stops. Currently, only HTTP GET requests are
            supported for this method since the tradition POST interface requires significant server-side tracking
            of the route state, which has been removed in this version.
            </summary>
            <param name="r">Directions will be returned for this Route.</param>
            <returns>the directions object describing the route.</returns>
        </member>
        <member name="M:Telogis.GeoBase.GeoStream.Server.JSONRoute.GetDirectionsStateless(Telogis.GeoBase.Routing.Route,Telogis.GeoBase.Navigation.UnitSystem)">
            <summary>
            Finds directions for a route described as a sequence of stops. Currently, only HTTP GET requests are
            supported for this method since the tradition POST interface requires significant server-side tracking
            of the route state, which has been removed in this version.
            </summary>
            <param name="r">Directions will be returned for this Route.</param>
            <param name="units">
            <see cref="T:Telogis.GeoBase.Navigation.UnitSystem"/> that will be
            used in the directions.</param>
            <returns>the directions object describing the route.</returns>
        </member>
        <member name="M:Telogis.GeoBase.GeoStream.Server.JSONRoute.OptimizeStateless(Telogis.GeoBase.Routing.Route)">
            <summary>
            Rearranges all of the stops in a given route (including the start and finish) into the most
            efficient order.
            </summary>
            <param name="r">The route to optimize.</param>
            <returns>The optimized stops.</returns>
        </member>
        <member name="M:Telogis.GeoBase.GeoStream.Server.JSONRoute.OptimizeStatelessWithWindows(Telogis.GeoBase.Routing.Route,System.String,Telogis.GeoBase.Routing.OptimizeStopOptions)">
            <summary>
            Rearranges all of the stops in a given route (including the start and finish) into the most 
            efficient order considering the time windows of the stops.
            </summary>
            <param name="r">The route to optimize.</param>
            <param name="startTime">The start time of the route.</param>
            <param name="options">Determines how the stops should be optimized (ordered).</param>
            <returns>The optimized stops.</returns>
        </member>
        <member name="M:Telogis.GeoBase.GeoStream.Server.JSONRoute.GetRouteHighlightStateless(Telogis.GeoBase.Routing.RouteHighlightData)">
            <summary>
            Get the likely route that was taken between the points in a given
            route history, without generating natural language directions or
            checking for route legality.
            </summary>
            <param name="rhd">Data containing sequence of stops reflecting the
            points along the route history.</param>
            <returns><see cref="T:Telogis.GeoBase.Routing.Directions"/> without
            natural language directions.</returns>
        </member>
        <member name="T:Telogis.GeoBase.GeoStream.Server.JSONRoute.HumanDirection">
            <summary>
            Provides a much more concise representation of a driving direction than a standard
            Direction object. Interested callers can fetch an array of these for a route via
            GetHumanDirections() instead of fetching the much larger Directions object.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.GeoStream.Server.JSONRoute.HumanDirection.Time">
            <summary>
            A <see cref="T:System.TimeSpan"/> indicating how long to drive from
            this direction to the next.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.GeoStream.Server.JSONRoute.HumanDirection.Distance">
            <summary>
            The distance component of the driving directions:
            "Turn left on to Main St and drive for (x) units".
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.GeoStream.Server.JSONRoute.HumanDirection.Instruction">
            <summary>
            A string containing driving instructions.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.GeoStream.Server.JSONRoute.HumanDirection.Street">
            <summary>
            The name of the street that the direction will place the driver on.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.GeoStream.Server.JSONRoute.HumanDirection.Heading">
            <summary>
            The direction in which to drive (<see cref="T:Telogis.GeoBase.Routing.Direction.CompassDirection"/>).
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.GeoStream.Server.JSONRoute.HumanDirection.HeadingString">
            <summary>
            A string containing the direction in which to drive (such as "North-East").
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.GeoStream.Server.JSONRoute.TimeAndDistance">
            <summary>
            For passing time and distance back to the getTimeAndDistance method in GeoStream mode
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.GeoStream.Server.JSONRoute.TimeAndDistance.distance">
             <summary>
            
             </summary>
        </member>
        <member name="F:Telogis.GeoBase.GeoStream.Server.JSONRoute.TimeAndDistance.time">
             <summary>
            
             </summary>
        </member>
        <member name="M:Telogis.GeoBase.GeoStream.Server.JSONRoute.Parameters.#ctor(System.String)">
            <summary>
            Loads the parameters from the page arguments.
            </summary>
            <param name="p">a string containing the comma-delimited arguments to be passed to the required Routing call.</param>
        </member>
        <member name="M:Telogis.GeoBase.GeoStream.Server.JSONRoute.Parameters.Decode(System.String,System.Int32)">
            <summary>
            Decodes the client-side encoding placed on the LatLons for efficient HTTP GETting.
            </summary>
            <param name="enc64">the encoded coordinate.</param>
            <param name="precision">the power of ten to divide the encoded coordinate by.</param>
            <returns>the restored coordinate</returns>
        </member>
        <member name="P:Telogis.GeoBase.GeoStream.Server.JSONRoute.Parameters.Precision">
            <summary>
            Parses the precision to which the coordinates in the request are given from the argument
            string.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.GeoStream.Server.JSONRoute.Parameters.Strategy">
            <summary>
            Parses the routing strategy from the argument string. The valid values for this are "FASTEST"
            and "SHORTEST".
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.GeoStream.Server.JSONRoute.Parameters.Stops">
            <summary>
            Parses the list of route stops from the argument string. Every argument after the strategy is
            considered to be a stop, in base-64-encoded form.
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.GeoStream.Server.JSONGeocoder">
            <summary>
            Implements a JSON interface to the GeoCoder functionality.
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.GeoStream.Server.JSONGeocoder.GeoCode(System.String,System.String)">
            <summary>
            <i>See <see cref="M:Telogis.GeoBase.GeoCoder.GeoCode(System.String,Telogis.GeoBase.Country)"/>.</i>
            </summary>
            <param name="address"></param>
            <param name="country"></param>
            <returns></returns>
        </member>
        <member name="M:Telogis.GeoBase.GeoStream.Server.JSONGeocoder.GeoCode(System.String,System.String,System.Int32)">
            <summary>
            <i>See <see cref="M:Telogis.GeoBase.GeoCoder.GeoCode(System.String,Telogis.GeoBase.Country,System.Int32)"/>.</i>
            </summary>
            <param name="address"></param>
            <param name="country"></param>
            <param name="maxResults"></param>
            <returns></returns>
        </member>
        <member name="M:Telogis.GeoBase.GeoStream.Server.JSONGeocoder.GeoCode(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            <i>See <see cref="M:Telogis.GeoBase.GeoCoder.GeoCode(System.String,System.String,System.String,System.String,Telogis.GeoBase.Country)"/>.</i>
            </summary>
            <param name="address"></param>
            <param name="city"></param>
            <param name="region"></param>
            <param name="postalcode"></param>
            <param name="country"></param>
            <returns></returns>
        </member>
        <member name="M:Telogis.GeoBase.GeoStream.Server.JSONGeocoder.GeoCode(System.String,System.String,System.String,System.String,System.String,System.Int32)">
            <summary>
            <i>See <see cref="M:Telogis.GeoBase.GeoCoder.GeoCode(System.String,System.String,System.String,System.String,Telogis.GeoBase.Country,System.Int32)"/>.</i>
            </summary>
            <param name="address"></param>
            <param name="city"></param>
            <param name="region"></param>
            <param name="postalcode"></param>
            <param name="country"></param>
            <param name="maxResults"></param>
            <returns></returns>
        </member>
        <member name="M:Telogis.GeoBase.GeoStream.Server.JSONGeocoder.ReverseGeoCode(Telogis.GeoBase.LatLon)">
            <summary>
            <i>See <see cref="M:Telogis.GeoBase.GeoCoder.ReverseGeoCode(Telogis.GeoBase.LatLon)"/>.</i>
            </summary>
            <param name="location"></param>
            <returns></returns>
        </member>
        <member name="M:Telogis.GeoBase.GeoStream.Server.JSONGeocoder.ReverseGeoCode(Telogis.GeoBase.LatLon,System.String)">
            <summary>
            <i>See <see cref="M:Telogis.GeoBase.GeoCoder.ReverseGeoCode(Telogis.GeoBase.LatLon,System.Double@,Telogis.GeoBase.DistanceUnit)"/>.</i>
            </summary>
            <param name="location"></param>
            <param name="units"></param>
            <returns></returns>
        </member>
        <member name="M:Telogis.GeoBase.GeoStream.Server.JSONGeocoder.ReverseGeoCode(Telogis.GeoBase.Vector,Telogis.GeoBase.Vector,Telogis.GeoBase.Address)">
            <summary>
            <i>See <see cref="M:Telogis.GeoBase.GeoCoder.ReverseGeoCode(Telogis.GeoBase.Vector,Telogis.GeoBase.Vector,Telogis.GeoBase.Address)"/>.</i>
            </summary>
            <param name="location"></param>
            <param name="lastLocation"></param>
            <param name="lastAddress"></param>
            <returns></returns>
        </member>
        <member name="M:Telogis.GeoBase.GeoStream.Server.JSONGeocoder.ReverseGeoCodeFull(Telogis.GeoBase.LatLon)">
            <summary>
            <i>See <see cref="M:Telogis.GeoBase.GeoCoder.ReverseGeoCodeFull(Telogis.GeoBase.LatLon)"/>.</i>
            </summary>
            <param name="location">The location to Geocode</param>
            <returns></returns>
        </member>
        <member name="M:Telogis.GeoBase.GeoStream.Server.JSONGeocoder.ReverseGeoCodeFull(Telogis.GeoBase.LatLon,System.Double)">
            <summary>
            <i>See <see cref="M:Telogis.GeoBase.GeoCoder.ReverseGeoCodeFull(Telogis.GeoBase.LatLon,System.Double)"/>.</i>
            </summary>
            <param name="location"></param>
            <param name="heading"></param>
            <returns></returns>
        </member>
        <member name="M:Telogis.GeoBase.GeoStream.Server.JSONGeocoder.ReverseGeoCodeFull(Telogis.GeoBase.LatLon,System.String[])">
            <summary>
            <i>See <see cref="M:Telogis.GeoBase.GeoCoder.ReverseGeoCodeFull(Telogis.GeoBase.LatLon,System.String[])"/>.</i>
            </summary>
            <param name="location"></param>
            <param name="lastNames"></param>
            <returns></returns>
        </member>
        <member name="M:Telogis.GeoBase.GeoStream.Server.JSONGeocoder.ReverseGeoCodeFull(Telogis.GeoBase.LatLon,System.String[],System.Double)">
            <summary>
            <i>See <see cref="M:Telogis.GeoBase.GeoCoder.ReverseGeoCodeFull(Telogis.GeoBase.LatLon,System.String[],System.Double)"/>.</i>
            </summary>
            <param name="location"></param>
            <param name="lastNames"></param>
            <param name="maxDist"></param>
            <returns></returns>
        </member>
        <member name="M:Telogis.GeoBase.GeoStream.Server.JSONGeocoder.ReverseGeoCodeFull(Telogis.GeoBase.LatLon,System.String[],System.Double,System.Boolean)">
            <summary>
            <i>See <see cref="M:Telogis.GeoBase.GeoCoder.ReverseGeoCodeFull(Telogis.GeoBase.LatLon,System.String[],System.Double,System.Boolean)"/>.</i>
            </summary>
            <param name="location"></param>
            <param name="lastNames"></param>
            <param name="maxDist"></param>
            <param name="globalFallback"></param>
            <returns></returns>
        </member>
        <member name="M:Telogis.GeoBase.GeoStream.Server.JSONGeocoder.ReverseGeoCodeFull(Telogis.GeoBase.LatLon,System.String[],System.Double,System.Boolean,Telogis.GeoBase.ReverseGeoCodeMode)">
            <summary>
            <i>See <see cref="M:Telogis.GeoBase.GeoCoder.ReverseGeoCodeFull(Telogis.GeoBase.LatLon,System.String[],System.Double,System.Boolean)"/>.</i>
            </summary>
            <param name="location"></param>
            <param name="lastNames"></param>
            <param name="maxDist"></param>
            <param name="globalFallback"></param>
            <param name="mode"></param>
            <returns></returns>
        </member>
        <member name="M:Telogis.GeoBase.GeoStream.Server.JSONGeocoder.ReverseGeoCodeFull(Telogis.GeoBase.LatLon,System.String[],System.Double,System.Double,System.Boolean,Telogis.GeoBase.ReverseGeoCodeMode,System.Double)">
            <summary>
            <i>See <see cref="M:Telogis.GeoBase.GeoCoder.ReverseGeoCodeFull(Telogis.GeoBase.LatLon,System.String[],System.Double,System.Boolean)"/>.</i>
            </summary>
            <param name="location"></param>
            <param name="lastNames"></param>
            <param name="maxDist"></param>
            <param name="heading"></param>
            <param name="globalFallback"></param>
            <param name="mode"></param>
            <param name="crossStreetDist"></param>
            <returns></returns>
        </member>
        <member name="M:Telogis.GeoBase.GeoStream.GeoStreamSettings.#ctor(Telogis.GeoBase.GeoStream.ConstructorAction,Telogis.GeoBase.GeoStream.Server.IWebWrapper,System.String[])">
            <summary>
            Constructor used for dependency injection
            </summary>
            <param name="action">Delegate used to wrap any actions that need to be performed in the constructor.</param>
            <param name="webWrapper">Used to wrap static web related classes.</param>
            <param name="geoStreamConfigFilePath">Optional parameter that references the string containing the path to the GeoStreamConfig.</param>
        </member>
        <member name="T:Telogis.GeoBase.MapState">
            <summary>
            This class represents all of the common properties of a map that if changed would cause the 
            map to be recreated.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.MapState.MaxZoomLimit">
            <summary>
            The default maximum zoom height for a map.
            </summary>
            <remarks>
            <para>The maximum zoom height <b>cannot</b> be greater than 18000
            (due to physical constraints, see <see cref="P:Telogis.GeoBase.AbstractMap.Zoom"/>).</para></remarks>
        </member>
        <member name="F:Telogis.GeoBase.MapState.AbsoluteMinZoomLimit">
            <summary>
            The default minimum zoom height for a map.
            </summary>
            <remarks>
            <para>The minimum zoom width <b>cannot</b> be less than 0.001, depending on the width 
            of the map.
            (due to physical constraints, see <see cref="P:Telogis.GeoBase.AbstractMap.Zoom"/>).</para></remarks>
        </member>
        <member name="M:Telogis.GeoBase.MapState.Clone">
            <summary>
            Clones this instance, including event subscribers.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Telogis.GeoBase.Traffic.TrafficRenderer">
            <summary>
            A <see cref="T:Telogis.GeoBase.Traffic.TrafficRenderer">TrafficRenderer</see> may be used to render a specified <see cref="T:Telogis.GeoBase.Traffic.Traffic">Traffic</see>
            unit on a map.
            </summary>
            <remarks>
            The <b>TrafficRenderer</b> implements the <see cref="T:Telogis.GeoBase.IMapRenderer"/>.
            <para>Related articles: <a href="60998f81-efa9-4743-afcc-6e6f943a4fa1.htm">Routing with Traffic</a>, 
            <a href="6f4671c7-ee1f-47f9-a70f-2a1e13cd506f.htm">Traffic</a>.</para>
            </remarks>
            <example>
            <code lang="C#">
            RendererList trafficRendererList = new RendererList();
            
            //Set file path to traffic data
            string dataFile = @"C:\data\NavteqHistoricalTraffic.gbhb";
                
            //Create collection of traffic sources - just one in this case
            ITrafficSource[] srcs = new ITrafficSource[] { new HistoricalTrafficSource(dataFile) };
            
            //Create traffic using the collection of traffic sources
            Traffic myTraffic = new Traffic(srcs);
            
            DateTime routingTime = DateTime.Now;
            
            //Get the latest data
            myTraffic = trafficFetcher.GetLatestTraffic(routingTime);
            trafficRendererList.Add(new TrafficRenderer(myTraffic, routingTime));
            </code>
            </example>
        </member>
        <member name="M:Telogis.GeoBase.Traffic.TrafficRenderer.#ctor(Telogis.GeoBase.Traffic.Traffic,System.DateTime)">
            <summary>
            Render the given <see cref="T:Telogis.GeoBase.Traffic.Traffic">Traffic</see> on a map object. The given
            <b>time</b> is used to determine the traffic congestion.
            </summary>
            <param name="traff">The traffic to render. <see cref="T:Telogis.GeoBase.Traffic.Traffic"/></param>
            <param name="time">The time in UTC at which the traffic congestion is to be calculated,
            as a <see cref="T:System.DateTime">DateTime</see></param>
        </member>
        <member name="M:Telogis.GeoBase.Traffic.TrafficRenderer.#ctor(Telogis.GeoBase.Traffic.Traffic,System.DateTime,Telogis.GeoBase.MapStyle)">
            <summary>
            Render the given <see cref="T:Telogis.GeoBase.Traffic.Traffic">Traffic</see> on a map object. The given
            <b>time</b> is used to determine the traffic congestion.
            </summary>
            <param name="traff">The traffic to render. <see cref="T:Telogis.GeoBase.Traffic.Traffic"/></param>
            <param name="time">The time in UTC at which the traffic congestion is to be calculated,
            as a <see cref="T:System.DateTime">DateTime</see></param>
            <param name="mapStyle">The style to use when rendering traffic.</param>
        </member>
        <member name="M:Telogis.GeoBase.Traffic.TrafficRenderer.Render(System.Drawing.Graphics,Telogis.GeoBase.RenderContext)">
            <summary>
            Implementation of <see cref="T:Telogis.GeoBase.IMapRenderer">IMapRenderer</see> used
            to draw the traffic. <b>Should not be called directly.</b>
            </summary>
            <param name="graphics"></param>
            <param name="rc"></param>
        </member>
        <member name="P:Telogis.GeoBase.Traffic.TrafficRenderer.TrafficBase">
            <summary>
            The <see cref="T:Telogis.GeoBase.Traffic.Traffic"/> used in this TrafficRenderer.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Traffic.TrafficRenderer.CurrentTime">
            <summary>
            The time in UTC to render the traffic for.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Traffic.TrafficRenderer.RequiredRendermodes">
            <summary>
            Gets the <see cref="T:Telogis.GeoBase.RenderMode">RenderMode</see> required by this <b>TrafficRenderer</b>
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.Routing.LinkEdit.CompiledLinkEdits">
            <summary>
            A representation of a LinkEditDatabase that is in a compiled form suitable for use on a
            RoutingStrategy.
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.Routing.LinkEdit.CompiledLinkEdits.Lookup(System.UInt64,Telogis.GeoBase.Traffic.TrafficDirectionType,Telogis.GeoBase.SpeedUnit,System.Double@)">
            <summary>
            Looks up the speed for a given Link ID.
            </summary>
            <param name="linkid">The Link ID to look up.</param>
            <param name="direction">The direction of travel.</param>
            <param name="units">Speed units to use.</param>
            <param name="speed">The speed.</param>
            <returns>true if the given linkid and direction has a link-speed override assigned.</returns>
        </member>
        <member name="M:Telogis.GeoBase.Routing.LinkEdit.CompiledLinkEdits.Create(System.String)">
            <summary>
            Creates a new CompiledLinkEdits object from the supplied filename.
            </summary>
            <param name="filename">Filename to read the edits from.</param>
            <returns>A new CompiledLinkEdits object.</returns>
        </member>
        <member name="M:Telogis.GeoBase.Routing.LinkEdit.CompiledLinkEdits.Create(Telogis.GeoBase.Transactional.TransactionalRepository)">
            <summary>
            Use an existing transactional repository to run a build test on.
            </summary>
            <param name="repo"></param>
            <returns></returns>
        </member>
        <member name="M:Telogis.GeoBase.Routing.LinkEdit.CompiledLinkEdits.PolygonQuery(System.String)">
            <summary>
            Return a list of streets where the polygon exists
            </summary>
            <param name="wkt"></param>
            <returns></returns>
        </member>
        <member name="M:Telogis.GeoBase.Routing.LinkEdit.CompiledLinkEdits.Dispose">
            <summary>
             Disposes of the current LinkEditStrategy.
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.Routing.LinkEdit.CompiledLinkEdits.Dispose(System.Boolean)">
            <summary>
             Disposes of the current LinkEditStrategy.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Routing.LinkEdit.CompiledLinkEdits.Warnings">
            <summary>
            Any warnings that occurred whilst the LinkEditDatabase was being compiled.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Routing.LinkUnmanaged.distance">
            <summary>
            Length of the link (meters /2)
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Routing.LinkUnmanaged.prev">
            <summary>
            Pointer used to create the linked list of links for an intersection
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Routing.LinkUnmanaged.flags">
            <summary>
            The full flags for this link
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Routing.LinkUnmanaged.LinkId">
            <summary>
            Unique Link identifier (from the dataset)
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.Routing.IntersectionAppearance">
             <summary>
             A class to represent an intersection appearance - routing is done from appearance to appearance
            
             </summary>
        </member>
        <member name="T:Telogis.GeoBase.Routing.Intersection">
             <summary>
             A class to represent an intersection
            
             </summary>
        </member>
        <member name="M:Telogis.GeoBase.Routing.Intersection.FlagsTo(Telogis.GeoBase.Routing.Intersection)">
             <summary>
            
             </summary>
             <param name="other"></param>
             <returns></returns>
        </member>
        <member name="M:Telogis.GeoBase.Routing.Intersection.LinkTo(Telogis.GeoBase.Routing.Intersection)">
            <summary>
            Gets the link that joins the intersection to another Intersection
            </summary>
            <param name="other">The intersection we want a link to</param>
            <returns>A Link if the intersection is linked somehow to that intersection</returns>
        </member>
        <member name="M:Telogis.GeoBase.Routing.Intersection.LinkTo(Telogis.GeoBase.LatLon)">
            <summary>
            Gets the link that joins the intersection to a point
            </summary>
            <param name="point">The point we want to link to</param>
            <returns>A Link if the intersection is linked somehow to that point</returns>
        </member>
        <member name="M:Telogis.GeoBase.Routing.Intersection.HasLinkTo(Telogis.GeoBase.Routing.Intersection)">
             <summary>
            
             </summary>
             <param name="other"></param>
             <returns></returns>
        </member>
        <member name="F:Telogis.GeoBase.Routing.Intersection.m_link">
            <summary>
            The last link on this intersection.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Routing.Intersection.IsEndPoint">
             <summary>
            
             </summary>
        </member>
        <member name="P:Telogis.GeoBase.Routing.Intersection.Lat">
             <summary>
            
             </summary>
        </member>
        <member name="P:Telogis.GeoBase.Routing.Intersection.Lon">
             <summary>
            
             </summary>
        </member>
        <member name="P:Telogis.GeoBase.Routing.Intersection.NumLinks">
            <summary>
            Gets the number of links outbound from this intersection
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.Routing.Intersection.Link">
             <summary>
             Links intersections together (one way only)
            
             Also known as (in graph terms) as edges or arcs
             Represents a link from the intersection that has this link in it's linked list to the intersection
             Given in 'other'
             </summary>
        </member>
        <member name="F:Telogis.GeoBase.Routing.Intersection.Link.other">
            <summary>
            The intersection that we get to if we travel this link
            </summary>			
        </member>
        <member name="F:Telogis.GeoBase.Routing.Intersection.Link.Street">
            <summary>
            Information to get to the street
            </summary>			
        </member>
        <member name="F:Telogis.GeoBase.Routing.Intersection.Link.LinkNo">
            <summary>
            Link number in this street
            </summary>			
        </member>
        <member name="F:Telogis.GeoBase.Routing.Intersection.Link.distance">
            <summary>
            Length of the link (meters /2)
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Routing.Intersection.Link.prev">
            <summary>
            Pointer used to create the linked list of links for an intersection
            </summary>			
        </member>
        <member name="F:Telogis.GeoBase.Routing.Intersection.Link.LinkId">
            <summary>
            Unique Link identifier (from the dataset)
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Routing.Intersection.Link.Flags">
             <summary>
            
             </summary>
        </member>
        <member name="T:Telogis.GeoBase.Routing.VirtualIntersection">
             <summary>
             This is where we create a new street link that is
             Part of an exisiting one - we can not query this link from the
             Database so we save the data during the network creation
            
             </summary>
        </member>
        <member name="M:Telogis.GeoBase.Routing.VirtualIntersection.PointsToEnd(Telogis.GeoBase.FeatureInfo,System.UInt16,Telogis.GeoBase.Routing.Intersection,Telogis.GeoBase.Routing.Intersection)">
            <summary>
            Get the string of points from this intersection to a given end
            </summary>
            <param name="start"></param>
            <param name="target"></param>
            <param name="linkNo"></param>
            <param name="linkStreet"></param>
            <returns></returns>
        </member>
        <member name="M:Telogis.GeoBase.Routing.VirtualIntersection.PointsTo(Telogis.GeoBase.Routing.VirtualIntersection)">
            <summary>
            Returns a collection of points to go from this intersection to the given virtual intersection
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="F:Telogis.GeoBase.Routing.StopIntersection.EndPoint">
            <summary>
            So we know that this is an endpoint and we can count it and perhaps stop
            </summary>
        </member>
        <member name="T:Xheo.Licensing.SelectExistingLicenseForm">
            <summary>
            Summary description for SelectExistingLicenseForm.
            </summary>
        </member>
        <member name="F:Xheo.Licensing.SelectExistingLicenseForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Xheo.Licensing.SelectExistingLicenseForm.#ctor">
            <summary>
            Initializes a new instance of the SelectExistingLicenseForm class.
            </summary>
        </member>
        <member name="M:Xheo.Licensing.SelectExistingLicenseForm.#ctor(Xheo.Licensing.ExtendedLicense)">
            <summary>
            Initializes a new instance of the SelectExistingLicenseForm class.
            </summary>
            <param name="license">
            	The original lincenese that should be replaced by the production license.
            </param>
        </member>
        <member name="M:Xheo.Licensing.SelectExistingLicenseForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:Xheo.Licensing.SelectExistingLicenseForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:Xheo.Licensing.SelectExistingLicenseForm.OnLoad(System.EventArgs)">
            <summary>
            Performs last minute loading steps before the form is displayed.
            </summary>
        </member>
        <member name="T:Xheo.Licensing.FailureReportForm">
            <summary>
            Displays a license violation and report summary when no valid licenses can
            be found.
            </summary>
        </member>
        <member name="F:Xheo.Licensing.FailureReportForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Xheo.Licensing.FailureReportForm.#ctor">
            <summary>
            Initializes a new instance of the FailureReportForm class.
            </summary>
        </member>
        <member name="M:Xheo.Licensing.FailureReportForm.#ctor(System.ComponentModel.LicenseContext,System.Type,System.Object,System.String)">
            <summary>
            Initializes a new instance of the FailureReportForm class.
            </summary>
            <param name="context">
            	The current LicenseContext.
            </param>
            <param name="type">
            	The Type requesting a license.
            </param>
            <param name="instance">
            	The instance requesting the license.
            </param>
            <param name="reason">
            	Reason why licensing failed.
            </param>
        </member>
        <member name="M:Xheo.Licensing.FailureReportForm.#ctor(System.String,System.String,System.Reflection.Assembly)">
            <summary>
            Initializes a new instance of the FailureReportForm class.
            </summary>
            <param name="details">
            	Detailed information about the failure.
            </param>
            <param name="message">
            	The message to display to the user.
            </param>
            <param name="theAssembly">
            	The assembly the error should be reported for. Used to gather support
            	information such as email, phone and url.
            </param>
        </member>
        <member name="M:Xheo.Licensing.FailureReportForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:Xheo.Licensing.FailureReportForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:Xheo.Licensing.FailureReportForm.OnLoad(System.EventArgs)">
            <summary>
            Summary of OnLoad.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Xheo.Licensing.FailureReportForm._ok_Click(System.Object,System.EventArgs)">
            <summary>
            Summary of _ok_Click.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Xheo.Licensing.FailureReportForm._supportUrl_LinkClicked(System.Object,System.Windows.Forms.LinkLabelLinkClickedEventArgs)">
            <summary>
            Summary of _supportUrl_LinkClicked.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Xheo.Licensing.FailureReportForm._supportEmail_LinkClicked(System.Object,System.Windows.Forms.LinkLabelLinkClickedEventArgs)">
            <summary>
            Summary of _supportEmail_LinkClicked.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Xheo.Licensing.FailureReportForm._copy_Click(System.Object,System.EventArgs)">
            <summary>
            Summary of _copy_Click.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Xheo.Licensing.FailureReportForm.Show(System.ComponentModel.LicenseContext,System.Type,System.Object,System.String)">
            <summary>
            Displays a failure form as a modal dialog.
            </summary>
            <param name="context">
            	The LicenseContext that failed.
            </param>
            <param name="type">
            	The Type of the object being licensed.
            </param>
            <param name="instance">
            	The instance of the object being licensed.
            </param>
            <param name="reason">
            	The reason for the failure.
            </param>
        </member>
        <member name="M:Xheo.Licensing.FailureReportForm.Show(System.String,System.String,System.Reflection.Assembly)">
            <summary>
            Displays a failure form as a modal dialog.
            </summary>
            <param name="details">
            	Detailed information about the failure.
            </param>
            <param name="message">
            	The message to display to the user.
            </param>
            <param name="theAssembly">
            	The assembly the error should be reported for. Used to gather support
            	information such as email, phone and url.
            </param>
        </member>
        <member name="M:Xheo.Licensing.FailureReportForm.Show(System.String,System.Exception,System.Reflection.Assembly)">
            <summary>
            Displays a failure form as a modal dialog.
            </summary>
            <param name="ex">
            	The Exception that caused the problem.
            </param>
            <param name="message">
            	The message to display to the user.
            </param>
            <param name="theAssembly">
            	The assembly the error should be reported for. Used to gather support
            	information such as email, phone and url.
            </param>
        </member>
        <member name="M:Xheo.Licensing.FailureReportForm.PreProcessException(System.Exception)">
            <summary>
            Processes an exception and builds a presentable error message by cleaning 
            out any stack trace and Type information.
            </summary>
            <param name="ex">
            	The exception to process.
            </param>
            <returns>
            	Returns a processed message.
            </returns>
        </member>
        <member name="P:Xheo.Licensing.FailureReportForm.DontShowAgain">
            <summary>
            Gers or sets a value that indicates if the form should be shown again.
            </summary>
        </member>
        <member name="T:Xheo.Licensing.BetaForm">
            <summary>
            Summary description for BetaForm.
            </summary>
        </member>
        <member name="T:Xheo.Licensing.InfoForm">
            <summary>
            Presents a simple user interface for giving the user additional information
            such as trial terms and a link to additional information available online.
            </summary>
        </member>
        <member name="M:Xheo.Licensing.InfoForm.#ctor">
            <summary>
            Included for COM compliance, do not use.
            </summary>
        </member>
        <member name="M:Xheo.Licensing.InfoForm.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the InfoForm class.
            </summary>
            <param name="text">
            	Text to display in the main window. If it contains a URL it will be displayed
            	in the window instead.
            </param>
            <param name="infoUrl">
            	Location where additional information is located.
            </param>
        </member>
        <member name="M:Xheo.Licensing.InfoForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:Xheo.Licensing.InfoForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:Xheo.Licensing.InfoForm._link_LinkClicked(System.Object,System.Windows.Forms.LinkLabelLinkClickedEventArgs)">
            <summary>
            Summary of _link_LinkClicked.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Xheo.Licensing.InfoForm.OnLoad(System.EventArgs)">
            <summary>
            Ensures the form is visible.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Xheo.Licensing.InfoForm.timer1_Tick(System.Object,System.EventArgs)">
            <summary>
            Summary of timer1_Tick.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Xheo.Licensing.BetaForm.#ctor">
            <summary>
            Initializes a new instance of the BetaForm class.
            </summary>
        </member>
        <member name="M:Xheo.Licensing.BetaForm.#ctor(Xheo.Licensing.BetaLimit)">
            <summary>
            Initializes a new instance of the BetaForm class.
            </summary>
        </member>
        <member name="M:Xheo.Licensing.BetaForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:Xheo.Licensing.BetaForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.Scribble">
            <summary>
            A free-form drawing tool that allows a user to scribble on the map.
            </summary>
            <remarks>
            The scribble is composed of a series of LatLon points and is thus 
            bound to the area of the map that it was drawn upon.
            </remarks>
        </member>
        <member name="M:Telogis.GeoBase.Scribble.#ctor">
            <summary>
            Construct a new Scribble object.
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.Scribble.AddPoint(Telogis.GeoBase.LatLon)">
            <summary>
            Add a <see cref="T:Telogis.GeoBase.LatLon"/> point to the scribble drawing.
            </summary>
            <param name="l"></param>
        </member>
        <member name="M:Telogis.GeoBase.Scribble.Clear">
            <summary>
            Clears the scribble drawing.
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.Scribble.Render(System.Drawing.Graphics,Telogis.GeoBase.RenderContext)">
            <summary>
            Renders this Scribble object using the specified <see cref="T:System.Drawing.Graphics"/> 
            and <see cref="T:Telogis.GeoBase.RenderContext"/>.
            </summary>
            <param name="graphics"></param>
            <param name="rc"></param>
        </member>
        <member name="P:Telogis.GeoBase.Scribble.Points">
            <summary>
            Get the array of points for this Scribble.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Scribble.RenderPen">
            <summary>
            Gets or sets the <see cref="T:System.Drawing.Pen"/> used to render the scribble drawing.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Scribble.RequiredRendermodes">
            <summary>
            Gets the <see cref="T:Telogis.GeoBase.RenderMode">RenderMode</see> required by this <b>Scribble</b>
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.GeoStream.Server.ThreadResult">
            <summary>
            Used by asynchronous page/http handlers to keep track of requests that are processed
            asynchronously
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.RegionElement">
            <summary>
            Describes a specific region
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.RegionElement.ParentID">
            <summary>
            The ID of the parent element.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.RegionElement.Id">
            <summary>
            The id of this element.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.RegionElement.Level">
            <summary>
            The level of the region.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.RegionElement.Displayname">
            <summary>
            The name of this element formatted for display.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.RegionElement.Parent">
            <summary>
            The parent element for this element.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.RegionElement.BoundingBox">
            <summary>
            A bounding box that contains this element.
            </summary>
            <remarks>The bounding box may be considerably larger than the element.</remarks>
        </member>
        <member name="T:Telogis.GeoBase.IRegionSearcher">
            <summary>
            Interface for classes that provide a collection of regions to a drill down geocoder.
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.IRegionSearcher.GetRegions(System.Int32,System.String)">
            <summary>
            Return all regions at the specified level that match a search string.
            </summary>
            <param name="level">The level of the regions.</param>
            <param name="searchstring">The string to match.</param>
            <returns>The regions that match the search string.</returns>
        </member>
        <member name="M:Telogis.GeoBase.IRegionSearcher.GetRegions(System.Int32)">
            <summary>
            Retun all regions at the specified level.
            </summary>
            <param name="level">The level of the desired regions.</param>
            <returns>The regions at the specified level.</returns>
        </member>
        <member name="T:Telogis.GeoBase.RegionData">
            <summary>
            This class describes a region on the map. This region can be a city, suburb, county, province or state.
            </summary>
            <remarks>
            The lifetime of this object is tied to the lifetime of the DrillDownGeoCoder which created it.
            Attempting to use this class after its DrillDownGeoCoder has been disposed may cause an ObjectDisposedException
            to be thrown.
            
            <para><b>Related articles</b>: <a href="4196f9ed-1abf-4780-887f-47b2b046e80e.htm">Drill-down Geocoder Tutorial</a>.</para>
            </remarks>
        </member>
        <member name="F:Telogis.GeoBase.RegionData.level">
            <summary>
            Non user-visible level
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.RegionData.ToString">
            <summary>
            Returns the name of this region.
            </summary>
            <returns>The recorded name of this region.</returns>
        </member>
        <member name="M:Telogis.GeoBase.RegionData.GetBoundingBoxes">
            <summary>
            An array of bounding boxes covering this region.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Telogis.GeoBase.RegionData.GetSubregion(System.String)">
            <summary>
            Get all sub-regions that exist within the given region.
            </summary>
            <param name="searchString">The region to search for sub-regions.</param>
            <returns>A list of sub-regions within the given region.</returns>
            <remarks>In order to locate suburbs you need to call GetSubRegion() on the city-level RegionData.</remarks>
        </member>
        <member name="M:Telogis.GeoBase.RegionData.GetRegions(System.Int32,System.String)">
            <summary>
            Searches for subregions matching a specified search string.
            </summary>
            <param name="level">The level of the subregions.</param>
            <param name="searchstring">The name of the subregions.</param>
            <returns>A RegionSearchResult for the subregions found.</returns>
        </member>
        <member name="M:Telogis.GeoBase.RegionData.GetRegions(System.Int32)">
            <summary>
            Searches for subregions of a specified level.
            </summary>
            <param name="level">The level of the subregions.</param>
            <returns>A RegionSearchResult for the subregions found.</returns>
        </member>
        <member name="M:Telogis.GeoBase.RegionData.GetStreets(System.String)">
            <summary>
            Get streets in the given region
            </summary>
            <param name="search">The region to search for the streets</param>
            <returns>A list of streets within the region specified in the given search term.</returns>
        </member>
        <member name="M:Telogis.GeoBase.RegionData.GetParentRegions">
            <summary>
            Get the immediate parent region of this region. (e.g if this is
            Los Angeles you get the county of Los Angeles back)
            </summary>
            <returns>A set of region data objects representing the possible
            parents of this region within this context.</returns>
        </member>
        <member name="P:Telogis.GeoBase.RegionData.Level">
            <summary>
            The level of this region.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.RegionData.Name">
            <summary>
            The name of the region
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.RegionData.Location">
            <summary>
            The general location of the region (usually its center).
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.SearchResult">
            <summary>
            Indicates the state of a search.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.SearchResult.SearchCompleted">
            <summary>
            Search has been completed.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.SearchResult.SearchCancelled">
            <summary>
            Search has been canceled.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.SearchResult.TooManyResults">
            <summary>
            Search has returned too many results.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.SearchResult.NothingToSearchFor">
            <summary>
            Search was not started due to non-existent search data.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.SearchResult.Searching">
            <summary>
            Search is in progress.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.SearchResult.FilteringComplete">
            <summary>
            Filtering of search results has been completed.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.SearchResult.Timeout">
            <summary>
            The search took longer than the specified timeout value
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.StreetSearchResult">
            <summary>
            Returned from calls to GetStreets or EndGetStreets
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.Result`1">
            <summary>
            An object returned by an asynchronous search.
            </summary>
            <typeparam name="ResultElementT">The type of object searched for.</typeparam>
        </member>
        <member name="P:Telogis.GeoBase.Result`1.Results">
            <summary>
            The actual results
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Result`1.Status">
            <summary>
            Status of the search. If a maximum number of results was specified, then this status may be TooManyResults 
            if the number of results specified actually exceeds the number of results returned
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.RegionSearchResult">
            <summary>
            Returned from calls to GetRegions
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.AsyncSearch">
            <summary>
            The AsyncSearch class is used to query the state of an asynchronous search.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.AsyncSearch.StreetsFound">
            <summary>
            Returns the <see cref="T:Telogis.GeoBase.StreetData"/> results from the search.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.AsyncSearch.Result">
            <summary>
            Indicates the state of the search.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.AsyncSearch.AsyncState">
            <summary>
            Gets a user-defined object that qualifies or contains information about an asynchronous operation.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.AsyncSearch.AsyncWaitHandle">
            <summary>
            Gets a System.Threading.WaitHandle that is used to wait for an asynchronous operation to complete.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.AsyncSearch.CompletedSynchronously">
            <summary>
            Gets a value that indicates whether the asynchronous operation completed synchronously.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.AsyncSearch.IsCompleted">
            <summary>
            Gets a value that indicates whether the asynchronous operation has completed. True if the operation is complete.
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.ISearchResult">
            <summary>
            Implemented by objects returned from a search.
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.ISearchResult.MatchesQuery(System.String)">
            <summary>
            Indicates whether the search result matches the query string.
            </summary>
            <param name="query">The portion of the address being matched by the geocoder.</param>
            <returns>True if the search result matches the query string, false otherwise.</returns>
        </member>
        <member name="T:Telogis.GeoBase.IAsyncSearchable`1">
            <summary>
            Abstract base class for classes that perform asynchronous searches
            on behalf of a drill down geocoder.
            </summary>
            <typeparam name="ResultElementT">The type of element to search for.</typeparam>
        </member>
        <member name="M:Telogis.GeoBase.IAsyncSearchable`1.BeginSearch(System.String,Telogis.GeoBase.Action)">
            <summary>
            Begin an asynchronous search.
            </summary>
            <param name="query">String (name) to look for.</param>
            <param name="callback">Callback to execute when a match is found.</param>
        </member>
        <member name="M:Telogis.GeoBase.IAsyncSearchable`1.GrabResults(`0[]@,Telogis.GeoBase.SearchResult@)">
            <summary>
            Obtain the search results from an asynchronous search.
            </summary>
            <param name="results">Search results (matches) found so far.</param>
            <param name="sresult">Indicates the state of the search.</param>
        </member>
        <member name="M:Telogis.GeoBase.IAsyncSearchable`1.AbortSearch">
            <summary>
            Abort an asynchronously running search.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.IAsyncSearchable`1.SearchDelay">
            <summary>
            Delay before the search starts. This is to give the user a chance to change
            the search term before committing to starting the search
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.AsyncSearcher`2">
            <summary>
            Helper object to perform asynchronous searches on behalf of a drill down geocoder.
            </summary>
            <typeparam name="ResultElementT">Type of object to search for.</typeparam>
            <typeparam name="ResultT">Type of objects returned.</typeparam>
        </member>
        <member name="M:Telogis.GeoBase.AsyncSearcher`2.ChangeSearchTerm(System.String)">
            <summary>
            Execute a new search, while retaining any search results that match the new query string.
            </summary>
            <param name="query">The query string giving the name of items to search for.</param>
        </member>
        <member name="P:Telogis.GeoBase.AsyncSearcher`2.SearchDelay">
            <summary>
            Delay before the search starts. This is to give the user a chance to change
            the search term before committing to starting the search
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.AsyncSearcher`2.Status">
            <summary>
            Returns the state of the asynchronous search.
            </summary>
        </member>
        <member name="E:Telogis.GeoBase.AsyncSearcher`2.OnFoundResults">
            <summary>
            Event that fires when the search results change.
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.DDGCAsyncStreetSearchable">
            <summary>
            Class that asynchronously performs street searches for a drill down geocoder.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.DDGCAsyncStreetSearchable.SearchDelay">
            <summary>
            Delay before the search starts. This is to give the user a chance to change
            the search term before committing to starting the search
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.DDGCStreetSearcher">
            <summary>
            Create a new DDGCStreetSearcher object.
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.DrillDownGeoCoder">
             <summary>
             The DrillDownGeoCoder is a class that performs a GeoCode by progressively selecting 
             a smaller set of regions, narrowing down the search. It has the ability to query
             the location of a street, street address, postcode, region, city, state or country
             </summary>
             <remarks><para><b>Related articles</b>: <a href="4196f9ed-1abf-4780-887f-47b2b046e80e.htm">Drill-down Geocoder Tutorial</a>.</para></remarks>
             <example><code lang="C#">
             //
             // First, we'll check that we can create a DrillDownGeoCoder in the USA.
             // If we can create one, we'll do so. If not, the code will silently exit.
             //
             if (!DrillDownGeoCoder.HasDrillDownGeoCoder(Country.USA)) return 0;
             DrillDownGeoCoder ddgc = new DrillDownGeoCoder(Country.USA);
             Console.WriteLine("DDGC Created");
             
             //
             // Next, we'll find out how many region levels (state, country etc) we need to set
             //
             int numRegionLevels = ddgc.NumRegionLevels;
             
             //
             // Get the all possible regions in the first (zeroth) region level...
             // Often, you'll want to start a loop here:
             // for (each region level) {
             //      while (not yet made a selection) {
             //          display list of options;
             //          ask user to make a selection;
             //      }
             //      set this region level;
             //      move on to the next region level;
             // }
             RegionSearchResult rsr = ddgc.GetRegions(0);
             RegionData[] regionData = rsr.Results;
             
             //
             // You could output them for the user to make a selection
             // - this could also be done using a combo/list box
             //
             for (int i = 0; i &lt; regionData.Length; i++)
                 Console.WriteLine(regionData[i].ToString());
            
             // 
             // If you know the start of the region name, you can get a list of
             // possible regions with a filter applied:
             //
             rsr = ddgc.GetRegions(levelNumber, startOfName);
             regionData = rsr.Results;
            
             //
             // Suppose that the second region (element 1) in the regions[] array is the desired
             // region for this level, you should set this region in the DrillDownGeoCoder:
             //
             ddgc.SetRegion(regionData[1]);
             
             //
             // Repeat the process for the remaining region levels.
             // Then, a similar procedure should be made using the ddgc.GetStreets() method.
             // This will give a list of appropriate streets. If implemented well,
             // a DrillDownGeoCoder provides a fast and effective way of locating a street.
             //
             // if (all region levels set) {
             //      get the first letter of the street name;
             //      display list of matching streets to user;
             //      let the user make a selection;
             //      display streetData information (location/name of street etc);
             // }
             
             // Once you've found a street you can use the StreetData.GetAddressLocation
             // method to find the exact location of an address (specified by street number)
             
             </code>
             </example>
        </member>
        <member name="M:Telogis.GeoBase.DrillDownGeoCoder.GetStreetSearcher">
            <summary>
            Return the Street searcher object that performs asynchronous street searches.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Telogis.GeoBase.DrillDownGeoCoder.HasDrillDownGeoCoder(Telogis.GeoBase.Country)">
            <summary>
            Used to determine whether the information required to perform a drill-down geocode in the specified country
            is present in the repository.
            </summary>
            <remarks>
            <para>Not all data files contain the necessary information required to perform a drill-down geocode.</para>
            <para>GeoStreamRepository objects do not support drill-down geocoding.</para>
            </remarks>
            <param name="country">The country to be checked</param>
            <returns>True if a DrillDownGeoCoder can be created to geocode addresses in this country. Otherwise false.</returns>
        </member>
        <member name="M:Telogis.GeoBase.DrillDownGeoCoder.#ctor(Telogis.GeoBase.Country)">
            <summary>
            Creates a new DrillDownGeocoder in the specified country.
            </summary>
            <param name="country"><see cref="T:Telogis.GeoBase.Country">Country</see> in which the DrillDownGeocoder is to act.</param>
        </member>
        <member name="M:Telogis.GeoBase.DrillDownGeoCoder.GetSmallestSetRegion">
            <summary>
            Get the smallest region that has been set
            </summary>
            <returns>The region object of the smallest region on the region hierarchy that has been set</returns>
        </member>
        <member name="M:Telogis.GeoBase.DrillDownGeoCoder.CanGetStreet">
            <summary>
            Determines whether the DrillDownGeoCoder can retrieve streets.
            </summary>
            <returns><b>true</b> if the DrillDownGeoCoder can retrieve streets, otherwise <b>false</b></returns>
            <remarks>In some (historical) instances the retrieval of streets by region may have been disallowed.
            </remarks>
        </member>
        <member name="M:Telogis.GeoBase.DrillDownGeoCoder.GetLargestUnsetLevel">
            <summary>
            Gets the level of the largest unset region. For example, in the U.S., if you have already set the state 
            (level 0) this will return 1, which corresponds to the county level.
            </summary>
            <returns>The largest region level that has not been set</returns>
        </member>
        <member name="M:Telogis.GeoBase.DrillDownGeoCoder.GetRegions(System.Int32,System.String)">
            <summary>
            Gets all the regions beginning with the specified search term at the given level
            </summary>
            <param name="level"></param>
            <param name="searchTerm"></param>
            <returns></returns>
        </member>
        <member name="M:Telogis.GeoBase.DrillDownGeoCoder.GetRegions(System.Int32,System.String,System.Int32)">
            <summary>
            Searches a specified region level for a region beginning with the given search string.
            </summary>
            <param name="level">The region level to search</param>
            <param name="searchTerm">Only regions with names beginning with this string will be returned</param>
            <param name="maxResults">The maximum number of results to return.</param>
            <returns>A <see cref="T:Telogis.GeoBase.RegionData">RegionData</see> array</returns>
        </member>
        <member name="M:Telogis.GeoBase.DrillDownGeoCoder.GetRegions(System.Int32)">
            <summary>
            Get the regions that are available in a certain level.
            </summary>
            <remarks><para><b>Related articles</b>: <a href="4196f9ed-1abf-4780-887f-47b2b046e80e.htm">Drill-down Geocoder Tutorial</a>.</para></remarks>
            <param name="level">Region level you want regions from</param>
            <returns>A RegionSearchResult object that contains the results</returns>
        </member>
        <member name="M:Telogis.GeoBase.DrillDownGeoCoder.GetRegions(System.Int32,System.Int32)">
            <summary>
            Get the regions that are available in a certain level. For example, having set the state to California (level 0),
            calling GetRegions(1) will return regions like Los Angeles county, San Francisco county, San Bernardino county etc...
            </summary>
            <param name="level">The region level to be searched. If this number is greater than the return value of 
            GetLargestUnsetLevel, it will throw an exception</param>
            <param name="maxResults">The maximum number of results permitted</param>
            <returns>A RegionSearchResult object that contains the results</returns>
        </member>
        <member name="M:Telogis.GeoBase.DrillDownGeoCoder.BeginGetStreets(System.String,System.AsyncCallback,System.Object)">
            <summary>
            Begins an asynchronous street search operation
            </summary>
            <param name="searchstring">The search term used to find streets</param>
            <param name="asyncCallback">Method to call when the search is complete</param>
            <param name="asyncstate">The state of the asynchronous search.</param>
            <returns>IAsyncResult allowing the caller to query the state of the search.</returns>
            <remarks><para>An asynchronous street search is performed using the drilldown geocoder's 
            <see cref="M:Telogis.GeoBase.DrillDownGeocoder.BeginGetStreets(String, AsyncCallback, Object)">BeginGetStreets</see> 
            in conjunction with <see cref="M:Telogis.GeoBase.DrillDownGeocoder.AbortGetStreets">AbortGetStreets</see>, 
            and <see cref="M:Telogis.GeoBase.DrillDownGeocoder.EndGetStreets">EndGetStreets</see>. 
            <see cref="M:Telogis.GeoBase.DrillDownGeocoder.AbortGetStreets">AbortGetStreets</see> 
            simply cancels an asynchronous street search operation; in the example below, it is used to cancel any previous 
            search operation, so that we can safely start a new search.</para> 
            <para><see cref="M:Telogis.GeoBase.DrillDownGeocoder.BeginGetStreets(String, AsyncCallback, Object)">BeginGetStreets</see> will create a new thread 
            and begin the search operation. When the search is complete, the callback function that is passed to 
            <see cref="M:Telogis.GeoBase.DrillDownGeocoder.BeginGetStreets(String, AsyncCallback, Object)">BeginGetStreets</see> is called. 
            In the example below, the callback function (GetStreetsCallback(IAsyncResult searchResult)) 
            calls UpdateStreetsList(), which in turn calls <see cref="M:Telogis.GeoBase.DrillDownGeocoder.EndGetStreets">EndGetStreets</see> 
            to return the search results, once the search has completed, and populates the list box 'listBoxResults'. 
            </para></remarks>
            <example>
            <para>This example assumes that the region levels, in the drill-down geocoder, have been set. It also assumes that we have a 
            drilldown geocoder, called 'ddgc', and a list box to place the street search results in to, called 'listBoxResults'.</para>
            <code lang="C#">
            IAsyncResult asyncSearch;
            
            private void searchSteets(string filterText){
             //Ensure previous asynchronous street search operation has stopped 
             ddgc.AbortGetStreets(asyncSearch);
            
             //Begin the asynchronous search
             asyncSearch = ddgc.BeginGetStreets(filterText, getStreetsCallback, null);
            }
            
            private void getStreetsCallback(IAsyncResult searchResult) {
             updateStreetsList();
            }
            
            private void updateStreetsList() {
             if (InvokeRequired) {
              Invoke(new MethodInvoker(UpdateStreetsList));
             } else {
                StreetData[] sdlist = ddgc.EndGetStreets(asyncSearch).Results;
                listBoxResults.Items.AddRange(sdlist);
             }
            }</code>
            </example>
            <seealso cref="M:Telogis.GeoBase.DrillDownGeoCoder.AbortGetStreets(System.IAsyncResult)"/>
            <seealso cref="M:Telogis.GeoBase.DrillDownGeoCoder.EndGetStreets(System.IAsyncResult)"/>
        </member>
        <member name="M:Telogis.GeoBase.DrillDownGeoCoder.BeginGetStreets(System.String,System.AsyncCallback,System.Object,System.Int32)">
            <summary>
            Internal begin get sreets
            </summary>
            <param name="searchstring"></param>
            <param name="asyncCallback"></param>
            <param name="asyncstate"></param>
            <param name="SearchDelay">In milliseconds</param>
            <returns></returns>
        </member>
        <member name="M:Telogis.GeoBase.DrillDownGeoCoder.EndGetStreets(System.IAsyncResult)">
            <summary>
            Wait until the search has finished, and returns the search results
            </summary>
            <param name="result"></param>
            <returns></returns>
            <remarks>Use in conjunction with <see cref="M:Telogis.GeoBase.DrillDownGeoCoder.AbortGetStreets(System.IAsyncResult)"/>, and <see cref="M:Telogis.GeoBase.DrillDownGeocoder.BeginGetStreets(String, AsyncCallback, Object)">BeginGetStreets</see>.
            <para>See <see cref="M:Telogis.GeoBase.DrillDownGeocoder.BeginGetStreets(String, AsyncCallback, Object)">BeginGetStreets</see> for more details on using the asynchronous street search methods.</para>
            </remarks>
            <seealso cref="M:Telogis.GeoBase.DrillDownGeoCoder.AbortGetStreets">AbortGetStreets</seealso>
            <seealso cref="M:Telogis.GeoBase.DrillDownGeoCoder.BeginGetStreets(string, System.AsyncCallback, object)">BeginGetStreets</seealso>
        </member>
        <member name="M:Telogis.GeoBase.DrillDownGeoCoder.AbortGetStreets(System.IAsyncResult)">
            <summary>
            Ends or cancels an asynchronous street search operation
            </summary>
            <remarks>Use in conjunction with <see cref="M:Telogis.GeoBase.DrillDownGeocoder.BeginGetStreets(String, AsyncCallback, Object)">BeginGetStreets</see>, and <see cref="M:Telogis.GeoBase.DrillDownGeocoder.EndGetStreets">EndGetStreets</see>.
            <para>See <see cref="M:Telogis.GeoBase.DrillDownGeocoder.BeginGetStreets(String, AsyncCallback, Object)">BeginGetStreets</see> for more details on using the asynchronous street search methods.</para>
            </remarks>
            <seealso cref="M:Telogis.GeoBase.DrillDownGeoCoder.BeginGetStreets(string, System.AsyncCallback, object)">BeginGetStreets</seealso>
            <seealso cref="M:Telogis.GeoBase.DrillDownGeoCoder.EndGetStreets">EndGetStreets</seealso>
        </member>
        <member name="M:Telogis.GeoBase.DrillDownGeoCoder.GetStreets(System.String)">
            <summary>
            Get the streets in the smallest set region that begin with the given search string
            </summary>
            <remarks><para><b>Related articles</b>: <a href="4196f9ed-1abf-4780-887f-47b2b046e80e.htm">Drill-down Geocoder Tutorial</a>.</para></remarks>
            <param name="streetName">The search string. Only street names beginning with this string will be returned.</param>
            <returns></returns>
        </member>
        <member name="M:Telogis.GeoBase.DrillDownGeoCoder.GetStreets(System.String,System.Int32)">
            <summary>
            Get the streets in the smallest set region that begin with the given search string
            </summary>
            <param name="streetName">The search string. Only street names beginning with this string will be returned.</param>
            <param name="timeOut">The maximum amount of time in milliseconds that the search is permitted to run for</param>
            <returns>A StreetSearchResult object that contains the status of the search and the results</returns>
            <remarks>If the search takes longer than the value of timeOut, the returned StreetSearchResult will not contain any results</remarks>
        </member>
        <member name="M:Telogis.GeoBase.DrillDownGeoCoder.IsSet(System.Int32)">
            <summary>
            Determine whether the specified level has been set to a particular region.
            </summary>
            <param name="level">The level in question</param>
            <returns>True if set, otherwise false</returns>
        </member>
        <member name="M:Telogis.GeoBase.DrillDownGeoCoder.ListSetRegions">
            <summary>
            Returns a list of regions corresponding to each level in the country.
            </summary>
            <returns><para>An array of RegionData objects that correspond to the levels
            in the DrillDownGeoCoder's country.</para><para>Any element may be null. 
            A null element indicates that a particular level has not been set to a 
            region.</para><para>The array index is directly mapped to the region level number
            thus, in the U.S. ListSetRegions()[0] corresponds to the set region for the
            State and ListSetRegions()[1] corresponds to the set region for the County.</para>
            </returns>
        </member>
        <member name="M:Telogis.GeoBase.DrillDownGeoCoder.Reset">
            <summary>
            Reset all the regions, allowing a clean start. 
            </summary>
            <remarks>The DrillDownGeocoder's state is reset completely to point initialization.</remarks>
        </member>
        <member name="M:Telogis.GeoBase.DrillDownGeoCoder.SetRegion(Telogis.GeoBase.RegionData)">
            <summary>
            Set the DrillDownGeocoder region
            </summary>
            <remarks><para><b>Related articles</b>: <a href="4196f9ed-1abf-4780-887f-47b2b046e80e.htm">Drill-down Geocoder Tutorial</a>.</para></remarks>
            <param name="rd"><see cref="T:Telogis.GeoBase.RegionData"/></param>
        </member>
        <member name="M:Telogis.GeoBase.DrillDownGeoCoder.Reset(System.Int32)">
            <summary>
            Reset a specified level.
            </summary>
            <param name="level">The level to reset</param>
            <remarks>Throws an exception if the level number is less than zero or greater than
            the maximum region level of this country. Remember that the larger the region level number,
            the more specific the region (ie, for the U.S., 0 = state and 1 = county)</remarks>
        </member>
        <member name="M:Telogis.GeoBase.DrillDownGeoCoder.SetPostcode(System.String)">
            <summary>
            Set a postcode for the DrillDownGeocoder to work with.
            </summary>
            <param name="postcode">The postcode, as a natural language string</param>
            <remarks>This is not necessary, but will improve the precision of the DrillDownGeocode</remarks>
        </member>
        <member name="M:Telogis.GeoBase.DrillDownGeoCoder.GetCurrentPostcode">
            <summary>
            Returns the postcode that the DrillDownGeocoder is currently working with.
            </summary>
            <returns>The current postcode, or null if there is no postcode set.</returns>
        </member>
        <member name="M:Telogis.GeoBase.DrillDownGeoCoder.GetPostCodeLocation">
            <summary>
            Get the general location of the currently set postcode. 
            See <see cref="M:Telogis.GeoBase.DrillDownGeoCoder.SetPostcode(System.String)">SetPostcode()</see> to set the postcode.
            </summary>
            <returns>A LatLon object containing the recorded coordinates of the postcode</returns>
            <remarks>If the latlon returned is not valid, this means that the geocoder does not recognize the postcode you entered.</remarks>
        </member>
        <member name="M:Telogis.GeoBase.DrillDownGeoCoder.Dispose">
            <summary>
            Use this method to free the resources allocated to the drilldown geocoder when it is no longer used
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.DrillDownGeoCoder.SearchNeighbouringRegions">
            <summary>
            Switch to turn on or off the search for neighbouring regions.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.DrillDownGeoCoder.Country">
            <summary>
            The country this DrillDownGeocoder was initialized to.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.DrillDownGeoCoder.NumRegionLevels">
            <summary>
            The maximum number of levels in the country's region hierarchy. The hierarchy is determined
            by the subdivision of administrative regions in the country. In the U.S. there are 3
            levels: State, County and City
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.Diagnostics.GBDebug">
            <summary>
            GeoBase debug utility class.
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.Diagnostics.GBDebug.AssertAndRecover(System.Boolean,Telogis.GeoBase.Diagnostics.GBDebug.RecoveryDelegate)">
            <summary>
            In debug builds, assert that a condition is true.  In release
            builds, if the condition is false then invoke the recovery delegate
            to recover the system state.
            </summary>
            <param name="condition">Condition to assert on.</param>
            <param name="recoveryDelegate">Delegate to recover system state in
            release builds.</param>
        </member>
        <member name="M:Telogis.GeoBase.Diagnostics.GBDebug.AssertAndRecover(System.Boolean,System.String,Telogis.GeoBase.Diagnostics.GBDebug.RecoveryDelegate)">
            <summary>
            In debug builds, assert that a condition is true.  In release
            builds, if the condition is false then invoke the recovery delegate
            to recover the system state.
            </summary>
            <param name="condition">Condition to assert on.</param>
            <param name="message">Assertion message.</param>
            <param name="recoveryDelegate">Delegate to recover system state in
            release builds.</param>
        </member>
        <member name="M:Telogis.GeoBase.Diagnostics.GBDebug.AssertAndRecover(System.Boolean,System.String,System.String,Telogis.GeoBase.Diagnostics.GBDebug.RecoveryDelegate)">
            <summary>
            In debug builds, assert that a condition is true.  In release
            builds, if the condition is false then invoke the recovery delegate
            to recover the system state.
            </summary>
            <param name="condition">Condition to assert on.</param>
            <param name="message">Assertion message.</param>
            <param name="detailMessage">Assertion detail message.</param>
            <param name="recoveryDelegate">Delegate to recover system state in
            release builds.</param>
        </member>
        <member name="T:Telogis.GeoBase.Diagnostics.GBDebug.RecoveryDelegate">
            <summary>
            Delegate that is invoked in release builds to recover system state.
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.GBCulture">
            <summary>
            Represents cultural information about GeoBase objects. This class
            can be used to map between a culture name and an IetfLanguageTag such as "en-US".
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.GBCulture.#ctor">
            <summary>
            Create a new GBCulture object.
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.GBCulture.#ctor(System.String,System.String)">
            <summary>
            Create and initialize a new GBCulture object.
            </summary>
            <param name="CultureIetfLanguageTag">IetfLanguageTag for this culture</param>
            <param name="CultureName">Name of this culture</param>
        </member>
        <member name="M:Telogis.GeoBase.GBCulture.ToString">
            <summary>
            Returns a string representation of the culture.
            </summary>
            <returns>The name of the culture.</returns>
        </member>
        <member name="P:Telogis.GeoBase.GBCulture.CultureIetfLanguageTag">
            <summary>
            The IetfLanguageTag (e.g. "en-US", "fr-FR") for this culture
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.GBCulture.CultureName">
            <summary>
            The display name for this culture
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.Serialization.JSONArray">
            <summary>
            An object that represents an array of CLR objects in a format that can be easily serialized
            to a string and deserialized from a string.  Each value in the array must be one of the
            following:
            <list type="bullet">
            <item>null</item>
            <item>a JSONObject</item>
            <item>another JSONArray</item>
            <item>a string</item>
            <item>a primitive type</item>
            </list>
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.Serialization.JSONArray.#ctor">
            <summary>
            Creates an empty JSONArray.
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.Serialization.JSONArray.#ctor(System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            Creates a JSONObject from a list of objects.
            </summary>
            <param name="copy">The list of objects.</param>
        </member>
        <member name="M:Telogis.GeoBase.Serialization.JSONArray.IndexOf(System.Object)">
            <summary>
            Returns the index of the given item.
            </summary>
            <param name="item">The item to look for.</param>
            <returns>The item's index.</returns>
        </member>
        <member name="M:Telogis.GeoBase.Serialization.JSONArray.Insert(System.Int32,System.Object)">
            <summary>
            Inserts an item at the given index.
            </summary>
            <param name="index">The index to insert at.</param>
            <param name="item">The item to insert.</param>
        </member>
        <member name="M:Telogis.GeoBase.Serialization.JSONArray.RemoveAt(System.Int32)">
            <summary>
            Removes the item at the given index.
            </summary>
            <param name="index">The index of the item to remove.</param>
        </member>
        <member name="M:Telogis.GeoBase.Serialization.JSONArray.Add(System.Object)">
            <summary>
            Adds an item to the array.
            </summary>
            <param name="item">The item to add.</param>
        </member>
        <member name="M:Telogis.GeoBase.Serialization.JSONArray.Clear">
            <summary>
            Clears the array.
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.Serialization.JSONArray.Contains(System.Object)">
            <summary>
            Determines whether the array contains the given item.
            </summary>
            <param name="item">The item to look up.</param>
            <returns>Whether the array contains the given item.</returns>
        </member>
        <member name="M:Telogis.GeoBase.Serialization.JSONArray.CopyTo(System.Object[],System.Int32)">
            <summary>
            Copies the array to the supplied array, starting at the given index.
            </summary>
            <param name="array">The array that will be populated with this array's
            contents.</param>
            <param name="arrayIndex">The index to start at.</param>
        </member>
        <member name="M:Telogis.GeoBase.Serialization.JSONArray.Remove(System.Object)">
            <summary>
            Removes the given item from the array.
            </summary>
            <param name="item">The item to remove.</param>
            <returns>Whether the item was in the array.</returns>
        </member>
        <member name="M:Telogis.GeoBase.Serialization.JSONArray.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the items in the array.
            </summary>
            <returns>An enumerator.</returns>
        </member>
        <member name="M:Telogis.GeoBase.Serialization.JSONArray.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the items in the array.
            </summary>
            <returns>An enumerator.</returns>
        </member>
        <member name="P:Telogis.GeoBase.Serialization.JSONArray.Item(System.Int32)">
            <summary>
            The item at the given index.
            </summary>
            <param name="index">The index of the item.</param>
            <returns>The item at that index.</returns>
        </member>
        <member name="P:Telogis.GeoBase.Serialization.JSONArray.Count">
            <summary>
            The count of items in the array.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Serialization.JSONArray.IsReadOnly">
            <summary>
            Whether the array is read-only.  Always false.
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.Serialization.JSONObject">
            <summary>
            An object that represents a CLR object in a format that can be easily serialized to a
            string and deserialized from a string.  Each field or property in the CLR object is
            represented by a key-value pair.  The key is the name of the field or property.  Each value
            must be one of the following:
            <list type="bullet">
            <item>null</item>
            <item>another JSONObject</item>
            <item>a JSONArray</item>
            <item>a string</item>
            <item>a primitive type</item>
            </list>
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.Serialization.JSONObject.#ctor">
            <summary>
            Creates an empty JSONObject.
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.Serialization.JSONObject.#ctor(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Creates a JSONObject from a dictionary of key-value pairs.
            </summary>
            <param name="copy">The dictionary of key-value pairs.</param>
        </member>
        <member name="M:Telogis.GeoBase.Serialization.JSONObject.Add(System.String,System.Object)">
            <summary>
            Adds a key-value pair to the object.
            </summary>
            <param name="key">The key, ie name of the field or property on the CLR object.</param>
            <param name="value">The value of the field or property on the CLR object.</param>
        </member>
        <member name="M:Telogis.GeoBase.Serialization.JSONObject.ContainsKey(System.String)">
            <summary>
            Calculates whether the object contains the given key.
            </summary>
            <param name="key">The key to look for.</param>
            <returns>Whether the object contains the given key.</returns>
        </member>
        <member name="M:Telogis.GeoBase.Serialization.JSONObject.Remove(System.String)">
            <summary>
            Removes the given key (CLR object's field or property name) from this object.
            </summary>
            <param name="key">The key to remove.</param>
            <returns>Whether the key was present.</returns>
        </member>
        <member name="M:Telogis.GeoBase.Serialization.JSONObject.TryGetValue(System.String,System.Object@)">
            <summary>
            Gets the value associated with the specified key (CLR object's field or property name).
            </summary>
            <param name="key">The key to look up.</param>
            <param name="value">The value that was looked up.</param>
            <returns>Whether the key is present.</returns>
        </member>
        <member name="M:Telogis.GeoBase.Serialization.JSONObject.Add(System.Collections.Generic.KeyValuePair{System.String,System.Object})">
            <summary>
            Adds a key-value pair to the object.
            </summary>
            <param name="item">The key-value pair to add.</param>
        </member>
        <member name="M:Telogis.GeoBase.Serialization.JSONObject.Clear">
            <summary>
            Clears all the keys and values from the object.
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.Serialization.JSONObject.Contains(System.Collections.Generic.KeyValuePair{System.String,System.Object})">
            <summary>
            Calculates whether the object contains the key in the given key-value pair.
            </summary>
            <param name="item">The key-value pair whose key is to be looked for.</param>
            <returns>Whether the object contains the given key.</returns>
        </member>
        <member name="M:Telogis.GeoBase.Serialization.JSONObject.CopyTo(System.Collections.Generic.KeyValuePair{System.String,System.Object}[],System.Int32)">
            <summary>
            Copies the key-value pairs in this object to the supplied array, starting at the given
            index.
            </summary>
            <param name="array">The array to populate with this object's key-value pairs.</param>
            <param name="arrayIndex">The index in the array to start at.</param>
        </member>
        <member name="M:Telogis.GeoBase.Serialization.JSONObject.Remove(System.Collections.Generic.KeyValuePair{System.String,System.Object})">
            <summary>
            Removes the key (CLR object's field or property name) in the given key-value pair from
            this object.
            </summary>
            <param name="item">The key-value pair whose key is to be removed.</param>
            <returns>Whether the key was present.</returns>
        </member>
        <member name="M:Telogis.GeoBase.Serialization.JSONObject.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the CLR object's fields or methods and
            their values.
            </summary>
            <returns>An enumerator.</returns>
        </member>
        <member name="M:Telogis.GeoBase.Serialization.JSONObject.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the CLR object's fields or methods and
            their values.
            </summary>
            <returns>An enumerator.</returns>
        </member>
        <member name="P:Telogis.GeoBase.Serialization.JSONObject.Keys">
            <summary>
            The keys (CLR object's field or property names) contained in this object.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Serialization.JSONObject.Values">
            <summary>
            The values (CLR object's field or property values) contained in this object.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Serialization.JSONObject.Item(System.String)">
            <summary>
            The value associated with the specified key (CLR object's field or property name).
            </summary>
            <param name="key">The key to look up.</param>
            <returns>The value associated with the key.</returns>
        </member>
        <member name="P:Telogis.GeoBase.Serialization.JSONObject.Count">
            <summary>
            The count of key-value pairs in this object.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Serialization.JSONObject.IsReadOnly">
            <summary>
            Whether this object is read-only.  Always false.
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.Diagnostics.LogType">
            <summary>
            A type containing valid values for LogEntry.LogType.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Diagnostics.LogType.Trace">
            <summary>
            The value associated with ILog.Trace.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Diagnostics.LogType.Debug">
            <summary>
            The value associated with ILog.Debug.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Diagnostics.LogType.Info">
            <summary>
            The value associated with ILog.Info.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Diagnostics.LogType.Warn">
            <summary>
            The value associated with ILog.Warn.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Diagnostics.LogType.Error">
            <summary>
            The value associated with ILog.Error.
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.Diagnostics.LogEntry">
            <summary>
            
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.Indexes.StringBTreeSearchOperation">
            <summary>
            A StringBTree allows fast searches for a prefix or an exact match on a set of strings.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Indexes.StringBTreeSearchOperation._disposed">
            <summary>
            Has this object been disposed?
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Indexes.StringBTreeSearchOperation._rows">
            <summary>
            Array that will hold details of a block of rows.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Indexes.StringBTreeSearchOperation._rowsGch">
            <summary>
            Handle to the _rows array.
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.Indexes.StringBTreeSearchOperation.#ctor">
            <summary>
            Creates a new StringBTreeSearchOperation.
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.Indexes.StringBTreeSearchOperation.Search(System.UInt32,System.String,Telogis.GeoBase.Indexes.StringBTreeSearchType,System.String,Telogis.GeoBase.Set{System.Int32},System.Int32,Telogis.GeoBase.Indexes.StringBTreeSearchOperation.RowHandler)">
            <summary>
            Searches StringBTrees for a given term.
            </summary>
            <param name="reposNo">The repository number.</param>
            <param name="filename">The name of the file to search: .gbd and .idx will be
            added.</param>
            <param name="searchType">Search type - exact or prefix searches are supported.</param>
            <param name="searchTerm">Term to search for.</param>
            <param name="treeIds">The IDs of the trees to search.</param>
            <param name="limit">Maximum number of rows to find.</param>
            <param name="rowHandler">Handler that will be called for each row.</param>
            <returns>The result of the search.</returns>
        </member>
        <member name="T:Telogis.GeoBase.Indexes.StringBTreeSearchOperation.RowHandler">
            <summary>
            Handler called for each row found in the tree.  Set result to SearchResult.Searching to
            continue the search.  Set it to any other value to stop searching and have Search
            return the supplied value.
            </summary>
            <param name="row">Details of a row that was found in the tree.</param>
            <param name="result">Set to SearchResult.Searching to continue searching, otherwise
            the search will stop and Search will return the supplied value.</param>
        </member>
        <member name="T:Telogis.GeoBase.Traffic.NavteqIncidentTrafficSource">
            <summary>
            This class supports NAVTEQ traffic incidents (such as an accident or road closure).
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.Traffic.NavteqIncidentTrafficSource.#ctor(System.Xml.XmlReader)">
            <summary>
            Construct a new <b>NavteqIncidentTraffic</b> from a given (NAVTEQ) XML data source
            </summary>
            <param name="reader"></param>
        </member>
        <member name="M:Telogis.GeoBase.GBMarshalHelper.DeDeltaPoints(System.IntPtr@,System.Int32,System.UInt32,System.UInt32,System.Boolean)">
             <summary>
            
             </summary>
             <param name="points">This is ref so that the pointer is updated for polys with multiple rings</param>
             <param name="num_points"></param>
             <param name="start_x"></param>
             <param name="start_y"></param>
             <param name="doZ"></param>
             <returns></returns>
        </member>
        <member name="F:Telogis.GeoBase.GBMarshalHelper.gb_address.street_flags">
            <summary>
            By mask 0x07 Direction, 0x08 Stale / Postal, 0x10 Name on Sign, 0xE0 Route Type
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.GBMarshalHelper.gb_street_match">
            <summary>
            Equivalent of the street_match struct in gb_geocode.c
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.GBMarshalHelper.addOffsetDelegate">
            <summary>
            Delegate used by searchOffsets function in unmanaged code to return multiple offsets for the same street index
            </summary>
            <param name="idx">Index in the results array to be returned</param>
            <param name="offset">Offset of street</param>
            <param name="fakezip">Fake zip code of street</param>
            <param name="nameptr">Pointer to name</param>
        </member>
        <member name="T:Telogis.GeoBase.GBMarshalHelper.sendBackPostCodeDelegate">
            <summary>
            Delegate used by GeoBaseGetFullPostcodesOnStreet in unmanaged code to return all the postcodes on a street in a fakezip
            </summary>
            <param name="min">smallest address in postcode</param>
            <param name="max">largest address in postcode</param>
            <param name="suffix">Suffix</param>
        </member>
        <member name="T:Telogis.GeoBase.GBMarshalHelper.gb_searchStreetParams">
            <summary>
            Equivalent of the searchStreetParams struct in gb_geocode.c
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.RouteStop">
             <summary>
             Represents a stop on a route. Fields include the location of the stop,
             a description of the stop and the nearest intersection.
             </summary>
             <remarks>
             A RouteStop holds information about a stop on a
             route. Such information includes a description
             of the stop.
             <para><b>Related articles</b>: <a href="7149832b-c202-4c69-9716-d4fc2876aaa4.htm">Routing Concept</a>, 
             <a href="70746bb6-4c27-4ed5-a312-1faa1f86a3bf.htm">Map Control Tutorial</a>, 
             <a href="14ad9e39-768a-4a15-9e0e-c7d3dd2b7d25.htm">Creating a Route</a>, 
             <a href="a73972ff-629b-4c51-b1d4-6c096d75b1b2.htm">Delivery Time Windows</a>, 
             <a href="60998f81-efa9-4743-afcc-6e6f943a4fa1.htm">Routing with Traffic</a>.</para>
             </remarks>
             <example><code lang="C#">
             RouteStop rs = new RouteStop(new LatLon(33.648720, -117.733774));
             // ^^ creates a new routestop at Telogis HQ
            
             rs.Description = "Telogis HQ";
             // ^^ sets description field, so if used as a destination the directions
             // will read similar to: "Telogis HQ is on the left 50 yards after Beach Street"
             </code></example>
        </member>
        <member name="F:Telogis.GeoBase.RouteStop.Location">
            <summary>
            Location of the stop point, as a <see cref="T:Telogis.GeoBase.LatLon"/>.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.RouteStop.TimeSpentAtStop">
            <summary>
            Time spent at the stop. Used when optimizing with Time Windows. In most cases this 
            will be the average time. For Breaks though it may be different from the 
            average time.
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.RouteStop.Clone">
            <summary>
            Used to create an identical instance (clone) of a <see cref="T:Telogis.GeoBase.RouteStop"/>.
            </summary>
            <returns>A new <see cref="T:Telogis.GeoBase.RouteStop"/> instance, identical to this instance.</returns>
        </member>
        <member name="F:Telogis.GeoBase.RouteStop.m_Point">
            <summary>
            The <see cref="T:Telogis.GeoBase.LatLon">coordinates</see> of this <see cref="T:Telogis.GeoBase.RouteStop"/>.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.RouteStop.Load">
             <summary>
             Quantity of goods to be delivered (or collected). Not yet implemented.
             </summary>
             <remarks>
             A flexible value which can be used by the customer to determine
             the quantity of goods that will be moved on or off the
             vehicle at this point. For example:<br/>
             A van delivering boxes of chips might have a load
             value of -10 boxes of chips.<br/>
             A truck picking up an oven might have a load value
             of +2 cubic meters.
            </remarks>
        </member>
        <member name="F:Telogis.GeoBase.RouteStop.SkillsRequired">
             <summary>
             Specific 'skills' that this stop requires. Must match a bit in the vehicle skills map.
             Not yet implemented.
             </summary>
             <remarks>
             Skills represent special conditions that a given stop requires.
             A couple of examples:<br/>
             A company that does piping repairs sends one of its vans to
             fix a gas pipe. The required skill is that the person attending
             this call have the necessary certification to perform gas pipe
             repairs.<br/>
             A package delivery company sends one of its trucks to a
             site to pick up a large package. The 'skill' required is that
             the truck have a mechanical lifting &amp; loading mechanism.
            </remarks>
        </member>
        <member name="F:Telogis.GeoBase.RouteStop.IncompatibleLoads">
            <summary>
            Array of stops whose loads should not be carried with the load for this stop.
            Dynamite shouldn't be with matches. Not yet implemented.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="F:Telogis.GeoBase.RouteStop.DontLoadBefore">
            <summary>
            Array of stops whose load must not be loaded before this stop.
            Not yet implemented.
            </summary>
            <remarks>Steel should not be loaded before eggs.</remarks>
        </member>
        <member name="M:Telogis.GeoBase.RouteStop.#ctor(System.Double,System.Double)">
            <summary>
            Create a RouteStop at the given <see cref="T:Telogis.GeoBase.LatLon"/> location.
            </summary>
            <param name="lat">The latitude to stop at.</param>
            <param name="lon">The longitude to stop at.</param>
        </member>
        <member name="M:Telogis.GeoBase.RouteStop.#ctor(Telogis.GeoBase.LatLon)">
            <summary>
            Create a RouteStop at the given <see cref="T:Telogis.GeoBase.LatLon"/> location.
            </summary>
            <param name="loc">The location to stop at.</param>
        </member>
        <member name="M:Telogis.GeoBase.RouteStop.HasSubscribers">
            <summary>
            Returns true if anything is subscribed to events from this RouteStop.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Telogis.GeoBase.RouteStop.Render(System.Drawing.Graphics,Telogis.GeoBase.RenderContext)">
            <summary>
            Render this RouteStop.
            </summary>
            <param name="graphics">The <see cref="T:System.Drawing.Graphics"/> responsible for drawing this RouteStop.</param>
            <param name="rc">The <see cref="T:Telogis.GeoBase.RenderContext"/> upon which this RouteStop should be rendered.</param>
        </member>
        <member name="M:Telogis.GeoBase.RouteStop.HitTest(System.Drawing.Point,Telogis.GeoBase.IMap)">
            <summary>
            Perform a <see cref="M:Telogis.GeoBase.IMapMouseHandler.HitTest(System.Int32,System.Int32,Telogis.GeoBase.IMap)"/>.
            </summary>
            <param name="p">Point</param>
            <param name="aMap">The <see cref="T:Telogis.GeoBase.IMap"/> upon which the click occurred.</param>
            <returns></returns>
        </member>
        <member name="M:Telogis.GeoBase.RouteStop.BuildRectangle(System.Int32,System.Int32)">
            <summary>
            Returns the rectangle for whatever widget we drew on the map.
            If we don't have a heading, this will be the rectangle around the
            text we drew. If we do have a heading, it will be the rectangle for
            the icon (except on CE, where we never draw icons anyway).
            </summary>
            <param name="x1"></param>
            <param name="y1"></param>
            <returns></returns>
        </member>
        <member name="M:Telogis.GeoBase.RouteStop.HitTest(System.Int32,System.Int32,Telogis.GeoBase.IMap)">
            <summary>
            Perform a <see cref="M:Telogis.GeoBase.IMapMouseHandler.HitTest(System.Int32,System.Int32,Telogis.GeoBase.IMap)"/>.
            </summary>
            <param name="x">x coordinate</param>
            <param name="y">y coordinate</param>
            <param name="aMap">The <see cref="T:Telogis.GeoBase.IMap"/> upon which the click occurred.</param>
            <returns></returns>
        </member>
        <member name="M:Telogis.GeoBase.RouteStop.IsRoutable">
            <summary>
            Determines whether the RouteStop can be routed to or from.
            </summary>
            <returns>Whether the RouteStop can be routed to or from.</returns>
        </member>
        <member name="P:Telogis.GeoBase.RouteStop.IconNumber">
            <summary>
            Sets the type of icon displayed for the stop.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.RouteStop.DrawHandle">
            <summary>
            Set to true to display a handle on the RouteStop icon. The handle allows the 
            user to rotate the heading of the stop.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.RouteStop.Description">
            <summary>
            Description of the stop. See remarks.
            </summary>
            <remarks>When directions are generated using this RouteStop the description field (if populated)
            will be used in the appropriate place in the <see cref="P:Telogis.GeoBase.Routing.Direction.Instructions"/>. For example, if
            <see cref="P:Telogis.GeoBase.RouteStop.Description"/> is set to "Home Base", the directions for this stop would read
            something similar to: "'Home Base' is on the left 132 yards after 'Maple Avenue'"
            </remarks>
        </member>
        <member name="P:Telogis.GeoBase.RouteStop.DirectToNext">
            <summary>
            Whether the unit should just go straight to the next stop in the
            route history.  Calculated by native code, and used when
            calculating a route highlight.
            </summary>   		
        </member>
        <member name="P:Telogis.GeoBase.RouteStop.FullStopIndex">
            <summary>
            Index in the FullStops array. Used when optimizing stops with windows.
            </summary> 
        </member>
        <member name="P:Telogis.GeoBase.RouteStop.RoadIntersection">
            <summary>
            Point where you enter or exit the street network to get to this stop.
            </summary>
            <remarks>
            RoadIntersection will generally be null, the Routing Engine will Reverse GeoCode
            the <see cref="F:Telogis.GeoBase.RouteStop.Location"/> and use an implied intersection as the entry point to
            the street network.
            </remarks>
        </member>
        <member name="P:Telogis.GeoBase.RouteStop.WindowStart">
            <summary>
            Earliest delivery time.
            </summary>
            <remarks><para><b>Related articles</b>: <a href="a73972ff-629b-4c51-b1d4-6c096d75b1b2.htm">Delivery Time Windows</a>.</para></remarks>
        </member>
        <member name="P:Telogis.GeoBase.RouteStop.WindowEnd">
            <summary>
            Latest delivery time.
            </summary>
            <remarks><para><b>Related articles</b>: <a href="a73972ff-629b-4c51-b1d4-6c096d75b1b2.htm">Delivery Time Windows</a>.</para></remarks>
        </member>
        <member name="P:Telogis.GeoBase.RouteStop.AverageTime">
            <summary>
            Average time spent at this stop. For <see cref="T:Telogis.GeoBase.Break"/>s, the average 
            time must be greater than or equal to the minimum time.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.RouteStop.Penalty">
             <summary>
             Represents a penalty incurred for missing the alloted window. The penalty must be positive
             number.
             </summary>
             <remarks>
             A penalty could be used by the customer to track the perfomance
             of vehicles with respect to the windows of time alloted for each
             RouteStop. For example, a vehicle might lose 10 'points' for each
             minute spent at a stop after the time window is up.
             <para><b>Related articles</b>: <a href="a73972ff-629b-4c51-b1d4-6c096d75b1b2.htm">Delivery Time Windows</a>.</para>
            </remarks>
        </member>
        <member name="P:Telogis.GeoBase.RouteStop.Tag">
            <summary>
            For external use - set to whatever you like.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.RouteStop.Heading">
            <summary>
            The heading for this route stop. This value will be used to choose which street this
            RouteStop belongs on - GeoBase will try to route to a street that is aligned with
            this heading. For example, this can be used to avoid accidentally routing from a
            cross street. If this value is <i>float.NaN</i>, then this behavior will be ignored.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.RouteStop.TimeSincePreviousStop">
            <summary>
            Time in seconds since the unit was at the previous stop in the
            route history.  Used when calculating a route highlight.  Set to
            0 for the first stop, and 120 for all other stops where the information is
            unknown.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.RouteStop.Speed">
            <summary>
            The unit's speed, in knots, when it was at this stop in the route
            history.  Used when calculating a route highlight.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.RouteStop.IgnitionOn">
            <summary>
            Whether the unit's ignition was on when it was at this stop in the
            route history. Used when calculating a route highlight.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.RouteStop.StopNumber">
            <summary>
            The Number of this stop. Set by the routing engine
            </summary>
            <remarks>
            To set an identifier for the stop use the Tag property.
            </remarks>
        </member>
        <member name="P:Telogis.GeoBase.RouteStop.Start">
            <summary>
            If <b>true</b> this stop is the start point for the route.
            </summary>
            <remarks>
            If there is a start the route will always optimize with the given start
            point at the start. Otherwise the start point that would give the best route
            is chosen. Similarly, a route with an end point will always optimize with
            that fixed end point and if an end point is not defined the 'best' (as defined
            by the routing engine) candidate from all stops will be chosen as the end point.
            Start points are (by default) colored dark green.
            </remarks>
        </member>
        <member name="P:Telogis.GeoBase.RouteStop.End">
            <summary>
            If <b>true</b> this stop is the end point for the route.
            See <see cref="P:Telogis.GeoBase.RouteStop.Start"/> for more details.
            </summary>
            <remarks>End points are colored red, see <see cref="P:Telogis.GeoBase.RouteStop.Start"/> for an example of
            how to change this color.</remarks>
        </member>
        <member name="P:Telogis.GeoBase.RouteStop.RenderBrush">
            <summary>
            A <see cref="T:System.Drawing.Brush"/> used to color this stop.
            </summary>
            <remarks>The default colour for the RenderBrush is yellow for regular <see cref="T:Telogis.GeoBase.RouteStop"/>s
            and grey for <see cref="T:Telogis.GeoBase.Break"/>s. If a RouteStop is part of a <see cref="T:Telogis.GeoBase.Routing.Route"/>,
            a fixed start will be coloured green, a fixed end will be coloured red, otherwise it will use the
            default yellow or grey.
            </remarks>
            <example>To override the default colour of a RouteStop, change RenderBrush
            <code lang="C#">
                ...
                // Create our new RouteStop
                RouteStop rs = new RouteStop(myLatLon);
                ...
                rs.RenderBrush = Brushes.MediumAquamarine;
                // rs will now be rendered a blueish color
                ...
            </code></example>
        </member>
        <member name="P:Telogis.GeoBase.RouteStop.RequiredRendermodes">
            <summary>
            Gets the <see cref="T:Telogis.GeoBase.RenderMode">RenderMode</see> required by this <b>RouteStop</b>
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.RouteStop.MapMouseEventsHandler">
            <summary>
            Gets the <see cref="T:Telogis.GeoBase.MapMouseEventsHandler"/> for this RouteStop.
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.Waypoint">
            <summary>
            Represents a Waypoint on a route. 
            </summary>
            <remarks>
            <para><b>Related articles</b>: <a href="bca3b8a4-3b27-4fe9-ad1a-dab66a4e2831.htm">Routing and Directions</a>.</para>
            </remarks>
        </member>
        <member name="M:Telogis.GeoBase.Waypoint.#ctor(Telogis.GeoBase.LatLon)">
            <summary>
            Creates a Waypoint at the given location.
            </summary>
            <param name="loc">The <see cref="T:Telogis.GeoBase.LatLon"/> at which to place the waypoint.</param>
            <remarks>
            A Waypoint is used to influence how a Route is calculated: it is used in a similar 
            fashion to a RouteStop, but unlike RouteStops, Waypoints will not appear in Directions. 
            In other words, if a Route comprises RouteStops and Waypoints, although the route will 
            pass through both RouteStops and Waypoints, only the RouteStops will be disclosed in 
            the Directions. 
            <para>When added to a MapCtrl, Waypoints are rendered as circles (as opposed to squares for RouteStops), 
            and will snap to the nearest street.
            </para>
            <para>Waypoints can not be used with a RouteMatrix, Route Highlighting, or OptimizeStops.</para>
            </remarks>
            <example>
            The code snippet below creates a Waypoint at the given LatLon, and then displays it on the MapCtrl 
            object by adding it to the renderer list.
            <code>
            //Create Waypoint
            Waypoint wp = new Waypoint(new LatLon(37.71971, -122.08319));
            
            //Add to renderer
            RendererList rl = new RendererList();
            rl.Add(wp);
            mapCtrl.Renderer = rl;
            </code>
            </example>
        </member>
        <member name="M:Telogis.GeoBase.Waypoint.#ctor(System.Double,System.Double)">
            <summary>
            Creates a Waypoint at the given latitude and longitude
            </summary>
            <param name="lat">The latitude of the Waypoint.</param>
            <param name="lon">The longitude of theWayPoint.</param>
        </member>
        <member name="T:Telogis.GeoBase.Break">
            <summary>
            Represents a Break on a route.
            </summary>
            <remarks>
            <para><b>Related articles</b>: <a href="bca3b8a4-3b27-4fe9-ad1a-dab66a4e2831.htm">Routing and Directions</a>, 
            <a href="8a4f9672-fbc0-4370-893f-aa2524ef591d.htm">Breaks and Time Window Optimization</a>.</para>
            </remarks>
        </member>
        <member name="M:Telogis.GeoBase.Break.#ctor(Telogis.GeoBase.LatLon)">
            <summary>
            Creates a Break at the given location. To create a Break with no specific location, use LatLon.Empty
            as in the following example.
            <code>
            // Create Break with no specific location
            Break br = new Break(LatLon.Empty);
            </code>
            </summary>
            /// <remarks> 
            <para>Breaks without location cannot be used with a RouteMatrix, Route Highlighting, or Directions.</para>
            </remarks>
            <param name="loc">The <see cref="T:Telogis.GeoBase.LatLon"/> at which to place the Break.</param>
        </member>
        <member name="M:Telogis.GeoBase.Break.#ctor(System.Double,System.Double)">
            <summary>
            Creates a Break at the given latitude and longitude.
            </summary>
             <example>
            <code lang="C#">
            // Create a new Break at lat 34, lon -118
            Break br = new Break(34.0, -118.0);
            </code>
            </example>
            <param name="lat">The latitude to stop at.</param>
            <param name="lon">The longitude to stop at.</param>
        </member>
        <member name="P:Telogis.GeoBase.Break.TimeIncludesExtraTravel">
            <summary>
            If true, extra time taken for travel to the location of the Break is taken out of the
            time for the Break, up to the minimum time available. This is only used for breaks 
            which have a specific location.
            </summary>
            <example>
            <code lang="C#">
            Break br = new Break(33.59142,-117.73433);
            // Average time at the Break is 30 minutes
            br.AverageTime = new TimeSpan(0,30,0);
            // Minimum time at the Break is 10 minutes
            br.MinimumTime = new TimeSpan(0,10,0);
            // Any extra travel time will be taken out of the Break, up to the MinimumTime
            br.TimeIncludesExtraTravel = true;
            </code>
            </example>
        </member>
        <member name="P:Telogis.GeoBase.Break.StartTimeIsFixed">
            <summary>
            For Breaks with no specific location, this property makes the time window begin and end
            at the WindowStart time. The Break will begin at the WindowStart time unless the penalties
            set for the optimization make it too costly to do so. The WindowStart property must be set
            to use the StartTimeIsFixed property. This property has no effect it the Break has a location.
            </summary>
            <example>
            <code lang="C#">
            // A break with no location
            Break br = new Break(LatLon.Empty);
            // Window start time of 9am
            br.WindowStart = DateTime.Parse("09:00:00").ToUniversalTime();
            br.StartTimeIsFixed = true;
            // Break will begin at 9am if not too costly.
            </code>
            </example>
        </member>
        <member name="P:Telogis.GeoBase.Break.MinimumTime">
            <summary>
            Minimum time to be spent at the Break. If the minimum time to be set exceeds the 
            average time, the average time is increased to equal the minimum time.
            </summary>
            <example>
            <code lang="C#">
            Break br1 = new Break(33.59142,-117.73433);
            br1.MinimumTime = new TimeSpan(0,10,0);
            
            Break br2 = new Break(33.59142,-117.73433);
            br2.AverageTime = new TimeSpan(0,5,0);
            br2.MinimumTime = new TimeSpan(0,10,0);
            
            Break br3 = new Break(33.59142,-117.73433);
            br3.AverageTime = new TimeSpan(0,20,0);
            br3.MinimumTime = new TimeSpan(0,10,0);
            
            // The MinimumTime and AverageTime for br1 are both 10 mins.
            // The MinimumTime and AverageTime for br2 are both 10 mins.
            // The MinimumTime is 10mins and AverageTime is 20mins for br3.
            </code>
            </example>
        </member>
        <member name="T:Telogis.GeoBase.RendererList">
             <summary>
             A Collection of Renderers which allows multiple <see cref="T:Telogis.GeoBase.IMapRenderer"/>s
             to draw on the same <see cref="T:Telogis.GeoBase.IMap"/>.
             </summary>
             <remarks>
             An <see cref="T:Telogis.GeoBase.IMap"/> can only have one <see cref="T:Telogis.GeoBase.IMapRenderer"/>
             assigned to it at a time. To allow multiple <see cref="T:Telogis.GeoBase.IMapRenderer"/>s
             to draw on a single map, a <see cref="T:Telogis.GeoBase.RendererList"/> should be used.
             <para>Each <see cref="T:Telogis.GeoBase.IMapRenderer"/> added to the <see cref="T:Telogis.GeoBase.RendererList"/>
             will have its <see cref="M:Telogis.GeoBase.IMapRenderer.Render(System.Drawing.Graphics,Telogis.GeoBase.RenderContext)"/> method called. These
             will be called in the order that the <see cref="T:Telogis.GeoBase.IMapRenderer"/>s were
             added to the <see cref="T:Telogis.GeoBase.RendererList"/>.
             <see cref="T:Telogis.GeoBase.IMapRenderer"/>s can be added to the <see cref="T:Telogis.GeoBase.RendererList"/>
             using the <see cref="M:Telogis.GeoBase.RendererList.Add(System.Object)"/> method.	
             </para>
             <para><b>Related articles</b>: <a href="9af7c41f-fabe-48be-9317-1e019cc19c33.htm">Map Concept</a>, 
             <a href="7149832b-c202-4c69-9716-d4fc2876aaa4.htm">Routing Concept</a>, 
             <a href="db780b3f-ffb3-496b-b36d-a068907e7244.htm">Using Notifications and Events</a>, 
             <a href="49fe38bf-ca0a-4750-af1b-5d814b172684.htm">Renderers Tutorial</a>, 
             <a href="929e54d5-f994-4e7e-aa42-c3920a2d7c30.htm">Using Multiple Renderers</a>, 
             <a href="fe19284f-8b0d-4ec7-a801-c1e70f3180ce.htm">Render Modes in Detail</a>.</para>
             </remarks>
             <example>
             The most common use for a RendererList is to control the rendering of multiple
             objects on a <see cref="T:Telogis.GeoBase.MapCtrl"/>:
             <code lang="C#">
             RendererList rlist = new RendererList();
             myMapCtrl.Renderer = rlist;
             </code>
             We can create objects (which implement <see cref="T:Telogis.GeoBase.IMapRenderer"/>)
             and add/remove the objects from our RendererList as desired.
             <code lang="C#">
             // pushpin in Los Angeles
             PushPin pp = new PushPin(new LatLon(34, -118)); 
            
             // Circular geofence in San Diego
             CircleFence cfence = new CircleFence();
             cfence.SetRadius(50, DistanceUnit.MILES);
             cfence.Center = new LatLon(33,-117);
             
             rlist.Add(cfence);
             rlist.Add(pp);
             myMapCtrl.Invalidate();
             // ...both the CircleFence and PushPin will be drawn on the map
             
             ...
             
             rlist.Remove(cfence);
             myMapCtrl.Invalidate();
             // ...now only the PushPin will be drawn on the map
             </code>
             By invalidating the MapCtrl we ensure that the map will be redrawn to reflect the
             changes we have made to it's RendererList.
             </example>
        </member>
        <member name="F:Telogis.GeoBase.RendererList.m_RendererModes">
            <summary>
            The <see cref="T:Telogis.GeoBase.RenderMode">RenderMode</see> in which this <b>RendererList</b> should be drawn.
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.RendererList.#ctor">
            <summary>
            Creates an empty RendererList.
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.RendererList.#ctor(Telogis.GeoBase.IMapRenderer[])">
            <summary>
            Creates a RendererList from the given renderers.
            </summary>
            <param name="renderers">The renderers to add to the RendererList.</param>
        </member>
        <member name="M:Telogis.GeoBase.RendererList.Render(System.Drawing.Graphics,Telogis.GeoBase.RenderContext)">
            <summary>
            Render all <see cref="T:Telogis.GeoBase.IMapRenderer"/>s on the given <see cref="T:Telogis.GeoBase.IMap"/>.
            </summary>
            <remarks>
            Items are rendered in the order they were added to the collection. The last
            <see cref="T:Telogis.GeoBase.IMapRenderer"/> added to the collection will be drawn last and will
            appear on top.
            </remarks>
            <param name="graphics">The <see cref="T:System.Drawing.Graphics"/> object responsible for drawing on this map.</param>
            <param name="rc">The <see cref="T:Telogis.GeoBase.RenderContext"/> that is being drawn on.</param>
        </member>
        <member name="M:Telogis.GeoBase.RendererList.Add(System.Object)">
            <summary>
            Adds an <see cref="T:Telogis.GeoBase.IMapRenderer"/> to the end of the RendererList.
            </summary>
            <exception cref="T:System.ArgumentException">Thrown when the value passed does not implement <see cref="T:Telogis.GeoBase.IMapRenderer"/>.</exception>
            <param name="value">The <see cref="T:Telogis.GeoBase.IMapRenderer"/> to add to the list.</param>
            <returns>The index at which the renderer has been added.</returns>
        </member>
        <member name="M:Telogis.GeoBase.RendererList.HitTest(System.Int32,System.Int32,Telogis.GeoBase.IMap)">
            <summary>
            If this RendererList is <see cref="P:Telogis.GeoBase.RendererList.Visible"/>, check if
            any of the objects in the list are located at the specified x and y coordinates.</summary>
            <remarks>
            Iterates through each object in this RendererList, calling the <see cref="M:Telogis.GeoBase.IMapMouseHandler.HitTest(System.Int32,System.Int32,Telogis.GeoBase.IMap)"/>
            method of each one. If one of these objects is hit, it is returned. If the iteration reaches
            the end of the list without a hit, null is returned.</remarks>
            <param name="x">The int x coordinate.</param>
            <param name="y">The int y coordinate.</param>
            <param name="aMap">The <see cref="T:Telogis.GeoBase.IMap"/> upon which the click occurred.</param>
            <returns></returns>
        </member>
        <member name="P:Telogis.GeoBase.RendererList.Visible">
            <summary>
            Sets whether the items in this RendererList should be drawn.
            </summary>
            <value>The current visibility of this <see cref="T:Telogis.GeoBase.RendererList"/>.</value>
        </member>
        <member name="P:Telogis.GeoBase.RendererList.MapMouseEventsHandler">
             <summary>
             Gets the events object for the list, always returns <b>null</b>.
             </summary>
             <remarks>
             This always returns <b>null</b> because the RendererList does not
             handle mouse events itself. Such events are handled by individual
             objects in the list. 
            </remarks>
        </member>
        <member name="P:Telogis.GeoBase.RendererList.RequiredRendermodes">
            <summary>
            Gets the rendermode in which this <b>RendererList</b> is drawn.
            </summary>
            <remarks>
            See <see cref="T:Telogis.GeoBase.RenderMode">Telogis.GeoBase.RenderMode</see>
            </remarks>
        </member>
        <member name="T:Telogis.GeoBase.PushPin">
             <summary>
             A light-weight object that can be quickly drawn on a <see cref="T:Telogis.GeoBase.IMap">map</see>.
             </summary>
             <remarks>
             <img src="Art/geobase_pushpin.png"></img>
             <para>A push pin is a light-weight object that can be drawn on an <see cref="T:Telogis.GeoBase.IMap"/> to
             display information. An example of this is the <see cref="T:Telogis.GeoBase.BalloonPushPin"/> which can be used
             to show name and address details for a given location on the map. Push pins can be made
             to respond to mouse clicks by implementing the <see cref="T:Telogis.GeoBase.IMapMouseHandler"/> interface.</para>
             <para>You may</para>
             <para><b>Related articles</b>: <a href="70746bb6-4c27-4ed5-a312-1faa1f86a3bf.htm">Map Control Tutorial</a>, 
             <a href="440bb76f-ec6e-4392-8bc8-9ac5121d7bc2.htm">Mouse Events</a>.</para>
            </remarks>
        </member>
        <member name="F:Telogis.GeoBase.PushPin.Tag">
            <summary>
            A user object containing data to associate with this PushPin.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.PushPin.mLocation">
            <summary>
            Location of the PushPin.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.PushPin.px">
            <summary>
            Pixel location of the pushpin.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.PushPin.py">
            <summary>
            Pixel location of the pushpin.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.PushPin.mIcon">
             <summary>
             Number of the Icon to use. See <see cref="T:Telogis.GeoBase.ImageUtils.IconCache"/> for details.
             </summary>
             <remarks>
             The Icon number comes from the position of the Icon in
             the <see cref="T:Telogis.GeoBase.ImageUtils.IconCache"/>'s array.
            </remarks>
        </member>
        <member name="M:Telogis.GeoBase.PushPin.#ctor(Telogis.GeoBase.LatLon)">
            <summary>
            Create a new push pin at the given location (as a <see cref="T:Telogis.GeoBase.LatLon"/>).
            </summary>
            <param name="location">A <see cref="T:Telogis.GeoBase.LatLon"/> describing the push pin's intended location.</param>
        </member>
        <member name="M:Telogis.GeoBase.PushPin.#ctor(Telogis.GeoBase.LatLon,System.Int32)">
            <summary>
            Create a new push pin at the given location (as a <see cref="T:Telogis.GeoBase.LatLon"/>) with a selected icon.
            </summary>
            <remarks>See <see cref="P:Telogis.GeoBase.PushPin.Icon"/>.</remarks>
            <param name="location">A <see cref="T:Telogis.GeoBase.LatLon"/> describing the push pin's intended location.</param>
            <param name="Icon">The icon number. See <see cref="T:Telogis.GeoBase.ImageUtils.IconCache"/>.</param>
        </member>
        <member name="F:Telogis.GeoBase.PushPin.m_alwaysOnTop">
            <summary>
            Controls whether labels are always shown above other map elements. 
            See <see cref="P:Telogis.GeoBase.PushPin.AlwaysOnTop">AlwaysOnTop</see> to modify this behaviour.
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.PushPin.Render(System.Drawing.Graphics,Telogis.GeoBase.RenderContext)">
            <summary>
            Render push pins on the given map.
            </summary>
            <remarks>Doesn't draw the push pin unless its location is within the boundaries of the given <see cref="T:Telogis.GeoBase.IMap"/>.</remarks>
            <param name="graphics">The <see cref="T:System.Drawing.Graphics"/> object responsible for drawing the push pin.</param>
            <param name="rc">The <see cref="T:Telogis.GeoBase.RenderContext"/> onto which the push pin is to be drawn.</param>
        </member>
        <member name="P:Telogis.GeoBase.PushPin.Location">
            <summary>
            Gets or sets the location (as a <see cref="T:Telogis.GeoBase.LatLon"/>) of the push pin.
            </summary>
            <remarks>
            This method is intended to move the push pin, or check its location.
            Hotspot co-ordinates can be used to ensure that the correct part of the push pin is
            rendered over this location. See <see cref="T:Telogis.GeoBase.ImageUtils.IconCache"/>.
            </remarks>
        </member>
        <member name="P:Telogis.GeoBase.PushPin.Icon">
            <summary>
            Gets or sets the Icon number. See <see cref="T:Telogis.GeoBase.ImageUtils.IconCache"/> for details.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.PushPin.AlwaysOnTop">
            <summary>
            Controls whether labels are always shown above other map elements.
            </summary>
            <remarks>When <b>true</b> labels are always drawn 'on top', otherwise they may be hidden by
            other elements on the map.</remarks>
        </member>
        <member name="P:Telogis.GeoBase.PushPin.RequiredRendermodes">
            <summary>
            Gets the <see cref="T:Telogis.GeoBase.RenderMode">RenderMode</see> required by this <b>PushPin</b>
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.DirectionalPushPin">
            <summary>
            A light-weight push pin that may be rotated to a specified <see cref="P:Telogis.GeoBase.DirectionalPushPin.Heading"/> before being drawn.
            For example, a DirectionalPushPin could be used to describe the direction and position of a truck.
            </summary>
            <remarks>
            <para>For best results you should use an icon that is rotatable about
            its center (that is, the hotspot of the icon is at (width/2, height/2).</para>
            
            <para><see cref="P:Telogis.GeoBase.DirectionalPushPin.Heading"/> values are automatically kept within 360
            degrees, but ensuring that the heading results in a visually appropriate rotation
            is your responsibility.</para>
            </remarks>
            <example><code lang="C#">
            // load our icon for the pushpin
            int cacheIndex = ImageUtils.IconCache.LoadIcon("C:\path_to_icon\bus.png");
            
            // location for the pushpin
            LatLon ll = new LatLon(34.0, -118.0); 
            
            // heading for the pushpin - we could also get this from a GPS unit,
            // see Navigation.Navigator.Heading ...
            float head = 72;  // rotated 72 degrees clockwise
            
            // create the DirectionalPushPin
            DirectionalPushPin dpp = new DirectionalPushPin(ll, head, cacheIndex);
            
            ...
            
            // add to the RendererList so it gets drawn on the map
            myRendererList.Add(dpp);
            </code></example>
        </member>
        <member name="M:Telogis.GeoBase.DirectionalPushPin.#ctor(Telogis.GeoBase.LatLon,System.Single,System.Int32)">
            <summary>
            Create a new DirectionalPushPin with a given location, heading and icon.
            </summary>
            <remarks>
            <para>
            Icon numbers are determined by the location of the given icon within the
            <see cref="T:Telogis.GeoBase.ImageUtils.IconCache"/>.</para>
            <para>See <see cref="P:Telogis.GeoBase.DirectionalPushPin.Heading"/> for additional information
            on the heading parameter.</para>
            </remarks>
            <param name="location">A <see cref="T:Telogis.GeoBase.LatLon"/> location for the DirectionalPushPin.</param>
            <param name="heading">A heading (in degrees) in which the DirectionalPushPin will point.</param>
            <param name="icon">The location of the requested icon in the <see cref="T:Telogis.GeoBase.ImageUtils.IconCache"/>.</param>
        </member>
        <member name="M:Telogis.GeoBase.DirectionalPushPin.#ctor(Telogis.GeoBase.LatLon)">
            <summary>
            Create a directional push pin with the heading set to 0.
            </summary>
            <param name="location">A <see cref="T:Telogis.GeoBase.LatLon"/> location for the DirectionalPushPin.</param>
        </member>
        <member name="M:Telogis.GeoBase.DirectionalPushPin.Render(System.Drawing.Graphics,Telogis.GeoBase.RenderContext)">
            <summary>
            Render directional push pins on the given map, according to their <see cref="P:Telogis.GeoBase.DirectionalPushPin.Heading"/>.
            </summary>
            <remarks>
            Provided that the push pin is located on the given map, <see cref="M:Telogis.GeoBase.ImageUtils.IconCache.DrawIcon(System.Drawing.Graphics,System.Int32,System.Int32,System.Int32,System.Boolean)"/> is
            passed the <see cref="P:Telogis.GeoBase.DirectionalPushPin.Heading"/> of this push pin. It is that method which handles
            the rotation of the push pin before drawing it.
            </remarks>
            <param name="graphics">The <see cref="T:System.Drawing.Graphics"/> object responsible for drawing the push pin.</param>
            <param name="rc">The <see cref="T:Telogis.GeoBase.RenderContext"/> upon which the push pin is to be drawn.</param>
        </member>
        <member name="P:Telogis.GeoBase.DirectionalPushPin.Heading">
             <summary>
             Gets or sets the heading (in degrees) of this DirectionalPushPin.
             </summary>
             <remarks>
             <para>
             The heading value represents a clockwise rotation of the Icon by x degrees before it is
             drawn. Care should be taken to ensure that the heading
             value results in a visually appropriate rendering of the icon.</para>
             <para>Values are automatically constrained such that 0 &lt;= x &lt; 360.</para>
            </remarks>
        </member>
        <member name="T:Telogis.GeoBase.BalloonLocation">
            <summary>
            Represents the location at which the balloon of a <see cref="T:Telogis.GeoBase.BalloonPushPin"/> should be rendered.
            </summary>
            <example>
            <code lang="C#">
            BalloonPushPin bpp = new BalloonPushPin(new LatLon(34, -117));
            
            // place the balloon to the bottom-right (assuming the map is aligned north) of the pushpin
            bpp.PreferredLocation = BalloonLocation.SouthEast;
            
            // to show the BalloonPushPin, add it to your Map's RenderList...
            myRendererList.Add(bpp);
            </code>
            </example>
        </member>
        <member name="F:Telogis.GeoBase.BalloonLocation.NorthEast">
            <summary>
            The balloon will be rendered to the North-East of the <see cref="T:Telogis.GeoBase.PushPin"/> icon.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.BalloonLocation.NorthWest">
            <summary>
            The balloon will be rendered to the North-West of the <see cref="T:Telogis.GeoBase.PushPin"/> icon.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.BalloonLocation.SouthEast">
            <summary>
            The balloon will be rendered to the South-East of the <see cref="T:Telogis.GeoBase.PushPin"/> icon.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.BalloonLocation.SouthWest">
            <summary>
            The balloon will be rendered to the South-West of the <see cref="T:Telogis.GeoBase.PushPin"/> icon.
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.BalloonPushPin">
             <summary>
             A <see cref="T:Telogis.GeoBase.PushPin"/> with an informational balloon. 
             The balloon may be hidden if required.
             </summary>
             <remarks>
             <img src="Art/geobase_balloonpushpin.PNG"></img>
             <para>A BalloonPushPin appears as an information balloon anchored to a point on a map. 
             The balloon can be given a name (such as "Some Company Ltd", the default is "PushPin") below which 
             additional information can be displayed, such as a street address.</para>
             <para>Both the balloon and its information (if any) are displayed by default.
             Use <see cref="P:Telogis.GeoBase.BalloonPushPin.ShowBalloon"/> and <see cref="P:Telogis.GeoBase.BalloonPushPin.ShowInformation"/> to modify this behavior.</para>
             <para>When an address is known, it is strongly recommended to use <see cref="M:Telogis.GeoBase.BalloonPushPin.#ctor(System.String,Telogis.GeoBase.GeocodeAddress)"/>
             to avoid a performance hit from the Reverse Geocoding, and ensure that the correct (or
             desired) address is used in labelling the balloon.</para>
             <para><b>Related articles</b>: <a href="9af7c41f-fabe-48be-9317-1e019cc19c33.htm">Map Concept</a>, 
             <a href="4196f9ed-1abf-4780-887f-47b2b046e80e.htm">Drill-down Geocoder Tutorial</a>, 
             <a href="70746bb6-4c27-4ed5-a312-1faa1f86a3bf.htm">Map Control Tutorial</a>, 
             <a href="929e54d5-f994-4e7e-aa42-c3920a2d7c30.htm">Using Multiple Renderers</a>, 
             <a href="fe19284f-8b0d-4ec7-a801-c1e70f3180ce.htm">Render Modes in Detail</a>.</para>
             </remarks>
             <example>
             <code lang="C#">
             // new balloonpushpin, centered on Telogis HQ
             BalloonPushPin b = new BalloonPushPin(new LatLon(33.648720, -117.733774));
             
             // name the balloonpushpin
             b.Name = "Telogis HQ";
             
             // if you comment this line out, the address of the balloonpushpin will instead be displayed
             b.Information = "GeoBase is designed for a rapid development cycle and low deployment cost.";
             
             // if you uncomment this line, the Information (set above) will be hidden
             //b.ShowInformation = false;
             </code>
            </example>
        </member>
        <member name="F:Telogis.GeoBase.BalloonPushPin.VertBalloonLineSize">
            <summary>
            Number of pixels per line of text in a Balloon.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.BalloonPushPin.PinSizeHor">
            <summary>
            Distance between Icon and Balloon if Balloon displays at the left or right sides
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.BalloonPushPin.PinSizeVert">
            <summary>
            Distance between Icon and Balloon if Balloon displays at the top or bottom
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.BalloonPushPin.PreferredLocation">
            <summary>
            A field representing the preferred <see cref="T:Telogis.GeoBase.BalloonLocation">location</see> 
            at which the balloon will be rendered. Default is <see cref="F:Telogis.GeoBase.BalloonLocation.NorthEast"/>.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="F:Telogis.GeoBase.BalloonPushPin.Information">
            <summary>
            Text to be displayed below the balloon name.
            </summary>
            <remarks>
            Long information strings are automatically line-wrapped at 500 pixels.
            <see cref="P:Telogis.GeoBase.BalloonPushPin.ShowInformation"/> can be used to set whether
            information should be displayed when the balloon is rendered.</remarks>
        </member>
        <member name="M:Telogis.GeoBase.BalloonPushPin.#ctor(Telogis.GeoBase.LatLon)">
            <summary>
            Create a new push pin anchored at the given location. The informational 
            balloon will contain information about the street address.
            </summary>
            <remarks>
            <para>If you don't need the address of the BalloonPushPin shown, consider using
            <see cref="M:Telogis.GeoBase.BalloonPushPin.#ctor(Telogis.GeoBase.LatLon,System.Boolean)"/>.
            </para>
            </remarks>
            <param name="location">Specifies the latitude and longitude co-ordinates 
            at which the pin should appear.</param>
        </member>
        <member name="M:Telogis.GeoBase.BalloonPushPin.#ctor(Telogis.GeoBase.LatLon,System.Boolean)">
            <summary>
            Create a new push pin anchored at the given location. The informational 
            balloon will contain information about the street address.
            </summary>
            <remarks>The address of the BalloonPushPin is reverse-geocoded. If the address
            is not required, you may avoid this slight performance penalty by setting
            <i>loadAddress</i> to false.</remarks>
            <param name="location">Specifies the latitude and longitude co-ordinates 
            at which the pin should appear.</param>
            <param name="loadAddress">If true, display the address of the BalloonPushPin. 
            If false, the address of the BalloonPushPin will not be shown.</param>
        </member>
        <member name="M:Telogis.GeoBase.BalloonPushPin.#ctor(System.String,Telogis.GeoBase.LatLon)">
            <summary>
            Construct a new BalloonPushPin with a given name, to be placed at the given 
            <see cref="T:Telogis.GeoBase.LatLon"/>. The informational balloon will contain 
            information about the street address and will be displayed by default.
            </summary>
            <remarks>The location is Reverse Geocoded to get an <see cref="T:Telogis.GeoBase.Address"/>, 
            from which location information is extracted and placed in the informational balloon.
            When an address is known, it is strongly recommended to use <see cref="M:Telogis.GeoBase.BalloonPushPin.#ctor(System.String,Telogis.GeoBase.GeocodeAddress)"/>
            to avoid a performance hit from the Reverse Geocoding, and ensure that the correct (or
            desired) address is used in labelling the balloon.</remarks>
            <param name="name">The name of the new balloon.</param>
            <param name="location">The map co-ordinates to which the balloon will point.</param>
        </member>
        <member name="M:Telogis.GeoBase.BalloonPushPin.#ctor(System.String,Telogis.GeoBase.GeocodeAddress)">
            <summary>
            Construct a new BalloonPushPin with a given name, placed at the given 
            <see cref="T:Telogis.GeoBase.GeocodeAddress"/> and displaying information 
            about that address.
            </summary>
            <remarks>
            <para><see cref="F:Telogis.GeoBase.BalloonPushPin.Information"/> is set to contain street and 
            postal information.</para>
            <para>By using this constructor (instead of <see cref="M:Telogis.GeoBase.BalloonPushPin.#ctor(System.String,Telogis.GeoBase.LatLon)"/>)
            it ensures that the correct address is used to label the balloon (as a <see cref="T:Telogis.GeoBase.LatLon"/> may
            resolve to an undesired address).</para>
            </remarks>
            <param name="name">The name of the new balloon.</param>
            <param name="address">A <see cref="T:Telogis.GeoBase.GeocodeAddress"/> 
            which is resolved to street address information.</param>
        </member>
        <member name="M:Telogis.GeoBase.BalloonPushPin.FindBalloonPosition(Telogis.GeoBase.IMap,Telogis.GeoBase.RenderContext,System.Drawing.SizeF,System.Drawing.Rectangle,System.Int32,System.Boolean)">
            <summary>
            Find the best position for the balloon next to the <see cref="T:Telogis.GeoBase.PushPin"/> icon.
            </summary>
            <param name="map">The <see cref="T:Telogis.GeoBase.IMap"/> upon which the balloon is to be drawn.</param>
            <param name="rc">The <see cref="T:Telogis.GeoBase.RenderContext"/> upon which this balloon is to be drawn.</param>
            <param name="textSize">The number of vertical pixels used for text. See <see cref="F:Telogis.GeoBase.BalloonPushPin.VertBalloonLineSize"/></param>
            <param name="iconRect">A <see cref="T:System.Drawing.Rectangle"/> specifying the size of the balloon.</param>
            <param name="spacerY">Specifies how many pixels should separate the balloon from the <see cref="T:Telogis.GeoBase.PushPin"/>.</param>
            <param name="mustSucceed"></param>
            <returns><b>true</b> if the balloon will fit, <b>false</b> if it will not.</returns>
            <remarks>
            <para><b>balloonLeft</b> and <b>balloonRight</b> will be set to 0 if this method is returning <b>false</b>.<br/>
            This method checks for possible balloon placement in four positions relative to the <see cref="T:Telogis.GeoBase.PushPin"/> <see cref="F:Telogis.GeoBase.ImageUtils.Icons.PinVerticalBlack">icon</see>:
            above, below, left, and right.</para>
            <para>This method is automatically called by <see cref="M:Telogis.GeoBase.BalloonPushPin.Render(System.Drawing.Graphics,Telogis.GeoBase.RenderContext)"/>, which is in turn
            called by the Map because BalloonPushPin is an <see cref="T:Telogis.GeoBase.IMapRenderer"/>.</para>
            </remarks>
        </member>
        <member name="M:Telogis.GeoBase.BalloonPushPin.DisplayBalloon(System.Drawing.Graphics,Telogis.GeoBase.IMap,Telogis.GeoBase.RenderContext)">
            <summary>
            Render the balloon on the specified <see cref="T:Telogis.GeoBase.IMap"/>. This method should not be called directly.
            </summary>
            <remarks>
            This method is automatically called by <see cref="M:Telogis.GeoBase.BalloonPushPin.Render(System.Drawing.Graphics,Telogis.GeoBase.RenderContext)"/>, which is in turn
            called by the Map because BalloonPushPin is an <see cref="T:Telogis.GeoBase.IMapRenderer"/>.
            </remarks>
            <param name="graphics">The <see cref="T:System.Drawing.Graphics"/> for drawing the balloon.</param>
            <param name="map">The <see cref="T:Telogis.GeoBase.IMap"/> upon which the balloon is to be drawn.</param>
            <param name="rc">The <see cref="T:Telogis.GeoBase.RenderContext"/> for the balloon.</param>
        </member>
        <member name="M:Telogis.GeoBase.BalloonPushPin.Render(System.Drawing.Graphics,Telogis.GeoBase.RenderContext)">
            <summary>
            Render push pins with the given <see cref="T:Telogis.GeoBase.RenderContext"/>. See also
            <see cref="T:Telogis.GeoBase.IMapRenderer"/>.
            </summary>
            <remarks>
            Push pins with co-ordinates outside the current map will not be rendered.
            </remarks>
            <param name="graphics">The <see cref="T:System.Drawing.Graphics"/> object responsible for drawing the push pin.</param>
            <param name="rc">The <see cref="T:Telogis.GeoBase.RenderContext"/> information for this call.</param>
        </member>
        <member name="M:Telogis.GeoBase.BalloonPushPin.HitTest(System.Int32,System.Int32,Telogis.GeoBase.IMap)">
            <summary>
            On a given map, check whether the rectangular area occupied by this
            <see cref="T:Telogis.GeoBase.BalloonPushPin"/> lies underneath the given 
            x and y coordinates.
            </summary>
            <remarks>
            This method is useful for determining if a BalloonPushPin has been clicked on.
            See <see cref="M:Telogis.GeoBase.IMapMouseHandler.HitTest(System.Int32,System.Int32,Telogis.GeoBase.IMap)"/> for more details, and
            <see cref="T:Telogis.GeoBase.MapMouseEventsHandler"/> to register events.
            </remarks>
            <param name="x">An int x coordinate</param>
            <param name="y">An int y coordinate</param>
            <param name="aMap">The <see cref="T:Telogis.GeoBase.IMap"/> on which the BalloonPushPin is located.</param>
            <returns>If there is a hit, returns this <see cref="T:Telogis.GeoBase.BalloonPushPin"/>. If not a hit, returns <b>null</b>.</returns>
        </member>
        <member name="P:Telogis.GeoBase.BalloonPushPin.RequiredRendermodes">
            <summary>
            Gets the <see cref="T:Telogis.GeoBase.RenderMode">RenderMode</see> required by this <b>BalloonPushPin</b>
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.BalloonPushPin.Name">
            <summary>
            Gets or sets the name of the balloon, which will appear as its title.
            </summary>
            <remarks>
            If the <see cref="P:Telogis.GeoBase.BalloonPushPin.ShowBalloon"/> property is <b>true</b> then Name will
            be shown regardless of the state of the <see cref="P:Telogis.GeoBase.BalloonPushPin.ShowInformation"/>
            property.
            </remarks>
        </member>
        <member name="P:Telogis.GeoBase.BalloonPushPin.ShowBalloon">
            <summary>
            Gets or sets whether the balloon will be hidden or shown. <b>True</b> (shown) by default.
            </summary>
            <remarks>The pin will always be shown, regardless of the balloon's visibility.</remarks>
        </member>
        <member name="P:Telogis.GeoBase.BalloonPushPin.ShowInformation">
            <summary>
            Gets or sets whether the balloon will display its information. <b>True</b> 
            (shown) by default.
            </summary>
            <remarks>
            If the <see cref="P:Telogis.GeoBase.BalloonPushPin.ShowBalloon"/> property is <b>true</b> 
            then <see cref="P:Telogis.GeoBase.BalloonPushPin.Name"/> will be shown regardless of the state 
            of this property.
            </remarks>
        </member>
        <member name="P:Telogis.GeoBase.BalloonPushPin.AnchorPoint">
            <summary>
            Gets the XY coordinates of the balloons anchor point on the map.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.BalloonPushPin.Address">
            <summary>
            Gets the <see cref="T:Telogis.GeoBase.Address"/> this push pin is located at.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.BalloonPushPin.RenderFont">
            <summary>
            Changes the font used to display the text in the informational balloon.
            Default is 8pt Arial.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.BalloonPushPin.InformationBackgroundColor">
            <summary>
            Changes the background color of the information block
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.BalloonPushPin.TitleBackgroundColor">
            <summary>
            Changes the background color of the title block
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.BalloonPushPin.TextColor">
            <summary>
            Changes the color of the information text
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.BalloonPushPin.BorderColor">
            <summary>
            Changes the color of the border line
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.BalloonPushPin.AutoAbbreviate">
            <summary>
            Gets or sets a boolean specifying whether to automatically hide
            the Information portion of the balloon when there is insufficient space
            to display it without collision.
            </summary>
            <remarks>If <b>true</b> then the <see cref="F:Telogis.GeoBase.BalloonPushPin.Information"/> portion of the balloon
            is automatically hidden when insufficient space is available. If <b>false</b> the 
            <see cref="F:Telogis.GeoBase.BalloonPushPin.Information"/> portion is never hidden in case of a collision.</remarks>
        </member>
        <member name="P:Telogis.GeoBase.BalloonPushPin.DisplayLocation">
            <summary>
            Gets the <see cref="T:Telogis.GeoBase.BalloonLocation"/> for the balloon.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.BalloonPushPin.DetectBalloonClick">
            <summary>
            Gets or sets whether clicks are registered on both the balloon and the pin, or just the pin.
            </summary>
            <remarks>If <b>false</b> then clicks on the balloon are ignored, but clicks
            on the pin are still registered. If <b>true</b> we register clicks on both the 
            balloon and the pin.</remarks>
        </member>
        <member name="P:Telogis.GeoBase.BalloonPushPin.MapMouseEventsHandler">
            <summary>
            Gets the <see cref="T:Telogis.GeoBase.MapMouseEventsHandler"/> associated
            with this object.
            </summary>
            <remarks>
            This method can be used to attach event handlers to a BalloonPushPin.
            </remarks>
            <example>
            <code lang="C#">
            BalloonPushPin bpp = new BalloonPushPin();
            bpp.MapMouseEventsHandler.Click += new EventHandler(Click);
            </code>
            </example>
        </member>
        <member name="T:Telogis.GeoBase.HorizonRenderer">
            <summary>
            Renders the horizon on a 2.5D map perspective.
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.HorizonRenderer.#ctor">
            <summary>
            Create with default renderer and size.
            </summary>
            <remarks>
            Default renderer: HorizonRenderModes.Faded<br/>
            Default size: 4 per cent of map height.<br/>		
            </remarks>
        </member>
        <member name="M:Telogis.GeoBase.HorizonRenderer.#ctor(Telogis.GeoBase.HorizonRenderType)">
            <summary>
            Create a Horizon renderer with the given parameters.
            </summary>
            <param name="mode">A <see cref="T:Telogis.GeoBase.HorizonRenderType"/> specifying which
            mode the renderer will use.
            </param>
        </member>
        <member name="M:Telogis.GeoBase.HorizonRenderer.#ctor(Telogis.GeoBase.HorizonRenderType,System.Int32)">
            <summary>
            Create a Horizon renderer with the given parameters.
            </summary>
            <param name="mode">A <see cref="T:Telogis.GeoBase.HorizonRenderType"/> specifying which
            mode the renderer will use.
            </param>
            <param name="size"> Specifies the percentage of the map the horizon will cover.
            </param>
        </member>
        <member name="M:Telogis.GeoBase.HorizonRenderer.Render(System.Drawing.Graphics,Telogis.GeoBase.RenderContext)">
            <summary>
            Render the horizon on a 2.5D map perspective. Should not be called directly.
            </summary>
            <param name="graphics"><see cref="T:System.Drawing.Graphics"/></param>
            <param name="rc"><see cref="T:Telogis.GeoBase.RenderContext"/></param>
        </member>
        <member name="P:Telogis.GeoBase.HorizonRenderer.RequiredRendermodes">
            <summary>
            Gets the <see cref="T:Telogis.GeoBase.RenderMode">RenderMode</see> required by this <b>HorizonRenderer</b>
            </summary>
            <remarks>Horizon Renderers draw the horizon in the postlabelling stage.</remarks>
        </member>
        <member name="P:Telogis.GeoBase.HorizonRenderer.RenderType">
            <summary>
            The type of rendering performed.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.HorizonRenderer.Size">
            <summary>
            Percentage of the map height that the renderer will solid fill.		
            If the renderer is in faded mode the fade will append to the
            end of the solid fill.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.HorizonRenderer.Color">
            <summary>
            The color of the horizon during the day.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.HorizonRenderer.NightColor">
            <summary>
            The color of the horizon at night.
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.HorizonRenderType">
            <summary>
            The mode used by a HorizonRenderer when rendering a horizon.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.HorizonRenderType.Faded">
            <summary>
            Render the horizon using a linear gradient brush.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.HorizonRenderType.SolidBox">
            <summary>
            Render the horizon using a solid brush.
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.Navigation.TurnDirection">
            <summary>
            The direction in which a turn is to be made.
            </summary>
            <remarks>None, left or right.</remarks>
        </member>
        <member name="F:Telogis.GeoBase.Navigation.TurnDirection.None">
            <summary>
            No turn to be made.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Navigation.TurnDirection.Left">
            <summary>
            Make a left turn.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Navigation.TurnDirection.Right">
            <summary>
            Make a right turn.
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.Navigation.DirectionType">
            <summary>
            A driving direction, such as "sharp turn", "exit freeway" or "take a ferry".
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Navigation.DirectionType.None">
            <summary>
            No direction.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Navigation.DirectionType.Turn">
            <summary>
            Make a turn.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Navigation.DirectionType.Bear">
            <summary>
            Adjust course of travel.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Navigation.DirectionType.Sharp">
            <summary>
            Make a sharp turn.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Navigation.DirectionType.RbExit">
            <summary>
            Exit the roundabout.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Navigation.DirectionType.FwExit">
            <summary>
            Exit the freeway.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Navigation.DirectionType.FwEnter">
            <summary>
            Enter the freeway.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Navigation.DirectionType.FwChange">
            <summary>
            Change freeways.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Navigation.DirectionType.GetInLane">
            <summary>
            Enter a specific lane.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Navigation.DirectionType.TakeFerry">
            <summary>
            Take a ferry.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Navigation.DirectionType.DisembarkFerry">
            <summary>
            Get off a ferry
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Navigation.DirectionType.UTurn">
            <summary>
            Make a u-turn.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Navigation.DirectionType.Destination">
            <summary>
            Have reached the destination.
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.Navigation.DirectionQualifier">
            <summary>
            Adds further information to the <see cref="T:Telogis.GeoBase.Navigation.DirectionType"/>.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Navigation.DirectionQualifier.None">
            <summary>
            No more info.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Navigation.DirectionQualifier.TrafficLights">
            <summary>
            Direction applies at the traffic lights.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Navigation.DirectionQualifier.EndOfStreet">
            <summary>
            Direction applies at the end of the street.
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.Navigation.NavigationEvent">
            <summary>
            Represents an event that occurs during navigation of a route. Encapsulated
            information includes the directions for the next intersection, time until the next
            movement and distance until the next movement.
            </summary>
            <remarks><para><b>Related articles</b>: <a href="db780b3f-ffb3-496b-b36d-a068907e7244.htm">Using Notifications and Events</a>, 
            <a href="7e963d53-c906-4fcb-8b71-595736b9f15b.htm">Using a TurnBox</a>.</para></remarks>
        </member>
        <member name="F:Telogis.GeoBase.Navigation.NavigationEvent.m_Dir">
            <summary>
            The directions for the next intersection.
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.Navigation.NavigationEvent.GetDistance(Telogis.GeoBase.DistanceUnit)">
            <summary>
            Distance to the Movement.
            </summary>
            <param name="units"></param>
            <returns></returns>
        </member>
        <member name="M:Telogis.GeoBase.Navigation.NavigationEvent.HasMovementFlag(Telogis.GeoBase.Routing.MovementType)">
            <summary>
            Check if this <see cref="T:Telogis.GeoBase.Navigation.NavigationEvent"/>
            has a defined <see cref="T:Telogis.GeoBase.Routing.MovementType"/>.
            </summary>
            <param name="mt"><see cref="T:Telogis.GeoBase.Routing.MovementType"/> to test.</param>
            <returns><b>True</b> is this <see cref="T:Telogis.GeoBase.Navigation.NavigationEvent"/>
            has an <i>mt</i> type movement. Otherwise <b>false</b>.</returns>
        </member>
        <member name="M:Telogis.GeoBase.Navigation.NavigationEvent.ToString">
            <summary>
            Return a string representation for this <b>NavigationEvent</b>
            </summary>
            <returns>Driving instructions for this <b>NavigationEvent</b>, as a string.</returns>
        </member>
        <member name="P:Telogis.GeoBase.Navigation.NavigationEvent.Time">
            <summary>
            Time to the movement.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Navigation.NavigationEvent.Dir">
            <summary>
            The Direction from the Route Directions.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Navigation.NavigationEvent.TurnDirection">
            <summary>
            Get the <see cref="T:Telogis.GeoBase.Navigation.TurnDirection"/>
            for this <see cref="T:Telogis.GeoBase.Navigation.NavigationEvent"/>.
            </summary>
            <remarks><para><b>Related articles</b>: <a href="db780b3f-ffb3-496b-b36d-a068907e7244.htm">Using Notifications and Events</a>.</para></remarks>
        </member>
        <member name="P:Telogis.GeoBase.Navigation.NavigationEvent.DirectionType">
            <summary>
            Get the <see cref="T:Telogis.GeoBase.Navigation.DirectionType"/>
            for this <see cref="T:Telogis.GeoBase.Navigation.NavigationEvent"/>.
            </summary>
            <remarks><para><b>Related articles</b>: <a href="db780b3f-ffb3-496b-b36d-a068907e7244.htm">Using Notifications and Events</a>.</para></remarks>
        </member>
        <member name="P:Telogis.GeoBase.Navigation.NavigationEvent.TargetStreet">
            <summary>
            Get the name of the target street.
            </summary>
            <remarks><para><b>Related articles</b>: <a href="db780b3f-ffb3-496b-b36d-a068907e7244.htm">Using Notifications and Events</a>.</para></remarks>
        </member>
        <member name="P:Telogis.GeoBase.Navigation.NavigationEvent.DirectionQualifier">
            <summary>
            Gets further information to the direction (instruction) allowing us to qualify
            the direction. For example, "turn right <i>at the traffic lights</i>", as opposed 
            to simply "turn right".
            </summary>
            <remarks><para><b>Related articles</b>: <a href="db780b3f-ffb3-496b-b36d-a068907e7244.htm">Using Notifications and Events</a>.</para></remarks>
        </member>
        <member name="P:Telogis.GeoBase.Navigation.NavigationEvent.Number">
            <summary>
            The turn number, exit number or roundabout exit number.
            </summary>
            <remarks><para><b>Related articles</b>: <a href="db780b3f-ffb3-496b-b36d-a068907e7244.htm">Using Notifications and Events</a>.</para></remarks>
        </member>
        <member name="P:Telogis.GeoBase.Navigation.NavigationEvent.GpsQuality">
            <summary>
            Get the quality of the GPS Fix. This value is only reliable when a GpsQuality event has been fired.
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.Navigation.NavigationEvent.NavigationEventStringFacade">
            <summary>
            Class that provides convenience methods to simplify the XML configuration for phrases
            that describe a NavigationEvent.
            </summary>
        </member>
        <member name="T:Xheo.Licensing.RuntimeLimit">
            <summary>
            Enforces a limit for Run time licenses.
            </summary>
        </member>
        <member name="M:Xheo.Licensing.RuntimeLimit.Validate(System.ComponentModel.LicenseContext,System.Type,System.Object)">
            <summary>
            Validates that the license being granted is within the limits enforced by
            this object.
            </summary>
            <param name="context">
            	The LicenseContext passed to <see cref="M:System.ComponentModel.LicenseProvider.GetLicense(System.ComponentModel.LicenseContext,System.Type,System.Object,System.Boolean)"/>.
            </param>
            <param name="type">
            	The Type of the object being licensed.
            </param>
            <param name="instance">
            	The instance of the object being licensed.
            </param>
            <returns>
            	Returns true if the limits are valid, otherwise false.
            </returns>
        </member>
        <member name="M:Xheo.Licensing.RuntimeLimit.LoadFromXml(System.Xml.XmlNode)">
            <summary>
            Loads the contents of a Limit from an XML string.
            </summary>
            <param name="node">
            	The XML string to load from.
            </param>
            <returns>
            	Returns true if the load was successful, otherwise false.
            </returns>
        </member>
        <member name="M:Xheo.Licensing.RuntimeLimit.SaveToXml(System.Xml.XmlNode)">
            <summary>
            Saves the contents of the Limit as an XML string.
            </summary>
            <returns>
            	Returns the saved XML.
            </returns>
        </member>
        <member name="P:Xheo.Licensing.RuntimeLimit.Description">
            <summary>
            Gets the description of the limit.
            </summary>
        </member>
        <member name="P:Xheo.Licensing.RuntimeLimit.Name">
            <summary>
            Gets the display name of the limit.
            </summary>
        </member>
        <member name="T:Xheo.Licensing.IPLimit">
            <summary>
            Enforces a limit for single or multiple IP addresses.
            </summary>
        </member>
        <member name="M:Xheo.Licensing.IPLimit.#ctor">
            <summary>
            Initializes a new instance of the IPLimit class.
            </summary>
        </member>
        <member name="M:Xheo.Licensing.IPLimit.Validate(System.ComponentModel.LicenseContext,System.Type,System.Object)">
            <summary>
            Validates that the license being granted is within the limits enforced by
            this object.
            </summary>
            <param name="context">
            	The LicenseContext passed to <see cref="M:System.ComponentModel.LicenseProvider.GetLicense(System.ComponentModel.LicenseContext,System.Type,System.Object,System.Boolean)"/>.
            </param>
            <param name="type">
            	The Type of the object being licensed.
            </param>
            <param name="instance">
            	The instance of the object being licensed.
            </param>
            <returns>
            	Returns true if the limits are valid, otherwise false.
            </returns>
        </member>
        <member name="M:Xheo.Licensing.IPLimit.LoadFromXml(System.Xml.XmlNode)">
            <summary>
            Loads the contents of a Limit from an XML string.
            </summary>
            <param name="node">
            	The XML string to load from.
            </param>
            <returns>
            	Returns true if the load was successful, otherwise false.
            </returns>
        </member>
        <member name="M:Xheo.Licensing.IPLimit.SaveToXml(System.Xml.XmlNode)">
            <summary>
            Saves the contents of the Limit as an XML string.
            </summary>
            <returns>
            	Returns the saved XML.
            </returns>
        </member>
        <member name="M:Xheo.Licensing.IPLimit.GetDetailsDescription">
            <summary>
            Overrides <see cref="M:Xheo.Licensing.Limit.GetDetailsDescription"/>.
            </summary>
        </member>
        <member name="P:Xheo.Licensing.IPLimit.Ranges">
            <summary>
            Gets the collection of IPRanges for the Limit.
            </summary>
        </member>
        <member name="P:Xheo.Licensing.IPLimit.Description">
            <summary>
            Gets the description of the limit.
            </summary>
        </member>
        <member name="P:Xheo.Licensing.IPLimit.Name">
            <summary>
            Gets the display name of the limit.
            </summary>
        </member>
        <member name="T:Xheo.Licensing.IPRange">
            <summary>
            Represents a range of IP addresses.
            </summary>
        </member>
        <member name="M:Xheo.Licensing.IPRange.#ctor">
            <summary>
             Initializes a new instance of the IPRange class.
            </summary>
        </member>
        <member name="M:Xheo.Licensing.IPRange.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the IPRange class.
            </summary>
            <param name="first">
            	The first IP address in the range.
            </param>
            <param name="last">
            	The last IP address in the range.
            </param>
        </member>
        <member name="M:Xheo.Licensing.IPRange.#ctor(System.Net.IPAddress,System.Net.IPAddress)">
            <summary>
            Initializes a new instance of the IPRange class.
            </summary>
            <param name="first">
            	The first IP address in the range.
            </param>
            <param name="last">
            	The last IP address in the range.
            </param>
        </member>
        <member name="M:Xheo.Licensing.IPRange.Contains(System.Net.IPAddress)">
            <summary>
            Determines if the given IP address is within the range.
            </summary>
            <param name="address">
            	The address to check.
            </param>
            <returns>
            	Returns true if the address is within the first and last IP address of
            	the range, otherwise false.
            </returns>
        </member>
        <member name="M:Xheo.Licensing.IPRange.Contains(System.String)">
            <summary>
            Determines if the given IP address is within the range.
            </summary>
            <param name="address">
            	The address to check.
            </param>
            <returns>
            	Returns true if the address is within the first and last IP address of
            	the range, otherwise false.
            </returns>
        </member>
        <member name="M:Xheo.Licensing.IPRange.ToString">
            <summary>
            Summary of ToString.
            </summary>
            <returns></returns>	
        </member>
        <member name="P:Xheo.Licensing.IPRange.Collection">
            <summary>
            Gets or sets the collection that owns the range.
            </summary>
        </member>
        <member name="P:Xheo.Licensing.IPRange.First">
            <summary>
            Gets the first IP address in the range.
            </summary>
        </member>
        <member name="P:Xheo.Licensing.IPRange.Last">
            <summary>
            Gets the last IP address in the range.
            </summary>
        </member>
        <member name="P:Xheo.Licensing.IPRange.Count">
            <summary>
            Gets the count of addresses in the range.
            </summary>
        </member>
        <member name="T:Xheo.Licensing.IPRangeCollection">
            <summary>
            Implements a collection of IPRange objects.
            </summary>
        </member>
        <member name="M:Xheo.Licensing.IPRangeCollection.#ctor">
            <summary>
            Initializes a new instance of the IPRangeCollection class.
            </summary>
        </member>
        <member name="M:Xheo.Licensing.IPRangeCollection.Add(Xheo.Licensing.IPRange)">
            <summary>
            Adds the given IPRange to the collection.
            </summary>
            <param name="range">
            	The IPRange to add.
            </param>
        </member>
        <member name="M:Xheo.Licensing.IPRangeCollection.Insert(System.Int32,Xheo.Licensing.IPRange)">
            <summary>
            Inserts the IPRange at the given index.
            </summary>
            <param name="index">
            	The index to insert the IPRange.
            </param>
            <param name="range">
            	The IPRange to insert.
            </param>
        </member>
        <member name="M:Xheo.Licensing.IPRangeCollection.Remove(Xheo.Licensing.IPRange)">
            <summary>
            Removes the given IPRange from the collection.
            </summary>
            <param name="range">
            	The IPRange to remove.
            </param>
        </member>
        <member name="M:Xheo.Licensing.IPRangeCollection.CopyTo(Xheo.Licensing.IPRange[],System.Int32)">
            <summary>
            Copies the collection to an array.
            </summary>
            <param name="array">
            	The array to copy to.
            </param>
            <param name="index">
            	The index in the array to start copying.
            </param>
        </member>
        <member name="M:Xheo.Licensing.IPRangeCollection.IndexOf(Xheo.Licensing.IPRange)">
            <summary>
            Gets the index of the given IPRange.
            </summary>
            <param name="range">
            	The IPRange to look for.
            </param>
            <returns>
            	Returns the index of the given IPRange if found, otherwise -1.
            </returns>
        </member>
        <member name="M:Xheo.Licensing.IPRangeCollection.Contains(Xheo.Licensing.IPRange)">
            <summary>
            Determines if the collection contains the given IPRange.
            </summary>
            <param name="range">
            	The IPRange to look for.
            </param>
            <returns>
            	Returns true if the IPRange is found, otherwise false.
            </returns>
        </member>
        <member name="M:Xheo.Licensing.IPRangeCollection.Contains(System.Net.IPAddress,System.Net.IPAddress)">
            <summary>
            Determines if a range with the given first and last IP address exists in the
            collection.
            </summary>
            <param name="first">
            	The first IP address.
            </param>
            <param name="last">
            	The last IP address.
            </param>
            <returns>
            	Returns if the range exists, otherwise false.
            </returns>
        </member>
        <member name="M:Xheo.Licensing.IPRangeCollection.Overlaps(System.Net.IPAddress,System.Net.IPAddress)">
            <summary>
            Determines if the range of IP addresses between the first and last IP address
            overlaps another range in the collection.
            </summary>
            <param name="first">
            	The first IP address.
            </param>
            <param name="last">
            	The last IP address.
            </param>
            <returns>
            	Returns if the range overlaps another range in the collection, otherwise 
            	false.
            </returns>
        </member>
        <member name="M:Xheo.Licensing.IPRangeCollection.Overlaps(Xheo.Licensing.IPRange)">
            <summary>
            Determines if the range of IP addresses between the first and last IP address
            overlaps another range in the collection.
            </summary>
            <param name="range">
            	The IPRange representing the first and last IP addresses in the block.
            </param>
            <returns>
            	Returns if the range overlaps another range in the collection, otherwise 
            	false.
            </returns>
        </member>
        <member name="M:Xheo.Licensing.IPRangeCollection.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Implements <see cref="M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)"/>.
            </summary>
        </member>
        <member name="M:Xheo.Licensing.IPRangeCollection.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Deserializes a license that was previously serialzed. Used by the
            .NET framework when marshalling an object between AppDomains.
            </summary>
        </member>
        <member name="P:Xheo.Licensing.IPRangeCollection.Item(System.Int32)">
            <summary>
            Gets or sets the IPRange at the given index.
            </summary>
        </member>
        <member name="T:Xheo.Licensing.ActivationServer">
            <summary>
            Implements an Activation Server as an XML WebService. 
            </summary>
            <remarks>
            You can create an Activation Server manually or by using the License Manager
            Setup Wizard. From the License Manager select Tools | Setup Wizard and select
            the Web.config file of the web application that will host the Activation Server
            Web Service.
            
            <para>
            To implement your activation server manually, derive from this class in your web 
            service file and override the Activate method. This method gets a copy of
            the complete signed license and the machine profile hash. The returned
            license must then set the profile hash of the Activation limit in the license
            and resign the license.
            </para>
            <para>
            You can use this server to implement a central license activation service.
            </para>
            </remarks>
        </member>
        <member name="F:Xheo.Licensing.ActivationServer.Headers">
            <summary>
            Additional custom headers to include with all web request calls.
            </summary>
        </member>
        <member name="M:Xheo.Licensing.ActivationServer.#ctor">
            <summary>
            Initializes a new instance of the ActivationServer class.
            </summary>
        </member>
        <member name="M:Xheo.Licensing.ActivationServer.UseClientCulture">
            <summary>
            When called from a web method, switches the current thread's culture to 
            match the client's culture.
            </summary>
        </member>
        <member name="M:Xheo.Licensing.ActivationServer.Activate(System.String,System.String,System.String)">
            <summary>
            Activates a previously issued license.
            </summary>
            <param name="keys">
            	Name of the assembly whos keys were used to sign the licenses. The public key
            	is embedded in the component's assembly. The private key is stored
            	securely on the license server's machine
            </param>
            <param name="licenseXml">
            	The signed license as an XML string to validate.
            </param>
            <param name="profileHash">
            	The comparable profile hash of the <see cref="T:Xheo.Licensing.MachineProfile"/> from the machine 
            	the license is being activated from.
            </param>
            <remarks>
            	Generally you should perform some kind of tracking to make sure that the
            	serial number for the license has not already been activated by tracking
            	them in a database. If the profileHash is different then was previously 
            	activated with the serial number, then the activation should fail.
            	<para>
            	The license server must have full access to the original signing
            	keys used to sign the license to enable activation. Detailed failure
            	messages should be communicated through exceptions.
            	</para>
            	<para>
            	If there are multitle activation limits in the license then they
            	are all updated with the same profile hash.
            	</para>
            	<para>
            	Ineritors should call the base class's Validate method and capture
            	the return value for success.
            	<code>
            	public override string Activate( string licenseXml, string keys, string profileHash )
            	{
            		string response = base.Activate( licenseXml, keys, profileHash ); 
            							// ^-- Throws exception if invalid.
            		
            		// Do more validation.
            		
            		return response;
            	}
            	</code>
            	</para>
            </remarks>
            <returns>
            	On success returns the newly signed license, otherwise throws an
            	exception.
            </returns>
        </member>
        <member name="M:Xheo.Licensing.ActivationServer.GetSigningKey(System.String)">
            <summary>
            Internal helper method used to get a signing key pair given the name
            of the original signing keys.
            </summary>
            <param name="keys">
            	Name of the key files used to sign licenses.
            </param>
            <returns>
            	Returns a new signing key. If the keys were not found an exception is raised.
            </returns>
        </member>
        <member name="M:Xheo.Licensing.ActivationServer.GetSigningKey(System.String,System.String)">
            <summary>
            Internal helper method used to get a signing key pair given the name
            of the original signing keys.
            </summary>
            <param name="keys">
            	Name of the key files used to sign licenses.
            </param>
            <param name="folder">
            	The folder to look for licenses. If null then uses the default folder.
            </param>
            <returns>
            	Returns a new signing key. If the keys were not found an exception is raised.
            </returns>
        </member>
        <member name="P:Xheo.Licensing.ActivationServer.KeyFolder">
            <summary>
            Gets the folder where the license keys are located. See <see cref="P:Xheo.Licensing.ExtendedLicense.KeyFolder"/>
            for configuration options.
            </summary>
        </member>
        <member name="P:Xheo.Licensing.ActivationServer.ClientCulture">
            <summary>
            Gets the culture information of the client that called the web service.
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.MapMouseEventsHandler">
            <summary>
            Convenience class that collects various mouse events into one place.
            </summary>
            <remarks>
            <para>
            This class includes a number of public methods such as <see cref="M:Telogis.GeoBase.MapMouseEventsHandler.FireClick(System.Object,System.EventArgs)"/>
            which are always safe to call even when the appropriate event handler has not been assigned - they will
            not cause exceptions.</para>
            <para><b>Related articles</b>: <a href="440bb76f-ec6e-4392-8bc8-9ac5121d7bc2.htm">Mouse Events</a>.</para>
            </remarks>
            <example>
            Below is an example of how to use a MapMouseEventsHandler in a fictional class.
            <code lang="C#">
            public class MyClass {
            	MapMouseEventsHandler m_Handler = new MapMouseEventsHandler();
            	
            	//Define a method to perform some action when the mouse is clicked.
            	private void onClick(Object sender, EventArgs e) {
            		//do some stuff...
            	}
            	
            	//Add the onClick method to the events performed by this MapMouseEventsHandler.
            	m_handler.Click += new EventHandler(onClick);
            	
            }
            </code>
            </example>
        </member>
        <member name="M:Telogis.GeoBase.MapMouseEventsHandler.FireClick(System.Object,System.EventArgs)">
            <summary>
            Safely fire the mouse click event, even if no handler is attached. See remarks.
            </summary>
            <remarks>
            These FireMouse(*) methods are available so that a MapMouseEventsHandler
            can be fired safely even when handlers may not have been attached to
            the various events.
            </remarks>
            <param name="sender">The <b>sender</b> object.</param>
            <param name="e">Any arguments to be passed to the event handler.</param>
        </member>
        <member name="M:Telogis.GeoBase.MapMouseEventsHandler.FireDoubleClick(System.Object,System.Windows.Forms.MouseEventArgs)">
            <summary>
            Safely fire the mouse double click event, even if no handler is attached. 
            </summary>
            <param name="sender">The <b>sender</b> object.</param>
            <param name="e">Any arguments to be passed to the event handler.</param>
        </member>
        <member name="M:Telogis.GeoBase.MapMouseEventsHandler.FireMouseDown(System.Object,System.Windows.Forms.MouseEventArgs)">
            <summary>
            Safely fire the mouse button down event, even if no handler is attached. 
            See <see cref="M:Telogis.GeoBase.MapMouseEventsHandler.FireClick(System.Object,System.EventArgs)"/> remarks.
            </summary>
            <param name="sender">The <b>sender</b> object.</param>
            <param name="e">Any arguments to be passed to the event handler.</param>
        </member>
        <member name="M:Telogis.GeoBase.MapMouseEventsHandler.FireMouseUp(System.Object,System.Windows.Forms.MouseEventArgs)">
            <summary>
            Safely fire the mouse button up event, even if no handler is attached.
            See <see cref="M:Telogis.GeoBase.MapMouseEventsHandler.FireClick(System.Object,System.EventArgs)"/> remarks.
            </summary>
            <param name="sender">The <b>sender</b> object.</param>
            <param name="e">Any arguments to be passed to the event handler.</param>
        </member>
        <member name="M:Telogis.GeoBase.MapMouseEventsHandler.FireMouseMove(System.Object,System.Windows.Forms.MouseEventArgs)">
            <summary>
            Safely fire the mouse move event, even if no handler is attached.
            See <see cref="M:Telogis.GeoBase.MapMouseEventsHandler.FireClick(System.Object,System.EventArgs)"/> remarks.
            </summary>
            <param name="sender">The <b>sender</b> object.</param>
            <param name="e">Any arguments to be passed to the event handler.</param>
        </member>
        <member name="M:Telogis.GeoBase.MapMouseEventsHandler.FireOnMouseEnter(System.Object,System.EventArgs)">
            <summary>
            Safely fire the mouse enter event, even if no handler is attached.
            See <see cref="M:Telogis.GeoBase.MapMouseEventsHandler.FireClick(System.Object,System.EventArgs)"/> remarks.
            </summary>
            <param name="sender">The <b>sender</b> object.</param>
            <param name="e">Any arguments to be passed to the event handler.</param>
        </member>
        <member name="M:Telogis.GeoBase.MapMouseEventsHandler.FireOnMouseLeave(System.Object,System.EventArgs)">
            <summary>
            Safely fire the mouse exit event, even if no handler is attached.
            See <see cref="M:Telogis.GeoBase.MapMouseEventsHandler.FireClick(System.Object,System.EventArgs)"/> remarks.
            </summary>
            <param name="sender">The <b>sender</b> object.</param>
            <param name="e">Any arguments to be passed to the event handler.</param>
        </member>
        <member name="E:Telogis.GeoBase.MapMouseEventsHandler.Click">
            <summary>
            Event to be fired on a mouse click.
            </summary>
        </member>
        <member name="E:Telogis.GeoBase.MapMouseEventsHandler.DoubleClick">
            <summary>
            Event to be fired on a mouse double click.
            </summary>
        </member>
        <member name="E:Telogis.GeoBase.MapMouseEventsHandler.MouseDown">
            <summary>
            Event to be fired when the mouse button is pressed down.
            </summary>
        </member>
        <member name="E:Telogis.GeoBase.MapMouseEventsHandler.MouseUp">
            <summary>
            Event to be fired when the mouse button is released.
            </summary>
        </member>
        <member name="E:Telogis.GeoBase.MapMouseEventsHandler.MouseMove">
            <summary>
            Can be fired when the mouse is moved.
            </summary>
        </member>
        <member name="E:Telogis.GeoBase.MapMouseEventsHandler.OnMouseEnter">
            <summary>
            Fired when the mouse moves over the item. 
            </summary>
        </member>
        <member name="E:Telogis.GeoBase.MapMouseEventsHandler.OnMouseLeave">
            <summary>
            Fired when mouse moves off the item.
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.EventAssigned">
            <summary>
            Describes the state of an event, if it has a handler or not.
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.BehaviorAdapter">
            <summary>
            Class that provides an easy way to override default 
            <see cref="T:Telogis.GeoBase.MapCtrl">MapCtrl</see> behavior.
            </summary>
            <remarks>
            <para>
            This class provides a number of events that are called when the corresponding event is 
            fired on the <see cref="T:Telogis.GeoBase.MapCtrl">MapCtrl</see>. If no handler is defined 
            for the event, the default behavior of the MapCtrl is observed.</para>
            <para>
            It is expected that if you define a handler for key down or mouse down which calls 
            MapCtrl's default behavior, (if defined) your key up or mouse up event will call the 
            default behavior also.</para>
            </remarks>
            <example>
            Below is an example of how to use the BehaviorAdapter on a MapCtrl in a fictional class.
            <code lang="C#">
            public class MyClass {
            	MapCtrl m_MainMap = new MapCtrl();
            	
            	//Define a method to perform some action when a key is pressed.
            	private void onKeyDown(Object sender, EventArgs e) {
            		
            		//do some stuff before key down behavior is invoked...
            		
            		//invoke the default behavior if the keys shift and control are not pressed.
            		if(!e.Shift &amp;&amp; !e.Control) {
            			m_MainMap.DefaultMapCtrlBehavior.KeyDown(sender, e);
            		}
            		
            		//do some more stuff...
            	}
            	
            	//Add the onKeyDown method to the events performed by the MapCtrl's BehaviorAdapter.
            	m_MainMap.CustomMapBehavior.KeyDownEvent += new KeyEventHandler(onKeyDown);
            }
            </code>
            </example>
        </member>
        <member name="E:Telogis.GeoBase.BehaviorAdapter.MouseWheelEvent">
            <summary>
            Fired when the <see cref="T:Telogis.GeoBase.MapCtrl">MapCtrl</see> encounters a mouse
            wheel event.
            </summary>
        </member>
        <member name="E:Telogis.GeoBase.BehaviorAdapter.MouseLeaveEvent">
            <summary>
            Fired when the <see cref="T:Telogis.GeoBase.MapCtrl">MapCtrl</see> encounters a mouse
            leave event.
            </summary>
        </member>
        <member name="E:Telogis.GeoBase.BehaviorAdapter.MouseUpEvent">
            <summary>
            Fired when the <see cref="T:Telogis.GeoBase.MapCtrl">MapCtrl</see> encounters a mouse
            up event.
            </summary>
        </member>
        <member name="E:Telogis.GeoBase.BehaviorAdapter.MouseDownEvent">
            <summary>
            Fired when the <see cref="T:Telogis.GeoBase.MapCtrl">MapCtrl</see> encounters a mouse
            down event.
            </summary>
        </member>
        <member name="E:Telogis.GeoBase.BehaviorAdapter.MouseMoveEvent">
            <summary>
            Fired when the <see cref="T:Telogis.GeoBase.MapCtrl">MapCtrl</see> encounters a mouse
            move event.
            </summary>
        </member>
        <member name="E:Telogis.GeoBase.BehaviorAdapter.KeyUpEvent">
            <summary>
            Fired when the <see cref="T:Telogis.GeoBase.MapCtrl">MapCtrl</see> encounters a key up 
            event.
            </summary>
        </member>
        <member name="E:Telogis.GeoBase.BehaviorAdapter.KeyDownEvent">
            <summary>
            Fired when the <see cref="T:Telogis.GeoBase.MapCtrl">MapCtrl</see> encounters a key down 
            event.
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.SenderObjects">
             <summary>
             Identifies an item and <see cref="T:Telogis.GeoBase.IMap"/> that are generating an
             event (usually a mouse event), allowing for customized handling of that event.
             </summary>
             <remarks>
             SenderObjects are passed to <see cref="T:Telogis.GeoBase.MapMouseEventsHandler"/>s
             to allow the mouse handlers to identify which item was clicked on, and on what
             map. This allows for custom handling of events, based on the SenderObject which is passed.
            </remarks>
        </member>
        <member name="F:Telogis.GeoBase.SenderObjects.Sender">
            <summary>
            The <see cref="T:Telogis.GeoBase.IMap"/> that sent this message.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.SenderObjects.Item">
            <summary>
            The item that caused the message to be sent.
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.MapProgress">
            <summary>
            A delegate to be called when progress is made on rendering an IMap that is being rendered
            asynchronously.
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.HighResClock">
            <summary>
            This provides access to the Kernel32.dll high resolution clock API.  This
            is motivated by the need to have higher resolution than .Net's
            DateTime.Now, which is apparently about 10ms.  The effective resolution
            of HighResClock on a P4 1.4GHz is about 10us.
            <seealso cref="T:System.TimeSpan"/>
            <seealso cref="T:System.DateTime"/>
            </summary>
            <remarks>
            <para>
            WARNING: I don't have any particularly good way of verifying
            the accuracy of this class.  The best I've done is in the TestSelf()
            which is to compare the measured duration to Sleep(), which is loose.
            Also, I haven't tested this on any other PCs.  I understand
            that the high performance counter may not
            be available on all systems.
            </para>
            <para>The "ticks" in this class DO correspond to ticks
            in DateTime and TimeSpan, except in the Frequency property which is 
            explicitly the high performance counter frequency.</para>
            <para>
            It's relatively expensive to read this clock, compared to DateTime.Now.
            Although it's only about 10us on a P4 1.4GHz, it's faster
            to use DateTime.Now.
            </para>
            <para>
            This does a calibration to determine function call overhead time, 
            which is a static field.  
            This has a static constructor which calls Calibrate().
            Calibrate() temporarily boosts the calling process and thread priority
            to avoid being affected by other processes/threads.
            </para>
            <para>
            The duration calculations are adjusted by the function call overhead
            time calculated during Calibrate(), but Now, NowTicks, etc are not.
            </para>
            <para>
            You can use this just like DateTime for timing durations:
            <code>
            DateTime startTime = HighResClock.Now;
            // do something you want to time here
            TimeSpan duration = HighResClock.Now - startTime;
            Console.WriteLine("Duration: {0}ms", duration.TotalMilliseconds);
            </code> 
            </para>
            <para>
            To compensate for the overhead in the high resolution clock reads,
            you can use the following:
            <code>
            DateTime startTime = HighResClock.Now;
            // do something you want to time here
            TimeSpan duration = HighResClock.CalcTimeSpan(startTime);
            Console.WriteLine("Duration: {0}ms", duration.TotalMilliseconds);
            </code> 
            </para>
            </remarks>
        </member>
        <member name="M:Telogis.GeoBase.HighResClock.K32QueryPerformanceCounter(System.Int64@)">
            <summary>
            The ticks returned by this function are not the same as
            .Net's ticks.
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.HighResClock.K32QueryPerformanceFrequency(System.Int64@)">
            <summary>
            This returns Kernel32 ticks/sec.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.HighResClock.perfFreq">
            <summary>
            Frequency obtained from kernel32.  This is in kernel32's ticks 
            per second.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.HighResClock.overheadTicks">
            <summary>
            The minimum duration that this class is able to measure. 
            This is measured during Calibrate().
            This represents the number of ticks it takes to make
            a duration measurement, and is therefore the effective 
            resolution of this class.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.HighResClock.k32TicksOffset">
            <summary>
            This stores the offset between Kernel32's ticks and .Net's
            DateTime's ticks, so that we can produce accurate DateTime's.
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.HighResClock.#ctor">
            <summary>Not supposed to instantiate this class.</summary>
        </member>
        <member name="M:Telogis.GeoBase.HighResClock.#cctor">
            <summary>Static constructor.</summary>
        </member>
        <member name="M:Telogis.GeoBase.HighResClock.Calibrate">
            <summary>
            Measure overhead for interop calls and clock resolution.
            The resultant values are stored in static fields.
            The resultant clock frequency and function call overhead
            measurement are used in ticks to ms conversion and 
            duration calculations, respectively.
            </summary>
            <remarks>
            <para>
            This is called from the static constructor, so you typically
            won't benefit from calling it, unless during construction
            there were other very high priority things going on that
            affected the timing of the statements in this method.
            </para>
            <para>
            This temporarily boosts this process and thread priority
            to avoid being affected by other processes/threads, so you 
            definitely don't want to call this a lot.
            </para>
            </remarks>
        </member>
        <member name="M:Telogis.GeoBase.HighResClock.TicksToMs(System.Int64)">
            <summary>
            Convert ticks to milliseconds. (A tick is 100 nanoseconds.)
            </summary>
            <remarks>No adjustment is made to this due to OverheadTicks.</remarks>
            <param name="ticks">The tick count.</param>
            <returns>float - the number of milliseconds.</returns>
        </member>
        <member name="M:Telogis.GeoBase.HighResClock.CalcTimeSpan(System.Int64,System.Int64)">
            <summary>
            Calculate the duration as a TimeSpan.
            <seealso cref="T:System.TimeSpan"/>
            </summary>
            <remarks>This subtracts OverheadTicks from the measured ticks
            to compensate for overhead.</remarks>
            <param name="startTicks">The starting tick count.</param>
            <param name="stopTicks">The stopTicks tick count.</param>
            <returns>A new TimeSpan.</returns>
        </member>
        <member name="M:Telogis.GeoBase.HighResClock.CalcTimeSpan(System.Int64)">
            <summary>
            Calculate the duration (to NowTicks) as a TimeSpan.
            <seealso cref="T:System.TimeSpan"/>
            </summary>
            <remarks>This subtracts OverheadTicks from the measured ticks
            to compensate for overhead.</remarks>
            <param name="startTicks">The starting tick count.</param>
            <returns>A new TimeSpan.</returns>
        </member>
        <member name="M:Telogis.GeoBase.HighResClock.CalcTimeSpan(System.DateTime)">
            <summary>
            Calculate the duration (to NowTicks) as a TimeSpan.
            <seealso cref="T:System.TimeSpan"/>
            </summary>
            <remarks>This subtracts OverheadTicks from the measured ticks
            to compensate for overhead.</remarks>
            <param name="startTime">The starting DateTime.</param>
            <returns>A new TimeSpan.</returns>
        </member>
        <member name="M:Telogis.GeoBase.HighResClock.CalcTimeSpan(System.DateTime,System.DateTime)">
            <summary>
            Calculate the duration (to NowTicks) as a TimeSpan.
            <seealso cref="T:System.TimeSpan"/>
            </summary>
            <remarks>This subtracts OverheadTicks from the measured ticks
            to compensate for overhead.</remarks>
            <param name="startTime">The starting DateTime.</param>
            <param name="stopTime">The stopping DateTime.</param>
            <returns>A new TimeSpan.</returns>
        </member>
        <member name="M:Telogis.GeoBase.HighResClock.TestSelf">
            <summary>
            A simple self test.
            </summary>
            <returns>bool - true for test passed, false for failed</returns>
        </member>
        <member name="P:Telogis.GeoBase.HighResClock.NowTicks">
            <summary>
            Gets the tick count from the clock.
            </summary>
            <remarks>No adjustment is made to this due to OverheadTicks.</remarks>
        </member>
        <member name="P:Telogis.GeoBase.HighResClock.Now">
            <summary>
            Return a DateTime which represents the current time.  This is similar
            to DateTime.Now, but is higher resolution.
            <seealso cref="T:System.DateTime"/>
            </summary>
            <remarks>No adjustment is made to this due to OverheadTicks.</remarks>
        </member>
        <member name="P:Telogis.GeoBase.HighResClock.OverheadTicks">
            <summary>
            The minimum duration that this class is able to measure. 
            This is measured during Calibrate().
            This represents the number of ticks it takes to make
            a duration measurement, and is therefore the effective 
            resolution of this class.
            This is subtracted from all duration calculations, which should 
            compensate for the clock read overhead.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.HighResClock.Frequency">
            <summary>
            This returns the number of high performance counter ticks (NOT .Net ticks) per second,
            as measured by Kernel32.dll's QueryPerformanceFrequency() function.
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.Routing.MovementRenderer">
            <summary>
            Used to display an arrow on a map indicating the flow of the movement.
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.Routing.MovementRenderer.#ctor">
            <summary>
            Display an arrow on a map indicating the flow of the movement.
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.Routing.MovementRenderer.#ctor(Telogis.GeoBase.Routing.Movement)">
            <summary>
            Display an arrow on a map indicating the flow of the movement.
            </summary>
            <param name="direction">The required <see cref="P:Telogis.GeoBase.Routing.MovementRenderer.Movement"/> inidcated by the arrow.</param>
        </member>
        <member name="M:Telogis.GeoBase.Routing.MovementRenderer.Render(System.Drawing.Graphics,Telogis.GeoBase.RenderContext)">
            <summary>
            Draws an arrow on a map indicating the flow of this <see cref="T:Telogis.GeoBase.Routing.Direction"/>
            </summary>
            <param name="g">The <see cref="T:System.Drawing.Graphics"/> object to use for drawing</param>
            <param name="rc">The <see cref="T:Telogis.GeoBase.IMap"/> to render onto</param>
        </member>
        <member name="F:Telogis.GeoBase.Routing.MovementRenderer.Visible">
            <summary>
            Display the arrow on the map. Default is true.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Routing.MovementRenderer.Movement">
            <summary>
            The direction of the arrow.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Routing.MovementRenderer.FillColor">
            <summary>
            The fill color of the arrow.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Routing.MovementRenderer.OutlineColor">
            <summary>
            The outline color of the arrow.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Routing.MovementRenderer.ShadeColor">
            <summary>
            The shade color of the arrow.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Routing.MovementRenderer.OutlineWidth">
            <summary>
            The width of the outline.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Routing.MovementRenderer.InboundLength">
            <summary>
            The length of the arrow before the movement.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Routing.MovementRenderer.OutboundLength">
            <summary>
            The length of the arrow after the movement.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Routing.MovementRenderer.Width">
            <summary>
            The width of the arrow.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Routing.MovementRenderer.Height">
            <summary>
            The height of the arrow.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Routing.MovementRenderer.NoteFont">
            <summary>
            The font used for the note.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Routing.MovementRenderer.RequiredRendermodes">
            <summary>
            Gets the <see cref="T:Telogis.GeoBase.RenderMode">RenderMode</see> required by this <b>Direction</b>
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.MathUtil">
            <summary>
            A collection of useful math functions.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.MathUtil.NM_PER_DEGREES">
            <summary>
            The number of international nautical miles in one degree along the Equator.
            1 international nautical mile equals 1852m or 0.998383 equatorial arc minutes.  Thus 1
            equatorial arc degree equals 60.097177 international nautical miles.  This differs from
            the geographical mile or historical nautical mile, which equal 1 arc minute along the
            equator or the meridian respectively.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.MathUtil.METERS_PER_NM">
            <summary>
            The number of meters in one international nautical mile.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.MathUtil.MILES_PER_NM">
            <summary>
            The number of statute miles in one international nautical mile.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.MathUtil.pi">
            <summary>
            Pi accurate to 31 decimal places.
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.MathUtil.intMask(System.Action{System.Boolean},System.UInt32)">
            <summary>
            Calls a delegate for each bit
            </summary>
            <param name="forEachBitStartingFromLowest">delegate to call, true if high low if false</param>
            <param name="a">the number</param>
        </member>
        <member name="M:Telogis.GeoBase.MathUtil.LatLonToEPSG3857(Telogis.GeoBase.LatLon,System.Double@,System.Double@)">
            <summary>
            Convert from a LatLon point to x and y in EPSG:3857 co-ordinate space.
            </summary>
            <remarks>GeoBase LatLons use an EPSG:4326 (WGS84) co-ordinate space, regardless of map projection.</remarks>
            <param name="pt">The LatLon point to convert.</param>
            <param name="x">The x value in EPSG:3857.</param>
            <param name="y">The y value in EPSG:3857.</param>
        </member>
        <member name="M:Telogis.GeoBase.MathUtil.LatLonToEPSG3395(Telogis.GeoBase.LatLon,System.Double@,System.Double@)">
            <summary>
            Convert from a LatLon point to x and y in EPSG:3395 co-ordinate space.
            </summary>
            <remarks>GeoBase LatLons use an EPSG:4326 (WGS84) co-ordinate space, regardless of map projection.</remarks>
            <param name="pt">The LatLon point to convert.</param>
            <param name="x">The x value in EPSG:3395 co-ordinate space.</param>
            <param name="y">The y value in EPSG:3395 co-ordinate space.</param>
        </member>
        <member name="M:Telogis.GeoBase.MathUtil.IsDaytime(Telogis.GeoBase.LatLon,System.DateTime)">
            <summary>
            Indicates whether a specified date time falls between sunrise and sunset at a specified location.
            </summary>
            <param name="ll">The latitude and longitude of the location.</param>
            <param name="dt">The date time to check.</param>
            <returns>If the date time falls between sunrise and sunset, the value is <b>true</b>, otherwise <b>false</b>.</returns>
        </member>
        <member name="M:Telogis.GeoBase.MathUtil.MoveAhead(Telogis.GeoBase.LatLon,System.Double,System.Double,Telogis.GeoBase.DistanceUnit)">
            <summary>
            Given a starting position, a movement direction (as a bearing) and a distance, calculate
            the end position.
            </summary>
            <param name="start">The starting position, as a <see cref="T:Telogis.GeoBase.LatLon">LatLon</see></param>
            <param name="bearing">The bearing on which to move, in <b>degrees</b></param>
            <param name="distance">The distance to move, measured in <i>units</i></param>
            <param name="units">The units in which <i>distance</i> is measured. See <see cref="T:Telogis.GeoBase.DistanceUnit">DistanceUnit</see></param>
            <returns>Either:<ul>
            <li>The position <i>distance</i> away from <i>start</i> on a bearing of <i>bearing</i> degrees, as <see cref="T:Telogis.GeoBase.LatLon">LatLon</see></li>
            <li><i>start</i>, if <i>start</i> is an <see cref="P:Telogis.GeoBase.LatLon.IsValid">invalid LatLon</see> (default value, or value not assigned).</li></ul>
            </returns>
        </member>
        <member name="M:Telogis.GeoBase.MathUtil.Clamp(System.Double,System.Double,System.Double)">
            <summary>
            The closest value to a specified double that falls within a specified range.
            </summary>
            <param name="x">The double to clamp.</param>
            <param name="minValue">The minimum value that can be returned.</param>
            <param name="maxValue">The maximum value that can be returned.</param>
            <returns>If x lies between minValue and maxValue, the result is x. Otherwise,
            the value is minValue if x is less than minValue, or maxValue if x is greater than maxValue.</returns>
        </member>
        <member name="M:Telogis.GeoBase.MathUtil.Clamp(System.Int32,System.Int32,System.Int32)">
            <summary>
            The closest value to a specified integer that falls within a specified range.
            </summary>
            <param name="x">The integer to clamp.</param>
            <param name="minValue">The minimum value that can be returned.</param>
            <param name="maxValue">The maximum value that can be returned.</param>
            <returns>If x lies between minValue and maxValue, the result is x. Otherwise,
            the value is minValue if x is less than minValue, or maxValue if x is greater than maxValue.</returns>
        </member>
        <member name="M:Telogis.GeoBase.MathUtil.AcosSafe(System.Double)">
            <summary>
            Calculate the arc-cosine (Acos) in radians with out-of-bounds check:
            if input &gt; 1 use 1; if input &lt; -1 use -1 as input.
            </summary>
            <param name="x">The cosine</param>
            <returns>arc-cosine for x</returns>
        </member>
        <member name="M:Telogis.GeoBase.MathUtil.GreatCircle(System.Double,System.Double,System.Double,System.Double)">
             <summary>
             Calculate the distance (in radians) between 2 latitude/longitude pairs over the surface of a sphere.
             </summary>
             <param name="lat1">latitude 1 in radians</param>
             <param name="lon1">longitude 1 in radians</param>
             <param name="lat2">latitude 2 in radians</param>
             <param name="lon2">longitude 2 in radians</param>
             <returns>The distance over the surface of a sphere between the latitude/longitude pairs.</returns>
             <remarks>
             A great circle is a circle drawn around the surface of a sphere. Both sphere and circle share the
             same center, and for any two given points (the latitude/longitude pairs) on the sphere's surface
             there is a unique great circle. The smallest arc between the two points on the great circle describes
             the shortest distance between the two points.
            </remarks>
        </member>
        <member name="M:Telogis.GeoBase.MathUtil.Interpolate(Telogis.GeoBase.LatLon,Telogis.GeoBase.LatLon,System.Double)">
            <summary>
            Interpolate between two points.
            </summary>
            <param name="from">The point to interpolate from.</param>
            <param name="to">The point to interpolate to.</param>
            <param name="factor">The interpolation factor. Use 0.1 for a point near A, 0.9 for a point near B, and 0.5 for a point exactly between A and B.</param>
            <returns>The interpolated point.</returns>
        </member>
        <member name="M:Telogis.GeoBase.MathUtil.ToRadians(System.Double)">
            <summary>
            Convert degrees to radians.
            </summary>
            <remarks><i>radians = degrees * (pi / 180)</i></remarks>
            <param name="deg">A value in radians.</param>
            <returns>The number of degrees.</returns>
        </member>
        <member name="M:Telogis.GeoBase.MathUtil.ToDegrees(System.Double)">
            <summary>
            Convert radians to degrees.
            </summary>
            <remarks><i>degrees = radians * (180 / pi)</i></remarks>
            <param name="rad">The number of radians.</param>
            <returns>A value in radians.</returns>
        </member>
        <member name="M:Telogis.GeoBase.MathUtil.DistToUnits(System.Double,Telogis.GeoBase.DistanceUnit)">
            <summary>
            Convert from radians to a given <see cref="T:Telogis.GeoBase.DistanceUnit">Unit</see>.
            </summary>
            <example>
            To convert 1.337 radians to kilometers:
            <code lang="C#">
            double kmDist = DistToUnits(1.337, KILOMETERS);
            </code>
            </example>
            <param name="radians_distance">The distance in radians.</param>
            <param name="units">The <see cref="T:Telogis.GeoBase.DistanceUnit">unit type</see> to convert distance to.</param>
            <returns>Distance in the given unit.</returns>
        </member>
        <member name="M:Telogis.GeoBase.MathUtil.distance_pt_seg_greatcircle(Telogis.GeoBase.LatLon,Telogis.GeoBase.LatLon,Telogis.GeoBase.LatLon)">
            <summary>
            The great circle distance from p to line A->B in meters.
            </summary>
            <param name="p">The point to measure distance from.</param>
            <param name="a">The start point of the line.</param>
            <param name="b">The end point of the line.</param>
            <returns>The distance in meters between p and A->B.</returns>
        </member>
        <member name="M:Telogis.GeoBase.MathUtil.DistanceFromPointToLine(Telogis.GeoBase.LatLon,Telogis.GeoBase.LatLon,Telogis.GeoBase.LatLon,Telogis.GeoBase.DistanceUnit)">
            <summary>
            The great circle distance from a point to a line lineStart->lineEnd in the given units.
            </summary>
            <param name="point">The point to measure distance from.</param>
            <param name="lineStart">The start point of the line.</param>
            <param name="lineEnd">The end point of the line.</param>
            <param name="units">The units in which the distance will be returned.</param>
            <returns>The distance in the given units between point and lineStart->lineEnd.</returns>
        </member>
        <member name="M:Telogis.GeoBase.MathUtil.left_or_right(Telogis.GeoBase.LatLon,Telogis.GeoBase.LatLon,Telogis.GeoBase.LatLon)">
            <summary>
            Check if a point is Left or right of the line start->end
            </summary>
            <param name="query"></param>
            <param name="start"></param>
            <param name="end"></param>
            <returns>true if left, false if right</returns>
        </member>
        <member name="M:Telogis.GeoBase.MathUtil.PythagoreanDistanceFromPointToLine(Telogis.GeoBase.LatLon,Telogis.GeoBase.LatLon,Telogis.GeoBase.LatLon,Telogis.GeoBase.DistanceUnit,System.Double@)">
            <summary>
            Distance from point to line start->end.
            </summary>
            <param name="point">The point to measure distance from.</param>
            <param name="lineStart">The start point of the line.</param>
            <param name="lineEnd">The end point of the line.</param>
            <param name="units">The units that the distance will be returned in.</param>
            <param name="interpolationConstant">The interpolation constant for the point along the
            line start->end where point is closest.</param>
            <returns>The distance in the given units between point and start->end.</returns>
        </member>
        <member name="M:Telogis.GeoBase.MathUtil.PythagoreanClosestPointOnLine(Telogis.GeoBase.LatLon,Telogis.GeoBase.LatLon,Telogis.GeoBase.LatLon)">
            <summary>
            Calculates the closest point on the line lineStart-&gt;lineEnd to the point given.
            </summary>
            <remarks>This is a quick but approximate calculation for distances less than 10km, 
            otherwise use <see cref="M:Telogis.GeoBase.MathUtil.ClosestPoint(Telogis.GeoBase.LatLon,Telogis.GeoBase.LatLon,Telogis.GeoBase.LatLon)">ClosestPoint</see>
            .</remarks>
            <param name="point">The point to find the closest point to.</param>
            <param name="lineStart">The point at the beginning of the line.</param>
            <param name="lineEnd">The point at the end of the line.</param>
            <returns>The point between lineStart and lineEnd that is closest to <b>point</b>.</returns>
        </member>
        <member name="M:Telogis.GeoBase.MathUtil.PythagoreanClosestPointOnLine(Telogis.GeoBase.LatLon,Telogis.GeoBase.LatLon,Telogis.GeoBase.LatLon,System.Double@)">
            <summary>
            Calculates the closest point on the line lineStart-&gt;lineEnd to the point given.
            </summary>
            <remarks>This is a quick but approximate calculation for distances less than 10km, 
            otherwise use <see cref="M:Telogis.GeoBase.MathUtil.ClosestPoint(Telogis.GeoBase.LatLon,Telogis.GeoBase.LatLon,Telogis.GeoBase.LatLon)">ClosestPoint</see>
            .</remarks>
            <param name="point">The point to find the closest point to.</param>
            <param name="lineStart">The point at the beginning of the line.</param>
            <param name="lineEnd">The point at the end of the line.</param>
            <param name="interpolationConstant">The interpolation constant for the point along the
            line start-&gt;end where point is closest.</param>
            <returns>The point between lineStart and lineEnd that is closest to <b>point</b>.</returns>
        </member>
        <member name="M:Telogis.GeoBase.MathUtil.distance_pt_seg(Telogis.GeoBase.LatLon,Telogis.GeoBase.LatLon,Telogis.GeoBase.LatLon,System.Double@)">
            <summary>
            Distance from p to line A->B in degrees.
            </summary>
            <param name="p">The point to measure distance from.</param>
            <param name="A">The start point of the line.</param>
            <param name="B">The end point of the line.</param>
            <param name="r">r The interpolation constant for the point along the line A->B where p is closest.</param>
            <returns>The distance in degrees between p and A->B.</returns>
        </member>
        <member name="M:Telogis.GeoBase.MathUtil.Distance(System.Collections.Generic.IList{Telogis.GeoBase.LatLon},System.Int32@,Telogis.GeoBase.LatLon)">
            <summary>
            Returns the length (measured in radians) to the line segment of the 'points' array that lies closest to 'p'.
            </summary>
            <param name="points">The points that make up the line.</param>
            <param name="segment">Set to indicate which line segment is closest to 'p'. This is zero-based.</param>
            <param name="p">The point to query against the line.</param>
            <returns>The distance to the line in <b>radians</b>.</returns>
            <remarks>
            The LatLon array <b>points</b> represents a series of
            line segments, for example points[0] -> points[1], points[1] -> points[2].
            Given the LatLon point <b>p</b>, <b>segment</b> is set to indicate which
            line segment from the points array lies closest to <b>p</b>.
            </remarks>
        </member>
        <member name="M:Telogis.GeoBase.MathUtil.Distance(System.Collections.Generic.IList{Telogis.GeoBase.LatLon},System.Int32,System.Int32,System.Int32@,Telogis.GeoBase.LatLon)">
             <summary>
             Calculates the segment (angle measured in degrees) in the 'points' array that lies closest to 'p'.
             </summary>
             <param name="points">The points that make up the line.</param>
             <param name="segment">Set to indicate which line segment
             is closest to 'p'. This is zero-based.</param>
             <param name="p">The point to query against the line.</param>
             <param name="first">The index of the point in the <b>points</b> array that defines the start of the line.</param>
             <param name="last">The index of the point in the <b>points</b> array that defines the end of the line.</param>
             <returns>The distance to the line in <b>radians</b>.</returns>
             <remarks>
             The LatLon array <b>points</b> represents a series of
             line segments, for example points[0] -> points[1], points[1] -> points[2].
             Given the LatLon point <b>p</b>, <b>segment</b> is set to indicate which
             line segment from the points array lies closest to <b>p</b>.
            </remarks>
        </member>
        <member name="M:Telogis.GeoBase.MathUtil.ClosestPoint(Telogis.GeoBase.LatLon,Telogis.GeoBase.LatLon,Telogis.GeoBase.LatLon)">
            <summary>
            Calculates the closest point on the line AB to the point given.
            </summary>
            <remarks>See 
            <see cref="M:Telogis.GeoBase.MathUtil.PythagoreanClosestPointOnLine(Telogis.GeoBase.LatLon,Telogis.GeoBase.LatLon,Telogis.GeoBase.LatLon)">PythagoreanClosestPointOnLine</see>
            and its overloads for a faster implementation of closest point.</remarks>
            <param name="query">The point to find the closest point to.</param>
            <param name="A">The point at the beginning of the line.</param>
            <param name="B">The point at the end of the line.</param>
            <returns>The point between A and B that is closest to <b>query</b>.</returns>
        </member>
        <member name="M:Telogis.GeoBase.MathUtil.UnitsToRadians(System.Double,Telogis.GeoBase.DistanceUnit)">
            <summary>
            Convert a distance value from given units into radians.
            </summary>
            <param name="dist">The distance, measured in the given <b>unit</b>s.</param>
            <param name="unit">The <see cref="T:Telogis.GeoBase.DistanceUnit"/> type.</param>
            <returns>Distance in radians.</returns>
        </member>
        <member name="M:Telogis.GeoBase.MathUtil.ConvertUnits(System.Double,Telogis.GeoBase.DistanceUnit,Telogis.GeoBase.DistanceUnit)">
            <summary>
            Converts a distance from one distance unit to another.
            </summary>
            <param name="input">Distance figure to be converted.</param>
            <param name="input_type"><see cref="T:Telogis.GeoBase.DistanceUnit">Unit</see> of input.</param>
            <param name="output_type">Desired <see cref="T:Telogis.GeoBase.DistanceUnit">unit</see> of output.</param>
            <returns>The converted input distance.</returns>
        </member>
        <member name="M:Telogis.GeoBase.MathUtil.SpeedToUnits(System.Double,Telogis.GeoBase.SpeedUnit)">
            <summary>
            Converts a given speed from radians per second into the specified unit.
            </summary>
            <param name="speed">Speed figure to be converted (in radians).</param>
            <param name="units">Desired <see cref="T:Telogis.GeoBase.SpeedUnit">unit</see> of output.</param>
            <returns>The input speed converted to desired <b>units</b>.</returns>
        </member>
        <member name="M:Telogis.GeoBase.MathUtil.UnitsToRadians(System.Double,Telogis.GeoBase.SpeedUnit)">
            <summary>
            Converts a given speed unit to radians per second.
            </summary>
            <param name="input_type">Units of <b>speed</b>.</param>
            <param name="speed">Given speed (to convert to radians).</param>
            <returns>Radian equivalent of <b>speed</b>.</returns>
        </member>
        <member name="M:Telogis.GeoBase.MathUtil.UnitsToSeconds(System.Double,Telogis.GeoBase.TimeUnit)">
            <summary>
            Converts a given quantity of <see cref="T:Telogis.GeoBase.TimeUnit">TimeUnits</see> to its seconds equivalent.
            </summary>
            <example>The following code snippet converts 24 hours into seconds.
            <code lang="C#">
                UnitsToSeconds(24, HOUR);
            </code>
            </example>
            <param name="time">The quantity of the time units.</param>
            <param name="input_type">The type of <see cref="T:Telogis.GeoBase.TimeUnit">time units</see>.</param>
            <returns>The seconds equivalent of <b>time</b> <b>input_type</b>s. See example.</returns>
        </member>
        <member name="M:Telogis.GeoBase.MathUtil.TimeToUnits(System.Double,Telogis.GeoBase.TimeUnit)">
            <summary>
            Converts a given quantity of seconds to its <see cref="T:Telogis.GeoBase.TimeUnit"/> equivalent.
            </summary>
            <param name="seconds">The number of seconds for conversion.</param>
            <param name="output_type"><see cref="T:Telogis.GeoBase.TimeUnit">Time units</see> to convert to.</param>
            <returns>The <see cref="T:Telogis.GeoBase.TimeUnit"/> equivalent of <b>seconds</b>.</returns>
        </member>
        <member name="M:Telogis.GeoBase.MathUtil.ConvertUnits(System.Double,Telogis.GeoBase.SpeedUnit,Telogis.GeoBase.SpeedUnit)">
            <summary>
            Converts between two <see cref="T:Telogis.GeoBase.SpeedUnit">speed units</see>.
            </summary>
            <param name="input">Quantity of original speed units.</param>
            <param name="input_type">Original <see cref="T:Telogis.GeoBase.SpeedUnit">speed units</see> (such as MilesPerHour).</param>
            <param name="output_type">Desired <see cref="T:Telogis.GeoBase.SpeedUnit">speed units</see> (such as KilometersPerHour).</param>
            <returns>The <b>input</b> time units in <b>output_type</b> units.</returns>
        </member>
        <member name="M:Telogis.GeoBase.MathUtil.ConvertUnits(System.Double,Telogis.GeoBase.TimeUnit,Telogis.GeoBase.TimeUnit)">
            <summary>
            Converts between two <see cref="T:Telogis.GeoBase.TimeUnit">time units</see>.
            </summary>
            <example>The following code snippet converts 24 hours into minutes.
            <code lang="C#">
                ConvertUnits(24, HOUR, MINUTE);
            </code>
            </example>
            <param name="input">Quantity of original time units.</param>
            <param name="input_type">Original <see cref="T:Telogis.GeoBase.TimeUnit"/> (such as HOUR).</param>
            <param name="output_type">Desired <see cref="T:Telogis.GeoBase.TimeUnit"/> (such as MINUTE).</param>
            <returns>The <b>input</b> time units in <b>output_type</b> units.</returns>
        </member>
        <member name="M:Telogis.GeoBase.MathUtil.ConvertUnitsInt(System.Double,Telogis.GeoBase.DistanceUnit,Telogis.GeoBase.DistanceUnit)">
            <summary>
            Convert a value from one distance unit to another, returning a rounded int result.
            </summary>
            <param name="input">Distance to be converted.</param>
            <param name="input_type"><see cref="T:Telogis.GeoBase.DistanceUnit">Unit</see> of input.</param>
            <param name="output_type">Desired <see cref="T:Telogis.GeoBase.DistanceUnit">unit</see> of output.</param>
            <returns>The input distance in <b>output_type</b> units.</returns>
        </member>
        <member name="M:Telogis.GeoBase.MathUtil.GetHeading(Telogis.GeoBase.LatLon,Telogis.GeoBase.LatLon)">
            <summary>
            Get the heading between <see cref="T:Telogis.GeoBase.LatLon">LatLons</see>.
            </summary>
            <remarks>Finds the heading (bearing) of <b>pb</b> from <b>p</b>.</remarks>
            <param name="origin">The origin, as a <see cref="T:Telogis.GeoBase.LatLon"/>.</param>
            <param name="destination">The destination, as a <see cref="T:Telogis.GeoBase.LatLon"/>.</param>
            <returns>A heading in degrees, where 0 ≤ heading &lt; 360. If the
            origin and the destination are the same, returns <see cref="F:System.Double.NaN"/>.</returns>
        </member>
        <member name="M:Telogis.GeoBase.MathUtil.HeadingDiff(System.Double,System.Double)">
            <summary>
            Calculate the difference between two headings.
            </summary>
            <remarks>It is assumed that the input headings are of the range 0 &#8804; heading &lt; 360.</remarks>
            <param name="head1">First heading.</param>
            <param name="head2">Second heading.</param>
            <returns>A heading delta in degrees, where -180 &lt; delta &#8804; 180.</returns>
        </member>
        <member name="M:Telogis.GeoBase.MathUtil.FindPermutations(System.Int32)">
            <summary>
            Returns a list containing all permutations of the integers [0, setSize-1].
            This is based on the recursive algorithm found at http://www.cut-the-knot.org/do_you_know/AllPerm.shtml
            but modifed so results are zero-based for simpler array access.
            </summary>
            <param name="setSize"></param>
            <returns></returns>
        </member>
        <member name="M:Telogis.GeoBase.MathUtil.Clamp``1(``0,``0,``0)">
            <summary>
            Limits a value to a range.
            </summary>
            <typeparam name="T">The type of the value.</typeparam>
            <param name="value">The input value.</param>
            <param name="max">Maximum of the allowed range.</param>
            <param name="min">Minimum of the allowed range.</param>
            <returns>The value constrained to the supplied range.</returns>
        </member>
        <member name="M:Telogis.GeoBase.MathUtil.Max``1(``0[])">
            <summary>
            Returns the maximum of one or more values.
            </summary>
            <typeparam name="T">The type of the values.</typeparam>
            <param name="values">The candidate values.</param>
            <returns>The maximum value.</returns>
        </member>
        <member name="M:Telogis.GeoBase.MathUtil.Min``1(``0[])">
            <summary>
            Returns the minimum of one or more values.
            </summary>
            <typeparam name="T">The type of the values.</typeparam>
            <param name="values">The candidate values.</param>
            <returns>The maximum value.</returns>
        </member>
        <member name="T:Telogis.GeoBase.GeoStream.Server.TileReqType">
            <summary>
            The type of tile that is requested from a GeoStream server.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.GeoStream.Server.TileReqType.NoReq">
            <summary>
            No tile requested.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.GeoStream.Server.TileReqType.GBMap">
            <summary>
            A Map tile.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.GeoStream.Server.TileReqType.Satellite">
            <summary>
            Satellite imagery.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.GeoStream.Server.TileReqType.AuthoritativeSatellite">
            <summary>
            Upstream satellite
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.GeoStream.Server.TileReqType.Wms">
            <summary>
            WMS layer
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.GeoStream.Server.TileReqType.Traffic">
            <summary>
            Traffic overlay
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.GeoStream.Server.TileReqType.GSRenderer">
            <summary>
            GeoStream Renderer
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.GeoStream.Server.IHasKey">
            <summary>
            Used by subrequests in a MasterRequest to say which MasterRequest it belongs to
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.GeoStream.Server.TileGenerator.BaseFilename">
            <summary>
            BaseFileName is the same as FileName except that the auxiliary layer is always set
            to the base layer. When an auxlilary layer is generated, this is used to assert that
            all other layers were generated at the same time.
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.GeoStream.Server.GBMapTileGenerator.PrerenderMapOverlay">
            <summary>
            Basic GBMap tiles do not actually have overlays at the moment, this is present
            to support base classes that do.
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.GeoStream.Server.WMSTileGenerator.PrefetchWmsImagery(Telogis.GeoBase.GeoStream.Server.WMSTileGenerator)">
            <summary>
            Creates a WmsRenderer to fetch the wms imagery prior to rendering on a supertile. This
            enables us to detect an error while fetching to avoid caching the bad tiles. If there
            was a problem fetching the Wms Imagery a WmsFetchException will be thrown.
            </summary>
            <param name="req"></param>
        </member>
        <member name="T:Telogis.GeoBase.GeoStream.Server.Tile">
            <summary>
            Serves up map tiles to a GeoStream client.
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.GeoStream.Server.Tile.DoRequest(Telogis.GeoBase.GeoStream.Authentication.AuthenticatedUser,Telogis.GeoBase.GeoStream.TileParams,System.Boolean)">
            <summary>
            Services a request for a map tile.
            </summary>
            <param name="user">The <see cref="T:Telogis.GeoBase.GeoStream.Authentication.AuthenticatedUser">user</see> that requested the tile.</param>
            <param name="p">A <see cref="T:Telogis.GeoBase.GeoStream.TileParams"/> with the desired attributes of the requested tile.</param>
            <param name="debug"><i>For internal use.</i></param>
        </member>
        <member name="T:Telogis.GeoBase.GeoStream.Server.Register">
            <summary>
            a tiny class that manages the cookie generated to manage the authentication of GeoStream
            applications. 
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.GeoStream.Server.Register.Page_Load(System.Object,System.EventArgs)">
            <summary>
            called when the registration page is requested. This creates a cookie containing the authentication
            token (which should be passed as the parameter "a") with a key specific to this server. If no token
            is provided, no action is taken.
            </summary>
            <param name="sender">the calling object.</param>
            <param name="e">parameters for the load event.</param>
        </member>
        <member name="M:Telogis.GeoBase.GeoStream.PersistentImageCache.#ctor(System.Int64)">
            <summary>
            Creates a new PersistentImageCache.
            </summary>
            <remarks>
            A PersistentImageCache represents a cache of Image objects on disk.
            
            A system-wide mutex ensures that multiple instances can share the same 
            cache with only a single cache manager running at any one time.
            </remarks>
            <param name="maxSize">The maximum size (in bytes) of the cache.</param>
        </member>
        <member name="M:Telogis.GeoBase.GeoStream.PersistentImageCache.Watch">
            <summary>
            Watches the specified cache directory, ensuring no more than
            maxsize bytes of disk are used for cache.
            </summary>
            <remarks>
            Does not return until the thread it's running in is terminated.
            </remarks>
        </member>
        <member name="P:Telogis.GeoBase.GeoStream.CDOLT.Netmasks.netmask">
            <remarks/>
        </member>
        <member name="M:Telogis.GeoBase.GeoStream.Authentication.AuthenticatedUser.GeoCodeDone(Telogis.GeoBase.Country)">
            <summary>
            <i>Non-functional in this implementation</i>
            </summary>
            <param name="c"></param>
        </member>
        <member name="M:Telogis.GeoBase.GeoStream.Authentication.AuthenticatedUser.ReverseGeoCodeDone(Telogis.GeoBase.Country)">
            <summary>
            <i>Non-functional in this implementation</i>
            </summary>
            <param name="c"></param>
        </member>
        <member name="M:Telogis.GeoBase.GeoStream.Authentication.AuthenticatedUser.AccountExpired">
            <summary>
            Checks if the date is outside the range of dates allowed.
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.GeoStream.Authentication.AuthenticatedUser.MapDone(Telogis.GeoBase.Country)">
            <summary>
            <i>Non-functional in this implementation</i>
            </summary>
            <param name="c"></param>
        </member>
        <member name="M:Telogis.GeoBase.GeoStream.Authentication.AuthenticatedUser.CanRoute">
            <summary>
            <i>Non-functional in this implementation</i>
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.GeoStream.Authentication.AuthenticatedUser.RouteDone">
            <summary>
            <i>Non-functional in this implementation</i>
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.GeoStream.Authentication.AuthenticatedUser.CanDataQuery">
            <summary>
            <i>Non-functional in this implementation</i>
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.GeoStream.Authentication.AuthenticatedUser.DataQueryDone">
            <summary>
            <i>Non-functional in this implementation</i>
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.GeoStream.Authentication.AuthenticatedUser.Password">
            <summary>
            Gets the user's password.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.GeoStream.Authentication.AuthenticatedUser.UserInfo">
            <summary>
            Get additional user info.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.GeoStream.Authentication.AuthenticatedUser.Username">
            <summary>
            Gets the user's username.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.GeoStream.Authentication.AuthenticatedUser.UserId">
            <summary>
            Gets the user's unique user identification number.
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.StreetData">
            <summary>
            StreetData knows about a given street. Specifically, the location of the street and all the addresses on the street.
            </summary>
            <remarks>A "street" is a continuous set of links that has a common name and region.
            <para><b>Related articles</b>: <a href="4196f9ed-1abf-4780-887f-47b2b046e80e.htm">Drill-down Geocoder Tutorial</a>.</para>
            </remarks>
        </member>
        <member name="M:Telogis.GeoBase.StreetData.GetCrossStreets">
            <summary>
            Get a list of all the streets that cross this street.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Telogis.GeoBase.StreetData.GetClosestIntersection(Telogis.GeoBase.LatLon)">
            <summary>
            Returns the intersection along a street that's closest to a given location.
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.StreetData.GetCrossAtRoundabout(System.Collections.Generic.Dictionary{System.String,Telogis.GeoBase.StreetData},Telogis.GeoBase.Street,Telogis.GeoBase.Street)">
            <summary>
            Retrieve cross streets at a traffic circle
            </summary>
            <param name="crosses">A dictionary to fill with cross streets, keyed by the listed names of the cross streets.</param>
            <param name="roundabout">The traffic circle for which cross streets are desired.</param>
            <param name="street">The current street (not included in the results).</param>
        </member>
        <member name="M:Telogis.GeoBase.StreetData.GetCrossAtPoint(System.Collections.Generic.Dictionary{System.String,Telogis.GeoBase.StreetData},Telogis.GeoBase.Street,Telogis.GeoBase.LatLon)">
            <summary>
            Cross streets at a point
            </summary>
            <param name="crosses"></param>
            <param name="street"></param>
            <param name="point"></param>
        </member>
        <member name="M:Telogis.GeoBase.StreetData.ToString">
            <summary>
            Returns the string representation of the street's region hierarchy, starting with the street's name.
            </summary>
            <returns>The street name and region hierarchy, ending with the postcode (if available). For example:
            Maple Ave, Boston, Suffok, Massachusetts.</returns>
        </member>
        <member name="M:Telogis.GeoBase.StreetData.ToStringNoNumber">
            <summary>
            Convert the name of this StreetData to a string, where the name contains no number
            </summary>
            <returns></returns>
        </member>
        <member name="M:Telogis.GeoBase.StreetData.GetLocation">
            <summary>
            Get the location of the street
            </summary>
            <returns>A LatLon object containing the coordinates of the street</returns>
        </member>
        <member name="M:Telogis.GeoBase.StreetData.GetAddressLocation(System.Int32)">
            <summary>
            Get the location of a specified address
            </summary>
            <param name="number">The number on the street</param>
            <returns>A list of geocode addresses if there are multiple streets with the same number</returns>
        </member>
        <member name="M:Telogis.GeoBase.StreetData.GetAddressRanges">
            <summary>
            Get an array of the address ranges of the street. Each address range can be even numbers, odd numbers or simply a sequence of numbers.
            </summary>
            <returns>An array of the address ranges present on the street but in an unordered fashion</returns>
        </member>
        <member name="F:Telogis.GeoBase.StreetData.SearchText">
            <summary>
            The search text that caused this StreetData to be returned by the DrillDownGeocoder.
            In upper case.
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.StreetData.CompareTo(System.Object)">
            <summary>
            Compare this <b>StreetData</b> object to another.
            </summary>
            <remarks>The match is based on the name of the objects.</remarks>
            <param name="obj">The <b>StreetData</b> object to compare to this object</param>
            <returns><b>True</b> if the two are considered equal. Otherwise <b>false</b></returns>
        </member>
        <member name="M:Telogis.GeoBase.StreetData.MatchesQuery(System.String)">
            <summary>
            Returns true of the query string matches the street name.
            </summary>
            <param name="query">The query string to match.</param>
            <returns>True if the street name matches, false otherwise.</returns>
        </member>
        <member name="P:Telogis.GeoBase.StreetData.IndividualStreets">
            <summary>
            If the StreetData represents multiple streets (IsSingular is false), IndividualStreets provides a StreetData object
            for each of the individual streets that this StreetData describes.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.StreetData.Subregions">
            <summary>
            The names of the regions this street is in. E.g. Addington, Riccarton
            that are subdivisions of a city
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.StreetData.Regions">
            <summary>
            The names of the regions this street is in. E.g. Boston, Suffolk, Massachusetts
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.StreetData.CollatedName">
            <summary>
            The name of the street (or streets if this object represents multiple streets).
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.StreetData.Names">
            <summary>
            All the names of the street.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.StreetData.Postcodes">
            <summary>
            The postcodes of the street
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.StreetData.MaxAddr">
            <summary>
            The largest lot number on the street
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.StreetData.MinAddr">
            <summary>
            The smallest lot number on the street
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.StreetData.Suburb">
            <summary>
            Returns the first subdivision of a city that this street is in
            null if such a thing is not present. (It could be called suburb or neighbourhood
            depending on the country)
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.StreetData.City">
            <summary>
            Returns the city that this street is in
            null if such a thing is not present
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.StreetData.State">
            <summary>
            Returns the top level subdivision of a country that this street is in
            (could be state, prefecture, province, department, federal subject, district or region, 
            depending on the country)
            In smaller countries this could be the same as City
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.StreetData.IsSingular">
            <summary>
            True if this StreetData object describes a single street, False if it
            describes multiple underlying streets.
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.StreetData.NumberType">
            <summary>
            The pattern followed by an address range
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.StreetData.NumberType.Straight">
            <summary>
            This address range contains a sequence of numbers
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.StreetData.NumberType.Odd">
            <summary>
            This address range contains a sequence of only odd numbers
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.StreetData.NumberType.Even">
            <summary>
            This address range contains a sequence of only even numbers
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.StreetData.AddressRange">
            <summary>
            This class describes a subset of the addresses along the street that matches a certain pattern
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.StreetData.AddressRange.FixAddressInformation">
            <summary>
            Check if the address range is valid and fix it
            </summary>
            <returns></returns>
        </member>
        <member name="M:Telogis.GeoBase.StreetData.AddressRange.Intersects(Telogis.GeoBase.StreetData.AddressRange)">
            <summary>
            Find out if this Address Range intersects another Address Range
            </summary>
            <param name="other">The other Address Range to compare to</param>
            <returns></returns>
        </member>
        <member name="M:Telogis.GeoBase.StreetData.AddressRange.ToString">
            <summary>
            Returns the number for the corresponding location on a street link.
            </summary>
            <returns>If the numberins is straight, "[min]-[max]". If the numbering on the
            street is odd or even "[min], [max]", if a single number is available "[min]".</returns>
        </member>
        <member name="M:Telogis.GeoBase.StreetData.AddressRange.CompareTo(Telogis.GeoBase.StreetData.AddressRange)">
            <summary>
            Compare two <b>AddressRange</b> objects for equality.
            </summary>
            <param name="other">An <b>AddressRange</b> object to compare to this <b>AddressRange</b> object.</param>
            <returns><b>True</b> if the two are considered equal. Otherwise <b>false</b></returns>
        </member>
        <member name="P:Telogis.GeoBase.StreetData.AddressRange.min_xd088075e67f6ea91">
            <summary>
            Before 3.5.2.8, min was obfuscated so we must serialize it with its
            obfuscated name.  This property is only for serialization.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.StreetData.AddressRange.max_xffd6352b2e5d70e3">
            <summary>
            Before 3.5.2.8, max was obfuscated so we must serialize it with its
            obfuscated name.  This property is only for serialization.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.StreetData.AddressRange.type_x43163d22e8cd5a71">
            <summary>
            Before 3.5.2.8, type was obfuscated so we must serialize it with its
            obfuscated name.  This property is only for serialization.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.StreetData.AddressRange.Min">
            <summary>
            The smallest number in the address range
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.StreetData.AddressRange.Max">
            <summary>
            The largest number in the address range
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.StreetData.AddressRange.Type">
            <summary>
            The pattern this address range follows. It can be even, odd or straight (which means just a straight sequence of numbers)
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.Navigation.IGps">
            <summary>
            Classes that implement this interface represent a connected GPS unit. The unit could
            be simulated, or an actual GPS unit.
            </summary>
            <remarks><para><b>Related articles</b>: <a href="135e6827-fd28-45fa-b5f6-73926f90ea1c.htm">The IGps Interface</a>, 
            <a href="b0f30dda-fc24-4b79-aa45-2077f0a6df13.htm">Implementing an IGps Member</a>.</para>
            </remarks>
        </member>
        <member name="M:Telogis.GeoBase.Navigation.IGps.PowerUp">
            <summary>
            Implemented by derived classes to initialize the interface 
            to a GPS unit, as the unit is powered up.
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.Navigation.IGps.PowerDown">
            <summary>
            Implemented by derived classes to close the interface
            to a GPS unit, as the unit is powered down.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Navigation.IGps.PoweredUp">
            <summary>
            Implemented by derived classes to check whether the GPS unit
            is powered up. Should return <b>true</b> when the unit is powered
            on, otherwise <b>false</b>.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Navigation.IGps.Position">
            <summary>
            Implemented by derived classes to get the current <see cref="T:Telogis.GeoBase.Navigation.Position"/>.
            </summary>
        </member>
        <member name="E:Telogis.GeoBase.Navigation.IGps.Update">
            <summary>
            May be implemented by derived classes to act upon a GPS update.
            </summary>
        </member>
        <member name="E:Telogis.GeoBase.Navigation.IGps.GPSException">
            <summary>
            Called when the GPS experiences a fatal exception that may affect its ability to continue working.
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.Indexes.StringBTreeVersionCheck">
            <summary>
            Checks whether there is a StringBTree with a supported version.
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.Indexes.StringBTreeVersionCheck.IsFileSupported(System.UInt32,System.String)">
            <summary>
            Checks whether there is a StringBTree with a supported version in a given file in a 
            given repository.
            </summary>
            <param name="reposNo">The repository number.</param>
            <param name="filename">The name of the file to search: .gbd and .idx will be
            added.</param>
            <returns>Whether the file to search exists and is a supported version.</returns>
        </member>
        <member name="T:Telogis.GeoBase.Repositories.TableQuery">
            <summary>
            TableQuery is used to extract feature data from a custom table.
            </summary>
            <remarks>TableQuery is for internal use.</remarks>
        </member>
        <member name="P:Telogis.GeoBase.Repositories.TableQuery.FeatureTypeMask">
            <summary>
            A bitmap indicating the types of features to be extracted.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Repositories.TableQuery.WantPolygons">
            <summary>
            True if polygon features should be extracted, false otherwise.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Repositories.TableQuery.WantLines">
            <summary>
            True if line features should be extracted, false otherwise.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Repositories.TableQuery.WantPoints">
            <summary>
            True if point features should be extracted, false otherwise.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Repositories.TableQuery.TableName">
            <summary>
            The name of the table that contains the data to extract.
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.Indexes.StringBTreeSearchMeta">
            <summary>
            Metadata for a StringBTreeSearchOperation - contains information about the next row to 
            return and where the matching rows end.
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.GeoStream.Server.IWebWrapper.HttpContextCurrentServerMapPath(System.String)">
            <summary>
            Provides the physical file path that corresponds to the specified virtual path on the Web server.
            </summary>
            <param name="path">The virtual path of the Web server.</param>
            <returns>The physical file path that corresponds to the specified virtual path on the Web server.</returns>
        </member>
        <member name="M:Telogis.GeoBase.GeoStream.Server.IWebWrapper.HttpContextCurrentServerMapPathBin(System.String)">
            <summary>
            Provides the physical file path that corresponds to the specified virtual path on the Web server,
            plus the directory that the binaries reside.
            </summary>
            <param name="path">The virtual path of the Web server.</param>
            <returns>The physical file path that corresponds to the specified virtual path on the Web server
            plus the directory that the binaries reside.</returns>
        </member>
        <member name="T:Telogis.GeoBase.GetTimeDelegate">
            <summary>
            A delegate used for providing the current time to GeoBase functions.
            </summary>
            <returns>The current time.</returns>
        </member>
        <member name="T:Telogis.GeoBase.ZoomLevel">
            <summary>
            A helper class with a set of useful zoom levels for use with maps.
            </summary>
            <remarks>
            <para>Related articles: <a href="9af7c41f-fabe-48be-9317-1e019cc19c33.htm">Map Concept</a>.</para>
            </remarks>
        </member>
        <member name="P:Telogis.GeoBase.ZoomLevel.StreetLevel">
            <summary>
            Street Level.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.ZoomLevel.CityLevel">
            <summary>
            City Level.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.ZoomLevel.AllUSA">
            <summary>
            Far enough out to show the entire USA.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.ZoomLevel.World">
            <summary>
            Shows the entire world.
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.LatLonBoundingBox">
            <summary>
            A helper class used to calculate the LatLon bounding box for a given projection.
            Can take either an IMap or an IProject for the calculation.
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.DistanceUnit">
            <summary>
            The DistanceUnit is used when requesting distance conversions.
            </summary>
            <remarks>Distance is first calculated in nautical miles by: <code>NM = radians_distance * 180.0 * 60.0 / pi</code>
            Conversion to the desired distance is then carried out by the formulas given above, where NM stands for nautical miles.
            </remarks>
            <seealso cref="M:Telogis.GeoBase.MathUtil.ConvertUnits(System.Double,Telogis.GeoBase.DistanceUnit,Telogis.GeoBase.DistanceUnit)">ConvertUnits</seealso> and <see cref="T:Telogis.GeoBase.MathUtil"/>.
        </member>
        <member name="F:Telogis.GeoBase.DistanceUnit.FEET">
            <summary>
            = NM * 6076.11549
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.DistanceUnit.YARDS">
            <summary>
            = NM * 2025.37183
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.DistanceUnit.MILES">
            <summary>
            = NM * 1.15077945
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.DistanceUnit.METERS">
            <summary>
            = NM * 1852
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.DistanceUnit.KILOMETERS">
            <summary>
            = NM * 1.852
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.DistanceUnit.NAUTICAL_MILES">
            <summary>
            NM
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.DistanceUnit.RADIANS">
            <summary>
            Returns the existing radians value
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.DistanceUnit.DEGREES">
            <summary>
            Returns the degrees value
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.DistanceUnit.CENTIMETERS">
            <summary>
            Returns the centimeters value
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.DistanceUnit.INCHES">
            <summary>
            Returns the inches value
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.TimeUnit">
            <summary>
            Used when requesting time conversions.
            </summary>
            <remarks>See <see cref="M:Telogis.GeoBase.MathUtil.TimeToUnits(System.Double,Telogis.GeoBase.TimeUnit)"/>.</remarks>
        </member>
        <member name="F:Telogis.GeoBase.TimeUnit.SECOND">
            <summary>
            Seconds
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.TimeUnit.MINUTE">
            <summary>
            Minutes
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.TimeUnit.HOUR">
            <summary>
            Hours
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.SpeedUnit">
            <summary>
            These definitions are used when requesting speed conversions.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.SpeedUnit.Unknown">
            <summary>
            An 'unknown' speed type
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.SpeedUnit.RadiansPerSecond">
            <summary>
            Radians per second
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.SpeedUnit.MetersPerSecond">
            <summary>
            Meters per second
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.SpeedUnit.KilometersPerHour">
            <summary>
            Kilometers per hour
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.SpeedUnit.MilesPerHour">
            <summary>
            Miles per hour
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.SpeedUnit.Knots">
            <summary>
            Knots
            </summary>
            <remarks>A knot is one nautical miles per hour.</remarks>
        </member>
        <member name="T:Telogis.GeoBase.SpeedValue">
            <summary>
            Represents a speed as a value and a SpeedUnit.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.SpeedValue.Value">
            <summary>
            The speed, expressed in the type of units given by the Units property.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.SpeedValue.Units">
            <summary>
            The units used to interpret the Value of this SpeedValue.
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.SpeedValue.#ctor(System.Int32,Telogis.GeoBase.SpeedUnit)">
            <summary>
            Create a SpeedValue object for a specified speed in specified units.
            </summary>
            <param name="Value">The speed (expressed in the specified units)</param>
            <param name="Units">The units</param>
        </member>
        <member name="T:Telogis.GeoBase.HoursMinsValue">
            <summary>
            Represents a timespan in hours and minutes. Differs from a TimeSpan because Hours may be
            greater than 24.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.HoursMinsValue.Hours">
            <summary>
            The number of hours. Unlike the Hours property of a TimeSpan, this value may be greater than 24.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.HoursMinsValue.Minutes">
            <summary>
            The number of minutes in addition to the Hours value.
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.HoursMinsValue.#ctor(System.Int32,System.Int32)">
            <summary>
            Create a new HoursMinsValue object. 
            </summary>
            <param name="Hours">The number of hours.</param>
            <param name="Minutes">The number of minutes.</param>
        </member>
        <member name="T:Telogis.GeoBase.BackgroundThread">
            <summary>
            Enumeration used to control whether or not a thread created by GBThread is a background
            thread.
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.GBThread">
            <summary>
            Utility class to create threads, which helps ensure that all threads are named and have an
            appropriate Repository as their CurrentThreadRepository.  
            </summary>
            <remarks>
            Typically the caller will specify Repository.CurrentRepositoryOrNull as the new thread's
            Repository.  This allows the new thread to use the calling thread's CurrentThreadRepository 
            (if it has been set explicitly), otherwise the new thread will use the application's
            Repository.Default.
            </remarks>
        </member>
        <member name="M:Telogis.GeoBase.GBThread.RunThread(System.Threading.ThreadStart,Telogis.GeoBase.Repositories.Repository,System.String,System.Threading.ThreadPriority,Telogis.GeoBase.BackgroundThread)">
            <summary>
            Creates and starts a thread.
            </summary>
            <param name="start">The delegate representing the method to run on the new 
            thread.</param>
            <param name="repo">The Repository to set as the new thread's
            CurrentThreadRepository.</param>
            <param name="name">The name of the new thread.</param>
            <param name="priority">The priority of the new thread.</param>
            <param name="isBackground">Whether the new thread is a background thread.</param>
            <returns>The new thread.</returns>
        </member>
        <member name="M:Telogis.GeoBase.GBThread.CreateThread(System.Threading.ParameterizedThreadStart,Telogis.GeoBase.Repositories.Repository,System.String,System.Threading.ThreadPriority,Telogis.GeoBase.BackgroundThread)">
            <summary>
            Creates a thread.
            </summary>
            <param name="start">The delegate representing the method to run on the new 
            thread.</param>
            <param name="repo">The Repository to set as the new thread's
            CurrentThreadRepository.</param>
            <param name="name">The name of the new thread.</param>
            <param name="priority">The priority of the new thread.</param>
            <param name="isBackground">Whether the new thread is a background thread.</param>
            <returns>The new thread.</returns>
        </member>
        <member name="M:Telogis.GeoBase.GBThread.CreateThread(System.Threading.ThreadStart,Telogis.GeoBase.Repositories.Repository,System.String,System.Threading.ThreadPriority,Telogis.GeoBase.BackgroundThread)">
            <summary>
            Creates a thread.
            </summary>
            <param name="start">The delegate representing the method to run on the new 
            thread.</param>
            <param name="repo">The Repository to set as the new thread's
            CurrentThreadRepository.</param>
            <param name="name">The name of the new thread.</param>
            <param name="priority">The priority of the new thread.</param>
            <param name="isBackground">Whether the new thread is a background thread.</param>
            <returns>The new thread.</returns>
        </member>
        <member name="M:Telogis.GeoBase.GBThread.CreateThread(System.Threading.ThreadStart,System.Int32,Telogis.GeoBase.Repositories.Repository,System.String,System.Threading.ThreadPriority,Telogis.GeoBase.BackgroundThread)">
            <summary>
            Creates a thread.
            </summary>
            <param name="start">The delegate representing the method to run on the new 
            thread.</param>
            <param name="maxStackSize">The maximum stack size for the new thread.</param>
            <param name="repo">The Repository to set as the new thread's
            CurrentThreadRepository.</param>
            <param name="name">The name of the new thread.</param>
            <param name="priority">The priority of the new thread.</param>
            <param name="isBackground">Whether the new thread is a background thread.</param>
            <returns>The new thread.</returns>
        </member>
        <member name="M:Telogis.GeoBase.GBThread.CreateThread(System.Threading.ParameterizedThreadStart,System.Int32,Telogis.GeoBase.Repositories.Repository,System.String,System.Threading.ThreadPriority,Telogis.GeoBase.BackgroundThread)">
            <summary>
            Creates a thread.
            </summary>
            <param name="start">The delegate representing the method to run on the new 
            thread.</param>
            <param name="maxStackSize">The maximum stack size for the new thread.</param>
            <param name="repo">The Repository to set as the new thread's
            CurrentThreadRepository.</param>
            <param name="name">The name of the new thread.</param>
            <param name="priority">The priority of the new thread.</param>
            <param name="isBackground">Whether the new thread is a background thread.</param>
            <returns>The new thread.</returns>
        </member>
        <member name="T:Telogis.GeoBase.Gaussian">
            <summary>
            Represents a Gaussian (normally distributed) random variable.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Gaussian.Variance">
            <summary>
            The statistical variance of this random variable. This is
            the square of the standard deviation.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Gaussian.Mean">
            <summary>
            The mean value of the random variable.
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.Gaussian.#ctor">
            <summary>
            Creates a new Gaussian variable with mean of 0 and variance of 1.
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.Gaussian.#ctor(System.Double,System.Double)">
            <summary>
            Creates a new Gaussian variable with the supplied mean and variance.
            </summary>
            <param name="mean">The mean to give the new variable.</param>
            <param name="variance">The variance to give the new variable.</param>
        </member>
        <member name="M:Telogis.GeoBase.Gaussian.NextValue">
            <summary>
            Retrieves the next value from the Gaussian variable.
            </summary>
            <returns>Random numbers with a normal distribution with a mean of <see cref="F:Telogis.GeoBase.Gaussian.Mean"/>
            and variance of <see cref="F:Telogis.GeoBase.Gaussian.Variance"/></returns>
        </member>
        <member name="T:Telogis.GeoBase.DistanceMeter">
             <summary>
             Records the cumulative distance (as the crow-flies) traveled from a starting point
             through a number of other points.
             </summary>
             <remarks>
             <para>This is useful for recording the total distance traveled along
             a route consisting of a number of <see cref="T:Telogis.GeoBase.LatLon"/> points.</para>
             <para>Consider using a <see cref="T:Telogis.GeoBase.Routing.RouteMatrix">RouteMatrix</see>
             if you'd like to calculate the distance between stops on a route.</para>
             </remarks>
             <example><code lang="C#">
             /* this example shows how to use a DistanceMeter with an IGps member (your GPS unit) */
            
             IGps myGps = new ... // see "Tutorials -&gt; Navigation -&gt; The IGps Interface" for more info
            
             // start the DistanceMeter, with current GPS location and zero-distance
             DistanceMeter dm = new DistanceMeter(myGps.Position.location, 0);
            
             ...
            
             // suppose that this line of code gets called regularly, say once every 20 seconds
             dm.Add(myGps.Position.location);
            
             ...
            
             // whenever we want to get the as-the-crow-flies distance, we just need to call:
             double distanceTravelled = dm.Distance(DistanceUnit.Kilometers);
            
             ...
            
             // if we  restart our journey we can call:
             dm.ClearDelta();
             // ... this is like hitting 'reset' on your car odometer trip-counter. NOTE: If we
             // called dm.ClearAll() instead, we wouldn't start counting the distance until the
             // next dm.Add() - probably 20 seconds away (given our assumption about the rate 
             // at which dd.Add() is called, above).
            
             </code></example>
        </member>
        <member name="M:Telogis.GeoBase.DistanceMeter.#ctor(Telogis.GeoBase.LatLon,System.Double)">
            <summary>
            Construct a DistanceMeter with a start point and an initial distance (in radians) already
            traveled.
            </summary>
            <remarks>The cumulative distance traveled is referred to as the delta.</remarks>
            <param name="d">Starting point.</param>
            <param name="f">Initial Distance in radians.</param>
        </member>
        <member name="M:Telogis.GeoBase.DistanceMeter.#ctor">
            <summary>
            Construct a DistanceMeter with no starting point and zero distance already traveled.
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.DistanceMeter.Add(Telogis.GeoBase.LatLon)">
            <summary>
            Add a new point. The distance from the previous point to this point (as the crow flies) is
            calculated and added to the total distance traveled.
            </summary>
            <param name="newPt">The next <see cref="T:Telogis.GeoBase.LatLon"/> point in the route.</param>
        </member>
        <member name="M:Telogis.GeoBase.DistanceMeter.AddPoints(System.Collections.Generic.IList{Telogis.GeoBase.LatLon})">
            <summary>
            Add a list of points. Equivalent to calling <see cref="M:Telogis.GeoBase.DistanceMeter.Add(Telogis.GeoBase.LatLon)">Add</see> for each point in the list.
            </summary>
            <param name="newPoints">The list of points to add to the DistanceMeter</param>
        </member>
        <member name="M:Telogis.GeoBase.DistanceMeter.ClearFull">
            <summary>
            Clears both the accumulated distance and the last point.
            </summary>
            <remarks> Distance is calculated between two (or more) points, so no distance will
            be accumulated until at least two points have been added.
            </remarks>
        </member>
        <member name="M:Telogis.GeoBase.DistanceMeter.ClearDelta">
            <summary>
            Zero the distance traveled, but retain the last point on the route.
            </summary>
            <remarks>Useful when only the length of the current segment on a route need be known.</remarks>
        </member>
        <member name="M:Telogis.GeoBase.DistanceMeter.Distance(Telogis.GeoBase.DistanceUnit)">
            <summary>
            Get total distance traveled (as the crow flies) from the starting point, through any
            intermediate points, to the last point that was added.
            </summary>
            <param name="u">Units of distance that the result should be returned in.</param>
            <returns>The distance traveled in the units specified.</returns>
        </member>
        <member name="M:Telogis.GeoBase.DistanceMeter.Clone">
            <summary>
            Returns a clone. Operations performed on the clone are independent.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Telogis.GeoBase.DistanceMeter.Miles">
            <summary>
            Returns the current distance traveled between all points (as the crow flies) in <see cref="T:Telogis.GeoBase.DistanceUnit">miles</see>.
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.SpeedMeter">
            <summary>
            Records the average speed given points and timestamps.
            </summary>
            <remarks>This is useful for recording the average speed along
            a route consisting of a number of <see cref="T:Telogis.GeoBase.LatLon"/> points.</remarks>
        </member>
        <member name="T:Telogis.GeoBase.MultiHashMap">
            <summary>
            A MultiHashMap is a <see cref="T:System.Collections.Hashtable"/> that puts objects with the same
            key values into an <see cref="T:System.Collections.ArrayList"/>.
            </summary>
            <remarks>
            This class uses <see cref="T:System.Collections.ArrayList">ArrayLists</see> to store objects that
            collide (have the same key value). When queried for a key value, an ArrayList of all objects
            with that key is returned.
            </remarks>
        </member>
        <member name="M:Telogis.GeoBase.MultiHashMap.#ctor">
            <summary>
            Constructs a MultiHashMap where the underlying <see cref="T:System.Collections.Hashtable"/>
            has the default capacity.
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.MultiHashMap.#ctor(System.Int32)">
            <summary>
            Constructs a MultiHashMap where the underlying <see cref="T:System.Collections.Hashtable"/>
            is constructed with the given capacity.
            </summary>
            <param name="capacity">The initial storage capacity.</param>
        </member>
        <member name="M:Telogis.GeoBase.MultiHashMap.Add(System.Object,System.Object)">
            <summary>
            Stores the given object at a location determined by its key value.
            </summary>
            <param name="key">The key for the object that is being added.</param>
            <param name="val">The object to be added.</param>
        </member>
        <member name="M:Telogis.GeoBase.MultiHashMap.Remove(System.Object,System.Object)">
            <summary>
            Removes the given object with the given key value.
            </summary>
            <remarks>
            Unlike a <see cref="T:System.Collections.Hashtable"/> both the object to be removed (val)
            and a key value are required by this method. It is not sufficient to supply only a key,
            as this does not allow the distinct object to be determined where there are multiple objects
            with the same key.
            </remarks>
            <param name="key">The key for the object that is being removed.</param>
            <param name="val">The object to be removed.</param>
        </member>
        <member name="M:Telogis.GeoBase.MultiHashMap.GetList(System.Object)">
            <summary>
            Gets an <see cref="T:System.Collections.ArrayList"/> of objects that have the same key value.
            </summary>
            <param name="key">The key of the object(s) to be returned.</param>
            <returns>An <see cref="T:System.Collections.ArrayList"/> of objects matching the key. If none
            match, an empty ArrayList is returned.</returns>
        </member>
        <member name="F:Telogis.GeoBase.DebugLogSet.None">
            <summary>
            Don't log anything.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.DebugLogSet.Other">
            <summary>
            Log 'other' events.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.DebugLogSet.GeoCoder">
            <summary>
            Log GeoCoding events.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.DebugLogSet.MemoryUsage">
            <summary>
            Log memory usage.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.DebugLogSet.Metrics">
            <summary>
            Log performance metrics.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.DebugLogSet.Counter">
            <summary>
            Log counter value.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.DebugLogSet.Route">
            <summary>
            Log route.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.DebugLogSet.Renderers">
            <summary>
            Log renderer information
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.DebugLogSet.All">
            <summary>
            Log all.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.DebugLogSet.Confidence">
            <summary>
            Log confidence processing.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.DebugLogSet.Interop">
            <summary>
            Log all interop calls.
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.DebugLog">
            <summary>
            Logs various statistics to file. For internal use.
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.DistanceRemainingCalculator.#ctor">
            <summary>
            Create an unintialised distance remaining calculator.
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.DistanceRemainingCalculator.#ctor(Telogis.GeoBase.Routing.IntersectionDescription,System.Double,Telogis.GeoBase.DistanceUnit)">
            <summary>
            Create a new distance remaining calculator.
            </summary>
            <param name="firstIntersection"></param>
            <param name="totalDistance"></param>
            <param name="du"></param>
        </member>
        <member name="M:Telogis.GeoBase.DistanceRemainingCalculator.Reset(Telogis.GeoBase.Routing.IntersectionDescription,System.Double,Telogis.GeoBase.DistanceUnit)">
            <summary>
            Reset the route and recalculate the total distance.
            </summary>
            <param name="firstIntersection"></param>
            <param name="totalDistance"></param>
            <param name="du"></param>
        </member>
        <member name="M:Telogis.GeoBase.DistanceRemainingCalculator.AdvancePoint">
            <summary>
            Advance one point on the route
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.DistanceRemainingCalculator.AdvanceTo(Telogis.GeoBase.Routing.IntersectionDescription,System.Int32)">
            <summary>
            Advances to a given intersection and inbound segment.
            </summary>
            <param name="newInter"></param>
            <param name="inboundSegment"></param>
        </member>
        <member name="M:Telogis.GeoBase.DistanceRemainingCalculator.DistanceToNextPoint(Telogis.GeoBase.DistanceUnit,Telogis.GeoBase.LatLon)">
            <summary>
             Gets the distance until the next point.
            </summary>
            <param name="du"></param>
            <param name="pos"></param>
            <returns></returns>
        </member>
        <member name="M:Telogis.GeoBase.DistanceRemainingCalculator.DistanceRemaining(Telogis.GeoBase.DistanceUnit)">
            <summary>
            Gets the distance from the previous point to the end of the route.
            </summary>
            <param name="du"></param>
            <returns></returns>
        </member>
        <member name="M:Telogis.GeoBase.DistanceRemainingCalculator.DistanceRemaining(Telogis.GeoBase.DistanceUnit,Telogis.GeoBase.LatLon)">
            <summary>
            Gets the distance to the end of the route.
            </summary>
            <param name="du"></param>
            <param name="pos"></param>
            <returns></returns>
        </member>
        <member name="M:Telogis.GeoBase.DistanceRemainingCalculator.Clone">
            <summary>
            Returns a clone of this DistanceRemainingCalculator.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Telogis.GeoBase.DistanceRemainingCalculator.NextPoint">
            <summary>
            Gets the next point on the route.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.DistanceRemainingCalculator.LastPoint">
            <summary>
            Gets the last point on the route.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.DistanceRemainingCalculator.NextIntersection">
            <summary>
            Gets the next intersection on the route.
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.ETACalculator">
            <summary>
            A class to calculate the estimated time of arrival (ETA)
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.ETACalculator.MinRatio">
            <summary>
            Minimum value for ratio.  We don't expect anyone to go more than 3x the calculated
            speed for any appreciable distance.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.ETACalculator.MaxRatio">
            <summary>
            Maximum value for ratio. Anyone going 10x slower than the calculated speed for a
            sustained period will be considered stopped (see StoppedLimitTicks).
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.ETACalculator.StoppedLimitTicks">
            <summary>
            Number of ticks we can be stopped for before we stop putting data in the window.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.ETACalculator.TickLengthSecs">
            <summary>
            Duration between ticks.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.ETACalculator.WindowSizeTicks">
            <summary>
            Number of ticks in the window.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.ETACalculator.m_slidingWindow">
            <summary>
            Every tick (unless stopped) the change in estimated time is stored in the
            sliding window.
            The ratio is calculated by (TickLengthSecs * WindowSizeTicks) / Sum(m_slidingWindow).
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.ETACalculator.m_prevTickRealTime">
            <summary>
            The time when the most recent non-stopped tick occured. If this was more than 2 hours
            ago the window is reset.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.ETACalculator.m_prevTickEstTime">
            <summary>
            The estimated time since the start of the route at the previous tick.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.ETACalculator.m_currentEstTime">
            <summary>
            The most recently calculated estimated time since the start of the route.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.ETACalculator.m_stoppedCount">
            <summary>
            The number of ticks we have been stopped for.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.ETACalculator.m_timeRemaining">
            <summary>
            Most recent calculated value for the time remaining on the route.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.ETACalculator.m_expectedTime">
            <summary>
            Expected route time.
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.ETACalculator.SetExpectedTime(System.TimeSpan)">
            <summary>
            Set the expected route time.
            </summary>
            <param name="expectedTime">The expected route time.</param>
        </member>
        <member name="M:Telogis.GeoBase.ETACalculator.TimeRemaining(System.DateTime,System.Double,System.TimeSpan,System.TimeSpan,System.Double,System.Double)">
            <summary>
            Calculate the estimated time remaining for this route.
            </summary>
            <param name="currentTime">The current time.</param>
            <param name="speed">The speed (rad/s) that we expect to travel along the current link.
            Must be &gt; 0.</param>
            <param name="currentLinkStartTime">The expected time for the <b>start</b> of the current link.</param>
            <param name="currentLinkEndTime">The expected time for the <b>end</b> of the current link.</param>
            <param name="currentLinkLength">The length (rad) of the current link.</param>
            <param name="distanceToNextIntersection">The distance (rad) to the next intersection.</param>
            <returns>The estimated time remaining for this route.</returns>
        </member>
        <member name="P:Telogis.GeoBase.PlatformUtils.OnUnix">
            <summary>
             Are we running on PlatformID.Unix?
            </summary>
            <returns>Whether we are running on PlatformID.Unix</returns>
        </member>
        <member name="T:Telogis.GeoBase.LazyInstance`1">
            <summary>
            Lazily instantiate an object
            </summary>
            <typeparam name="T">The object</typeparam>
        </member>
        <member name="M:Telogis.GeoBase.LazyInstance`1.#ctor">
            <summary>
            Instantiate with default constructor
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.LazyInstance`1.#ctor(Telogis.GeoBase.Function{`0})">
            <summary>
            Instantiate with a custom factory function
            </summary>
            <param name="instatiator"></param>
        </member>
        <member name="M:Telogis.GeoBase.Routing.DirectionsGenerator.#ctor(Telogis.GeoBase.Routing.Routing,Telogis.GeoBase.Routing.DirectionLink,System.Collections.ArrayList,Telogis.GeoBase.Routing.Directions,System.TimeSpan)">
            <summary>
            DirectionsGenerator constructor.
            </summary>
            <param name="p_route">Routing that generated the route.</param>
            <param name="start">Link at which to start describing.</param>
            <param name="directions">Directions to describe.</param>
            <param name="dirs">Directions class.</param>
            <param name="startTimeOffset">The start time of this leg, relative
            to p_route.CurrentTime.</param>
        </member>
        <member name="M:Telogis.GeoBase.Routing.DirectionsGenerator.GetRoadClass(Telogis.GeoBase.Routing.RouteFlag)">
            <summary>
            Calculates a road class number that is a combination of functional class
            and route type with the functional class in the tens column, and the route type
            in the units. Roads without a route type get a route type of 9.
            </summary>
            <param name="flags"></param>
            <returns></returns>
        </member>
        <member name="M:Telogis.GeoBase.Routing.DirectionsGenerator.IsIllegalTurn(System.Boolean@)">
            <summary>
            Determines whether the turn we're processing is one we should try to avoid.
            </summary>
            <param name="justPenalize">If true then for the current route we should consider the
            turn illegal, but when we re-run instead of adding a constraint with speed 0 we should
            add a constraint with a slow speed.  This is for U-turns that are legal but are a
            manoeuvre we'd like to avoid if possible.</param>
            <returns>Whether or not the turn should be treated as illegal.</returns>
        </member>
        <member name="M:Telogis.GeoBase.Routing.DirectionsGenerator.DrivableLinkConnection(Telogis.GeoBase.StreetLink,Telogis.GeoBase.StreetLink)">
            <summary>
            Evaluates the connectivity of two street links for traffic.
            </summary>
            <param name="from">The link to start at.</param>
            <param name="to">The link to finish at.</param>
            <returns>True if 'from' is directly connect to 'to' and traffic can flow in this direction.</returns>
        </member>
        <member name="M:Telogis.GeoBase.Routing.DirectionsGenerator.GetThroughLink(System.Collections.Generic.List{Telogis.GeoBase.Routing.DirectionsGenerator.IntersectionLink},System.Boolean@)">
            <summary>
            Determine the through link for an intersection.  For a particular inbound link the
            through link is the outbound link on which most traffic is likely to flow, provided
            both inbound and outbound links are likely to be on the route of major traffic flow
            through the intersection.
            </summary>
            <param name="intersectionLinks">The links at the intersection.</param>
            <param name="takingThroughLink">Whether the route is taking the through link.</param>
            <returns>The through link.</returns>
        </member>
        <member name="P:Telogis.GeoBase.Routing.DirectionsGenerator.CurrentDirection">
            <summary>
            Gets the last entry in directs.
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.Internal.GeoCoderIntDesktop.FixCityName(System.String)">
            <summary>
            Look for an abbreviated direction in front of a city (eg N HOLLYWOOD)
            And expands it to full direction
            </summary>
            <param name="city_name"></param>
            <returns></returns>
        </member>
        <member name="M:Telogis.GeoBase.Internal.GeoCoderIntDesktop.ProcessResults(System.IntPtr,Telogis.GeoBase.Internal.StreetAddressMatch,System.Int32*,Telogis.GeoBase.Internal.gb_geocode_addr*,Telogis.GeoBase.Internal.IGeoCoder,System.Int32,System.Collections.Generic.List{Telogis.GeoBase.Internal.StreetAddressMatch},Telogis.GeoBase.SEARCH_TYPE)">
            <summary>
            Process the result list, return true on an exact match
            </summary>
            <param name="alloc"></param>
            <param name="search"></param>
            <param name="searchFiles"></param>
            <param name="result"></param>
            <param name="coder">The geocoder that was used for this search</param>
            <param name="cnt"></param>
            <param name="results"></param>
            <param name="found_by"></param>
            <returns></returns>
        </member>
        <member name="M:Telogis.GeoBase.Internal.GeoCoderIntDesktop.ParseStreetNum(System.String)">
            <summary>
            Parse the number from the start of a street name.
            e.g. Eighty Five Enterprise => 85 Enterprise
            </summary>
            <param name="name">The current street name</param>
            <returns>A list of possible street numbers with their related names</returns>
        </member>
        <member name="M:Telogis.GeoBase.Internal.GeoCoderIntDesktop.StringToInt(System.String,System.Collections.Generic.Dictionary{System.String,System.Int32})">
            <summary>
            Get the integer equivalent of a written number.
            Works for numbers from 1-99
            </summary>
            <param name="written">The written number</param>
            <param name="numbers">The dictionary to use (cardinalNumbers or ordinalNumbers)</param>
            <returns>The integer version of a number, or -1 if the number can't be recognised</returns>
        </member>
        <member name="M:Telogis.GeoBase.Internal.GeoCoderIntDesktop.Cardinal(System.String)">
            <summary>
            Get the integer equivalent of a written number.
            Works for numbers from 1-99
            </summary>
            <param name="written">The written number</param>
            <returns>The integer version of a number, or -1 if the number can't be recognised</returns>
        </member>
        <member name="M:Telogis.GeoBase.Internal.GeoCoderIntDesktop.Ordinal(System.String)">
            <summary>
            Get the numeric equivalent of a written ordinal number.
            Works for "first" to "ninety ninth". Words can be separated by a space or '-'
            </summary>
            <param name="written">The written number</param>
            <returns>The numeric version, or null if the number can't be recognised</returns>
        </member>
        <member name="M:Telogis.GeoBase.Internal.GeoCoderIntDesktop.GeoCode(Telogis.GeoBase.Internal.StreetAddressMatch,Telogis.GeoBase.Internal.IGeoCoder,System.Int32[],Telogis.GeoBase.Internal.gb_geocode_addr,Telogis.GeoBase.Internal.GeoCoderIntDesktop.GCOptions)">
            <summary>
            Main portion of the Geocoder searches many ways looking for an exact match
            and collecting up close matches
            </summary>
            <param name="search_match"></param>
            <param name="coder">The geocoder used for this search</param>
            <param name="searchFiles"></param>
            <param name="search"></param>
            <param name="opts"></param>
            <returns></returns>
        </member>
        <member name="M:Telogis.GeoBase.Internal.GeoCoderIntDesktop.GetRealFields(System.String,Telogis.GeoBase.Internal.GeoCoderIntDesktop.HighwayFeature@)">
            <summary>
            Method used to get the real field for each address
            only used for Highway type
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.Internal.GeoCoderIntDesktop.IsDuplicateMatch(Telogis.GeoBase.Internal.StreetAddressMatch,Telogis.GeoBase.Internal.StreetAddressMatch)">
            <summary>
            Determines whether two matches are duplicates of each other.
            </summary>
            <param name="m1">The first match.</param>
            <param name="m2">The second match.</param>
            <returns>Whether the two matches are duplicates of each other.</returns>
        </member>
        <member name="M:Telogis.GeoBase.Internal.GeoCoderIntDesktop.GetConfidence(Telogis.GeoBase.Internal.StreetAddressMatch,Telogis.GeoBase.Internal.StreetAddressMatch,System.Boolean,Telogis.GeoBase.Internal.IGeoCoder,Telogis.GeoBase.Country)">
            <summary>
            Returns the confidence of the match
            MAX_MATCH is the Maximum
            </summary>
            <param name="input"></param>
            <param name="found"></param>
            <param name="AbsenceImplies"></param>
            <param name="coder"></param>
            <param name="country"></param>
            <returns></returns>
        </member>
        <member name="M:Telogis.GeoBase.Internal.GeoCoderIntDesktop.TypesAreTheSame(System.String,System.String,System.Boolean,Telogis.GeoBase.Country,Telogis.GeoBase.Internal.ITypeMapProvider)">
            <summary>
            Compare the type the user typed in and the street retrieved from the database
            </summary>
            <param name="type1">Type the user typed in</param>
            <param name="type2">Type retrieved from the database</param>
            <param name="AddNoMatch">If set to true, then free points are given for the types that are not specified by the user</param>
            <param name="country"></param>
            <param name="typeMap"></param>
            <returns></returns>
        </member>
        <member name="M:Telogis.GeoBase.Internal.GeoCoderIntDesktop.Suffice(System.String)">
            <summary>
            Transform a suffix into canonical form.
            </summary>
            <param name="suffix">The arbitrary suffix to transform.</param>
            <returns>Canonical form of passed suffix.</returns>
        </member>
        <member name="P:Telogis.GeoBase.Internal.GeoCoderIntDesktop.Instance">
            <summary>
            Provides the single instance of ExternalGeocoders
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.Internal.GeoCoderIntDesktop.HighwayFeature">
            <summary>
             Structure of Highway,used for getConfindence method
             </summary>
        </member>
        <member name="T:Telogis.UI.Label">
            <summary>
            Simple label that inherits Back and ForeColor if they are not set
            </summary>
        </member>
        <member name="M:Telogis.UI.Label.OnParentChanged(System.EventArgs)">
            <summary>
            Eventhandler to update foreground/background colors when changed by the parent
            </summary>
            <param name="e"></param>
        </member>
        <member name="P:Telogis.UI.Label.ForeColor">
            <summary>
            Get or set the foreground color of this label
            </summary>
        </member>
        <member name="P:Telogis.UI.Label.BackColor">
            <summary>
            Get or set the background color of this label
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.PoiType">
            <summary>
            An enumeration representing different <see cref="T:Telogis.GeoBase.Poi"/> (point of interest)
            types.
            </summary>
            <remarks>
            To show only a certain type of POI on a map, consider using a <see cref="T:Telogis.GeoBase.PoiRenderer"/> object.
            <para><b>Related articles</b>: <a href="9af7c41f-fabe-48be-9317-1e019cc19c33.htm">Map Concept</a>.</para>
            </remarks>
        </member>
        <member name="F:Telogis.GeoBase.PoiType.Airport">
            <summary>
            An airport
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.PoiType.AmusementPark">
            <summary>
            An amusement park
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.PoiType.ATM">
            <summary>
            An ATM (Automated Teller Machine)
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.PoiType.AutomobileClub">
            <summary>
            An automobile club
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.PoiType.Bank">
            <summary>
            A bank
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.PoiType.BookStore">
            <summary>
            A book store
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.PoiType.BorderCrossing">
            <summary>
            A border crossing point
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.PoiType.BowlingCenter">
            <summary>
            A bowling center
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.PoiType.BritishRail">
            <summary>
            A British Rail station
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.PoiType.BusStation">
            <summary>
            A bus station
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.PoiType.Business">
            <summary>
            A business
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.PoiType.BusinessService">
            <summary>
            A facility providing services to businesses
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.PoiType.CarDealer">
            <summary>
            A car dealer
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.PoiType.CarRepair">
            <summary>
            A place which provides car repairs
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.PoiType.Casino">
            <summary>
            A casino
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.PoiType.Cemetery">
            <summary>
            Cemetery
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.PoiType.Church">
            <summary>
            Place of worship
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.PoiType.Cinema">
            <summary>
            A cinema
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.PoiType.CityHall">
            <summary>
            A building with city hall type functions
            </summary>
            <remarks>
            Can be used to represent local authority centers
            </remarks>
        </member>
        <member name="F:Telogis.GeoBase.PoiType.CoffeeShop">
            <summary>
            A coffee shop
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.PoiType.ConventionCenter">
            <summary>
            A convention or exhibition center
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.PoiType.CommunityCenter">
            <summary>
            A community center
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.PoiType.CommuterRailStation">
            <summary>
            Commuter rail station, such as a metro station
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.PoiType.CourtHouse">
            <summary>
            A court house
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.PoiType.FerryTerminal">
            <summary>
            A ferry terminal
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.PoiType.FireStation">
            <summary>
            Fire Station
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.PoiType.GolfCourse">
            <summary>
            A golf course
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.PoiType.GroceryStore">
            <summary>
            A grocery store
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.PoiType.HigherEducation">
            <summary>
            A center for higher education (college, university etc)
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.PoiType.Hospitals">
            <summary>
            A hospital
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.PoiType.HotelMotel">
            <summary>
            A hotel or motel
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.PoiType.IceSkatingRink">
            <summary>
            An ice skating rink
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.PoiType.Library">
            <summary>
            A library
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.PoiType.LondonUnderground">
            <summary>
            A London Underground (tube) station
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.PoiType.Marina">
            <summary>
            A marina
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.PoiType.Monument">
            <summary>
            A monument of some description
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.PoiType.MotorcycleDealership">
            <summary>
            A motorcycle dealership
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.PoiType.Museum">
            <summary>
            A museum
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.PoiType.Nightlife">
            <summary>
            A location providing nighttime entertainment (such as a bar, club or lounge)
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.PoiType.Park">
            <summary>
            A park
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.PoiType.ParkAndRide">
            <summary>
            A Park &amp; Ride facility
            </summary>
            <remarks>
            Park &amp; Ride services allow commuters to drive a short distance in their
            personal automobiles in order to catch a train, bus or other public transport
            </remarks>
        </member>
        <member name="F:Telogis.GeoBase.PoiType.ParkingGarage">
            <summary>
            A parking garage
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.PoiType.ParkingLot">
            <summary>
            A parking lot
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.PoiType.PerformingArts">
            <summary>
            A performing arts center or event
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.PoiType.PetrolStation">
            <summary>
            A petrol / gas station
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.PoiType.Pharmacy">
            <summary>
            A pharmacy / drug store
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.PoiType.PoliceStation">
            <summary>
            A police station
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.PoiType.PublicSportAirport">
            <summary>
            A non-commercial airport / field
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.PoiType.RentalCar">
            <summary>
            A rental car facility
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.PoiType.RestArea">
            <summary>
            A rest area
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.PoiType.Restaurant">
            <summary>
            A restaurant
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.PoiType.Schools">
            <summary>
            A school
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.PoiType.Shopping">
            <summary>
            A shopping center
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.PoiType.SkiResort">
            <summary>
            A ski resort
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.PoiType.SportsCenter">
            <summary>
            A sports center
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.PoiType.SportsComplex">
            <summary>
            A sports complex (such as a stadium, courts or velodrome)
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.PoiType.TouristAttraction">
            <summary>
            A tourist attraction of some description
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.PoiType.TouristInformation">
            <summary>
            An information center
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.PoiType.TrainStation">
            <summary>
            A train station
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.PoiType.Unknown">
            <summary>
            An unknown type
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.PoiType.Winery">
            <summary>
            A winery
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.PoiType.TruckStop">
            <summary>
            A truck stop
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.PoiType.TruckDealer">
            <summary>
            A truck dealer
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.PoiType.Toll">
            <summary>
            A toll
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.PoiType.Laundry">
            <summary>
            A laundry
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.PoiType.PostOffice">
            <summary>
            A post office
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.PoiType.EntryPoint">
            <summary>
            Entry Point
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.PoiType.CulturalCenter">
            <summary>
            Cultural Center
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.PoiType.FireAidPost">
            <summary>
            Fire Aid Post
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.PoiType.DepartmentStore">
            <summary>
            Department Store
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.PoiType.TravelAgency">
            <summary>
            Travel Agency
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.PoiType.PublicPhone">
            <summary>
            Public Phone
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.PoiType.Warehouse">
            <summary>
            Warehouse
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.PoiType.Zoo">
            <summary>
            Zoo
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.PoiType.ScenicPanoramaView">
            <summary>
            A location with a beautiful or particular view
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.PoiType.SwimmingPool">
            <summary>
            Swimming Pool
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.PoiType.TransportCompany">
            <summary>
            Transport Company
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.PoiType.CargoCentre">
            <summary>
            Cargo Center
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.PoiType.CarShippingTerminal">
            <summary>
            Car Shipping Terminal
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.PoiType.AirlineAccess">
            <summary>
            Airline Access
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.PoiType.Campground">
            <summary>
            Campground
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.PoiType.CaravanSite">
            <summary>
            Caravan Site
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.PoiType.CoachandLorryParking">
            <summary>
            Bus and Truck Parking
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.PoiType.Customs">
            <summary>
            Customs
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.PoiType.Embassy">
            <summary>
            Embassy
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.PoiType.GovernmentOffice">
            <summary>
            Government Office
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.PoiType.RoadSideDiner">
            <summary>
            Road Side Diner
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.PoiType.Stadium">
            <summary>
            Stadium
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.PoiType.TollPlaza">
            <summary>
            Toll Plaza
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.PoiType.CityCentre">
            <summary>
            City Center
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.PoiType.Kindergarten">
            <summary>
            Kindergarten
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.PoiType.EmergencyCallStation">
            <summary>
            Emergency Call Station
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.PoiType.EmergencyMedicalService">
            <summary>
            Emergency Medical Service
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.PoiType.FireBrigade">
            <summary>
            Fire Brigade
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.PoiType.Freeport">
            <summary>
            Freeport
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.PoiType.Brunnel">
            <summary>
            Brunnel. A bridge, tunnel or combination of both where a 
            transport element crosses above or below another transport element
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.PoiType.CentrePointofFeature">
            <summary>
            Center Point of Feature
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.PoiType.FreewayExitAccess">
            <summary>
            Freeway Exit/Access
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.PoiType.RoadNode">
            <summary>
            Road Node
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.PoiType.WaterCentreLineJunction">
            <summary>
            Water Center Line Junction
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.PoiType.RailwayNode">
            <summary>
            Railway Node
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.PoiType.Company">
            <summary>
            Company
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.PoiType.Hippodrome">
            <summary>
            Hippodrome, a stadium for horse shows or races
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.PoiType.Beach">
            <summary>
            Beach
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.PoiType.DrivethroughBottleShop">
            <summary>
            Drive-through Bottle Shop
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.PoiType.RestaurantArea">
            <summary>
            Restaurant Area
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.PoiType.Shop">
            <summary>
            Shop, but not a shopping center
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.PoiType.ParkandRecreation">
            <summary>
            Park and Recreation
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.PoiType.Court">
            <summary>
            Court
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.PoiType.MoutainPeak">
            <summary>
            Moutain Peak
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.PoiType.Opera">
            <summary>
            Opera
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.PoiType.ConcertHall">
            <summary>
            Concert Hall
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.PoiType.BovagGarage">
            <summary>
            BOVAG garage. BOVAG is a Dutch automobile association
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.PoiType.TennisCourt">
            <summary>
            Tennis Court
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.PoiType.SkatingRink">
            <summary>
            Skating Rink
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.PoiType.WaterSport">
            <summary>
            Water Sport
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.PoiType.MusicCentre">
            <summary>
            Music Center
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.PoiType.Doctor">
            <summary>
            Doctor
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.PoiType.Dentist">
            <summary>
            Dentist
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.PoiType.Veterinarian">
            <summary>
            Veterinarian
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.PoiType.CafePub">
            <summary>
            Cafe/Pub
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.PoiType.ConventionCentre">
            <summary>
            Convention Center
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.PoiType.LeisureCenter">
            <summary>
            Leisure Center
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.PoiType.YachtBasin">
            <summary>
            Yacht Basin, or marina.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.PoiType.Condominium">
            <summary>
            Condominium
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.PoiType.CommercialBuilding">
            <summary>
            Commercial Building
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.PoiType.IndustrialBuilding">
            <summary>
            Industrial Building
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.PoiType.GeneralPOI">
            <summary>
            General POI
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.PoiType.BreakDownService">
            <summary>
            Break Down Service
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.PoiType.VehicleEquipmentProvider">
            <summary>
            Vehicle Equipment Provider
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.PoiType.IndustrialArea">
            <summary>
            Industrial Area
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.PoiType.IndustrialHarborArea">
            <summary>
            Industrial Harbor Area
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.PoiType.Entertainment">
            <summary>
            Entertainment
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.PoiType.Abbey">
            <summary>
            Abbey
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.PoiType.ArtCenter">
            <summary>
            Art Center
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.PoiType.BuildingFootprintPoint">
            <summary>
            Building Footprint (Point)
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.PoiType.Castle">
            <summary>
            Castle
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.PoiType.FactoryGroundPhilips">
            <summary>
            Factory Ground Philips
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.PoiType.Fortress">
            <summary>
            Fortress
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.PoiType.HolidayArea">
            <summary>
            Holiday Area
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.PoiType.Lighthouse">
            <summary>
            Lighthouse
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.PoiType.NationalCemetery">
            <summary>
            National Cemetery
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.PoiType.Monastery">
            <summary>
            Monastery
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.PoiType.NaturalReserve">
            <summary>
            Natural Reserve
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.PoiType.Prison">
            <summary>
            Prison
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.PoiType.Rocks">
            <summary>
            Rocks
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.PoiType.SportsHall">
            <summary>
            Sports Hall
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.PoiType.StatePoliceOffice">
            <summary>
            State Police Office
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.PoiType.WalkingArea">
            <summary>
            Walking Area
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.PoiType.WaterMill">
            <summary>
            Water Mill
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.PoiType.Windmill">
            <summary>
            Windmill
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.PoiType.Rentacarparking">
            <summary>
            Rent-a-car parking
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.PoiType.CarRacetrack">
            <summary>
            Car Racetrack
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.PoiType.ToiletPublicAmenities">
            <summary>
            Toilet/Public Amenities
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.PoiType.TrafficControlCameraLocation">
            <summary>
            Traffic Control Camera Location
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.PoiType.BoatLaunchingRamp">
            <summary>
            Boat Launching Ramp
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.PoiType.MountainPass">
            <summary>
            Mountain Pass
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.PoiType.Playground">
            <summary>
            Playground
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.PoiType.ClubsAssociations">
            <summary>
            Clubs &amp; Associations
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.PoiType.ProfessionalServices">
            <summary>
            Professional Services
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.PoiType.RetailOutlet">
            <summary>
            Retail Outlet
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.PoiType.TrafficLight">
            <summary>
            Traffic Light
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.PoiType.PublicTransportStop">
            <summary>
            Public Transport Stop
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.PoiType.AutoDealershipUsedCars">
            <summary>
            Auto Dealership Used Cars
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.PoiType.BarorPub">
            <summary>
            Bar or Pub
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.PoiType.ClothingStore">
            <summary>
            Clothing Store
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.PoiType.ConsumerElectronicsStore">
            <summary>
            Consumer Electronics Store
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.PoiType.ConvenienceStore">
            <summary>
            Convenience Store
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.PoiType.Hamlet">
            <summary>
            Hamlet
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.PoiType.HighwayExit">
            <summary>
            Highway Exit
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.PoiType.HomeImprovementandHardwareStore">
            <summary>
            Home Improvement and Hardware Store
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.PoiType.HomeSpecialtyStore">
            <summary>
            Home Specialty Store
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.PoiType.IndustrialZone">
            <summary>
            Industrial Zone
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.PoiType.OfficeSupplyServicesStore">
            <summary>
            Office Supply &amp; Services Store
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.PoiType.OtherAccommodation">
            <summary>
            Other Accommodation
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.PoiType.SpecialtyStore">
            <summary>
            Specialty Store
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.PoiType.SportingGoodsStore">
            <summary>
            Sporting Goods Store
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.PoiRestaurantType">
            <summary>
            A sub-type enumeration representing various types of restaurant.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.PoiRestaurantType.AFRICAN_FOOD">
            <summary>
            This restaurant serves African food.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.PoiRestaurantType.AMERICAN_FOOD">
            <summary>
            This restaurant serves American food.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.PoiRestaurantType.AUSTRALIAN_FOOD">
            <summary>
            This restaurant serves Australian food.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.PoiRestaurantType.AUSTRIAN_FOOD">
            <summary>
            This restaurant serves Austrian food.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.PoiRestaurantType.BALKAN_FOOD">
            <summary>
            This restaurant serves Balkan food.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.PoiRestaurantType.BARBECUE_OR_SOUTHERN">
            <summary>
            This restaurant serves Barbecue or Southern food.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.PoiRestaurantType.BELGIAN_FOOD">
            <summary>
            This restaurant serves Belgian food.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.PoiRestaurantType.BISTRO">
            <summary>
            This restaurant serves Bistro food.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.PoiRestaurantType.BOHEMIAN_FOOD">
            <summary>
            This restaurant serves Bohemian food.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.PoiRestaurantType.BREWPUB">
            <summary>
            This is a pub that brews its own beer.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.PoiRestaurantType.BRITISH_ISLES_FOOD">
            <summary>
            This restaurant serves food from the British Isles.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.PoiRestaurantType.CAJUN_OR_CARIBBEAN_FOOD">
            <summary>
            This restaurant serves Cajun or Caribbean food.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.PoiRestaurantType.CALIFORNIAN_FOOD">
            <summary>
            This restaurant serves Californian food.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.PoiRestaurantType.CANADIAN_FOOD">
            <summary>
            This restaurant serves Canadian food.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.PoiRestaurantType.CHINESE_FOOD">
            <summary>
            This restaurant serves Chinese food.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.PoiRestaurantType.CONTINENTAL_FOOD">
            <summary>
            This restaurant serves Continental food.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.PoiRestaurantType.DUTCH_FOOD">
            <summary>
            This restaurant serves Dutch food.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.PoiRestaurantType.EAST_EUROPEAN_FOOD">
            <summary>
            This restaurant serves East European food.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.PoiRestaurantType.FAST_FOOD">
            <summary>
            This restaurant serves fast-food.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.PoiRestaurantType.FILIPINO_FOOD">
            <summary>
            This restaurant serves Filipino food.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.PoiRestaurantType.FRENCH_FOOD">
            <summary>
            This restaurant serves French food.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.PoiRestaurantType.GERMAN_FOOD">
            <summary>
            This restaurant serves German food.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.PoiRestaurantType.GREEK_FOOD">
            <summary>
            This restaurant serves Greek food.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.PoiRestaurantType.GRILL">
            <summary>
            This restaurant serves grilled food.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.PoiRestaurantType.HAWAIIAN_OR_POLYNESIAN_FOOD">
            <summary>
            This restaurant serves Hawaiian or Polynesian food.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.PoiRestaurantType.HUNGARIAN_FOOD">
            <summary>
            This restaurant serves Hungarian food.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.PoiRestaurantType.INDIAN_FOOD">
            <summary>
            This restaurant serves Indian food.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.PoiRestaurantType.INDONESIAN_OR_MALAYSIAN_FOOD">
            <summary>
            This restaurant serves Indonesian or Malaysian food.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.PoiRestaurantType.INTERNATIONAL_FOOD">
            <summary>
            This restaurant serves international food.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.PoiRestaurantType.ITALIAN_FOOD">
            <summary>
            This restaurant serves Italian food.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.PoiRestaurantType.JAPANESE_FOOD">
            <summary>
            This restaurant serves Japanese food.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.PoiRestaurantType.JEWISH_OR_KOSHER_FOOD">
            <summary>
            This restaurant serves Jewish (kosher) food.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.PoiRestaurantType.KOREAN_FOOD">
            <summary>
            This restaurant serves Korean food.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.PoiRestaurantType.LATIN_AMERICAN_FOOD">
            <summary>
            This restaurant serves Latin-American food.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.PoiRestaurantType.MALTESE_FOOD">
            <summary>
            This restaurant serves Maltese food.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.PoiRestaurantType.MEXICAN_FOOD">
            <summary>
            This restaurant serves Mexican food.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.PoiRestaurantType.MIDDLE_EASTERN_FOOD">
            <summary>
            This restaurant serves Middle-Eastern food.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.PoiRestaurantType.OTHER">
            <summary>
            This restaurant serves food that cannot be categorized.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.PoiRestaurantType.POLISH_FOOD">
            <summary>
            This restaurant serves Polish food.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.PoiRestaurantType.PORTUGUESE_FOOD">
            <summary>
            This restaurant serves Portuguese food.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.PoiRestaurantType.RUSSIAN_FOOD">
            <summary>
            This restaurant serves Russian food.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.PoiRestaurantType.SANDWICH">
            <summary>
            Sandwiches are available here.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.PoiRestaurantType.SCANDINAVIAN_FOOD">
            <summary>
            This restaurant serves Scandinavian food.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.PoiRestaurantType.SEAFOOD">
            <summary>
            This restaurant serves seafood.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.PoiRestaurantType.SNACKS_AND_BEVERAGES">
            <summary>
            Snacks and beverages are available here.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.PoiRestaurantType.SOUTH_AMERICAN_FOOD">
            <summary>
            This restaurant serves South-American food.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.PoiRestaurantType.SOUTHEAST_ASIAN_FOOD">
            <summary>
            This restaurant serves South-East Asian food.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.PoiRestaurantType.SOUTHWESTERN_FOOD">
            <summary>
            This restaurant serves South-Western food.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.PoiRestaurantType.SPANISH_FOOD">
            <summary>
            This restaurant serves Spanish food.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.PoiRestaurantType.STEAK_HOUSE">
            <summary>
            This is a steak-house.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.PoiRestaurantType.SURINAMESE_FOOD">
            <summary>
            This restaurant serves Surinamese food.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.PoiRestaurantType.SWISS_FOOD">
            <summary>
            This restaurant serves Swiss food.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.PoiRestaurantType.THAI_FOOD">
            <summary>
            This restaurant serves Thai food.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.PoiRestaurantType.TURKISH_FOOD">
            <summary>
            This restaurant serves Turkish food.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.PoiRestaurantType.UNKNOWN">
            <summary>
            Nobody knows what type of food is served here.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.PoiRestaurantType.VEGETARIAN_FOOD">
            <summary>
            This restaurant serves vegetarian food.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.PoiRestaurantType.VIETNAMESE_FOOD">
            <summary>
            This restaurant serves Vietnamese food.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.PoiRestaurantType.FINNISH_FOOD">
            <summary>
            This restaurant serves Finnish food.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.PoiRestaurantType.PIZZA">
            <summary>
            This restaurant serves Pizza.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.PoiRestaurantType.BURGERS">
            <summary>
            This restaurant serves burgers.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.PoiRestaurantType.CHICKEN">
            <summary>
            This restaurant serves chicken.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.PoiRestaurantType.ICE_CREAM">
            <summary>
            This restaurant serves ice cream.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.PoiRestaurantType.IRISH_FOOD">
            <summary>
            This restaurant serves Irish food.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.PoiRestaurantType.CAJUN_FOOD">
            <summary>
            This restaurant serves Cajun food.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.PoiRestaurantType.CARIBBEAN_FOOD">
            <summary>
            This restaurant serves Caribbean food.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.PoiRestaurantType.BREAKFAST">
            <summary>
            This restaurant serves Breakfast.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.PoiRestaurantType.VEGAN_FOOD">
            <summary>
            This restaurant serves Vegan food.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.PoiRestaurantType.MOROCCAN_FOOD">
            <summary>
            This restaurant serves Moroccan food.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.PoiRestaurantType.ARGENTINEAN_FOOD">
            <summary>
            This restaurant serves Argentinian food.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.PoiRestaurantType.BRASILIAN_FOOD">
            <summary>
            This restaurant serves Brasilian food.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.PoiRestaurantType.CHILEAN_FOOD">
            <summary>
            This restaurant serves Chilean food.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.PoiRestaurantType.BALTIC_FOOD">
            <summary>
            This restaurant serves Baltic food.
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.PoiRenderer">
             <summary>
             Renders a Point of Interest (see <see cref="T:Telogis.GeoBase.PoiType">PoiType</see> for examples)
             on an <see cref="T:Telogis.GeoBase.IMap"/>.  A single <see cref="T:Telogis.GeoBase.PoiRenderer"/> should not be
             used as a renderer for more than one <see cref="T:Telogis.GeoBase.IMap"/> at the same time.
             </summary>
             <example><code lang="C#">
             // setup PoiRenderer, add to our rendererlist so it gets drawn
             PoiRenderer pr = new PoiRenderer();
             myRendererList.Add(pr);
            
             ...
            
             // set types we want to show: just airports and restaurants
             PoiType[] types = { PoiType.PublicSportAirport, PoiType.Airport, PoiType.Restaurant };
             pr.SetFilter(types);
            
             // set the type of restaurants we want to show
             PoiRestaurantType[] foods = { PoiRestaurantTypes.PIZZA, PoiRestaurantTypes.FAST_FOOD };
             pr.SetRestaurantType(foods);
             </code></example>
        </member>
        <member name="F:Telogis.GeoBase.PoiRenderer.Visible">
            <summary>
            Indicates whether this Renderer is visible.
            </summary>
            <remarks>If <b>true</b> this renderer will draw itself and register clicks (see
            <see cref="M:Telogis.GeoBase.PoiRenderer.HitTest(System.Int32,System.Int32,Telogis.GeoBase.IMap)"/>), if <b>false</b> it will not
            draw or register clicks. Defaults to <b>true</b>.</remarks>
        </member>
        <member name="M:Telogis.GeoBase.PoiRenderer.#ctor">
            <summary>
            Construct a new Point of Interest Renderer.
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.PoiRenderer.Finalize">
            <summary>
            Destructor for Point of Interest Renderer.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.PoiRenderer.points">
            <summary>
            Array of POIs to render.
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.PoiRenderer.SetFilter(Telogis.GeoBase.PoiType[])">
             <summary>
             Show only the given Point of Interest <see cref="T:Telogis.GeoBase.PoiType">types</see>.
             Set to null to remove the filter. This may be used in conjunction with <see cref="M:Telogis.GeoBase.PoiRenderer.SetRestaurantType(Telogis.GeoBase.PoiRestaurantType[])"/>.
             </summary>
             <example><code lang="C#">
             // setup PoiRenderer, add to our rendererlist so it gets drawn
             PoiRenderer pr = new PoiRenderer();
             myRendererList.Add(pr);
            
             ...
            
             // set types we want to show: just airports.
             PoiType[] types = { PoiType.PublicSportAirport, PoiType.Airport };
            
             // apply the filter
             pr.SetFilter(types);
             // ... now only Airports will be drawn. Call pr.SetFilter(null) to reset.
             </code></example>
             <param name="filter">The <see cref="T:Telogis.GeoBase.PoiType"/> to show.</param>
        </member>
        <member name="M:Telogis.GeoBase.PoiRenderer.SetRestaurantType(Telogis.GeoBase.PoiRestaurantType[])">
             <summary>
             Render only the given <see cref="T:Telogis.GeoBase.PoiRestaurantType">types</see> of restaurant.
             Set to null to remove the filter.
             </summary>
             <remarks>If PoiType.Restaurant is being filtered (using the <see cref="M:Telogis.GeoBase.PoiRenderer.SetFilter(Telogis.GeoBase.PoiType[])"/> method)
             then no restaurants will be shown, regardless of what SetRestaurantType is set to.
             </remarks>
             <example><code lang="C#">
             // setup PoiRenderer, add to our rendererlist so it gets drawn
             PoiRenderer pr = new PoiRenderer();
             myRendererList.Add(pr);
            
             ...
            
             // set types we want to show:
             PoiRestaurantType[] types = { PoiRestaurantType.AMERICAN_FOOD, PoiRestaurantType.BISTRO };
            
             // apply the filter
             pr.SetRestaurantType(types);
            
             // ... now only American and Bistro food types will be shown.
             // Call pr.SetRestaurantType(null) to reset.
             </code></example>
             <param name="types">The <see cref="T:Telogis.GeoBase.PoiRestaurantType"/> to show.</param>
        </member>
        <member name="M:Telogis.GeoBase.PoiRenderer.Render(System.Drawing.Graphics,Telogis.GeoBase.RenderContext)">
            <summary>
            Render Points of Interest.
            </summary>
            <remarks>A POI is rendered only if the given <see cref="T:Telogis.GeoBase.RenderContext"/>
            has label rendering set and the zoom level is set to five or less.
            </remarks>
            <param name="graphics"></param>
            <param name="rc"></param>
        </member>
        <member name="M:Telogis.GeoBase.PoiRenderer.HitTest(System.Int32,System.Int32,Telogis.GeoBase.IMap)">
            <summary>
            Determine whether this Point of Interest lies beneath the
            co-ordinates generated by a mouse click on the given <see cref="T:Telogis.GeoBase.IMap"/>.
            </summary>
            <remarks>
            Will return null if the <see cref="P:Telogis.GeoBase.IMap.Zoom"/> is greater
            than 5, or if this Point of Interest is not <see cref="F:Telogis.GeoBase.PoiRenderer.Visible"/>.
            </remarks>
            <param name="x">The x coordinate to test.</param>
            <param name="y">The y coordinate to test.</param>
            <param name="aMap">The <see cref="T:Telogis.GeoBase.IMap"/> upon which the click occurred.</param>
            <returns>This <see cref="T:Telogis.GeoBase.PoiRenderer"/> if there is a hit, <b>null</b> if there is not.</returns>
        </member>
        <member name="P:Telogis.GeoBase.PoiRenderer.RequiredRendermodes">
            <summary>
            Gets the <see cref="T:Telogis.GeoBase.RenderMode">RenderMode</see> required by this <b>PoiRenderer</b>
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.PoiRenderer.MapMouseEventsHandler">
            <summary>
            Get the <see cref="T:Telogis.GeoBase.MapMouseEventsHandler"/> for this <b>PoiRenderer</b>.
            </summary>
        </member>
        <member name="T:Xheo.Licensing.VersionLimit">
            <summary>
            Requires that the assembly version be between a minimum and maximum value.
            </summary>
            <remarks>
            	If no minimum value is specified then the version must match the maximum
            	version exactly.
            </remarks>
        </member>
        <member name="M:Xheo.Licensing.VersionLimit.#ctor">
            <summary>
            Initializes a new instance of the VersionLimit class.
            </summary>
        </member>
        <member name="M:Xheo.Licensing.VersionLimit.#ctor(System.Version,System.Version)">
            <summary>
            Initializes a new instance of the VersionLimit class.
            </summary>
            <param name="maximum">
            	The maximum allowable version.
            </param>
            <param name="minimum">
            	The minimum allowable version.
            </param>
        </member>
        <member name="M:Xheo.Licensing.VersionLimit.Validate(System.ComponentModel.LicenseContext,System.Type,System.Object)">
            <summary>
            Validates that the license being granted is within the limits enforced by
            this object.
            </summary>
            <param name="context">
            	The LicenseContext passed to <see cref="M:System.ComponentModel.LicenseProvider.GetLicense(System.ComponentModel.LicenseContext,System.Type,System.Object,System.Boolean)"/>.
            </param>
            <param name="type">
            	The Type of the object being licensed.
            </param>
            <param name="instance">
            	The instance of the object being licensed.
            </param>
            <returns>
            	Returns true if the limits are valid, otherwise false.
            </returns>
        </member>
        <member name="M:Xheo.Licensing.VersionLimit.LoadFromXml(System.Xml.XmlNode)">
            <summary>
            Loads the contents of a Limit from an XML string.
            </summary>
            <param name="node">
            	The XmlNode to load from.
            </param>
            <returns>
            	Returns true if the load was successful, otherwise false.
            </returns>
        </member>
        <member name="M:Xheo.Licensing.VersionLimit.SaveToXml(System.Xml.XmlNode)">
            <summary>
            Saves the contents of the Limit as an XML string.
            </summary>
            <returns>
            	Returns the saved XML.
            </returns>
        </member>
        <member name="M:Xheo.Licensing.VersionLimit.GetDetailsDescription">
            <summary>
            Overrides <see cref="M:Xheo.Licensing.Limit.GetDetailsDescription"/>.
            </summary>
        </member>
        <member name="P:Xheo.Licensing.VersionLimit.Minimum">
            <summary>
            Gets or sets the minimum version.
            </summary>
        </member>
        <member name="P:Xheo.Licensing.VersionLimit.Maximum">
            <summary>
            Gets or sets the maximum version.
            </summary>
        </member>
        <member name="P:Xheo.Licensing.VersionLimit.Description">
            <summary>
            Gets the description of the limit.
            </summary>
        </member>
        <member name="P:Xheo.Licensing.VersionLimit.Name">
            <summary>
            Gets the display name of the limit.
            </summary>
        </member>
        <member name="T:Xheo.Licensing.LicenseTemplate">
            <summary>
            Represents a license template with predefined limits and other values.
            </summary>
        </member>
        <member name="M:Xheo.Licensing.LicenseTemplate.#ctor">
            <summary>
            Initializes a new instance of the LicenseTemplate class.
            </summary>
        </member>
        <member name="M:Xheo.Licensing.LicenseTemplate.#ctor(System.String)">
            <summary>
            Initializes a new instance of the LicenseTemplate class and loads the template
            from the given file name..
            </summary>
            <param name="file">
            	Path to the template to load.
            </param>
        </member>
        <member name="M:Xheo.Licensing.LicenseTemplate.#ctor(Xheo.Licensing.ExtendedLicense)">
            <summary>
            Initializes a new instance of the LicenseTemplate class from an existing
            license.
            </summary>
            <param name="license">
            	The license to make a template from.
            </param>
        </member>
        <member name="M:Xheo.Licensing.LicenseTemplate.Load(Xheo.Licensing.ExtendedLicense)">
            <summary>
            Loads a template from properties in an existing license.
            </summary>
            <param name="license">
            	The license to load initial values from.
            </param>
        </member>
        <member name="M:Xheo.Licensing.LicenseTemplate.Load(System.String)">
            <summary>
            Loads the template from the location given in the file parameter.
            </summary>
            <param name="file">
            	Path of the file to load the template from.
            </param>
        </member>
        <member name="M:Xheo.Licensing.LicenseTemplate.Save(System.String)">
            <summary>
            Saves the template to the location given in the file parameter.
            </summary>
            <param name="file">
            	Path where the template should be saved.
            </param>
        </member>
        <member name="M:Xheo.Licensing.LicenseTemplate.CreateLicense">
            <summary>
            Creates a new license from the template. The license still needs to be 
            signed and added to a license pack.
            </summary>
            <returns>
            	Returns the new license with initial values from the template.
            </returns>
            <remarks>
            	You can call this method multiple times on the same object without
            	any adverse effects.
            </remarks>
        </member>
        <member name="M:Xheo.Licensing.LicenseTemplate.GetCreationTemplate(Xheo.Licensing.ExtendedLicense)">
            <summary>
            Gets the <see cref="T:Xheo.Licensing.LicenseTemplate"/> used to create the license.
            </summary>
            <param name="license">
            	The license to process.
            </param>
            <returns>
            	Returns the LicenseTemplate used to create the template if found,
            	otherwise null.
            </returns>
        </member>
        <member name="P:Xheo.Licensing.LicenseTemplate.SerialNumber">
            <summary>
            Gets or sets the serial number for the template.
            </summary>
        </member>
        <member name="P:Xheo.Licensing.LicenseTemplate.Location">
            <summary>
            Gets or sets the path where the template is located.
            </summary>
        </member>
        <member name="P:Xheo.Licensing.LicenseTemplate.Name">
            <summary>
            Gets or sets a short descriptive name for the template.
            </summary>
            <remarks>
            	No functional value is placed on this property. This is used for development and
            	management purposes only in describing the contained functionality of the template.
            	For instance, the License Manager displays a list of templates by name
            	for you to choose from when creating a new license.
            </remarks>
        </member>
        <member name="P:Xheo.Licensing.LicenseTemplate.Description">
            <summary>
            Gets or sets a longer description of the template.
            </summary>
            <remarks>
            	No functional value is placed on this property. This is used for development and
            	management purposes only in describing the contained functionality of the template.
            	For instance, the License Manager displays a list of templates with descriptions
            	for you to choose from when creating a new license.
            </remarks>
        </member>
        <member name="P:Xheo.Licensing.LicenseTemplate.Assembly">
            <summary>
            Gets or sets the name of the assembly that hosts the components that this license
            refers to.
            </summary>
        </member>
        <member name="P:Xheo.Licensing.LicenseTemplate.Components">
            <summary>
            Gets a collection of components to be included in the license.
            </summary>
        </member>
        <member name="P:Xheo.Licensing.LicenseTemplate.Limits">
            <summary>
            Gets a collection of initial limits to be included in the license.
            </summary>
        </member>
        <member name="P:Xheo.Licensing.LicenseTemplate.IssuerUrl">
            <summary>
            Gets or sets the URL of the company that issued the license.
            </summary>
        </member>
        <member name="P:Xheo.Licensing.LicenseTemplate.Tag">
            <summary>
            Gets or sets any arbitrary data to store with the license.
            </summary>
        </member>
        <member name="P:Xheo.Licensing.LicenseTemplate.Type">
            <summary>
            Gets or sets an application/product specific description of the type of
            license. Example designer, single user, non-profit, etc. This can often be
            used a reference to the primary key in a database for the product that the
            license represents.
            </summary>
        </member>
        <member name="P:Xheo.Licensing.LicenseTemplate.Expiration">
            <summary>
            Gets or sets the TimeSpan the license should initially be set for.
            </summary>
        </member>
        <member name="P:Xheo.Licensing.LicenseTemplate.Values">
            <summary>
            Gets a collection of standard values to include in the template.
            </summary>
        </member>
        <member name="T:Xheo.Licensing.LicenseServer">
            <summary>
            Implements a licensing server over a web service. 
            </summary>
            <remarks>
            To implement your own licensing server, derive from this class in your web 
            service file and override the Validate method. This method gets a copy of
            the complete signed license requesting validation. The default implementation
            automatically returns true.
            <para>
            You can use this server to implement a central license registraion service.
            </para>
            </remarks>
        </member>
        <member name="F:Xheo.Licensing.LicenseServer.Headers">
            <summary>
            Additional custom headers to include with all web request calls.
            </summary>
        </member>
        <member name="M:Xheo.Licensing.LicenseServer.#ctor">
            <summary>
            Initializes a new instance of the LicenseServer class.
            </summary>
        </member>
        <member name="M:Xheo.Licensing.LicenseServer.UseClientCulture">
            <summary>
            When called from a web method, switches the current thread's culture to 
            match the client's culture.
            </summary>
        </member>
        <member name="M:Xheo.Licensing.LicenseServer.Unregister(System.String,System.String)">
            <summary>
            Un-registers a previously signed license for later validation.
            </summary>
            <param name="licenseXml">
            	The signed license as an XML string to validate.
            </param>
            <param name="keys">
            	Name of the assembly whos key file was used to sign the licenses. The public key
            	is embedded in the component's assembly. The private key is stored
            	securely on the license server's machine
            </param>
            <remarks>
            	The license server must have full access to the original signing
            	keys used to sign the license to enable validation.
            	<para>
            	Inerhitors should <b><i>not</i></b> call the base class's Validate
            	method.
            	</para>
            </remarks>
        </member>
        <member name="M:Xheo.Licensing.LicenseServer.Register(System.String,System.String)">
            <summary>
            Registers a previously signed license for later validation.
            </summary>
            <param name="licenseXml">
            	The signed license as an XML string to validate.
            </param>
            <param name="keys">
            	Name of the assembly whos key file was used to sign the licenses. The public key
            	is embedded in the component's assembly. The private key is stored
            	securely on the license server's machine
            </param>
            <remarks>
            	The license server must have full access to the original signing
            	keys used to sign the license to enable validation.
            	<para>
            	Inerhitors should <b><i>not</i></b> call the base class's Validate
            	method.
            	</para>
            </remarks>
        </member>
        <member name="M:Xheo.Licensing.LicenseServer.RegisterEx(System.String,System.String,System.String,System.Boolean,System.String)">
            <summary>
            	Registers a license with additional user information. A new license can
            	optionally be generated in response to the registration.
            </summary>
            <param name="licenseXml">
            	The signed license as an XML string to validate. May be null.
            </param>
            <param name="keys">
            	Name of the assembly whos key file was used to sign the licenses. The public key
            	is embedded in the component's assembly. The private key is stored
            	securely on the license server's machine
            </param>
            <param name="generateLicense">
            	Indicates if a new license for the user should be generated. The license should
            	have it's serial number set to the value in the serialNumber parameter.
            </param>
            <param name="serialNumber">
            	The serial number included in the registration. This may or may not have been
            	entered by the user.
            </param>
            <param name="valuesXml">
            	Collection of values from the registration form. Use the <see cref="T:Xheo.Licensing.LicenseValuesCollection"/> to read the values.
            </param>
            <remarks>
            	Two types of license registration are available. Either registering an already
            	purchased license or creating a new one in response to a setup process. This 
            	way publishers can gather contact information when the user installs their
            	application.
            	<h4 class="dtH4">Values XML Reference</h4>
            	<table cellspacing="0" class="dtTABLE">
            		<tr valign="top">
            			<th width="50%">Name</th>
            			<th width="50%">Description</th>
            		</tr>
            		<tr valign="top">
            			<td width="50%">FirstName</td>
            			<td width="50%">The first name provided in the registration form.</td>
            		</tr>
            		<tr valign="top">
            			<td width="50%">LastName</td>
            			<td width="50%">The last name provided in the registration form.</td>
            		</tr>
            		<tr valign="top">
            			<td width="50%">MiddleName</td>
            			<td width="50%">The middle name provided in the registration form.</td>
            		</tr>
            		<tr valign="top">
            			<td width="50%">Organization</td>
            			<td width="50%">The name of the organization provided in the registration form.</td>
            		</tr>
            		<tr valign="top">
            			<td width="50%">AssemblyVersion</td>
            			<td width="50%">The version of the assembly being registered.</td>
            		</tr>
            		<tr valign="top">
            			<td width="50%">FileVersion</td>
            			<td width="50%">The version of the file being registered.</td>
            		</tr>
            		<tr valign="top">
            			<td width="50%">ProfileHash</td>
            			<td width="50%">The hash of the <see cref="T:Xheo.Licensing.MachineProfile"/> of the client
            			machine.</td>
            		</tr>
            	</table>
            </remarks>
            <returns>
            	When generateLicense is false this method may return null. When true it 
            	returns the XML of the new license pack.
            	<blockquote class="dtBLOCK"><b>Note</b>   The return value
            	is a <see cref="T:Xheo.Licensing.ExtendedLicensePack"/> which may include one or more licenses. At
            	least one of them should have the serial number set to the value passed in the
            	serialNumber parameter.</blockquote>
            	<para>
            	The base implementation calls <see cref="M:Xheo.Licensing.LicenseServer.Register(System.String,System.String)"/> if the licenseXml is not
            	null.Inheritors should <b>not</b> call the base implementation when overriding the
            	method.
            	</para>
            </returns>
        </member>
        <member name="M:Xheo.Licensing.LicenseServer.IsRegistered(Xheo.Licensing.ExtendedLicense)">
            <summary>
            Determines if the license has been registered with the server. 
            </summary>
            <param name="license">
            	The license to look for.
            </param>
            <returns>
            	Returns true if the license was previously registered, otherwise false.
            </returns>
            <remarks>
            	The base implementaiton allways returns false. You should override this 
            	method if you store registration information in a database or other
            	storage medium.
            </remarks>
        </member>
        <member name="M:Xheo.Licensing.LicenseServer.Validate(System.String,System.String,System.String)">
            <summary>
            Validates a previously issued license.
            </summary>
            <param name="keys">
            	Name of the assembly whos key file was used to sign the licenses. The public key
            	is embedded in the component's assembly. The private key is stored
            	securely on the license server's machine
            </param>
            <param name="licenseXml">
            	The signed license as an XML string to validate.
            </param>
            <param name="salt">
            	Salt used to ensure the response from the server is not intercepted
            	or altered.
            </param>
            <remarks>
            	The license server must have full access to the original signing
            	keys used to sign the license to enable validation. A random string
            	is generated (salt) from the ExtendedLicenseProvider and is then
            	signed and returned on success.
            	<para>
            	Ineritors should call the base class's Validate method and capture
            	the return value for success.
            	</para>
            </remarks>
            <example>
            	<code>
            	public override string Validate( string licenseXml, string keys, string salt )
            	{
            		// Throws exception if license is not valid.
            		string response = base.Validate( licenseXml, keys, salt );
            		
            		//Do more validation.
            		
            		return response;
            	}
            	</code>
            </example>
            <returns>
            	Returns a signed response if valid otherwise throw an exception. The response
            	is the signed version of the salt using the same signing keys used
            	to sign the license.
            </returns>
        </member>
        <member name="M:Xheo.Licensing.LicenseServer.ValidateEx(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Validates a previously issued license.
            </summary>
            <param name="keys">
            	Name of the assembly whos key file was used to sign the licenses. The public key
            	is embedded in the component's assembly. The private key is stored
            	securely on the license server's machine
            </param>
            <param name="licenseXml">
            	The signed license as an XML string to validate.
            </param>
            <param name="salt">
            	Salt used to ensure the response from the server is not intercepted
            	or altered.
            </param>
            <param name="profileHash">
            	The hash of the <see cref="T:Xheo.Licensing.MachineProfile"/> of the client machine requesting 
            	the license be validated. Use to uniquely identify a given machine.
            </param>
            <param name="valuesXml">
            	Additional values reserved for later use.
            </param>
            <remarks>
            	The license server must have full access to the original signing
            	keys used to sign the license to enable validation. A random string
            	is generated (salt) from the ExtendedLicenseProvider and is then
            	signed and returned on success.
            	<para>
            	Ineritors should call the base class's Validate method and capture
            	the return value for success.
            	</para>
            	<para>
            	This method simply calls the default <see cref="M:Xheo.Licensing.LicenseServer.Validate(System.String,System.String,System.String)"/> method unless
            	overridden in a derived class.
            	</para>
            </remarks>
            <example>
            	<code>
            	public override string ValidateEx( string licenseXml, string keys, string salt, string profileHash, string valuesXml )
            	{
            		// Throws exception if license is not valid.
            		string response = base.ValidateEx( licenseXml, keys, salt, profileHash, valuesXml );
            		
            		LicenseValuesCollection values = new LicenseValuesCollection();
            		values.FromXmlString( valuesXml );
            		
            		// if( values[ "Culture" ] == "en-US" )...
            		
            		return response;
            	}
            	</code>
            </example>
            <returns>
            	Returns a signed response if valid otherwise throw an exception. The response
            	is the signed version of the salt using the same signing keys used
            	to sign the license.
            </returns>
        </member>
        <member name="M:Xheo.Licensing.LicenseServer.GetTrialLicense(System.String,System.String,System.String)">
            <summary>
            Generates a new trial license on-demand for the assembly with the given name.
            </summary>
            <param name="assemblyName">
            	The name of the assembly to get a trial license for.
            </param>
            <param name="profileHash">
            	A profile hash of the computer that the trial is being requested
            	from. Developers can use this to determine if a new trial license should
            	be granted.
            </param>
            <param name="extra">
            	The value of the <see cref="P:Xheo.Licensing.TrialServerAttribute.Extra"/> property for the
            	<see cref="T:Xheo.Licensing.TrialServerAttribute"/> declared for the assembly.
            </param>
            <returns>
            	Returns a new XML license pack for the assembly.
            </returns>
            <remarks>
            	Trial licenses can be generated for new installations of an assembly. The 
            	profile hash represents a machine profile that developers can use to 
            	determine if a trial license has been requested for that machine before.
            	<para>
            	The base implementation throws an exception indicating that new
            	trial licenses are not supported. 
            	</para>
            </remarks>
        </member>
        <member name="M:Xheo.Licensing.LicenseServer.RenewLease(System.String,System.String,System.String)">
            <summary>
            Generates a new volatile license according to the lease terms in the original license.
            </summary>
            <param name="keys">
            	The name of the assembly whos keys should be used when signing the license.
            </param>
            <param name="originalLicenseXml">
            	An XML string representing the original license.
            </param>
            <param name="profileHash">
            	A profile hash of the machine requesting the renewal. The volatile leased license
            	will be locked to the machine making the request.
            </param>
            <remarks>
            	Leased licenses can be used to reduce network traffic, improve reliability,
            	and improve performance. A leased license is essentially a short term durable
            	validation from a license server. Once a leased license has been validated
            	a leased copy is requested. This leased copy expires according to the <see cref="P:Xheo.Licensing.LicenseServerLimit.LeaseLength"/>
            	and does not include the original license server limit, so no further checks are
            	made back to the license server during the lease time.
            	<para>
            	The base implementation Validates the license, removes the original <see cref="T:Xheo.Licensing.LicenseServerLimit"/>,
            	and adds an <see cref="T:Xheo.Licensing.ActivationLimit"/> with 0 tolerance and no activation server,
            	signs the license and returns that copy.
            	</para>
            </remarks>
        </member>
        <member name="M:Xheo.Licensing.LicenseServer.GetSigningKey(System.String)">
            <summary>
            Internal helper method used to get a signing key pair given the name
            of the original signing keys.
            </summary>
            <param name="keys">
            	Name of the key files used to sign licenses.
            </param>
            <returns>
            	Returns a new signing key. If the keys were not found an 
            	exception is thrown.
            </returns>
        </member>
        <member name="M:Xheo.Licensing.LicenseServer.GetSigningKey(System.String,System.String)">
            <summary>
            Internal helper method used to get a signing key pair given the name
            of the original signing keys.
            </summary>
            <param name="keys">
            	Name of the key files used to sign licenses.
            </param>
            <param name="folder">
            	Path to the folder that contains the keys. If null then the default is used.
            </param>
            <returns>
            	Returns a new signing key. If the keys were not found an 
            	exception is thrown.
            </returns>
        </member>
        <member name="P:Xheo.Licensing.LicenseServer.KeyFolder">
            <summary>
            Gets the folder where the license keys are located. See <see cref="P:Xheo.Licensing.ExtendedLicense.KeyFolder"/>
            for configuration options.
            </summary>
        </member>
        <member name="P:Xheo.Licensing.LicenseServer.AutoRegister">
            <summary>
            Gets or sets a value that indicates if a license should automatically be 
            registered when validating if it is not found in the registration database.
            </summary>
        </member>
        <member name="P:Xheo.Licensing.LicenseServer.ClientCulture">
            <summary>
            Gets the culture information of the client that called the web service.
            </summary>
        </member>
        <member name="T:Xheo.Licensing.LicenseCultureSoapHeader">
            <summary>
            Defines additional information to pass on each web service call.
            </summary>
        </member>
        <member name="F:Xheo.Licensing.LicenseCultureSoapHeader.CultureName">
            <summary>
            The name of the current client's culture.
            </summary>
        </member>
        <member name="T:Xheo.Licensing.GuiBrandedLimitForm">
            <summary>
            Implements the Form for the <see cref="T:Xheo.Licensing.GuiBrandedLimit"/>.
            </summary>
        </member>
        <member name="F:Xheo.Licensing.GuiBrandedLimitForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Xheo.Licensing.GuiBrandedLimitForm.#ctor">
            <summary>
            Included for COM compliance, do not use.
            </summary>
        </member>
        <member name="M:Xheo.Licensing.GuiBrandedLimitForm.#ctor(Xheo.Licensing.GuiBrandedLimit)">
             Initializes a new instance of the GuiBrandedLimitForm class.
            <summary>
            Summary of GuiBrandedLimitForm.
            </summary>
            <param name="limit"></param>
        </member>
        <member name="M:Xheo.Licensing.GuiBrandedLimitForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:Xheo.Licensing.GuiBrandedLimitForm.OnLoad(System.EventArgs)">
            <summary>
            If the bitmap image is null, then replace it with a default so it still looks professional.
            </summary>
        </member>
        <member name="M:Xheo.Licensing.GuiBrandedLimitForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:Xheo.Licensing.GuiBrandedLimitForm._link_LinkClicked(System.Object,System.Windows.Forms.LinkLabelLinkClickedEventArgs)">
            <summary>
            Summary of _link_LinkClicked.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Xheo.Licensing.GuiBrandedLimitForm._buyNow_Click(System.Object,System.EventArgs)">
            <summary>
            Summary of _buyNow_Click.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Xheo.Licensing.GuiBrandedLimitForm.timer1_Elapsed(System.Object,System.Timers.ElapsedEventArgs)">
            <summary>
            Summary of timer1_Elapsed.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Xheo.Licensing.GuiBrandedLimitForm._terMSL_LinkClicked(System.Object,System.Windows.Forms.LinkLabelLinkClickedEventArgs)">
            <summary>
            Summary of _terMSL_LinkClicked.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="P:Xheo.Licensing.GuiBrandedLimitForm.Bitmap">
            <summary>
            Gets or sets the bitmap to display in the window. Should be 456 x 270.
            </summary>
        </member>
        <member name="T:Xheo.Licensing.GuiBrandedLimit">
            <summary>
            Displays a "nag screen" before the license is granted. 
            </summary>
            <remarks>
            If a license with a GUI limit is used from a web application, it will still pause 
            the request for the time given in <see cref="P:Xheo.Licensing.GuiBrandedLimit.ContinueDelay"/> on the first
            request, but will not show the form.
            </remarks>
        </member>
        <member name="M:Xheo.Licensing.GuiBrandedLimit.#ctor">
            <summary>
            Initializes a new instance of the GuiBrandedLimit class.
            </summary>
        </member>
        <member name="M:Xheo.Licensing.GuiBrandedLimit.#ctor(System.String)">
            <summary>
            Initializes a new instance of the GuiBrandedLimit class.
            </summary>
            <param name="terms">
            	Description of the terms of the license.
            </param>
        </member>
        <member name="M:Xheo.Licensing.GuiBrandedLimit.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the GuiBrandedLimit class.
            </summary>
            <param name="purchaseUrl">
            	URL of the website where the user can purchase a full license.
            </param>
            <param name="terms">
            	Description of the terms of the license.
            </param>
        </member>
        <member name="M:Xheo.Licensing.GuiBrandedLimit.#ctor(System.String,System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the GuiBrandedLimit class.
            </summary>
            <param name="purchaseUrl">
            	URL of the website where the user can purchase a full license.
            </param>
            <param name="terms">
            	Description of the terms of the license.
            </param>
            <param name="usePurchaseGui">
            	unlock the license on demand.
            </param>
        </member>
        <member name="M:Xheo.Licensing.GuiBrandedLimit.#ctor(System.String,System.Uri)">
            <summary>
            Initializes a new instance of the GuiBrandedLimit class.
            </summary>
            <param name="purchaseUrl">
            	URL of the website where the user can purchase a full license.
            </param>
            <param name="terms">
            	Description of the terms of the license.
            </param>
        </member>
        <member name="M:Xheo.Licensing.GuiBrandedLimit.#ctor(System.String,System.Uri,System.Boolean)">
            <summary>
            Initializes a new instance of the GuiBrandedLimit class.
            </summary>
            <param name="purchaseUrl">
            	URL of the website where the user can purchase a full license.
            </param>
            <param name="terms">
            	Description of the terms of the license.
            </param>
            <param name="usePurchaseGui">
            	unlock the license on demand.
            </param>
        </member>
        <member name="M:Xheo.Licensing.GuiBrandedLimit.Validate(System.ComponentModel.LicenseContext,System.Type,System.Object)">
            <summary>
            Validates that the license being granted is within the limits enforced by
            this object.
            </summary>
            <param name="context">
            	The LicenseContext passed to <see cref="M:System.ComponentModel.LicenseProvider.GetLicense(System.ComponentModel.LicenseContext,System.Type,System.Object,System.Boolean)"/>.
            </param>
            <param name="type">
            	The Type of the object being licensed.
            </param>
            <param name="instance">
            	The instance of the object being licensed.
            </param>
            <returns>
            	Returns true if the limits are valid, otherwise false.
            </returns>
        </member>
        <member name="M:Xheo.Licensing.GuiBrandedLimit.LoadFromXml(System.Xml.XmlNode)">
            <summary>
            Loads the contents of a Limit from an XML string.
            </summary>
            <param name="node">
            	The XML string to load from.
            </param>
            <returns>
            	Returns true if the load was successful, otherwise false.
            </returns>
        </member>
        <member name="M:Xheo.Licensing.GuiBrandedLimit.SaveToXml(System.Xml.XmlNode)">
            <summary>
            Saves the contents of the Limit as an XML string.
            </summary>
            <returns>
            	Returns the saved XML.
            </returns>
        </member>
        <member name="M:Xheo.Licensing.GuiBrandedLimit.GetDetailsDescription">
            <summary>
            Overrides <see cref="M:Xheo.Licensing.Limit.GetDetailsDescription"/>.
            </summary>
        </member>
        <member name="P:Xheo.Licensing.GuiBrandedLimit.Terms">
            <summary>
            Gets the terms of the GuiBranded. If the terms contains a URL, the page will be
            displayed.
            </summary>
        </member>
        <member name="P:Xheo.Licensing.GuiBrandedLimit.PurchaseUrl">
            <summary>
            Gets the URL where the full version can be purchased. The license 
            <see cref="P:Xheo.Licensing.ExtendedLicense.SerialNumber"/> and a <see cref="T:Xheo.Licensing.MachineProfile"/> hash are
            appended to the end of the url automatically.
            </summary>
        </member>
        <member name="P:Xheo.Licensing.GuiBrandedLimit.ContinueDelay">
            <summary>
            Gets or sets the time in seconds that the continue button should initially be disabled.
            </summary>
        </member>
        <member name="P:Xheo.Licensing.GuiBrandedLimit.BitmapResource">
            <summary>
            Gets or sets the assembly qualified name of a resource to display in the bitmap
            area of the form. Should be 456 x 270. You can also specify a remote JPEG or GIF
            image by using a fully qualified URL.
            </summary>
            <remarks>
            Only URLs beginning with http://, https:// or file:// can be used.
            </remarks>
        </member>
        <member name="P:Xheo.Licensing.GuiBrandedLimit.UsePurchaseGui">
            <summary>
            used to purchase the a license, or if a new browser window should be opened
            to the <see cref="P:Xheo.Licensing.GuiBrandedLimit.PurchaseUrl"/> instead.
            </summary>
        </member>
        <member name="P:Xheo.Licensing.GuiBrandedLimit.Description">
            <summary>
            Gets the description of the limit.
            </summary>
        </member>
        <member name="P:Xheo.Licensing.GuiBrandedLimit.Name">
            <summary>
            Gets the display name of the limit.
            </summary>
        </member>
        <member name="P:Xheo.Licensing.GuiBrandedLimit.IsGui">
            <summary>
            Gets a value that indicates if a GUI is displayed to interact with the user.
            </summary>
        </member>
        <member name="P:Xheo.Licensing.GuiBrandedLimit.GuiShown">
            <summary>
            Gets a value that indicates if the GUI was shown.
            </summary>
        </member>
        <member name="T:Xheo.Licensing.FailureManager">
            <summary>
            Manages graceful failure periods for licenses that depend on remote or 
            volitale resources.
            </summary>
        </member>
        <member name="M:Xheo.Licensing.FailureManager.#ctor">
            <summary>
            Initializes a new instance of the FailureManager class.
            </summary>
        </member>
        <member name="M:Xheo.Licensing.FailureManager.RegisterFailure(System.ComponentModel.LicenseContext,System.Type,System.Int32)">
            <summary>
            Registers a failure for the given type and determines if a hard failure
            should occur.
            </summary>
            <param name="context">
            	The LicenseContext of the request. The failure is only registered once
            	per context.
            </param>
            <param name="type">
            	The Type of the control or component being licensed. Failures are tracked
            	per Type.
            </param>
            <param name="allowedFailures">
            	The maximum number of failures that can occur before a hard failure occurs.
            </param>
            <returns>
            	Returns true if a hard failure should occur, otherwise false.
            </returns>
        </member>
        <member name="M:Xheo.Licensing.FailureManager.RegisterSuccess(System.ComponentModel.LicenseContext,System.Type)">
            <summary>
            Registers a successful attempt to validate a license and resets the failure 
            count to 0.
            </summary>
            <param name="context">
            	The LicenseContext of the request.
            </param>
            <param name="type">
            	The Type of the control or component being licensed.
            </param>
        </member>
        <member name="T:Xheo.Licensing.ExtendedLicenseException">
            <summary>
            Represents an exception in a Xheo assembly with a localized <see cref="P:Xheo.Licensing.ExtendedLicenseException.FriendlyMessage"/>
            and <see cref="P:Xheo.Licensing.ExtendedLicenseException.DetailedMessage"/>.
            </summary>
            <remarks>
            	The <see cref="P:Xheo.Licensing.ExtendedLicenseException.Message"/> is used to communicate a simple description
            	of what went wrong and should be written to the non-developer audience. The
            	<see cref="P:Xheo.Licensing.ExtendedLicenseException.DetailedMessage"/> should be used to communicate additional technical details
            	and how the problem might be fixed.
            </remarks>
        </member>
        <member name="M:Xheo.Licensing.ExtendedLicenseException.#ctor">
            <summary>
            Initializes a new instance of the ExtendedLicenseException class.
            </summary>
        </member>
        <member name="M:Xheo.Licensing.ExtendedLicenseException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the ExtendedLicenseException class and uses the
            resource given for the message.
            </summary>
            <param name="resourceName">
            	The name of the resource to use for the message.
            </param>
        </member>
        <member name="M:Xheo.Licensing.ExtendedLicenseException.#ctor(System.String,System.Object[])">
            <summary>
            Initializes a new instance of the ExtendedLicenseException class and uses the
            resource given for the message.
            </summary>
            <param name="resourceName">
            	The name of the resource to use for the message.
            </param>
            <param name="args">
            	Variable list of arguments to pass to String.Format.
            </param>
        </member>
        <member name="M:Xheo.Licensing.ExtendedLicenseException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the ExtendedLicenseException class and uses the
            resource given for the message.
            </summary>
            <param name="resourceName">
            	The name of the resource to use for the message.
            </param>
            <param name="innerException">
            	A reference to any inner exception.
            </param>
        </member>
        <member name="M:Xheo.Licensing.ExtendedLicenseException.#ctor(System.String,System.Exception,System.Object[])">
            <summary>
            Initializes a new instance of the ExtendedLicenseException class and uses the
            resource given for the message.
            </summary>
            <param name="resourceName">
            	The name of the resource to use for the message.
            </param>
            <param name="innerException">
            	A reference to any inner exception.
            </param>
            <param name="args">
            	Variable list of arguments to pass to String.Format.
            </param>
        </member>
        <member name="M:Xheo.Licensing.ExtendedLicenseException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the ExtendedLicenseException class with serialized data.
            </summary>
            <param name="info">
            	The object that holds the serialized object data.
            </param>
            <param name="context">
            	The contextual information about the source or destination.
            </param>
        </member>
        <member name="P:Xheo.Licensing.ExtendedLicenseException.Message">
            <summary>
            Gets a description of the exception.
            </summary>
        </member>
        <member name="P:Xheo.Licensing.ExtendedLicenseException.FriendlyMessage">
            <summary>
            Gets or sets the friendly message.
            </summary>
        </member>
        <member name="P:Xheo.Licensing.ExtendedLicenseException.DetailedMessage">
            <summary>
            Gets or sets the detailed message.
            </summary>
        </member>
        <member name="T:Xheo.Licensing.ActivationLimit">
            <summary>
            Restricts usage to an activated license. License are activated through
            an <see cref="T:Xheo.Licensing.ActivationServer"/>. You should not have more then one activation limit
            per license.
            </summary>
            <remarks>
            <b>NOTE:</b> The process requesting a license should have write access to the
            original license file to activate the license.
            </remarks>
        </member>
        <member name="M:Xheo.Licensing.ActivationLimit.#ctor">
            <summary>
            Initializes a new instance of the ActivationLimit class.
            </summary>
        </member>
        <member name="M:Xheo.Licensing.ActivationLimit.#ctor(System.String,System.Int32,System.DateTime)">
            <summary>
            Initializes a new instance of the ActivationLimit class with the given
            hash and tolerance.
            </summary>
            <param name="tolerance">
            	The difference tolerance level.
            </param>
            <param name="gracePeriod">
            	The date by which the license must be activated.
            </param>
            <param name="url">
            	The URL of the <see cref="T:Xheo.Licensing.ActivationServer"/>.
            </param>
        </member>
        <member name="M:Xheo.Licensing.ActivationLimit.#ctor(System.String)">
            <summary>
            Initializes a new instance of the ActivationLimit class with the given
            hash and tolerance.
            </summary>
            <param name="url">
            	The URL of the <see cref="T:Xheo.Licensing.ActivationServer"/>.
            </param>
        </member>
        <member name="M:Xheo.Licensing.ActivationLimit.Activate(System.Type)">
            <summary>
            Performs the actual activation of the license.
            </summary>
            <returns>
            	Returns true if the license was activated or the user selected to
            	continue in their grace period, otherwise false.
            </returns>
        </member>
        <member name="M:Xheo.Licensing.ActivationLimit.ActivateWithServer(System.Type)">
            <summary>
            Contacts the activation server, activates the license, and on success
            overwrites the license file with the new license.
            </summary>
        </member>
        <member name="M:Xheo.Licensing.ActivationLimit.Validate(System.ComponentModel.LicenseContext,System.Type,System.Object)">
            <summary>
            Validates that the license being granted is within the limits enforced by
            this object.
            </summary>
            <param name="context">
            	The LicenseContext passed to <see cref="M:System.ComponentModel.LicenseProvider.GetLicense(System.ComponentModel.LicenseContext,System.Type,System.Object,System.Boolean)"/>.
            </param>
            <param name="type">
            	The Type of the object being licensed.
            </param>
            <param name="instance">
            	The instance of the object being licensed.
            </param>
            <returns>
            	Returns true if the limits are valid, otherwise false.
            </returns>
        </member>
        <member name="M:Xheo.Licensing.ActivationLimit.InsertHtml(System.Object,System.EventArgs)">
            <summary>
            Inserts the HTML into the page.
            </summary>
        </member>
        <member name="M:Xheo.Licensing.ActivationLimit.Granted(System.ComponentModel.LicenseContext,System.Type,System.Object)">
            <summary>
            Called every time the limit is granted. Used to enforce limits that
            must be checked each time a Type is created. 
            </summary>
            <param name="context">
            	The LicenseContext used to determine the environment and settings
            	of the licensing.
            </param>
            <param name="instance">
            	The instance of the object being licensed.
            </param>
            <param name="type">
            	The Type of the object being licensed.
            </param>
            <remarks>
            Checks in this method should be very fast because they are called every time a 
            licensed object is created. The default implementation does nothing.
            </remarks>
        </member>
        <member name="M:Xheo.Licensing.ActivationLimit.LoadFromXml(System.Xml.XmlNode)">
            <summary>
            Loads the contents of a Limit from an XML string.
            </summary>
            <param name="node">
            	The XmlNode to load from.
            </param>
            <returns>
            	Returns true if the load was successful, otherwise false.
            </returns>
        </member>
        <member name="M:Xheo.Licensing.ActivationLimit.SaveToXml(System.Xml.XmlNode)">
            <summary>
            Saves the contents of the Limit as an XML string.
            </summary>
            <returns>
            	Returns the saved XML.
            </returns>
        </member>
        <member name="M:Xheo.Licensing.ActivationLimit.GetDetailsDescription">
            <summary>
            Overrides <see cref="M:Xheo.Licensing.Limit.GetDetailsDescription"/>.
            </summary>
        </member>
        <member name="M:Xheo.Licensing.ActivationLimit.Abort">
            <summary>
            Aborts a pending asynchronous activation.
            </summary>
        </member>
        <member name="P:Xheo.Licensing.ActivationLimit.ActivationKey">
            <summary>
            Gets or sets the activation unlock key for the license.
            </summary>
        </member>
        <member name="P:Xheo.Licensing.ActivationLimit.UnlockHash">
            <summary>
            Gets or sets the profile hash used when unlocking by activation key.
            </summary>
        </member>
        <member name="P:Xheo.Licensing.ActivationLimit.ProfileHash">
            <summary>
            Gets or sets the comparable profile hash generated from <see cref="M:Xheo.Licensing.MachineProfile.GetComparableHash"/>.
            </summary>
        </member>
        <member name="P:Xheo.Licensing.ActivationLimit.Tolerance">
            <summary>
            Gets or sets the level of difference allowed between the stored 
            <see cref="P:Xheo.Licensing.ActivationLimit.ProfileHash"/> and the hash of the current machine the license is 
            running on. A value of 0 means the hash values must be identical, a value
            of 10 means they can have the maximum number of differences and effectively 
            disables activation.
            </summary>
        </member>
        <member name="P:Xheo.Licensing.ActivationLimit.GracePeriod">
            <summary>
            Gets or sets the date for the end of the grace period. The license must
            be activated by the date given.
            </summary>
        </member>
        <member name="P:Xheo.Licensing.ActivationLimit.GraceDuration">
            <summary>
            Gets or sets the time in days before the user must activate. If greater than
            zero, it overrides the value of <see cref="P:Xheo.Licensing.ActivationLimit.GracePeriod"/>.
            </summary>
        </member>
        <member name="P:Xheo.Licensing.ActivationLimit.Url">
            <summary>
            Gets or sets the URL of the <see cref="T:Xheo.Licensing.ActivationServer"/>.
            </summary>
        </member>
        <member name="P:Xheo.Licensing.ActivationLimit.CanActivateByKey">
            <summary>
            Gets or sets a value that indicates if the license can be activated by key.
            </summary>
            <remarks>
            	When true, indicates that the license can be activated by key provided
            	by email or read over the phone.
            </remarks>
        </member>
        <member name="P:Xheo.Licensing.ActivationLimit.SplashResource">
            <summary>
            Gets or sets the assembly qualified name of a resource to display in the bitmap
            area of the form. Should be 176 x 352. You can also specify a remote JPEG or GIF
            image by using a fully qualified URL.
            </summary>
            <remarks>
            Only URLs beginning with http, https or file can be used.
            </remarks>
        </member>
        <member name="P:Xheo.Licensing.ActivationLimit.SplashUrl">
            <summary>
            Gets or sets the URL of a 176 x 550 JPEG or GIF file to be used in the splash area of the activation form when displayed on a web page.
            </summary>
        </member>
        <member name="P:Xheo.Licensing.ActivationLimit.Description">
            <summary>
            Gets the description of the limit.
            </summary>
        </member>
        <member name="P:Xheo.Licensing.ActivationLimit.Name">
            <summary>
            Gets the display name of the limit.
            </summary>
        </member>
        <member name="P:Xheo.Licensing.ActivationLimit.IsRemote">
            <summary>
            Gets a value that indicates if remote services are used to validate the license.
            </summary>
        </member>
        <member name="P:Xheo.Licensing.ActivationLimit.IsGui">
            <summary>
            Gets a value that indicates if a GUI is displayed to interact with the user.
            </summary>
        </member>
        <member name="P:Xheo.Licensing.ActivationLimit.IsWorking">
            <summary>
            Gets a value that indicates if the Activation limit is performing an asynchronous
            activation with the server.
            </summary>
        </member>
        <member name="P:Xheo.Licensing.ActivationLimit.IsCanceled">
            <summary>
            Gets a value that indicates if the last asynchronous activation was 
            canceled using the <see cref="M:Xheo.Licensing.ActivationLimit.Abort"/> method.
            </summary>
        </member>
        <member name="P:Xheo.Licensing.ActivationLimit.IsActivated">
            <summary>
            Gets a value that indicates if the limit has been activated.
            </summary>
        </member>
        <member name="P:Xheo.Licensing.ActivationLimit.UnprotectedAttributes">
            <summary>
            Gets a comma separated list of attributes that can be ignored for creating and
            validating the license signature.
            </summary>
        </member>
        <member name="P:Xheo.Licensing.ActivationLimit.IsTimeSensitive">
            <summary>
            Gets a value that indicates if the activation limit is time sensitive.
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.ImageUtils.Icons">
            <summary>
            Contains constants for the built in icons.
            <seealso cref="T:Telogis.GeoBase.ImageUtils.IconCache"/>
            </summary>
            <example>
            <code lang="C#">
            PushPin pin = new PushPin( new LatLon(34, -118) );
            pin.Icon = Icons.SmallDotBlue;
            </code>
            </example>
        </member>
        <member name="F:Telogis.GeoBase.ImageUtils.Icons.PinVerticalBlack">
            <summary>
            <img src="Art/icons/000.bmp"></img>
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.ImageUtils.Icons.PinVerticalRed">
            <summary>
            <img src="Art/icons/001.bmp"></img>
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.ImageUtils.Icons.PinVerticalYellow">
            <summary>
            <img src="Art/icons/002.bmp"></img>
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.ImageUtils.Icons.PinVerticalNavy">
            <summary>
            <img src="Art/icons/003.bmp"></img>
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.ImageUtils.Icons.PinVerticalBlue">
            <summary>
            <img src="Art/icons/004.bmp"></img>
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.ImageUtils.Icons.PinVerticalBrown">
            <summary>
            <img src="Art/icons/005.bmp"></img>
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.ImageUtils.Icons.PinVerticalGreen">
            <summary>
            <img src="Art/icons/006.bmp"></img>
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.ImageUtils.Icons.PinVerticalMaroon">
            <summary>
            <img src="Art/icons/007.bmp"></img>
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.ImageUtils.Icons.PinAngledGray">
            <summary>
            <img src="Art/icons/008.bmp"></img>
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.ImageUtils.Icons.PinAngledRed">
            <summary>
            <img src="Art/icons/009.bmp"></img>
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.ImageUtils.Icons.PinAngledYellow">
            <summary>
            <img src="Art/icons/010.bmp"></img>
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.ImageUtils.Icons.PinAngledNavy">
            <summary>
            <img src="Art/icons/011.bmp"></img>
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.ImageUtils.Icons.PinAngledBlue">
            <summary>
            <img src="Art/icons/012.bmp"></img>
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.ImageUtils.Icons.PinAngledPink">
            <summary>
            <img src="Art/icons/013.bmp"></img>
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.ImageUtils.Icons.PinAngledGreen">
            <summary>
            <img src="Art/icons/014.bmp"></img>
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.ImageUtils.Icons.PinAngledMaroon">
            <summary>
            <img src="Art/icons/015.bmp"></img>
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.ImageUtils.Icons.SmallDotBlack">
            <summary>
            <img src="Art/icons/016.bmp"></img>
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.ImageUtils.Icons.SmallDotRed">
            <summary>
            <img src="Art/icons/017.bmp"></img>
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.ImageUtils.Icons.SmallDotYellow">
            <summary>
            <img src="Art/icons/018.bmp"></img>
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.ImageUtils.Icons.SmallDotWhite">
            <summary>
            <img src="Art/icons/019.bmp"></img>
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.ImageUtils.Icons.SmallDotBlue">
            <summary>
            <img src="Art/icons/020.bmp"></img>
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.ImageUtils.Icons.SmallDotCyan">
            <summary>
            <img src="Art/icons/021.bmp"></img>
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.ImageUtils.Icons.SmallDotGreen">
            <summary>
            <img src="Art/icons/022.bmp"></img>
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.ImageUtils.Icons.SmallDotMaroon">
            <summary>
            <img src="Art/icons/023.bmp"></img>
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.ImageUtils.Icons.LargeDotBlack">
            <summary>
            <img src="Art/icons/024.bmp"></img>
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.ImageUtils.Icons.LargeDotRed">
            <summary>
            <img src="Art/icons/025.bmp"></img>
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.ImageUtils.Icons.LargeDotYellow">
            <summary>
            <img src="Art/icons/026.bmp"></img>
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.ImageUtils.Icons.LargeDotWhite">
            <summary>
            <img src="Art/icons/027.bmp"></img>
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.ImageUtils.Icons.LargeDotBlue">
            <summary>
            <img src="Art/icons/028.bmp"></img>
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.ImageUtils.Icons.LargeDotCyan">
            <summary>
            <img src="Art/icons/029.bmp"></img>
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.ImageUtils.Icons.LargeDotGreen">
            <summary>
            <img src="Art/icons/030.bmp"></img>
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.ImageUtils.Icons.LargeDotMaroon">
            <summary>
            <img src="Art/icons/031.bmp"></img>
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.ImageUtils.Icons.SmallSquareBlack">
            <summary>
            <img src="Art/icons/032.bmp"></img>
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.ImageUtils.Icons.SmallSquareRed">
            <summary>
            <img src="Art/icons/033.bmp"></img>
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.ImageUtils.Icons.SmallSquareYellow">
            <summary>
            <img src="Art/icons/034.bmp"></img>
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.ImageUtils.Icons.SmallSquareWhite">
            <summary>
            <img src="Art/icons/035.bmp"></img>
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.ImageUtils.Icons.SmallSquareBlue">
            <summary>
            <img src="Art/icons/036.bmp"></img>
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.ImageUtils.Icons.SmallSquareCyan">
            <summary>
            <img src="Art/icons/037.bmp"></img>
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.ImageUtils.Icons.SmallSquareGreen">
            <summary>
            <img src="Art/icons/038.bmp"></img>
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.ImageUtils.Icons.SmallSquareMaroon">
            <summary>
            <img src="Art/icons/039.bmp"></img>
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.ImageUtils.Icons.LargeSquareBlack">
            <summary>
            <img src="Art/icons/040.bmp"></img>
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.ImageUtils.Icons.LargeSquareRed">
            <summary>
            <img src="Art/icons/041.bmp"></img>
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.ImageUtils.Icons.LargeSquareYellow">
            <summary>
            <img src="Art/icons/042.bmp"></img>
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.ImageUtils.Icons.LargeSquareWhite">
            <summary>
            <img src="Art/icons/043.bmp"></img>
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.ImageUtils.Icons.LargeSquareBlue">
            <summary>
            <img src="Art/icons/044.bmp"></img>
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.ImageUtils.Icons.LargeSquareCyan">
            <summary>
            <img src="Art/icons/045.bmp"></img>
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.ImageUtils.Icons.LargeSquareGreen">
            <summary>
            <img src="Art/icons/046.bmp"></img>
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.ImageUtils.Icons.LargeSquareMaroon">
            <summary>
            <img src="Art/icons/047.bmp"></img>
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.ImageUtils.Icons.SmallTriangleBlack">
            <summary>
            <img src="Art/icons/048.bmp"></img>
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.ImageUtils.Icons.SmallTriangleRed">
            <summary>
            <img src="Art/icons/049.bmp"></img>
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.ImageUtils.Icons.SmallTriangleYellow">
            <summary>
            <img src="Art/icons/050.bmp"></img>
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.ImageUtils.Icons.SmallTriangleWhite">
            <summary>
            <img src="Art/icons/051.bmp"></img>
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.ImageUtils.Icons.SmallTriangleBlue">
            <summary>
            <img src="Art/icons/052.bmp"></img>
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.ImageUtils.Icons.SmallTriangleCyan">
            <summary>
            <img src="Art/icons/053.bmp"></img>
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.ImageUtils.Icons.SmallTriangleGreen">
            <summary>
            <img src="Art/icons/054.bmp"></img>
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.ImageUtils.Icons.SmallTriangleMaroon">
            <summary>
            <img src="Art/icons/055.bmp"></img>
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.ImageUtils.Icons.LargeTriangleBlack">
            <summary>
            <img src="Art/icons/056.bmp"></img>
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.ImageUtils.Icons.LargeTriangleRed">
            <summary>
            <img src="Art/icons/057.bmp"></img>
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.ImageUtils.Icons.LargeTriangleYellow">
            <summary>
            <img src="Art/icons/058.bmp"></img>
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.ImageUtils.Icons.LargeTriangleWhite">
            <summary>
            <img src="Art/icons/059.bmp"></img>
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.ImageUtils.Icons.LargeTriangleBlue">
            <summary>
            <img src="Art/icons/060.bmp"></img>
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.ImageUtils.Icons.LargeTriangleCyan">
            <summary>
            <img src="Art/icons/061.bmp"></img>
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.ImageUtils.Icons.LargeTriangleGreen">
            <summary>
            <img src="Art/icons/062.bmp"></img>
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.ImageUtils.Icons.LargeTriangleMaroon">
            <summary>
            <img src="Art/icons/063.bmp"></img>
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.ImageUtils.Icons.CrossHairPurple">
            <summary>
            <img src="Art/icons/064.bmp"></img>
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.ImageUtils.Icons.CrossHairBlack">
            <summary>
            <img src="Art/icons/065.bmp"></img>
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.ImageUtils.Icons.Helicopter">
            <summary>
            <img src="Art/icons/066.bmp"></img>
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.ImageUtils.Icons.Satellite">
            <summary>
            <img src="Art/icons/067.bmp"></img>
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.ImageUtils.Icons.SpeechBubble">
            <summary>
            <img src="Art/icons/068.bmp"></img>
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.ImageUtils.Icons.NoEntry">
            <summary>
            <img src="Art/icons/069.bmp"></img>
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.ImageUtils.Icons.Prohibited">
            <summary>
            <img src="Art/icons/070.bmp"></img>
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.ImageUtils.Icons.Camera">
            <summary>
            <img src="Art/icons/071.bmp"></img>
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.ImageUtils.Icons.Building1">
            <summary>
            <img src="Art/icons/072.bmp"></img>
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.ImageUtils.Icons.Building2">
            <summary>
            <img src="Art/icons/073.bmp"></img>
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.ImageUtils.Icons.Building3">
            <summary>
            <img src="Art/icons/074.bmp"></img>
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.ImageUtils.Icons.Building4">
            <summary>
            <img src="Art/icons/075.bmp"></img>
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.ImageUtils.Icons.Stadium">
            <summary>
            <img src="Art/icons/076.bmp"></img>
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.ImageUtils.Icons.House1">
            <summary>
            <img src="Art/icons/077.bmp"></img>
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.ImageUtils.Icons.House2">
            <summary>
            <img src="Art/icons/078.bmp"></img>
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.ImageUtils.Icons.House3">
            <summary>
            <img src="Art/icons/079.bmp"></img>
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.ImageUtils.Icons.Ship">
            <summary>
            <img src="Art/icons/080.bmp"></img>
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.ImageUtils.Icons.Train1">
            <summary>
            <img src="Art/icons/081.bmp"></img>
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.ImageUtils.Icons.CarRed">
            <summary>
            <img src="Art/icons/082.bmp"></img>
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.ImageUtils.Icons.CarBlue">
            <summary>
            <img src="Art/icons/083.bmp"></img>
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.ImageUtils.Icons.CarGray">
            <summary>
            <img src="Art/icons/084.bmp"></img>
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.ImageUtils.Icons.TruckRed">
            <summary>
            <img src="Art/icons/085.bmp"></img>
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.ImageUtils.Icons.TruckBlue">
            <summary>
            <img src="Art/icons/086.bmp"></img>
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.ImageUtils.Icons.TruckGreen">
            <summary>
            <img src="Art/icons/087.bmp"></img>
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.ImageUtils.Icons.Car1">
            <summary>
            <img src="Art/icons/088.bmp"></img>
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.ImageUtils.Icons.Plane1">
            <summary>
            <img src="Art/icons/089.bmp"></img>
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.ImageUtils.Icons.Plane2">
            <summary>
            <img src="Art/icons/090.bmp"></img>
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.ImageUtils.Icons.Boat">
            <summary>
            <img src="Art/icons/091.bmp"></img>
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.ImageUtils.Icons.Tree">
            <summary>
            <img src="Art/icons/092.bmp"></img>
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.ImageUtils.Icons.Walk1">
            <summary>
            <img src="Art/icons/093.bmp"></img>
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.ImageUtils.Icons.Walk2">
            <summary>
            <img src="Art/icons/094.bmp"></img>
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.ImageUtils.Icons.Information">
            <summary>
            <img src="Art/icons/095.bmp"></img>
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.ImageUtils.Icons.Tornado">
            <summary>
            <img src="Art/icons/096.bmp"></img>
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.ImageUtils.Icons.Volcano">
            <summary>
            <img src="Art/icons/097.bmp"></img>
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.ImageUtils.Icons.Rain">
            <summary>
            <img src="Art/icons/098.bmp"></img>
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.ImageUtils.Icons.Snow">
            <summary>
            <img src="Art/icons/099.bmp"></img>
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.ImageUtils.Icons.Lightning">
            <summary>
            <img src="Art/icons/100.bmp"></img>
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.ImageUtils.Icons.Sun">
            <summary>
            <img src="Art/icons/101.bmp"></img>
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.ImageUtils.Icons.Cloudy">
            <summary>
            <img src="Art/icons/102.bmp"></img>
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.ImageUtils.Icons.Trail">
            <summary>
            <img src="Art/icons/103.bmp"></img>
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.ImageUtils.Icons.Hotel">
            <summary>
            <img src="Art/icons/104.bmp"></img>
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.ImageUtils.Icons.House4">
            <summary>
            <img src="Art/icons/105.bmp"></img>
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.ImageUtils.Icons.Building5">
            <summary>
            <img src="Art/icons/106.bmp"></img>
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.ImageUtils.Icons.Flags">
            <summary>
            <img src="Art/icons/107.bmp"></img>
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.ImageUtils.Icons.Fish">
            <summary>
            <img src="Art/icons/108.bmp"></img>
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.ImageUtils.Icons.Barn">
            <summary>
            <img src="Art/icons/109.bmp"></img>
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.ImageUtils.Icons.Marquee">
            <summary>
            <img src="Art/icons/110.bmp"></img>
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.ImageUtils.Icons.Castle">
            <summary>
            <img src="Art/icons/111.bmp"></img>
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.ImageUtils.Icons.Tick">
            <summary>
            <img src="Art/icons/112.bmp"></img>
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.ImageUtils.Icons.Cross">
            <summary>
            <img src="Art/icons/113.bmp"></img>
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.ImageUtils.Icons.Bridge">
            <summary>
            <img src="Art/icons/114.bmp"></img>
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.ImageUtils.Icons.Building6">
            <summary>
            <img src="Art/icons/115.bmp"></img>
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.ImageUtils.Icons.Building7">
            <summary>
            <img src="Art/icons/116.bmp"></img>
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.ImageUtils.Icons.Building8">
            <summary>
            <img src="Art/icons/117.bmp"></img>
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.ImageUtils.Icons.Building9">
            <summary>
            <img src="Art/icons/118.bmp"></img>
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.ImageUtils.Icons.FirstAid">
            <summary>
            <img src="Art/icons/119.bmp"></img>
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.ImageUtils.Icons.ArrowUp">
            <summary>
            <img src="Art/icons/120.bmp"></img>
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.ImageUtils.Icons.ArrowDown">
            <summary>
            <img src="Art/icons/121.bmp"></img>
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.ImageUtils.Icons.ArrowLeft">
            <summary>
            <img src="Art/icons/122.bmp"></img>
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.ImageUtils.Icons.ArrowRight">
            <summary>
            <img src="Art/icons/123.bmp"></img>
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.ImageUtils.Icons.Recycle">
            <summary>
            <img src="Art/icons/124.bmp"></img>
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.ImageUtils.Icons.Coffee">
            <summary>
            <img src="Art/icons/125.bmp"></img>
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.ImageUtils.Icons.Radioactive">
            <summary>
            <img src="Art/icons/126.bmp"></img>
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.ImageUtils.Icons.Shopping">
            <summary>
            <img src="Art/icons/127.bmp"></img>
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.ImageUtils.Icons.ArrowUpRight">
            <summary>
            <img src="Art/icons/128.bmp"></img>
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.ImageUtils.Icons.ArrowUpLeft">
            <summary>
            <img src="Art/icons/129.bmp"></img>
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.ImageUtils.Icons.ArrowDownRight">
            <summary>
            <img src="Art/icons/130.bmp"></img>
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.ImageUtils.Icons.ArrowDownLeft">
            <summary>
            <img src="Art/icons/131.bmp"></img>
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.ImageUtils.Icons.TrafficLights">
            <summary>
            <img src="Art/icons/132.bmp"></img>
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.ImageUtils.Icons.Stop">
            <summary>
            <img src="Art/icons/133.bmp"></img>
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.ImageUtils.Icons.NoRightTurn">
            <summary>
            <img src="Art/icons/134.bmp"></img>
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.ImageUtils.Icons.NoLeftTurn">
            <summary>
            <img src="Art/icons/135.bmp"></img>
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.ImageUtils.Icons.FoodGreen">
            <summary>
            <img src="Art/icons/136.bmp"></img>
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.ImageUtils.Icons.FoodRed">
            <summary>
            <img src="Art/icons/137.bmp"></img>
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.ImageUtils.Icons.FoodBlue">
            <summary>
            <img src="Art/icons/138.bmp"></img>
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.ImageUtils.Icons.FoodNavy">
            <summary>
            <img src="Art/icons/139.bmp"></img>
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.ImageUtils.Icons.Bank">
            <summary>
            <img src="Art/icons/140.bmp"></img>
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.ImageUtils.Icons.Leaf">
            <summary>
            <img src="Art/icons/141.bmp"></img>
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.ImageUtils.Icons.Petrol">
            <summary>
            <img src="Art/icons/142.bmp"></img>
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.ImageUtils.Icons.Mechanic">
            <summary>
            <img src="Art/icons/143.bmp"></img>
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.ImageUtils.Icons.FoodYellow">
            <summary>
            <img src="Art/icons/144.bmp"></img>
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.ImageUtils.Icons.FoodBrown">
            <summary>
            <img src="Art/icons/145.bmp"></img>
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.ImageUtils.Icons.FoodCyan">
            <summary>
            <img src="Art/icons/146.bmp"></img>
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.ImageUtils.Icons.FoodMaroon">
            <summary>
            <img src="Art/icons/147.bmp"></img>
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.ImageUtils.Icons.Skiing">
            <summary>
            <img src="Art/icons/148.bmp"></img>
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.ImageUtils.Icons.Animals">
            <summary>
            <img src="Art/icons/149.bmp"></img>
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.ImageUtils.Icons.Film">
            <summary>
            <img src="Art/icons/150.bmp"></img>
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.ImageUtils.Icons.EmergencyVehicle">
            <summary>
            <img src="Art/icons/151.bmp"></img>
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.ImageUtils.Icons.Chemistry">
            <summary>
            <img src="Art/icons/152.bmp"></img>
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.ImageUtils.Icons.Camping">
            <summary>
            <img src="Art/icons/153.bmp"></img>
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.ImageUtils.Icons.Ferry">
            <summary>
            <img src="Art/icons/154.bmp"></img>
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.ImageUtils.Icons.Fountain">
            <summary>
            <img src="Art/icons/155.bmp"></img>
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.ImageUtils.Icons.Windmill">
            <summary>
            <img src="Art/icons/156.bmp"></img>
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.ImageUtils.Icons.Deer">
            <summary>
            <img src="Art/icons/157.bmp"></img>
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.ImageUtils.Icons.East">
            <summary>
            <img src="Art/icons/158.bmp"></img>
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.ImageUtils.Icons.Tennis1">
            <summary>
            <img src="Art/icons/159.bmp"></img>
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.ImageUtils.Icons.Art">
            <summary>
            <img src="Art/icons/160.bmp"></img>
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.ImageUtils.Icons.Whale">
            <summary>
            <img src="Art/icons/161.bmp"></img>
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.ImageUtils.Icons.Footprints">
            <summary>
            <img src="Art/icons/162.bmp"></img>
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.ImageUtils.Icons.Soccer">
            <summary>
            <img src="Art/icons/163.bmp"></img>
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.ImageUtils.Icons.Cricket">
            <summary>
            <img src="Art/icons/164.bmp"></img>
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.ImageUtils.Icons.Duck">
            <summary>
            <img src="Art/icons/165.bmp"></img>
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.ImageUtils.Icons.Stadium2">
            <summary>
            <img src="Art/icons/166.bmp"></img>
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.ImageUtils.Icons.Binoculars">
            <summary>
            <img src="Art/icons/167.bmp"></img>
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.ImageUtils.Icons.Bicycle">
            <summary>
            <img src="Art/icons/168.bmp"></img>
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.ImageUtils.Icons.Tower">
            <summary>
            <img src="Art/icons/169.bmp"></img>
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.ImageUtils.Icons.Dog">
            <summary>
            <img src="Art/icons/170.bmp"></img>
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.ImageUtils.Icons.Music">
            <summary>
            <img src="Art/icons/171.bmp"></img>
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.ImageUtils.Icons.Tennis2">
            <summary>
            <img src="Art/icons/172.bmp"></img>
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.ImageUtils.Icons.BorderCrossing">
            <summary>
            <img src="Art/icons/173.bmp"></img>
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.ImageUtils.Icons.CoatHanger">
            <summary>
            <img src="Art/icons/174.bmp"></img>
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.ImageUtils.Icons.Golf">
            <summary>
            <img src="Art/icons/175.bmp"></img>
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.ImageUtils.Icons.Crossbones">
            <summary>
            <img src="Art/icons/176.bmp"></img>
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.ImageUtils.Icons.Beer">
            <summary>
            <img src="Art/icons/177.bmp"></img>
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.ImageUtils.Icons.Wine">
            <summary>
            <img src="Art/icons/178.bmp"></img>
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.ImageUtils.Icons.CarAndBus">
            <summary>
            <img src="Art/icons/179.bmp"></img>
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.ImageUtils.Icons.Bus">
            <summary>
            <img src="Art/icons/180.bmp"></img>
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.ImageUtils.Icons.Car2">
            <summary>
            <img src="Art/icons/181.bmp"></img>
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.ImageUtils.Icons.Train2">
            <summary>
            <img src="Art/icons/182.bmp"></img>
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.ImageUtils.Icons.Train3">
            <summary>
            <img src="Art/icons/183.bmp"></img>
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.ImageUtils.Icons.Phone">
            <summary>
            <img src="Art/icons/184.bmp"></img>
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.ImageUtils.Icons.Money">
            <summary>
            <img src="Art/icons/185.bmp"></img>
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.ImageUtils.Icons.Anchor">
            <summary>
            <img src="Art/icons/186.bmp"></img>
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.ImageUtils.Icons.Picnic">
            <summary>
            <img src="Art/icons/187.bmp"></img>
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.ImageUtils.Icons.Present">
            <summary>
            <img src="Art/icons/188.bmp"></img>
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.ImageUtils.Icons.Mail">
            <summary>
            <img src="Art/icons/189.bmp"></img>
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.ImageUtils.Icons.Book">
            <summary>
            <img src="Art/icons/190.bmp"></img>
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.ImageUtils.Icons.Horse">
            <summary>
            <img src="Art/icons/191.bmp"></img>
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.ImageUtils.Icons.Hand">
            <summary>
            <img src="Art/icons/192.bmp"></img>
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.ImageUtils.Icons.Footprint">
            <summary>
            <img src="Art/icons/193.bmp"></img>
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.ImageUtils.Icons.Clock">
            <summary>
            <img src="Art/icons/194.bmp"></img>
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.ImageUtils.Icons.Rocket">
            <summary>
            <img src="Art/icons/195.bmp"></img>
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.ImageUtils.Icons.Explosion">
            <summary>
            <img src="Art/icons/196.bmp"></img>
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.ImageUtils.Icons.Cannon">
            <summary>
            <img src="Art/icons/197.bmp"></img>
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.ImageUtils.Icons.Tank">
            <summary>
            <img src="Art/icons/198.bmp"></img>
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.ImageUtils.Icons.Soldier">
            <summary>
            <img src="Art/icons/199.bmp"></img>
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.ImageUtils.Icons.Smile">
            <summary>
            <img src="Art/icons/200.bmp"></img>
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.ImageUtils.Icons.Sad">
            <summary>
            <img src="Art/icons/201.bmp"></img>
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.ImageUtils.Icons.Face1">
            <summary>
            <img src="Art/icons/202.bmp"></img>
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.ImageUtils.Icons.Face2">
            <summary>
            <img src="Art/icons/203.bmp"></img>
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.ImageUtils.Icons.Mask">
            <summary>
            <img src="Art/icons/204.bmp"></img>
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.ImageUtils.Icons.Family">
            <summary>
            <img src="Art/icons/205.bmp"></img>
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.ImageUtils.Icons.Man">
            <summary>
            <img src="Art/icons/206.bmp"></img>
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.ImageUtils.Icons.Woman">
            <summary>
            <img src="Art/icons/207.bmp"></img>
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.ImageUtils.Icons.Number1">
            <summary>
            <img src="Art/icons/208.bmp"></img>
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.ImageUtils.Icons.Number2">
            <summary>
            <img src="Art/icons/209.bmp"></img>
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.ImageUtils.Icons.Number3">
            <summary>
            <img src="Art/icons/210.bmp"></img>
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.ImageUtils.Icons.Number4">
            <summary>
            <img src="Art/icons/211.bmp"></img>
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.ImageUtils.Icons.Number5">
            <summary>
            <img src="Art/icons/212.bmp"></img>
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.ImageUtils.Icons.Number6">
            <summary>
            <img src="Art/icons/213.bmp"></img>
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.ImageUtils.Icons.Number7">
            <summary>
            <img src="Art/icons/214.bmp"></img>
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.ImageUtils.Icons.Number8">
            <summary>
            <img src="Art/icons/215.bmp"></img>
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.ImageUtils.Icons.Number9">
            <summary>
            <img src="Art/icons/216.bmp"></img>
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.ImageUtils.Icons.Number10">
            <summary>
            <img src="Art/icons/217.bmp"></img>
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.ImageUtils.Icons.Number11">
            <summary>
            <img src="Art/icons/218.bmp"></img>
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.ImageUtils.Icons.Number12">
            <summary>
            <img src="Art/icons/219.bmp"></img>
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.ImageUtils.Icons.Number13">
            <summary>
            <img src="Art/icons/220.bmp"></img>
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.ImageUtils.Icons.Number14">
            <summary>
            <img src="Art/icons/221.bmp"></img>
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.ImageUtils.Icons.Number15">
            <summary>
            <img src="Art/icons/222.bmp"></img>
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.ImageUtils.Icons.Number16">
            <summary>
            <img src="Art/icons/223.bmp"></img>
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.ImageUtils.Icons.Number17">
            <summary>
            <img src="Art/icons/224.bmp"></img>
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.ImageUtils.Icons.Number18">
            <summary>
            <img src="Art/icons/225.bmp"></img>
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.ImageUtils.Icons.Number19">
            <summary>
            <img src="Art/icons/226.bmp"></img>
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.ImageUtils.Icons.Number20">
            <summary>
            <img src="Art/icons/227.bmp"></img>
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.ImageUtils.Icons.LetterA">
            <summary>
            <img src="Art/icons/228.bmp"></img>
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.ImageUtils.Icons.LetterB">
            <summary>
            <img src="Art/icons/229.bmp"></img>
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.ImageUtils.Icons.LetterC">
            <summary>
            <img src="Art/icons/230.bmp"></img>
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.ImageUtils.Icons.LetterD">
            <summary>
            <img src="Art/icons/231.bmp"></img>
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.ImageUtils.Icons.LetterE">
            <summary>
            <img src="Art/icons/232.bmp"></img>
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.ImageUtils.Icons.LetterF">
            <summary>
            <img src="Art/icons/233.bmp"></img>
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.ImageUtils.Icons.LetterG">
            <summary>
            <img src="Art/icons/234.bmp"></img>
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.ImageUtils.Icons.LetterH">
            <summary>
            <img src="Art/icons/235.bmp"></img>
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.ImageUtils.Icons.LetterI">
            <summary>
            <img src="Art/icons/236.bmp"></img>
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.ImageUtils.Icons.LetterJ">
            <summary>
            <img src="Art/icons/237.bmp"></img>
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.ImageUtils.Icons.LetterK">
            <summary>
            <img src="Art/icons/238.bmp"></img>
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.ImageUtils.Icons.LetterL">
            <summary>
            <img src="Art/icons/239.bmp"></img>
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.ImageUtils.Icons.LetterM">
            <summary>
            <img src="Art/icons/240.bmp"></img>
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.ImageUtils.Icons.LetterN">
            <summary>
            <img src="Art/icons/241.bmp"></img>
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.ImageUtils.Icons.LetterO">
            <summary>
            <img src="Art/icons/242.bmp"></img>
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.ImageUtils.Icons.LetterP">
            <summary>
            <img src="Art/icons/243.bmp"></img>
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.ImageUtils.Icons.LetterQ">
            <summary>
            <img src="Art/icons/244.bmp"></img>
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.ImageUtils.Icons.LetterR">
            <summary>
            <img src="Art/icons/245.bmp"></img>
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.ImageUtils.Icons.LetterS">
            <summary>
            <img src="Art/icons/246.bmp"></img>
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.ImageUtils.Icons.LetterT">
            <summary>
            <img src="Art/icons/247.bmp"></img>
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.ImageUtils.Icons.LetterU">
            <summary>
            <img src="Art/icons/248.bmp"></img>
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.ImageUtils.Icons.LetterV">
            <summary>
            <img src="Art/icons/249.bmp"></img>
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.ImageUtils.Icons.LetterW">
            <summary>
            <img src="Art/icons/250.bmp"></img>
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.ImageUtils.Icons.LetterX">
            <summary>
            <img src="Art/icons/251.bmp"></img>
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.ImageUtils.Icons.LetterY">
            <summary>
            <img src="Art/icons/252.bmp"></img>
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.ImageUtils.Icons.LetterZ">
            <summary>
            <img src="Art/icons/253.bmp"></img>
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.ImageUtils.Icons.QuestionMark">
            <summary>
            <img src="Art/icons/254.bmp"></img>
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.ImageUtils.Icons.ExclamationMark">
            <summary>
            <img src="Art/icons/255.bmp"></img>
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.ImageUtils.Icons.UTurn">
            <summary>
            <img src="Art/icons/256.bmp"></img>
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.ImageUtils.IconCache">
            <summary>
            Allows icons to be rendered efficiently on maps. Manages instances of icons
            and can perform rotation and creation of icons.
            </summary>
            <remarks>
            <para>A number of icons are <see cref="T:Telogis.GeoBase.ImageUtils.Icons">included</see> already in 
            the IconCache. Additional icons can be added at runtime using <see cref="M:Telogis.GeoBase.ImageUtils.IconCache.LoadIcon(System.Drawing.Image)"/>.
            <see cref="T:Telogis.GeoBase.PushPin"/>s or custom <see cref="T:Telogis.GeoBase.IMapRenderer"/>s can be used to render
            icons on maps.</para>
            <para><b>Hotspots</b></para><para>The default display position of an icon is
            with its center placed over the specified co-ordinates. If this is not appropriate for
            an icon, its center position may be adjusted by specifying offset parameters called <b>hotspots</b>.
            These parameters tell the icon cache to shift the icon before rendering it. An example would
            be an arrow icon whose point should be rendered over the specified map co-ordinates.</para>
            </remarks>
        </member>
        <member name="M:Telogis.GeoBase.ImageUtils.IconCache.DrawIcon(System.Drawing.Graphics,System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Draws the specified Icon at the given co-ordinates, with optional selection box.
            <seealso cref="T:Telogis.GeoBase.PushPin"/>
            </summary>
            <param name="g">Graphics to draw on.</param>
            <param name="x">X coordinate of icon.</param>
            <param name="y">Y coordinate of icon.</param>
            <param name="number">Icon number to draw.</param>
            <param name="selection">Should a selection box be drawn around the icon.</param>
        </member>
        <member name="M:Telogis.GeoBase.ImageUtils.IconCache.DrawIcon(System.Drawing.Graphics,System.Int32,System.Int32,System.Int32,System.Single,System.Boolean)">
            <summary>
            Draws a rotated Icon at the specified co-ordinates, with optional selection box.
            <seealso cref="T:Telogis.GeoBase.DirectionalPushPin"/>
            </summary>
            <param name="g">Graphics to draw on.</param>
            <param name="x">X coordinate of icon.</param>
            <param name="y">Y coordinate of icon.</param>
            <param name="number">Icon number to draw.</param>
            <param name="angle">Clockwise rotation in degrees.</param>
            <param name="selection">Should a selection box be drawn around the icon.</param>
        </member>
        <member name="M:Telogis.GeoBase.ImageUtils.IconCache.GetIcon(System.Int32)">
            <summary>
            Returns an <see cref="T:System.Drawing.Image"/> of the icon at the specified index.
            </summary>
            <param name="number">The index of the icon to return. See <see cref="T:Telogis.GeoBase.ImageUtils.Icons"/>.</param>
            <returns>a copy of the <see cref="T:System.Drawing.Image"/> object for the given icon.</returns>
        </member>
        <member name="M:Telogis.GeoBase.ImageUtils.IconCache.Rectangle(System.Int32,System.Int32,System.Int32)">
            <summary>
            Returns the <see cref="T:System.Drawing.Rectangle"/> of the given icon.
            </summary>
            <param name="Icon">Index of the icon to get rectangle for.</param>
            <param name="x">X coordinate of icon.</param>
            <param name="y">Y coordinate of icon.</param>
            <returns>A <see cref="T:System.Drawing.Rectangle"/> around the icon.</returns>
        </member>
        <member name="M:Telogis.GeoBase.ImageUtils.IconCache.LoadIcon(System.String)">
            <summary>
            Load an icon from a file path and returns the index at which it was stored.
            </summary>
            <param name="filename">A string path to the file.</param>
            <returns>Index number at which the icon was stored.</returns>
            <remarks>If the icon does not have an alpha channel then the 
            color at 0,0 is used as transparent.</remarks>
        </member>
        <member name="M:Telogis.GeoBase.ImageUtils.IconCache.LoadIcon(System.String,System.Int32,System.Int32)">
            <summary>
            Load an icon from the specified file path, with the given <see cref="T:Telogis.GeoBase.ImageUtils.IconCache">hotspot</see>
            parameters. Returns the index at which the icon was stored.
            </summary>
            <param name="filename">A path to the file to load.</param>
            <param name="hotspot_x">The x hotspot.</param>
            <param name="hotspot_y">The y hotspot.</param>
            <returns>Index number at which the icon was stored.</returns>
            <remarks>If the icon does not have an alpha channel then the color at
            0,0 is used as transparent.</remarks>
        </member>
        <member name="M:Telogis.GeoBase.ImageUtils.IconCache.LoadIcon(System.Drawing.Image,System.Int32,System.Int32)">
            <summary>
            Load an icon with the given hotspot parameters. Returns the index at which it was stored.
            </summary>
            <remarks>
            The hotspot refers to the point on the image used for positioning the icon.
            For example, a pin icon  would likely have the hotspot set to the tip of the pin.
            This would ensure that when the icon is positioned it will have the point of the
            pin placed accurately.
            </remarks>
            <param name="anIcon">The <see cref="T:System.Drawing.Image"/> to use for the icon</param>
            <param name="hotspot_x">X coordinate of hotspot (relative to top left of icon)</param>
            <param name="hotspot_y">Y coordinate of hotspot (relative to top left of icon)</param>
            <returns>The index at which this icon has been created in the cache</returns>
        </member>
        <member name="M:Telogis.GeoBase.ImageUtils.IconCache.LoadIcon(System.Drawing.Image)">
            <summary>
            Load an icon with the hotspot automatically set at the center. Returns the index at which
            the icon was stored.
            </summary>
            <param name="anIcon">The <see cref="T:System.Drawing.Image"/> to use for the icon.</param>
            <returns>The index at which the Icon was created in the cache.</returns>
        </member>
        <member name="M:Telogis.GeoBase.ImageUtils.IconCache.ResetBalloonAnchors(System.Int32)">
            <summary>
            Reset the anchor points oof the icon to the default values.
            </summary>
            <param name="number">Index of the icon to reset ballon anchors for.</param>
        </member>
        <member name="M:Telogis.GeoBase.ImageUtils.IconCache.SetBalloonAnchor(System.Int32,System.Int32,System.Int32,Telogis.GeoBase.BalloonLocation)">
            <summary>
            Set the anchor point for informational balloons attached to the icon.
            </summary>
            <param name="number">Index of the icon to set ballon anchor for.</param>
            <param name="x">X coordinate of anchor point (relative to top left of icon)</param>
            <param name="y">Y coordinate of anchor point (relative to top left of icon)</param>
            <param name="location">The <see cref="T:Telogis.GeoBase.BalloonLocation"/> to set the anchor point for</param>
        </member>
        <member name="M:Telogis.GeoBase.ImageUtils.IconCache.GetBalloonAnchor(System.Int32,Telogis.GeoBase.BalloonLocation)">
            <summary>
            Get the anchor point for informational balloons attached to the icon.
            </summary>
            <param name="number">Index of the icon to get ballon anchor point for.</param>
            <param name="location">The <see cref="T:Telogis.GeoBase.BalloonLocation"/> to get the anchor point for</param>
            <returns>The anchor point (relative to top left of icon).</returns>
        </member>
        <member name="F:Telogis.GeoBase.ImageUtils.IconCache._Icon.width">
            <summary>
            Copied so that it can be accessed by other threads.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.ImageUtils.IconCache._Icon.height">
            <summary>
            Copied so that it can be accessed by other threads.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.ImageUtils.IconCache._Icon.hot_x">
            <summary>
            When rendering an Icon at a given location, hot spot co-ordinates
            are used to position a certain part of the Icon over the location.
            </summary>
            <remarks>
            Hot spot co-ordinates should be used when the shape of the Icon is such
            that positioning the centre of it over a location is not desirable. 
            The <see cref="T:Telogis.GeoBase.BalloonPushPin"/> hot spot co-ordinates
            ensure that the point of the balloon is located at the rendered co-ordinates.
            </remarks>
            <example>
            Co-ordinates are specified as offset values: A hot_x value of
            5 will cause the center of the Icon to be rendered 5 pixels to the right
            of the location co-ordinates.
            </example>
        </member>
        <member name="F:Telogis.GeoBase.ImageUtils.IconCache._Icon.hot_y">
            <summary>
            When rendering an Icon at a given location, hot spot co-ordinates
            are used to position a certain part of the Icon over the location.
            See <see cref="F:Telogis.GeoBase.ImageUtils.IconCache._Icon.hot_x"/>.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.ImageUtils.IconCache._Icon.NorthEastBalloonAnchor">
            <summary>
            Specify the anchor point for balloons placed in the 
            <see cref="F:Telogis.GeoBase.BalloonLocation.NorthEast"/> position.
            <remarks>
            The renderer will attempt to find a good anchor point for the balloon. To specify
            your own anchor point use <see cref="M:Telogis.GeoBase.ImageUtils.IconCache.SetBalloonAnchor(System.Int32,System.Int32,System.Int32,Telogis.GeoBase.BalloonLocation)"/>.
            </remarks>
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.ImageUtils.IconCache._Icon.NorthWestBalloonAnchor">
            <summary>
            Specify the current anchor point for balloons place in the 
            <see cref="F:Telogis.GeoBase.BalloonLocation.NorthWest"/> position.
            See <see cref="F:Telogis.GeoBase.ImageUtils.IconCache._Icon.NorthEastBalloonAnchor"/>.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.ImageUtils.IconCache._Icon.SouthEastBalloonAnchor">
            <summary>
            Specify the current anchor point for balloons place in the 
            <see cref="F:Telogis.GeoBase.BalloonLocation.SouthEast"/> position.
            See <see cref="F:Telogis.GeoBase.ImageUtils.IconCache._Icon.NorthEastBalloonAnchor"/>.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.ImageUtils.IconCache._Icon.SouthWestBalloonAnchor">
            <summary>
            Specify the current anchor point for balloons place in the 
            <see cref="F:Telogis.GeoBase.BalloonLocation.SouthWest"/> position.
            See <see cref="F:Telogis.GeoBase.ImageUtils.IconCache._Icon.NorthEastBalloonAnchor"/>.
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.ObjectSerializer.Serialize(System.IO.Stream,System.Object)">
            <summary>
            Serialize an object to the supplied stream.
            </summary>
            <param name="outputStream">Stream which the object is to be serialized to.</param>
            <param name="obj">Object to serialize.</param>
        </member>
        <member name="M:Telogis.GeoBase.ObjectSerializer.Deserialize``1(System.IO.Stream)">
            <summary>
            Deserialize an object after it has previously been serialized using the Serialize method.
            </summary>
            <typeparam name="T">The type of object expected.</typeparam>
            <param name="inputStream">Stream which the object is to be deserialized from.</param>
            <returns>The deserialized object.</returns>
        </member>
        <member name="T:Telogis.GeoBase.Navigation.MapOrientation">
            <summary>
            Describes the orientation of a map. Used by the <see cref="T:Telogis.GeoBase.Navigation.NavigationManager">NavigationManager</see>
            to allow the map heading to (optionally) remain aligned with the vehicle's heading.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Navigation.MapOrientation.North">
            <summary>
            The map should be oriented due north
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Navigation.MapOrientation.VehicleHeading">
            <summary>
            The map should be oriented to match the vehicle's heading
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.Navigation.NavigationManager">
            <summary>
            The <see cref="T:Telogis.GeoBase.Navigation.NavigationManager">NavigationManager</see> is a simple drop-in class to provide navigation
            services with the help from UI controls.
            </summary>
            <remarks>
            Navigation services provided by the <b>NavigationManager</b> include
            visual route guidance, audible announcements and GPS filtering.
            The <b>NavigationManager</b> can provide feedback using UI controls:
            a <see cref="T:Telogis.GeoBase.Navigation.TurnBox"/> (to guide the user
            through upcoming turns) and <see cref="T:Telogis.GeoBase.Navigation.LabelBox"/>es
            to display the current address, speed, destination and ETA. These controls may be
            set using the <see cref="M:Telogis.GeoBase.Navigation.NavigationManager.SetControls(Telogis.GeoBase.Navigation.INavigationStatus)"/> method.
            <para><b>Related articles</b>: <a href="b05c2695-f388-4acd-af71-cc5b240a0def.htm">Navigation Tutorial</a>, 
            <a href="b0f30dda-fc24-4b79-aa45-2077f0a6df13.htm">Implementing an IGps Member</a>, 
            <a href="b60eb5b5-243d-455a-b8ac-bd33b46e510e.htm">Using Languages and Cultures</a>.</para>
            </remarks>
        </member>
        <member name="M:Telogis.GeoBase.Navigation.NavigationManager.#ctor(Telogis.GeoBase.MapCtrl,System.String)">
            <summary>
            Construct a new US English <b>NavigationManager</b> for a given
            <see cref="T:Telogis.GeoBase.MapCtrl">map control</see> and path to language files.
            </summary>
            <remarks>The default voice files are stored in the 'voices' directory of the default
            datapath.  See
            <see cref="M:Telogis.GeoBase.Settings.GeoBasePath(System.String)"/></remarks>
            <param name="map"><see cref="T:Telogis.GeoBase.MapCtrl"/></param>
            <param name="voicePath">Path to voice files.</param>
            <remarks>
            This constuctor remains for back-compatibility with code written against GeoBase 3.0.5
            or earlier.  Code written against GeoBase 3.0.7 or later should use the other
            <see cref="T:Telogis.GeoBase.Navigation.NavigationManager"/> constructors, which have improved support for
            internationalization.
            </remarks>
        </member>
        <member name="M:Telogis.GeoBase.Navigation.NavigationManager.#ctor(Telogis.GeoBase.MapCtrl,System.String,System.String)">
            <summary>
            Construct a new <b>NavigationManager</b> for a given
            <see cref="T:Telogis.GeoBase.MapCtrl">map control</see>, path to language files and
            culture.
            </summary>
            <param name="map"><see cref="T:Telogis.GeoBase.MapCtrl"/></param>
            <param name="langPath">Path to languages directory.</param>
            <param name="cultureName">The name of the culture, eg en-US</param>
        </member>
        <member name="M:Telogis.GeoBase.Navigation.NavigationManager.#ctor(Telogis.GeoBase.MapCtrl,System.String,System.String,System.Boolean)">
            <summary>
            Construct a new <b>NavigationManager</b> for a given
            <see cref="T:Telogis.GeoBase.MapCtrl">map control</see>, path to language files and
            culture, with the option to perform all language-based operations in debug mode.
            </summary>
            <param name="map"><see cref="T:Telogis.GeoBase.MapCtrl"/></param>
            <param name="langPath">Path to languages directory.</param>
            <param name="cultureName">The name of the culture, eg en-US.</param>
            <param name="debugMode">Whether to perform all language-based operations in debug
            mode.</param>
            <remarks>
            When in debug mode, the NavigationManager will raise
            <see cref="T:Telogis.GeoBase.Exceptions.MessagesBundleException"/>s when errors are found in the language
            configuration file, and will print to the console the names of sound files as they are
            played.  When errors are found in the language configuration file and the
            NavigationManager is not in debug mode it will proceed on a best effort basis.
            </remarks>
        </member>
        <member name="M:Telogis.GeoBase.Navigation.NavigationManager.#ctor(Telogis.GeoBase.MapCtrl,Telogis.GeoBase.Navigation.EnglishWaveAnnouncer)">
            <summary>
            Construct a new <b>NavigationManager</b> for a given
            <see cref="T:Telogis.GeoBase.MapCtrl">map control</see> and
            <see cref="T:Telogis.GeoBase.Navigation.EnglishWaveAnnouncer"/>.  The NavigationManager
            will print strings in US English.
            </summary>
            <param name="map"><see cref="T:Telogis.GeoBase.MapCtrl"/></param>
            <param name="ewa"><see cref="T:Telogis.GeoBase.Navigation.WaveAnnouncer"/></param>
            <remarks>
            The <see cref="T:Telogis.GeoBase.Navigation.EnglishWaveAnnouncer"/> class remains for
            back-compatibility with code written against GeoBase 3.0.5 or earlier.  Code written
            against GeoBase 3.0.7 or later should use the other <see cref="T:Telogis.GeoBase.Navigation.NavigationManager"/>
            constructors, which have improved support for internationalization.
            </remarks>
        </member>
        <member name="M:Telogis.GeoBase.Navigation.NavigationManager.#ctor(Telogis.GeoBase.MapCtrl,System.String,System.Globalization.CultureInfo)">
            <summary>
            Construct a new <b>NavigationManager</b> for a given
            <see cref="T:Telogis.GeoBase.MapCtrl">map control</see>, path to language files and
            culture.
            </summary>
            <param name="map"><see cref="T:Telogis.GeoBase.MapCtrl"/></param>
            <param name="langPath">Path to languages directory.</param>
            <param name="culture"><see cref="T:System.Globalization.CultureInfo"/></param>
        </member>
        <member name="M:Telogis.GeoBase.Navigation.NavigationManager.#ctor(Telogis.GeoBase.MapCtrl,System.String,System.Globalization.CultureInfo,System.Boolean)">
            <summary>
            Construct a new <b>NavigationManager</b> for a given
            <see cref="T:Telogis.GeoBase.MapCtrl">map control</see>, path to language files and
            culture, with the option to perform all language-based operations in debug mode.
            </summary>
            <param name="map"><see cref="T:Telogis.GeoBase.MapCtrl"/></param>
            <param name="langPath">Path to languages directory.</param>
            <param name="culture"><see cref="T:System.Globalization.CultureInfo"/></param>
            <param name="debugMode">Whether to perform all language-based operations in debug
            mode.</param>
            <remarks>
            When in debug mode, the NavigationManager will raise
            <see cref="T:Telogis.GeoBase.Exceptions.MessagesBundleException"/>s when errors are found in the language
            configuration file, and will print to the console the names of sound files as they are
            played.  When errors are found in the language configuration file and the
            NavigationManager is not in debug mode it will proceed on a best effort basis.
            </remarks>
        </member>
        <member name="M:Telogis.GeoBase.Navigation.NavigationManager.#ctor(Telogis.GeoBase.MapCtrl,Telogis.GeoBase.Internationalization.MessagesBundle,Telogis.GeoBase.Navigation.WaveAnnouncer)">
            <summary>
            Private constructor.
            </summary>
            <param name="map"><see cref="T:Telogis.GeoBase.MapCtrl"/></param>
            <param name="messagesBundle">Telogis.GeoBase.Internationalization.MessagesBundle</param>
            <param name="wa"><see cref="T:Telogis.GeoBase.Navigation.WaveAnnouncer"/></param>
        </member>
        <member name="M:Telogis.GeoBase.Navigation.NavigationManager.ChangeCulture(System.String,System.String,System.Boolean)">
            <summary>
            Change the culture of this NavigationManager.
            </summary>
            <param name="langPath">Path to languages directory.</param>
            <param name="cultureName">The name of the new culture, eg en-US.</param>
            <param name="debugMode">Whether to use debug mode.</param>
            <remarks>
            When in debug mode, the NavigationManager will raise
            <see cref="T:Telogis.GeoBase.Exceptions.MessagesBundleException"/>s when errors are found
            in the language configuration file, and will print to the console the names of sound
            files as they are played.  When errors are found in the language configuration file and
            the NavigationManager is not in debug mode it will proceed on a best effort basis.
            </remarks>
            <remarks>
            The value can only be changed if the NavigationManager is suspended.
            </remarks>
        </member>
        <member name="M:Telogis.GeoBase.Navigation.NavigationManager.ChangeCulture(System.String,System.Globalization.CultureInfo,System.Boolean)">
            <summary>
            Change the culture of this NavigationManager.
            </summary>
            <param name="langPath">Path to languages directory.</param>
            <param name="culture"><see cref="T:System.Globalization.CultureInfo"/></param>
            <param name="debugMode">Whether to use debug mode.</param>
            <remarks>
            When in debug mode, the NavigationManager will raise
            <see cref="T:Telogis.GeoBase.Exceptions.MessagesBundleException"/>s when errors are found
            in the language configuration file, and will print to the console the names of sound
            files as they are played.  When errors are found in the language configuration file and
            the NavigationManager is not in debug mode it will proceed on a best effort basis.
            </remarks>
            <remarks>
            The value can only be changed if the NavigationManager is suspended.
            </remarks>
        </member>
        <member name="M:Telogis.GeoBase.Navigation.NavigationManager.Resume">
            <summary>
            Resume the <see cref="T:Telogis.GeoBase.Navigation.NavigationManager">NavigationManager</see>. See also <see cref="M:Telogis.GeoBase.Navigation.NavigationManager.Suspend">Suspend()</see>
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.Navigation.NavigationManager.Suspend">
            <summary>
            Temporarily suspend the <see cref="T:Telogis.GeoBase.Navigation.NavigationManager">NavigationManager</see> from providing updates.
            See also <see cref="M:Telogis.GeoBase.Navigation.NavigationManager.Resume">Resume()</see>
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.Navigation.NavigationManager.AddZoomLevel(Telogis.GeoBase.Navigation.NavigationManager.ZoomLevel)">
            <summary>
            Add a
            <see cref="T:Telogis.GeoBase.ZoomLevel">ZoomLevel</see> 
            to the
            <see cref="T:Telogis.GeoBase.Navigation.NavigationManager">NavigationManager</see>.
            The values set using this method are used when 
            <see cref="P:Telogis.GeoBase.Navigation.NavigationManager.MapControlMode">MapControlMode</see> 
            is set to either 
            <see cref="F:Telogis.GeoBase.Navigation.NavigationManager.MapMode.FixedZooms">FixedZooms</see> 
            or 
            <see cref="F:Telogis.GeoBase.Navigation.NavigationManager.MapMode.DynamicZooms">DynamicZooms</see>.
            </summary>
            <param name="zoom"></param>
        </member>
        <member name="M:Telogis.GeoBase.Navigation.NavigationManager.RemoveZoomLevel(Telogis.GeoBase.Navigation.NavigationManager.ZoomLevel)">
            <summary>
            Remove a 
            <see cref="T:Telogis.GeoBase.ZoomLevel">ZoomLevel</see> 
            from the 
            <see cref="T:Telogis.GeoBase.Navigation.NavigationManager">NavigationManager</see>.
            Used when 
            <see cref="P:Telogis.GeoBase.Navigation.NavigationManager.MapControlMode">MapControlMode</see> 
            is set to either 
            <see cref="F:Telogis.GeoBase.Navigation.NavigationManager.MapMode.FixedZooms">FixedZooms</see> 
            or 
            <see cref="F:Telogis.GeoBase.Navigation.NavigationManager.MapMode.DynamicZooms">DynamicZooms</see>.
            </summary>
            <param name="zoom"></param>
        </member>
        <member name="M:Telogis.GeoBase.Navigation.NavigationManager.ReplaceZoomLevels(Telogis.GeoBase.Navigation.NavigationManager.ZoomLevel[],System.Int32)">
            <summary>
            Replace all 
            <see cref="T:Telogis.GeoBase.ZoomLevel">ZoomLevel</see> 
            s with specified levels. Initial 
            <see cref="T:Telogis.GeoBase.ZoomLevel">ZoomLevel</see> 
            is specified with <b>initialZoom</b>. The values set using this method are used when 
            <see cref="P:Telogis.GeoBase.Navigation.NavigationManager.MapControlMode">MapControlMode</see> 
            is set to 
            <see cref="F:Telogis.GeoBase.Navigation.NavigationManager.MapMode.FixedZooms">FixedZooms</see> 
            or if 
            <see cref="P:Telogis.GeoBase.Navigation.NavigationManager.MapControlMode">MapControlMode</see> 
            is set to 
            <see cref="F:Telogis.GeoBase.Navigation.NavigationManager.MapMode.DynamicZooms">DynamicZooms</see>.
            </summary>
            <remarks>
            If zoom levels are not inserted in ascending order, an exception will be generated. Note that initialZoom is an index into the array.
            </remarks>
            <param name="zooms">Zoom levels. This array must be sorted by zooms in ascending order.</param>
            <param name="initialZoom">The index into the zooms array which is the zoom level the navigation manager should be set to.</param>
        </member>
        <member name="M:Telogis.GeoBase.Navigation.NavigationManager.ClearZoomLevels">
            <summary>
            Clear all <see cref="T:Telogis.GeoBase.ZoomLevel">ZoomLevel</see>s 
            from the 
            <see cref="T:Telogis.GeoBase.Navigation.NavigationManager">NavigationManager</see>. 
            The value set using this method is used when 
            <see cref="P:Telogis.GeoBase.Navigation.NavigationManager.MapControlMode">MapControlMode</see> 
            is set to <see cref="F:Telogis.GeoBase.Navigation.NavigationManager.MapMode.FixedZooms">FixedZooms</see> 
            or if 
            <see cref="P:Telogis.GeoBase.Navigation.NavigationManager.MapControlMode">MapControlMode</see> 
            is set to 
            <see cref="F:Telogis.GeoBase.Navigation.NavigationManager.MapMode.DynamicZooms">DynamicZooms</see>.
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.Navigation.NavigationManager.GetZoomCrossoverSpeed(Telogis.GeoBase.SpeedUnit)">
            <summary>
            Get the zoom crossover speed in the given <see cref="T:Telogis.GeoBase.SpeedUnit">units</see>. This value returned is used when <see cref="P:Telogis.GeoBase.Navigation.NavigationManager.MapControlMode">MapControlMode</see> is set to <see cref="F:Telogis.GeoBase.Navigation.NavigationManager.MapMode.CrossoverZoom">CrossoverZoom</see>.
            </summary>
            <param name="units"><see cref="T:Telogis.GeoBase.SpeedUnit"/></param>
            <returns>The zoom crossover speed for this map. If the current GPS speed is less than this value, the map will zoom
            to the <see cref="P:Telogis.GeoBase.Navigation.NavigationManager.SlowZoom">SlowZoom</see> level. Otherwise the <see cref="P:Telogis.GeoBase.Navigation.NavigationManager.FastZoom">FastZoom</see> level will be used.
            </returns>
        </member>
        <member name="M:Telogis.GeoBase.Navigation.NavigationManager.SetZoomCrossoverSpeed(System.Double,Telogis.GeoBase.SpeedUnit)">
            <summary>
            Set the zoom crossover speed in the given <see cref="T:Telogis.GeoBase.SpeedUnit">units</see>.
            The zoom crossover speed is used to define the speed-dependent boundary between a close zoom
            (when traveling at a rate less than the zoom crossover speed) and a far zoom (when traveling faster
            than the zoom crossover speed). The value of the zoom crossover speed is used when <see cref="P:Telogis.GeoBase.Navigation.NavigationManager.MapControlMode">MapControlMode</see> is set to <see cref="F:Telogis.GeoBase.Navigation.NavigationManager.MapMode.CrossoverZoom">CrossoverZoom</see>.
            </summary>
            <param name="speed">The desired zoom crossover speed</param>
            <param name="units"><see cref="T:Telogis.GeoBase.SpeedUnit"/></param>
            <remarks>See also <see cref="M:Telogis.GeoBase.Navigation.NavigationManager.GetZoomCrossoverSpeed(Telogis.GeoBase.SpeedUnit)">GetZoomCrossoverSpeed</see></remarks>
        </member>
        <member name="M:Telogis.GeoBase.Navigation.NavigationManager.UnforceMapPerspective">
            <summary>
            Clear any forced map perspective so that the map perspective is set dynamically
            based on heading.
            </summary>
            <remarks>When the map perspective is dynamic, it uses MapPerspective.TwoD when
            the heading is due north, MapPerspective.TwoPointFiveD otherwise.</remarks>
        </member>
        <member name="M:Telogis.GeoBase.Navigation.NavigationManager.ForceMapPerspective(Telogis.GeoBase.MapPerspective)">
            <summary>
            Specify a map perspective that should be used regardless of heading.
            </summary>
            <param name="persp">The map perspective to use.</param>
        </member>
        <member name="M:Telogis.GeoBase.Navigation.NavigationManager.Invalidate">
            <summary>
            Invalidates the map.
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.Navigation.NavigationManager.RecenterMap(Telogis.GeoBase.LatLon,System.Double,System.Double,Telogis.GeoBase.SpeedUnit)">
            <summary>
            Centers the map ahead of the specified location so that when the map is rendered the map center is where the vehicle is predicted to be.
            </summary>
            <param name="location">The most recent location of the vehicle.</param>
            <param name="heading">The vehicle heading.</param>
            <param name="speed">The speed of the vehicle.</param>
            <param name="speedUnits">Speed units.</param>
        </member>
        <member name="M:Telogis.GeoBase.Navigation.NavigationManager.navigatorRouteCalculate(System.Object,Telogis.GeoBase.Navigation.NavigationEvent)">
            <summary>
            A callback for when the navigator's route is calculated.
            </summary>
            <param name="sender">The parent object.</param>
            <param name="desc">Arguments for the navigation event.</param>
        </member>
        <member name="M:Telogis.GeoBase.Navigation.NavigationManager.SetStatus(System.String)">
            <summary>
            Set a status message, using the AddressBox (set using <see cref="M:Telogis.GeoBase.Navigation.NavigationManager.SetControls(Telogis.GeoBase.Navigation.INavigationStatus)">SetControls</see>)
            </summary>
            <param name="text">Desired status message</param>
        </member>
        <member name="M:Telogis.GeoBase.Navigation.NavigationManager.SetStatusPhrase(System.String)">
            <summary>
            Set a status message, using a phrase from the Strings section of the
            NavigationManager's current MessagesBundle.
            </summary>
            <param name="phrase">Phrase name for the desired status message</param>
        </member>
        <member name="M:Telogis.GeoBase.Navigation.NavigationManager.ClearStatus">
            <summary>
            Clear status message
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.Navigation.NavigationManager.SetControls(Telogis.GeoBase.Navigation.LabelBox,Telogis.GeoBase.Navigation.LabelBox,Telogis.GeoBase.Navigation.LabelBox,Telogis.GeoBase.Navigation.TurnBox,Telogis.GeoBase.Navigation.LabelBox)">
            <summary>
            Set which controls should be used by this <b>NavigationManager</b>. To disable a control, set it to <i>null</i>.
            </summary>
            <param name="instructions"><see cref="T:Telogis.GeoBase.Navigation.LabelBox">LabelBox</see> to use for instructions</param>
            <param name="address"><see cref="T:Telogis.GeoBase.Navigation.LabelBox">LabelBox</see> to use for displaying the address</param>
            <param name="speed"><see cref="T:Telogis.GeoBase.Navigation.LabelBox">LabelBox</see> to use for displaying the speed</param>
            <param name="turn"><see cref="T:Telogis.GeoBase.Navigation.TurnBox">TurnBox</see> to use for displaying upcoming turns</param>
            <param name="eta"><see cref="T:Telogis.GeoBase.Navigation.LabelBox">LabelBox</see> to use for displaying the calculated arrival time at the destination</param>
        </member>
        <member name="M:Telogis.GeoBase.Navigation.NavigationManager.SetControls(Telogis.GeoBase.Navigation.INavigationStatus)">
            <summary>
            Set which controls should be used based on an <see cref="T:Telogis.GeoBase.Navigation.INavigationStatus"/>.
            </summary>
            <param name="status">The object that sets the controls for the navigation manager to use.</param>
        </member>
        <member name="M:Telogis.GeoBase.Navigation.NavigationManager.SetGps(Telogis.GeoBase.Navigation.IGps)">
            <summary>
            Sets the <see cref="T:Telogis.GeoBase.Navigation.IGps">GPS unit</see> that this
            <see cref="T:Telogis.GeoBase.Navigation.NavigationManager">NavigationManager</see>
            should use.
            </summary>
            <remarks>
            If the NavigationManager has an existing GPS then its PowerDown method is called.
            PowerUp is then called on the new GPS.
            </remarks>
            <param name="gps">The desired GPS unit</param>
        </member>
        <member name="M:Telogis.GeoBase.Navigation.NavigationManager.SetDestination(Telogis.GeoBase.LatLon)">
            <summary>
            Set the destination. The
            <see cref="T:Telogis.GeoBase.Navigation.NavigationManager">NavigationManager</see>
            will navigate to this destination.
            </summary>
            <param name="location">The destination to navigate to.</param>
        </member>
        <member name="M:Telogis.GeoBase.Navigation.NavigationManager.LoadRoutingProfile(System.String)">
            <summary>
            Load a speed <see cref="T:Telogis.GeoBase.Routing.RoutingProfile">routing profile</see>
            (with speeds measured in miles per hour) from a given text file. See remarks.
            </summary>
            <remarks>
            <para>
            Each line in the file represents a functional class (1-6). The first line represents
            functional class 1, the second line functional class 2, etc. Each line contains
            a maximum of 8 comma-delimited speed category values (in miles per hour). The first value
            in each line corresponds to speed category 1, the second value corresponds
            to speed category 2, etc.
            </para>
            <para>
            The following is an example of the contents from a routing profile text file.
            This particular routing profile assumes that speed values for functional classes
            1 through 4 are independent of  the functional class (each of the first
            four functional classes, or rows, are identical).
            </para>
            <para>
            85,65,50,40,35,25,20,5
            85,65,50,40,35,25,20,5
            85,65,50,40,35,25,20,5
            85,65,50,40,35,25,10,5
            70,60,40,30,25,15,10,5
            60,50,40,30,25,15,10,5
            </para>
            </remarks>
            <param name="filename">The path to the file</param>
        </member>
        <member name="M:Telogis.GeoBase.Navigation.NavigationManager.LoadRoutingProfile(System.String,Telogis.GeoBase.Country)">
             <summary>
             Load a speed <see cref="T:Telogis.GeoBase.Routing.RoutingProfile">routing profile</see>
             (with speeds measured in miles per hour) from a given text file. See remarks.
             </summary>
             <remarks>
             <para>
             Each line in the file represents a functional class (1-6). The first line represents
             functional class 1, the second line functional class 2, etc. Each line contains
             a maximum of 8 comma-delimited speed category values (in miles per hour). The first value
             in each line corresponds to speed category 1, the second value corresponds
             to speed category 2, etc.
             </para>
             <para>
             The following is an example of the contents from a routing profile text file.
             This particular routing profile assumes that speed values for functional classes
             1 through 4 are independent of  the functional class (each of the first
             four functional classes, or rows, are identical).
             </para>
             <para>
             85,65,50,40,35,25,20,5
             85,65,50,40,35,25,20,5
             85,65,50,40,35,25,20,5
             85,65,50,40,35,25,10,5
             70,60,40,30,25,15,10,5
             60,50,40,30,25,15,10,5
             </para>
            
             </remarks>
             <param name="filename">The path to the file</param>
             <param name="country">The country of the profile</param>
        </member>
        <member name="M:Telogis.GeoBase.Navigation.NavigationManager.Stop">
            <summary>
            Stops the <see cref="T:Telogis.GeoBase.Navigation.NavigationManager">NavigationManager</see>. Once the <see cref="T:Telogis.GeoBase.Navigation.NavigationManager">NavigationManager</see> has been
            stopped the destination will have to be manually set (using <see cref="M:Telogis.GeoBase.Navigation.NavigationManager.SetDestination(Telogis.GeoBase.LatLon)"/>)
            to start the <see cref="T:Telogis.GeoBase.Navigation.NavigationManager">NavigationManager</see> again. To temporarily pause the
            <see cref="T:Telogis.GeoBase.Navigation.NavigationManager">NavigationManager</see> see <see cref="M:Telogis.GeoBase.Navigation.NavigationManager.Suspend"/>.
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.Navigation.NavigationManager.ClearGps">
            <summary>
            Power down and then release the GPS unit from this <see cref="T:Telogis.GeoBase.Navigation.NavigationManager">NavigationManager</see>.
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.Navigation.NavigationManager.Render(System.Drawing.Graphics,Telogis.GeoBase.RenderContext)">
            <summary>
            Render the NavigationManager on the given graphics with the given render context.
            Should not be called directly.
            </summary>
            <param name="graphics"></param>
            <param name="rc"></param>
        </member>
        <member name="M:Telogis.GeoBase.Navigation.NavigationManager.Dispose">
            <summary>
            Dispose of this <see cref="T:Telogis.GeoBase.Navigation.NavigationManager">NavigationManager</see>.
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.Navigation.NavigationManager.Finalize">
            <summary>
            Destructor for this <see cref="T:Telogis.GeoBase.Navigation.NavigationManager">NavigationManager</see>
            </summary>
            <remarks>Does not dispose of this <see cref="T:Telogis.GeoBase.Navigation.NavigationManager">NavigationManager</see></remarks>
        </member>
        <member name="M:Telogis.GeoBase.Navigation.NavigationManager.HitTest(System.Int32,System.Int32,Telogis.GeoBase.IMap)">
            <summary>
            Check for a mouse hit on this <see cref="T:Telogis.GeoBase.Navigation.NavigationManager">NavigationManager</see>. Implemented
            </summary>
            <param name="x">Mouse x-coordinate</param>
            <param name="y">Mouse y-coordinate</param>
            <param name="aMap">The map on which the click occurred</param>
            <returns></returns>
        </member>
        <member name="E:Telogis.GeoBase.Navigation.NavigationManager.Arrive">
            <summary>
            An eventhandler which will be fired when the navigator arrives at the destination.
            </summary>
        </member>
        <member name="E:Telogis.GeoBase.Navigation.NavigationManager.RequestDirections">
            <summary>
            An eventhandler which will be fired when directions are requested.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Navigation.NavigationManager.RenderHorizon">
            <summary>
            Display the horizon on the map
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Navigation.NavigationManager.HorizonRenderer">
            <summary>
            The renderer that renders the horizon on the map.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Navigation.NavigationManager.SlowZoom">
            <summary>
            The map will zoom to this level when the GPS is reporting a speed slower than the Crossover Speed. The value of this field is used when <see cref="P:Telogis.GeoBase.Navigation.NavigationManager.MapControlMode">MapControlMode</see> is set to <see cref="F:Telogis.GeoBase.Navigation.NavigationManager.MapMode.CrossoverZoom">CrossoverZoom</see>. See <see cref="M:Telogis.GeoBase.Navigation.NavigationManager.GetZoomCrossoverSpeed(Telogis.GeoBase.SpeedUnit)"/>.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Navigation.NavigationManager.FastZoom">
            <summary>
            The map will zoom to this level when the GPS is reporting a speed faster than the Crossover Speed. The value of this field is used when <see cref="P:Telogis.GeoBase.Navigation.NavigationManager.MapControlMode">MapControlMode</see> is set to <see cref="F:Telogis.GeoBase.Navigation.NavigationManager.MapMode.CrossoverZoom">CrossoverZoom</see>. See <see cref="M:Telogis.GeoBase.Navigation.NavigationManager.GetZoomCrossoverSpeed(Telogis.GeoBase.SpeedUnit)"/>.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Navigation.NavigationManager.Announcer">
            <summary>
            The <see cref="T:Telogis.GeoBase.Navigation.WaveAnnouncer">WaveAnnouncer</see>
            used by this <see cref="T:Telogis.GeoBase.Navigation.NavigationManager">NavigationManager</see>.
            </summary>
            <remarks>
            A <see cref="T:Telogis.GeoBase.Navigation.WaveAnnouncer">WaveAnnouncer</see> is used
            to provide audible driving directions.
            </remarks>
        </member>
        <member name="P:Telogis.GeoBase.Navigation.NavigationManager.VehicleIcon">
            <summary>
            Gets or sets the <see cref="T:Telogis.GeoBase.Navigation.VehicleMarker"/> to use to display the position
            of the vehicle. This can be used to alter the appearance of the icon. If this
            is set to null, the vehicle is not displayed by the <see cref="T:Telogis.GeoBase.Navigation.NavigationManager"/>.
            Defaults to a new <see cref="T:Telogis.GeoBase.Navigation.VehicleMarker"/> associated with the
            <see cref="P:Telogis.GeoBase.Navigation.NavigationManager.Navigator"/> for this object.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Navigation.NavigationManager.AnnouncerEnabled">
            <summary>
            Enable the WaveAnnouncer
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Navigation.NavigationManager.Navigator">
            <summary>
            Gets the <see cref="T:Telogis.GeoBase.Navigation.Navigator">Navigator</see> used by
            this <see cref="T:Telogis.GeoBase.Navigation.NavigationManager">NavigationManager</see>.
            </summary>
            <remarks>
            A <see cref="T:Telogis.GeoBase.Navigation.Navigator">Navigator</see> simply guides the user
            along a <see cref="T:Telogis.GeoBase.Routing.Route">Route</see> using GPS updates. The
            NavigationManager class encapsulates all the functionality of a Navigator. If you are
            using a NavigationManager it is often unnecessary to also use a Navigator.
            </remarks>
        </member>
        <member name="P:Telogis.GeoBase.Navigation.NavigationManager.Units">
            <summary>
            Gets or sets the <see cref="T:Telogis.GeoBase.Navigation.UnitSystem">UnitSystem</see>
            (for example, metric or imperial) used by this <see cref="T:Telogis.GeoBase.Navigation.NavigationManager">NavigationManager</see>.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Navigation.NavigationManager.Orientation">
            <summary>
            Gets or sets the <see cref="T:Telogis.GeoBase.Navigation.MapOrientation">MapOrientation</see>
            used by this <see cref="T:Telogis.GeoBase.Navigation.NavigationManager">NavigationManager</see>.
            </summary>
            <remarks>
            The map orientation may be used to keep the map heading aligned with the vehicle's
            heading.
            </remarks>
        </member>
        <member name="P:Telogis.GeoBase.Navigation.NavigationManager.MapControlMode">
            <summary>
            Gets or sets zoom mode for map control: 
            <see cref="F:Telogis.GeoBase.Navigation.NavigationManager.MapMode.CrossoverZoom">CrossoverZoom</see>, 
            <see cref="F:Telogis.GeoBase.Navigation.NavigationManager.MapMode.FixedZooms">FixedZooms</see>
            and 
            <see cref="F:Telogis.GeoBase.Navigation.NavigationManager.MapMode.DynamicZooms">DynamicZooms</see>.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Navigation.NavigationManager.Zoom">
            <summary>
            Gets or sets the current 
            <see cref="T:Telogis.GeoBase.ZoomLevel">ZoomLevel</see> 
            by index. This property is meaningful when 
            <see cref="P:Telogis.GeoBase.Navigation.NavigationManager.MapControlMode">MapControlMode</see> 
            is set to 
            <see cref="F:Telogis.GeoBase.Navigation.NavigationManager.MapMode.FixedZooms">FixedZooms</see>.
            or 
            <see cref="P:Telogis.GeoBase.Navigation.NavigationManager.MapControlMode">MapControlMode</see> 
            is set to 
            <see cref="F:Telogis.GeoBase.Navigation.NavigationManager.MapMode.DynamicZooms">DynamicZooms</see>.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Navigation.NavigationManager.CurrentZoom">
            <summary>
            Gets the currently selected
            <see cref="T:Telogis.GeoBase.ZoomLevel">ZoomLevel</see>.
            If
            <see cref="P:Telogis.GeoBase.Navigation.NavigationManager.MapControlMode">MapControlMode</see> 
            is set to
            <see cref="F:Telogis.GeoBase.Navigation.NavigationManager.MapMode.FixedZooms">FixedZooms</see>.
            then this property gets the currently displayed zoom level. If 
            <see cref="P:Telogis.GeoBase.Navigation.NavigationManager.MapControlMode">MapControlMode</see> 
            Is set to
            <see cref="F:Telogis.GeoBase.Navigation.NavigationManager.MapMode.DynamicZooms">DynamicZooms</see>
            then this property gets the currently displayed zoom level, but may be adjusted according
            to vehicle speed and distance from the next approaching turn.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Navigation.NavigationManager.ShowMemoryStats">
            <summary>
            Display memory usage
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Navigation.NavigationManager.ShowGpsType">
            <summary>
            Display a string on the map indicating the type of Gps being used.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Navigation.NavigationManager.LastMapTime">
            <summary>
            Gets the time taken to render the last map.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Navigation.NavigationManager.StatusInfo">
            <summary>
            This returns the NavigationManager's INavigationStatus object, if present. This
            can be used to set update controls or change the NavigationManager's appearance.
            </summary>
            <remarks>
            Will be null until <see cref="M:Telogis.GeoBase.Navigation.NavigationManager.SetControls(Telogis.GeoBase.Navigation.INavigationStatus)">SetControls</see> is called. 
            If <see cref="M:Telogis.GeoBase.Navigation.NavigationManager.SetControls(Telogis.GeoBase.Navigation.LabelBox,Telogis.GeoBase.Navigation.LabelBox,Telogis.GeoBase.Navigation.LabelBox,Telogis.GeoBase.Navigation.TurnBox,Telogis.GeoBase.Navigation.LabelBox)"/> is
            called, it will be an instance of <see cref="T:Telogis.GeoBase.Navigation.DefaultNavigationStatus"/>, 
            while if <see cref="M:Telogis.GeoBase.Navigation.NavigationManager.SetControls(Telogis.GeoBase.Navigation.INavigationStatus)"/> is called, 
            it will return the INavigationStatus class specified.
            </remarks>
        </member>
        <member name="P:Telogis.GeoBase.Navigation.NavigationManager.FreeLook">
            <summary>
            Allows the map to be freely panned and zoomed.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Navigation.NavigationManager.TwoDRecenterBorderSize">
            <summary>
            When the MapCtrl is in MapPerspective.TwoD mode and the NavigationManager.Orientation
            is MapOrientation.North, the map is only redrawn when the vehicle icon enters a border
            region around the edge of the map.  This property controls the size, in pixels, of that
            border region.
            </summary>
            <remarks>
            If the border size is at least half of either the width or the height of the MapCtrl
            then the map is redrawn every time the vehicle moves by at least 1 pixel.  By default
            the border size is int.MaxValue, making that behavior the default.
            </remarks>
        </member>
        <member name="P:Telogis.GeoBase.Navigation.NavigationManager.RequiredRendermodes">
            <summary>
            Gets a mask representing the render modes that this object should be called for.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Navigation.NavigationManager.ShowMovementArrow">
            <summary>
            Gets or sets whether to render arrows on the map at turns. Default is true.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Navigation.NavigationManager.MovementArrow">
            <summary>
            The renderer that renders arrows on the map at turns.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Navigation.NavigationManager.MapMouseEventsHandler">
            <summary>
            Get the <see cref="P:Telogis.GeoBase.Navigation.NavigationManager.MapMouseEventsHandler">MapMouseEventsHandler</see> used by this
            <see cref="T:Telogis.GeoBase.Navigation.NavigationManager">NavigationManager</see>. Always null.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Navigation.NavigationManager.DynamicZoomSettings">
            <summary>
            Returns the 
            <see cref="T:Telogis.GeoBase.Navigation.NavigationManager">NavigationManager</see>'s
            <see cref="T:Telogis.GeoBase.Navigation.NavigationManager.DynamicZoomer">DynamicZoomer</see>.
            These dynamic zoom settings are applied when 
            <see cref="P:Telogis.GeoBase.Navigation.NavigationManager.MapControlMode">MapControlMode</see> 
            is set to 
            <see cref="F:Telogis.GeoBase.Navigation.NavigationManager.MapMode.DynamicZooms">DynamicZooms</see>.
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.Navigation.NavigationManager.MapMode">
             <summary>
             Used to set <see cref="P:Telogis.GeoBase.Navigation.NavigationManager.MapControlMode">MapControlMode</see>
             </summary>
             <example>
             In the first example below, <see cref="F:Telogis.GeoBase.Navigation.NavigationManager.MapMode.CrossoverZoom"/> is used to 
             define the speed-dependent (as reported by the GPS unit) boundary between two zoom levels.
             At speeds below 50 km/h ('SlowZoom', the close zoom used at speeds below the zoom crossover speed) 
             the zoom level is a high 0.1 resulting in a viewable area of approximately 100 meters. 
             Traveling above the 50 km/h crossover speed ('FastZoom', the far zoom when traveling faster than the zoom crossover 
             speed) results in a zoom level of 4, with a wider viewable area of approximately one city block. If speed never
             drops below the crossover speed (50 km/h), the NavigationManager will never switch to slow zoom and will always be in 
             fast zoom.
            
             <code lang="C#">
             nm.MapControlMode = NavigationManager.MapMode.CrossoverZoom;
             nm.SetZoomCrossoverSpeed(50, SpeedUnit.KilometersPerHour);
             nm.SlowZoom = 0.1;
             nm.FastZoom = 4; 
             </code>
            
             This second example demonstrates <see cref="F:Telogis.GeoBase.Navigation.NavigationManager.MapMode.FixedZooms"/>, in which fixed 
             zoom levels independent of vehicle speed are set in the <see cref="T:Telogis.GeoBase.Navigation.NavigationManager"/>.
             In this example an array containing three fixed zoom levels (each containing a zoom level, perspective and orientation) is shown.
             <code lang="C#">
             nm.MapControlMode = NavigationManager.MapMode.FixedZooms;
             NavigationManager.ZoomLevel[] levels = new NavigationManager.ZoomLevel[]{
             /*0*/ new NavigationManager.ZoomLevel(1.0, MapPerspective.TwoPointFiveD, MapOrientation.VehicleHeading),
             /*1*/ new NavigationManager.ZoomLevel(4.0, MapPerspective.TwoPointFiveD, MapOrientation.VehicleHeading),
             /*2*/ new NavigationManager.ZoomLevel(10.0, MapPerspective.TwoD, MapOrientation.VehicleHeading)
             };
             nm.ReplaceZoomLevels(levels, 3);
             nm.Zoom = 1; // sets the zoom to 4.0 (you can call this anytime during navigation to change the zoom level)
             </code>
            
             This third example demonstrates <see cref="F:Telogis.GeoBase.Navigation.NavigationManager.MapMode.DynamicZooms"/>. DynamicZooms 
             is used to specify a zoom level at a specific speed, and/or at a known distance from a destination. In the example below, 
             three examples show <see cref="M:Telogis.GeoBase.Navigation.NavigationManager.DynamicZoomer.SetZoomAtSpeed(System.Int32,Telogis.GeoBase.SpeedValue,System.TimeSpan)"/> (zoom levels of 150%, 
             300% and 600% at 20 km/h, 60 km/h and 100 km/h) The timespan dictates the time the zooming animation will take to complete (1, 2 and 4 seconds).
             The <see cref="M:Telogis.GeoBase.Navigation.NavigationManager.DynamicZoomer.SetZoomAtDistance(System.Int32,System.Double,Telogis.GeoBase.DistanceUnit,System.TimeSpan)"/> example specifies a zoom level of 
             100% at 10 kilometers or less from the destination. Note that both <see cref="M:Telogis.GeoBase.Navigation.NavigationManager.DynamicZoomer.SetZoomAtDistance(System.Int32,System.Double,Telogis.GeoBase.DistanceUnit,System.TimeSpan)"/> 
             and <see cref="M:Telogis.GeoBase.Navigation.NavigationManager.DynamicZoomer.SetZoomAtSpeed(System.Int32,Telogis.GeoBase.SpeedValue,System.TimeSpan)"/>
             can be used simultaneously, but SetZoomAtDistance will override SetZoomAtSpeed if zooms conflict. The SetZoomAtDistance 
             distance value is the geodesic distance to the destination (as the crow flies), not the remaining route distance.
            
             <code lang="C#">
             nm.MapControlMode = NavigationManager.MapMode.DynamicZooms;
             nm.DynamicZoomSettings.Clear(); // Removes the default values
             nm.DynamicZoomSettings.HysteresisLimit = new SpeedValue(5, SpeedUnit.KilometersPerHour);
             nm.DynamicZoomSettings.SetZoomAtSpeed(150, new SpeedValue(20, SpeedUnit.KilometersPerHour), new TimeSpan(0, 0, 1));
             nm.DynamicZoomSettings.SetZoomAtSpeed(300, new SpeedValue(60, SpeedUnit.KilometersPerHour), new TimeSpan(0, 0, 2));
             nm.DynamicZoomSettings.SetZoomAtSpeed(600, new SpeedValue(100, SpeedUnit.KilometersPerHour), new TimeSpan(0, 0, 4));
             nm.DynamicZoomSettings.SetZoomAtDistance(100, 10, DistanceUnit.KILOMETERS, new TimeSpan(0, 0, 2));
             </code>
             
             Note the <see cref="P:Telogis.GeoBase.Navigation.NavigationManager.DynamicZoomer.HysteresisLimit"/> property 
             in the example above. Hysteresis is a buffer set between crossover levels that specifies the absolute
             minimum speed spacing between zoom levels. For example, a HysteresisLimit value of 15 dictates that no two
             crossover levels can be less than 15 km/h from one another. The HysteresisLimit also prevents the map zoom 
             jumping between two zoom levels when speed sits near a zoom-out boundary. For example, with a crossover 
             value of '50' and a HysteresisLimit value of '10', the map will zoom out when the vehicle speed reaches 
             50 km/h, but will not zoom in again until the vehicle's speed has dropped below 40 km/h.
             When a NavigationManager is constructed, three DynamicZooms crossover levels are set by default: 45 km/h, 65 km/h and 85 km/h with
             A default HysteresisLimit of 10 km/h. To clear these default values and set your own, DynamicZoomSettings.Clear(); 
             should be used.
             
             </example>
        </member>
        <member name="F:Telogis.GeoBase.Navigation.NavigationManager.MapMode.CrossoverZoom">
            <summary>
            Zoom is dependent on the relationship between vehicle speed and crossover speed (the speed at which the zoom is changed).
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Navigation.NavigationManager.MapMode.FixedZooms">
            <summary>
            Zoom is selectable (from a list), and not dependent on vehicle speed.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Navigation.NavigationManager.MapMode.DynamicZooms">
            <summary>
            Zoom is based on vehicle speed, and distance to the approaching navigation event. The
            speeds at which zooming occurs can be set by calling 
            <see cref="M:Telogis.GeoBase.Navigation.NavigationManager.DynamicZoomer.SetZoomAtSpeed(System.Int32,Telogis.GeoBase.SpeedValue,System.TimeSpan)"/>.
            The distances from next navigation event at which zooming occurs can be set by calling 
            <see cref="M:Telogis.GeoBase.Navigation.NavigationManager.DynamicZoomer.SetZoomAtDistance(System.Int32,System.Double,Telogis.GeoBase.DistanceUnit,System.TimeSpan)"/>.
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.Navigation.NavigationManager.DynamicZoomer">
            <summary>
            The <see cref="T:Telogis.GeoBase.Navigation.NavigationManager.DynamicZoomer">DynamicZoomer</see>
            provides an interface for controlling zooming behavior of the map based on the vehicle's
            speed and distance from approaching navigation event.
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.Navigation.NavigationManager.DynamicZoomer.SetZoomAtSpeed(System.Int32,Telogis.GeoBase.SpeedValue,System.TimeSpan)">
            <summary> 
            Sets a speed at which the map will initiate zooming. This may be called multiple times to
            initiate zooming at different speeds.
            </summary>
            <remarks>
            Hysteresis
            </remarks>
            <param name="percentageZoom">
            The percentage to modify the current zoom level by at this speed, e.g. 100 is no
            change, 200 would double the current zoom level. A number greater than 100 represents
            the map zooming out for a wider view.
            </param> 
            <param name="zoomOutSpeed"> 
            The speed at which to initiate zooming. If the vehicle is traveling faster than 
            this speed the map will zoom by the provided percentage.
            </param> 
            <param name="transitionTime">
            The length of time the zoom transition is to take.
            </param>
        </member>
        <member name="M:Telogis.GeoBase.Navigation.NavigationManager.DynamicZoomer.SetZoomAtDistance(System.Int32,System.Double,Telogis.GeoBase.DistanceUnit,System.TimeSpan)">
            <summary> 
            Sets a distance from the next approaching nav event at which to initiate zooming.
            This may be called multiple times to zoom at different distances.
            </summary>
            <param name="percentageZoom">
            The percentage to modify the current zoom level by at this distance, e.g. 100 is no
            change, 200 would double the current zoom level. A number greater than 100 represents
            the map zooming out for a more broad view.
            </param> 
            <param name="fromEventValue"> 
            The distance at which to initiate zooming.
            </param> 
            <param name="fromEventUnits"> 
            The unit system of the above distance.</param> 
            <param name="transitionTime">
            The length of time zooming transistion is to take.
            </param>
        </member>
        <member name="M:Telogis.GeoBase.Navigation.NavigationManager.DynamicZoomer.Clear">
            <summary>
            Clears the currently set dynamic zoom behavior.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Navigation.NavigationManager.DynamicZoomer.PerspectiveMode">
            <summary>
            Gets or sets the 
            <see cref="T:Telogis.GeoBase.Navigation.NavigationManager.DynamicZoomer">DynamicZoomer</see>'s
            current 
            <see cref="P:Telogis.GeoBase.Navigation.NavigationManager.DynamicZoomer.PerspectiveMode">PerspectiveMode</see>.
            The default behavior is dynamic zooming is only in effect for two-point-five-d maps.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Navigation.NavigationManager.DynamicZoomer.HysteresisLimit">
             <summary>
             Dynamic zooming has an optional hysteresis feature to prevent the map
             jumping between zooms when vehicle speed is hovering about the zoom-out
             limit. Vehicle speed must drop HysteresisLimit below the zoom out speed
             before the map will zoom into the next lowest level.
             </summary>
            <remarks>
             The HysteresisLimit is a buffer between crossover levels specifying the absolute
             minimum speed spacing between them. For example, a HysteresisLimit value of 15 dictates that no
             crossover levels can be less than 15 km/h from one another. The HysteresisLimit also prevents the map zoom 
             jumping between two zoom levels when speed sits near a zoom-out boundary. For example, with a crossover 
             value of '50' and a HysteresisLimit value of '10', the map will zoom out when the vehicle speed reaches 
             50 km/h, but will not zoom in again until the vehicle's speed has dropped below 40 km/h.
             When a NavigationManager is constructed, a default HysteresisLimit of 10 km/h is set. To clear this default 
             value and set your own, DynamicZoomSettings.Clear(); should be used.
             </remarks>
             <example>
             <code lang="C#">
             nm.MapControlMode = NavigationManager.MapMode.DynamicZooms;
             // Clear default values
             nm.DynamicZoomSettings.Clear();
             // Set a new HysteresisLimit of 15 km/h
             nm.DynamicZoomSettings.HysteresisLimit = new SpeedValue(15, SpeedUnit.KilometersPerHour);
             </code>
             </example>
        </member>
        <member name="T:Telogis.GeoBase.Navigation.NavigationManager.DynamicZoomer.PerspectiveModes">
            <summary>
            An enumeration used for controlling the map perspectives for which the 
            <see cref="T:Telogis.GeoBase.Navigation.NavigationManager.DynamicZoomer">DynamicZoomer</see>
            will be in effect.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Navigation.NavigationManager.DynamicZoomer.PerspectiveModes.TwoPoint5DOnly">
            <summary>
            Dynamic zooming will only occur when the map is in 2.5D mode. This is the default
            setting.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Navigation.NavigationManager.DynamicZoomer.PerspectiveModes.AnyPerspective">
            <summary>
            Dynamic zooming will occur regardless of the map's current perspective mode.
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.Navigation.NavigationManager.ZoomLevel">
            <summary>
            Create a new ZoomLevel, stipulating the <see cref="T:Telogis.GeoBase.Navigation.MapOrientation">MapOrientation</see> (North or Vehicle Heading), and <see cref="T:Telogis.GeoBase.MapPerspective">MapPerspectiv</see> (2D or 2.5D).
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.Navigation.NavigationManager.ZoomLevel.#ctor(System.Double,Telogis.GeoBase.MapPerspective,Telogis.GeoBase.Navigation.MapOrientation)">
            <summary>
            Create a ZoomLevel for a given orientation, perspective, and zoom value.
            </summary>
            <param name="zoom">the zoom value for this ZoomLevel</param>
            <param name="perspective">the view perspective for this ZoomLevel (2D or 2.5D)</param>
            <param name="orientation">the map orientation for this ZoomLevel (North or Vehicle Heading)</param>
        </member>
        <member name="P:Telogis.GeoBase.Navigation.NavigationManager.ZoomLevel.Zoom">
            <summary>
            Get or set the zoom value for this ZoomLevel
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Navigation.NavigationManager.ZoomLevel.Perspective">
            <summary>
            Get or set the map perspective for this ZoomLevel (2D or 2.5D)
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Navigation.NavigationManager.ZoomLevel.Orientation">
            <summary>
            Get or set the map orientation for this ZoomLevel (North or Vehicle Heading)
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.Navigation.INavigationStatus">
            <summary>
            Supports navigational status messages (visual and audible) such as turn instructions, directions, ETA and GPS info.
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.Navigation.INavigationStatus.SetAddress(Telogis.GeoBase.Address,Telogis.GeoBase.Navigation.DisplayNameMode)">
            <summary>
            Derived classes should implement this method to notify the user of a change of address.
            </summary>
            <remarks>
            Typically, a navigation-based application will show a <see cref="T:Telogis.GeoBase.Navigation.LabelBox"/>
            to display the current location of the vehicle. This method should then be implemented
            to update the LabelBox with the new address information. If the displayNameMode is 
            <see cref="F:Telogis.GeoBase.Navigation.DisplayNameMode.PrimaryName"/> then the 
            <see cref="P:Telogis.GeoBase.Address.PrimaryName"/> should be used. Otherwise use
            <see cref="P:Telogis.GeoBase.Address.Line1"/> so that the Navigation display setting is adhered to.
            </remarks>
            <param name="address">The most recent <see cref="T:Telogis.GeoBase.Address"/>.</param>
            <param name="displayNameMode">The way in which to display the address according to <see cref="T:Telogis.GeoBase.Navigation.DisplayNameMode"/>.</param>
        </member>
        <member name="M:Telogis.GeoBase.Navigation.INavigationStatus.SetSpeed(System.Int32,System.Boolean,System.Int32,Telogis.GeoBase.SpeedUnit)">
            <summary>
            Derived classes should implement this method to notify the user of the vehicle's current speed.
            </summary>
            <param name="speedLimit">The current speed limit (measured in units)</param>
            <param name="limitIsPosted">True if the speed limit is a posted speed limit, or an implied speed limit</param>
            <param name="vehicleSpeed">The current speed of the vehicle (again, measured in units)</param>
            <param name="units">The <see cref="T:Telogis.GeoBase.SpeedUnit"/>s in which the speed limit and vehicle speed are measured</param>
            <remarks>
            <para>
            Typically, a navigation-based application will show a <see cref="T:Telogis.GeoBase.Navigation.LabelBox"/>
            to display the current speed (passed as the vehicleSpeed parameter) of the vehicle. This method should 
            then be implemented to update the LabelBox with the new speed information.
            </para>
            <para>
            The current speed limit is also passed to this method (as the speedLimit parameter) so your application
            may alert the user (audibly and/or visibly) if the user is exceeding the speed limit.
            </para>
            </remarks>
        </member>
        <member name="M:Telogis.GeoBase.Navigation.INavigationStatus.SetInstruction(System.String,System.String)">
            <summary>
            Derived classes should implement this method to update navigation instructions displayed 
            to the user.
            </summary>
            <param name="distance">The distance to the maneuver</param>
            <param name="instruction">The instruction to perform after the specified 
            distance has been traveled</param>
            <remarks>
            Typically, a navigation-based application will show a <see cref="T:Telogis.GeoBase.Navigation.LabelBox"/>
            to display instructions for upcoming navigation events. This method should then be implemented
            to update the LabelBox with the distance to (passed as the distance parameter), and action 
            (passed as the instruction parameter) to take at, the next navigation event.
            </remarks>
        </member>
        <member name="M:Telogis.GeoBase.Navigation.INavigationStatus.SetGpsInfo(System.String)">
            <summary>
            Derived classes should implement this method to display GPS status information.
            </summary>
            <param name="info">GPS status information</param>
            <remarks>
            Typically, a navigation-based application will show a <see cref="T:Telogis.GeoBase.Navigation.LabelBox"/>
            to display GPS status information (eg, "Searching for satellites: no fix"). This method should then 
            be implemented to update the LabelBox with the given GPS information (passed as the info parameter).
            </remarks>
        </member>
        <member name="M:Telogis.GeoBase.Navigation.INavigationStatus.SetEta(System.TimeSpan,System.String)">
            <summary>
            Derived classes should implement this method to display arrival (time and distance) estimates.
            </summary>
            <remarks>
            Typically, a navigation-based application will show a <see cref="T:Telogis.GeoBase.Navigation.LabelBox"/>
            to display arrival estimates (eg, "Destination in 3.4 miles, 5 minutes away"). This method should then 
            be implemented to update the LabelBox with the given arrival estimates.
            </remarks>
            <param name="eta">The estimated time before arrival</param>
            <param name="distRemaining">The distance between the current location and the end of the route</param>
        </member>
        <member name="M:Telogis.GeoBase.Navigation.INavigationStatus.SetUpcomingTurn(Telogis.GeoBase.Navigation.NavigationEvent)">
            <summary>
            Derived classes should implement this method to alert the user of an upcoming turn.
            </summary>
            <param name="navigationEvent">The <see cref="T:Telogis.GeoBase.Navigation.NavigationEvent"/>
            representing the upcoming turn. The NavigationEvent object's 
            <see cref="P:Telogis.GeoBase.Navigation.NavigationEvent.TurnDirection">TurnDirection</see> 
            property can be used to determine the direction of the turn.</param>
            <remarks>
            Typically, a navigation-based appliction will display turn information alongside 
            <see cref="M:Telogis.GeoBase.Navigation.INavigationStatus.SetInstruction(System.String,System.String)">instruction</see> information. You may wish to consider using
            a <see cref="T:Telogis.GeoBase.Navigation.TurnBox"/> to display turn information.
            </remarks>
        </member>
        <member name="M:Telogis.GeoBase.Navigation.INavigationStatus.SetStatusMessage(System.String,System.String)">
            <summary>
            Derived classes should implement this method to display status information to the user.
            </summary>
            <remarks>
            <para>
            This status information is intended for display in a <see cref="T:Telogis.GeoBase.Navigation.LabelBox"/>,
            which is why two strings (major and minor) are passed to this method.
            </para>
            <para>
            The status information will typically contain one of: calculating route, ready, or the final
            navigation instruction of the route.
            </para>
            </remarks>
            <param name="major"></param>
            <param name="minor"></param>
        </member>
        <member name="M:Telogis.GeoBase.Navigation.INavigationStatus.HideInstructions">
            <summary>
            Derived classes should implement this method to hide navigation instructions presented to
            the user. Typically, instructions will need to be hidden after the event has occurred and 
            before the next event is due to be presented.
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.Navigation.INavigationStatus.HideEta">
            <summary>
            Derived classes should implement this method to hide arrival time/distance estimates. 
            Typically, arrival time/distance estimates will need to be hidden when the user travels
            off-route or causes the route to be recalculated.
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.Navigation.INavigationStatus.HideUpcomingTurn">
            <summary>
            Derived classes should implement this method to hide information alerting the user of
            an upcoming turn.
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.Navigation.INavigationStatus.SetNavigationOff">
            <summary>
            Derived classes should implement this method to disable navigation.
            </summary>
        </member>
        <member name="E:Telogis.GeoBase.Navigation.INavigationStatus.RequestDirections">
            <summary>
            Derived classes should fire this event when the user requests directions.
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.Navigation.DefaultNavigationStatus">
            <summary>
            A class used to set which controls should be used by the <b>NavigationManager</b>.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Navigation.DefaultNavigationStatus.RenderInstructionsBox">
            <summary>
            Specify if the InstructionsBox is rendered. Default is true.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Navigation.DefaultNavigationStatus.RenderAddressBox">
            <summary>
            Specify if the AddressBox is rendered. Default is true.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Navigation.DefaultNavigationStatus.RenderSpeedBox">
            <summary>
            Specify if the SpeedBox is rendered. Default is true.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Navigation.DefaultNavigationStatus.RenderEtaBox">
            <summary>
            Specify if the EtaBox is rendered. Default is true.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Navigation.DefaultNavigationStatus.RenderTurnBox">
            <summary>
            Specify if the TurnBox is rendered. Default is true.
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.Navigation.DefaultNavigationStatus.#ctor(Telogis.GeoBase.Navigation.LabelBox,Telogis.GeoBase.Navigation.LabelBox,Telogis.GeoBase.Navigation.LabelBox,Telogis.GeoBase.Navigation.TurnBox,Telogis.GeoBase.Navigation.LabelBox,Telogis.GeoBase.Internationalization.MessagesBundle)">
            <summary>
            Set which controls should be used by the <b>NavigationManager</b>. To disable a control, set it to <i>null</i>.
            </summary>
            <param name="instructions"><see cref="T:Telogis.GeoBase.Navigation.LabelBox">LabelBox</see> to use for instructions.</param>
            <param name="address"><see cref="T:Telogis.GeoBase.Navigation.LabelBox">LabelBox</see> to use for displaying the address.</param>
            <param name="speed"><see cref="T:Telogis.GeoBase.Navigation.LabelBox">LabelBox</see> to use for displaying the speed.</param>
            <param name="turn"><see cref="T:Telogis.GeoBase.Navigation.TurnBox">TurnBox</see> to use for displaying upcoming turns.</param>
            <param name="eta"><see cref="T:Telogis.GeoBase.Navigation.LabelBox">LabelBox</see> to use for displaying the calculated arrival time at the destination.</param>
            <param name="messagesBundle"><see cref="T:Telogis.GeoBase.Internationalization.MessagesBundle">MessagesBundle</see> for strings and announcements.</param>
        </member>
        <member name="M:Telogis.GeoBase.Navigation.DefaultNavigationStatus.SetAddress(Telogis.GeoBase.Address,Telogis.GeoBase.Navigation.DisplayNameMode)">
            <summary>
            Notify the user of a change of address.
            </summary>
            <remarks>Typically, a navigation-based application will show a <see cref="T:Telogis.GeoBase.Navigation.LabelBox"/>
            to display the current location of the vehicle.</remarks>
            <param name="address">The most recent <see cref="T:Telogis.GeoBase.Address"/>.</param>
            <param name="displayNameMode">The way in which to display the address according to <see cref="T:Telogis.GeoBase.Navigation.DisplayNameMode"/>.</param>
        </member>
        <member name="M:Telogis.GeoBase.Navigation.DefaultNavigationStatus.SetGpsInfo(System.String)">
            <summary>
            Display GPS status information.
            </summary>
            <remarks>Typically, a navigation-based application will show a <see cref="T:Telogis.GeoBase.Navigation.LabelBox"/>
            to display GPS status information (eg, "Searching for satellites: no fix"). This method is used
            to update the LabelBox with the given GPS information (passed as the info parameter).</remarks>
            <param name="info">GPS status information.</param>
        </member>
        <member name="M:Telogis.GeoBase.Navigation.DefaultNavigationStatus.SetSpeed(System.Int32,System.Boolean,System.Int32,Telogis.GeoBase.SpeedUnit)">
            <summary>
            Notify the user of the vehicle's current speed.
            </summary>
            <remarks>Typically, a navigation-based application will show a <see cref="T:Telogis.GeoBase.Navigation.LabelBox"/>
            to display the current speed (passed as the vehicleSpeed parameter) of the vehicle. This method will update 
            the LabelBox with the new speed information. The current speed limit is also passed to this method (as the speedLimit parameter) so your 	
            application may alert the user (audibly and/or visibly) if the user is exceeding the speed limit.</remarks>
            <param name="speedLimit">The current speed limit (measured in units).</param>
            <param name="limitIsPosted">True if the speed limit is a posted speed limit, or an implied speed limit.</param>
            <param name="vehicleSpeed">The current speed of the vehicle (again, measured in units).</param>
            <param name="units">The <see cref="T:Telogis.GeoBase.SpeedUnit"/>s in which the speed limit and vehicle speed are measured.</param>
        </member>
        <member name="M:Telogis.GeoBase.Navigation.DefaultNavigationStatus.SetInstruction(System.String,System.String)">
            <summary>
            Update navigation instructions displayed to the user.
            </summary>
            <remarks>Typically, a navigation-based application will show a <see cref="T:Telogis.GeoBase.Navigation.LabelBox"/>
            to display instructions for upcoming navigation events. This method is used 
            to update the LabelBox with the distance to (passed as the distance parameter), and action 
            (passed as the instruction parameter) to take at, the next navigation event.</remarks>
            <param name="distance">The distance to the maneuver.</param>
            <param name="instruction">The instruction to perform after the specified distance has been traveled.</param>
        </member>
        <member name="M:Telogis.GeoBase.Navigation.DefaultNavigationStatus.SetEta(System.TimeSpan,System.String)">
            <summary>
            Display arrival (time and distance) estimates.
            </summary>
            <remarks>Typically, a navigation-based application will show a <see cref="T:Telogis.GeoBase.Navigation.LabelBox"/>
            to display arrival estimates (eg, "Destination in 3.4 miles, 5 minutes away").</remarks>
            <param name="eta">The estimated time before arrival.</param>
            <param name="distRemaining">The distance between the current location and the end of the route.</param>
        </member>
        <member name="M:Telogis.GeoBase.Navigation.DefaultNavigationStatus.SetUpcomingTurn(Telogis.GeoBase.Navigation.NavigationEvent)">
            <summary>
            Alert the user of an upcoming turn.
            </summary>
            <remarks>Typically, a navigation-based appliction will display turn information alongside 
            <see cref="M:Telogis.GeoBase.Navigation.DefaultNavigationStatus.SetInstruction(System.String,System.String)">instruction</see> information. You may wish to consider using
            a <see cref="T:Telogis.GeoBase.Navigation.TurnBox"/> to display turn information.
            </remarks>
            <param name="navigationEvent">The <see cref="T:Telogis.GeoBase.Navigation.NavigationEvent"/>
            representing the upcoming turn. The NavigationEvent object's 
            <see cref="P:Telogis.GeoBase.Navigation.NavigationEvent.TurnDirection">TurnDirection</see> 
            property can be used to determine the direction of the turn.</param>
        </member>
        <member name="M:Telogis.GeoBase.Navigation.DefaultNavigationStatus.SetStatusMessage(System.String,System.String)">
            <summary>
            Display status information to the user.
            </summary>
            <remarks>This status information is intended for display in a <see cref="T:Telogis.GeoBase.Navigation.LabelBox"/>,
            which is why two strings (major and minor) are passed to this method. The status information will typically 
            contain one of: calculating route, ready, or the final navigation instruction of the route.</remarks>
            <param name="major">Major status information.</param>
            <param name="minor">Minor status information.</param>
        </member>
        <member name="M:Telogis.GeoBase.Navigation.DefaultNavigationStatus.Render(System.Drawing.Graphics,Telogis.GeoBase.RenderContext)">
            <summary>
            Render the given graphics according to the given render context.
            </summary>
            <remarks>For more information, see Remarks, and Example <see cref="M:Telogis.GeoBase.IMapRenderer.Render(System.Drawing.Graphics,Telogis.GeoBase.RenderContext)">here</see>.</remarks>
            <param name="graphics">The <see cref="T:System.Drawing.Graphics"/> object that can be used to draw on the map.</param>
            <param name="rc">The <see cref="T:Telogis.GeoBase.RenderContext"/> information for this call.</param>
        </member>
        <member name="M:Telogis.GeoBase.Navigation.DefaultNavigationStatus.HideInstructions">
            <summary>
            Hide navigation instructions presented to the user.
            </summary>
            <remarks>
            Typically, instructions will need to be hidden after the event has occurred and 
            before the next event is due to be presented.</remarks>
        </member>
        <member name="M:Telogis.GeoBase.Navigation.DefaultNavigationStatus.HideEta">
            <summary>
            Hide arrival time/distance estimates.
            </summary>
            <remarks>
            Typically, arrival time/distance estimates will need to be hidden when the user travels
            off-route or causes the route to be recalculated.
            </remarks>
        </member>
        <member name="M:Telogis.GeoBase.Navigation.DefaultNavigationStatus.HideUpcomingTurn">
            <summary>
            Hide information alerting the user of an upcoming turn.
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.Navigation.DefaultNavigationStatus.SetNavigationOff">
            <summary>
            Disable navigation.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Navigation.DefaultNavigationStatus.ButtonBrush">
            <summary>
            The brush used to draw the background of the instructions box. Defaults to white
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Navigation.DefaultNavigationStatus.InformationStyle">
            <summary>
            The style used for <b>NavigationManager</b> controls.
            Defaults to <see cref="T:Telogis.UI.FlatRoundControlStyle">FlatRoundControlStyle</see>
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Navigation.DefaultNavigationStatus.InformationBrush">
            <summary>
            The brush used to draw the background of <b>NavigationManager</b> controls.
            Defaults to <see cref="P:System.Drawing.Brushes.Black">Brushes.Black</see>
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Navigation.DefaultNavigationStatus.ButtonStyle">
            <summary>
            The style used for <b>NavigationManager</b> buttons.
            Defaults to <see cref="T:Telogis.UI.GelButtonControlStyle"/>
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.Navigation.DefaultNavigationStatus.HitTest(System.Int32,System.Int32,Telogis.GeoBase.IMap)">
            <summary>
            Perform a hit test.
            </summary>
            <param name="x">X coordinate.</param>
            <param name="y">Y coordinate.</param>
            <param name="aMap">The IMap upon which the click occurred.</param>
            <returns></returns>
        </member>
        <member name="P:Telogis.GeoBase.Navigation.DefaultNavigationStatus.MessagesBundle">
            <summary>
            Provides access to messages (for example strings and announcements) for a single culture. 
            This class is abstract and has concrete subclasses that vary according to how the messages 
            are configured, for example from an XML string or from an XML file in a directory on disk. 
            By referencing instances of this abstract class rather than the concrete subclasses, the 
            same code can access messages regardless of how they are configured.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Navigation.DefaultNavigationStatus.DisplayNameMode">
            <summary>
            Declares the DisplayNameMode that is desired when populating lables with the address
            from an address object. If not set, this will default to DisplayNameMode.FullName.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Navigation.DefaultNavigationStatus.RequiredRendermodes">
            <summary>
            Gets the <see cref="T:Telogis.GeoBase.RenderMode">RenderMode</see>.
            </summary>
        </member>
        <member name="E:Telogis.GeoBase.Navigation.DefaultNavigationStatus.RequestDirections">
            <summary>
            Fire when the user requests directions.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Navigation.DefaultNavigationStatus.MapMouseEventsHandler">
            <summary>
            Gets the MapMouseEventsHandler.
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.Internal.GBError">
             <summary>
             Enum that specifies why a call failed, if it is not NoError.
             </summary>
             <remarks>
             You MUST MUST MUST check this and throw the appropriate exception if it ever occurs.
            
             If you add an error code, you should alter Error.HandleError() to throw the appropriate exception.
             Currently the native exception mechanism only supports returning an error code as below.
             A system to reliably return a string containing a detail message would be nice.
             </remarks>
        </member>
        <member name="T:Telogis.GeoBase.Internal.IJSONSerializationSurrogate">
            <summary>
            An interface for serializing and deserializing arbitrary .Net objects.
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.Internal.IJSONSerializationSurrogate.Serialize(System.Object,System.Runtime.Serialization.SerializationInfo)">
            <summary>
            Serialize an object.
            </summary>
            <param name="obj">The object to serialize.</param>
            <param name="info">Member information (output).</param>
        </member>
        <member name="M:Telogis.GeoBase.Internal.IJSONSerializationSurrogate.Deserialize(System.Runtime.Serialization.SerializationInfo,System.Type)">
            <summary>
            Deserialize an object.
            </summary>
            <param name="info">Member information.</param>
            <param name="expectedType">The expected type.</param>
        </member>
        <member name="P:Telogis.GeoBase.Internal.IJSONSerializationSurrogate.MinVersion">
            <summary>
            The minimum GeoBase assembly version that uses this serialization surrogate.
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.Internal.LatLonSurrogate">
            <summary>
            LatLonSurrogate handles the serialisation of LatLon, rather than LatLon being automatically
            serialized by reflection through annotation with the [JSONSerializable] attribute.
            The reason for this is that performance is greatly improved through using this custom
            surrogate.
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.GeoStream.Authentication.AuthenticationException">
            <summary>
            An exception thrown when authentication fails.
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.GeoStream.Authentication.AuthenticationRequiredException">
            <summary>
            An exception thrown when an un-authenticated client attempts to perform an
            operation that requires authentication.
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.GeoStream.Authentication.AuthenticationTokenExpiredException">
            <summary>
            Thrown when a client's AuthToken is no longer valid, and has to re-authenticate
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.GeoStream.Authentication.NoSuchUserException">
            <summary>
            Thrown when the client attempts to perform a request with an invalid username
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.GeoStream.Authentication.NoSuchUserIdException">
            <summary>
            Thrown when the client attempts to perform a request with a user id that is not valid
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.GeoStream.Authentication.UnauthorizedException">
            <summary>
            Thrown when the client attempts to authenticate with a bad username/password combination
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.GeoStream.Authentication.UnauthorizedIpException">
            <summary>
            Thrown when the client is contacting the server from an IP address outside the range specified by the server admin
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.GeoStream.Authentication.RequestedValidTimeTooLongException">
            <summary>
            Thrown when you request a duration for your token that is longer than the maximum
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.GeoStream.Authentication.UnableToConnectException">
            <summary>
            Thrown when the client was unable to communicate properly with the server
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.GeoStream.Authentication.GeostreamVersionTooOldException">
            <summary>
            Thrown when the client has detected that the GeoStream server is too
            old to work with.
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.Clustering.ClusterSet">
            <summary>
            The ClusterSet class represents a collection of
            <see cref="T:Telogis.GeoBase.Clustering.Cluster"/>s.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Clustering.ClusterSet.Clusters">
            <summary>
            The clusters that make up the cluster set.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Clustering.ClusterSet.ExpiresAfter">
            <summary>
            The time the clusters in the set can be used before they must be recalculated.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Clustering.ClusterSet.UserObject">
            <summary>
            Stores other user-specific information associated with this set of clusters.
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.DataSources.LatLonDataDelegate">
            <summary>
            Finds the location of the feature represented by a row in the data source.
            </summary>
            <param name="dataRow">The values in this row for each column in the source</param>
            <returns>The location of the feature</returns>
        </member>
        <member name="T:Telogis.GeoBase.DataSources.ADORefreshDelegate">
            <summary>
            Used for data sources that are updated to request a new data reader.
            </summary>
            <returns>A new IDataReader</returns>
        </member>
        <member name="T:Telogis.GeoBase.DataSources.ADOFeature">
            <summary>
            An ADO Feature contains the location and all the associated data 
            for a feature from an ADO source.
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.DataSources.ADOFeature.ToString">
            <summary>
            Represents the feature as a string.
            </summary>
            <returns>A string representation of the feature.</returns>
        </member>
        <member name="P:Telogis.GeoBase.DataSources.ADOFeature.Location">
            <summary>
            The location of the feature.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.DataSources.ADOFeature.Data">
            <summary>
            The values of each column for this row in the underlying data source.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.DataSources.ADOFeature.Item(System.String)">
            <summary>
            Get the value of a column.
            </summary>
            <param name="column">The column.</param>
            <returns>The value in the specified column.</returns>
        </member>
        <member name="T:Telogis.GeoBase.DataSources.ADODataSource">
            <summary>
            An ADODataSource can be used to retrieve data from a database, CSV file, or other ADO.NET
            data source.
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.DataSources.ADODataSource.#ctor(System.Data.IDataReader,System.String)">
            <summary>
            Constructor for an ADODataSource where the underlying data will not change
            and the location is contained in a column with the format "lat,lon".
            </summary>
            <param name="reader">A reader through which to access the data.</param>
            <param name="latlonCol">The column containing the locations of features.</param>
        </member>
        <member name="M:Telogis.GeoBase.DataSources.ADODataSource.#ctor(System.Data.IDataReader,Telogis.GeoBase.DataSources.LatLonDataDelegate)">
            <summary>
            Constructor for an ADODataSource where the underlying data will not change.
            </summary>
            <param name="reader">A reader through which to access the data.</param>
            <param name="latlonParser">A delegate that will be called to get the location of each
            feature.</param>
        </member>
        <member name="M:Telogis.GeoBase.DataSources.ADODataSource.#ctor(Telogis.GeoBase.DataSources.ADORefreshDelegate,System.String,System.TimeSpan)">
            <summary>
            Constructor for an ADODataSource where the underlying data changes periodically
            and the location is contained in a column with the format "lat,lon".
            </summary>
            <param name="newReader">A delegate that will return a reader with which to access the
            data.</param>
            <param name="latlonCol">The column containing the locations of features.</param>
            <param name="expiresAfter">How often to update the data.</param>
        </member>
        <member name="M:Telogis.GeoBase.DataSources.ADODataSource.#ctor(Telogis.GeoBase.DataSources.ADORefreshDelegate,Telogis.GeoBase.DataSources.LatLonDataDelegate,System.TimeSpan)">
            <summary>
            Constructor for an ADODataSource where the underlying data changes periodically.
            </summary>
            <param name="newReader">A delegate that will return a reader with which to access the
            data.</param>
            <param name="latlonParser">A delegate that will be called to get the location of each
            feature.</param>
            <param name="expiresAfter">How often to update the data.</param>
        </member>
        <member name="M:Telogis.GeoBase.DataSources.ADODataSource.BeginQuery(Telogis.GeoBase.BoundingBox,System.AsyncCallback,System.Object)">
            <summary>
            Begins a query for all features from a data source.
            </summary>
            <returns>An IAsyncResult that will be passed by the caller to EndQuery.</returns>
        </member>
        <member name="M:Telogis.GeoBase.DataSources.ADODataSource.EndQuery(System.IAsyncResult)">
            <summary>
            Ends a query for all features from a data source.
            </summary>
            <param name="asyncResult">The IAsyncResult returned by BeginQuery.</param>
            <returns>The query results.</returns>
        </member>
        <member name="P:Telogis.GeoBase.DataSources.ADODataSource.GetTimeDelegate">
            <summary>
            A delegate used to provide the current time to GeoBase functions. 
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.DataSources.ADODataSource.RefreshRate">
            <summary>
            The amount of time for which items returned by EndQuery are valid for.
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.Indexes.StringBTreeSearchRow">
            <summary>
            A row returned by a StringBTreeSearchOperation.  Currently this is hardcoded for streets.
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.Routing.LinkEdit.LinkEditWarning">
            <summary>
            A warning that a problem occurred while creating a CompiledLinkEdits object.
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.Routing.LinkEdit.LinkEditWarning.#ctor(Telogis.GeoBase.Routing.LinkEdit.LinkEdit,System.String)">
            <summary>
            Creates a warning for a bad link edit.
            </summary>
            <param name="edit">The LinkEdit that caused the warning.</param>
            <param name="message">Details about the warning.</param>
        </member>
        <member name="P:Telogis.GeoBase.Routing.LinkEdit.LinkEditWarning.Edit">
            <summary>
            The LinkEdit that caused the warning.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Routing.LinkEdit.LinkEditWarning.Message">
            <summary>
            Details about the warning.
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.RemoteGeoCoder">
            <summary>
            Services for forward and reverse geocoding, to be performed on a remote machine.
            </summary>
            <remarks>
            <para>
            Forward geocoding takes physical address information in
            string form, and returns a <see cref="T:Telogis.GeoBase.LatLon"/> coordinate.
            </para>
            <para>
            Reverse geocoding takes a <see cref="T:Telogis.GeoBase.LatLon"/> coordinate
            and returns physical address information.
            </para>
            </remarks>
        </member>
        <member name="M:Telogis.GeoBase.RemoteGeoCoder.GeoCode(Telogis.GeoBase.Repositories.GeoStreamRepository,System.String,System.String,System.String,System.String,Telogis.GeoBase.Country)">
            <summary>
            Resolve an address, city and region to one or more <see cref="T:Telogis.GeoBase.GeocodeAddress">GeocodeAddresses</see>
            through forward geocoding.
            </summary>
            <param name="repository">The repository to perform the geocode.</param>
            <param name="Address">A string representing an address.</param>
            <param name="City">A string representing a city.</param>
            <param name="Region">A string representing a region.</param>
            <param name="PostalCode">A string representing the postal code.</param>
            <param name="Country">The <see cref="T:Telogis.GeoBase.Country"/> to perform the geocode in.</param>
            <returns>An array of <see cref="T:Telogis.GeoBase.GeocodeAddress">GeocodeAddresses</see>.</returns>
        </member>
        <member name="M:Telogis.GeoBase.RemoteGeoCoder.GeoCode(Telogis.GeoBase.Repositories.GeoStreamRepository,System.String,System.String,System.String,System.String,Telogis.GeoBase.Country,System.Int32)">
            <summary>
            Resolve an address, city and region to one or more <see cref="T:Telogis.GeoBase.GeocodeAddress">GeocodeAddresses</see>
            through Forward GeoCoding.
            </summary>
            <param name="address">A string representing an address.</param>
            <param name="city">A string representing a city.</param>
            <param name="region">A string representing a region.</param>
            <param name="postalCode">A string representing the postal code.</param>
            <param name="country">The <see cref="T:Telogis.GeoBase.Country"/> to perform the geocode in.</param>
            <param name="maxResults">The maximum number of results to return.</param>
            <param name="repository">Remote repository containing GeoBase map data</param>
            <returns>An array of <see cref="T:Telogis.GeoBase.GeocodeAddress">GeocodeAddresses</see>.</returns>
        </member>
        <member name="M:Telogis.GeoBase.RemoteGeoCoder.GeoCode(Telogis.GeoBase.Repositories.GeoStreamRepository,System.String,Telogis.GeoBase.Country)">
            <summary>
            Resolve an address and city to one or more <see cref="T:Telogis.GeoBase.GeocodeAddress">GeocodeAddresses</see>
            through Forward GeoCoding.
            </summary>
            <param name="address">A string representing an address.</param>
            <param name="country">The <see cref="T:Telogis.GeoBase.Country"/> to perform the geocode in.</param>
            <param name="repository">Remote repository containing GeoBase map data</param>
            <returns>An array of <see cref="T:Telogis.GeoBase.GeocodeAddress">GeocodeAddresses</see>.</returns>
        </member>
        <member name="M:Telogis.GeoBase.RemoteGeoCoder.GeoCode(Telogis.GeoBase.Repositories.GeoStreamRepository,System.String,Telogis.GeoBase.Country,System.Int32)">
            <summary>
            Resolve an address and city to one or more <see cref="T:Telogis.GeoBase.GeocodeAddress">GeocodeAddresses</see>
            through Forward GeoCoding.
            </summary>
            <param name="address">A string representing an address.</param>
            <param name="country">The <see cref="T:Telogis.GeoBase.Country"/> to perform the GeoCoding in.</param>
            <param name="maxResults">The maximum number of results to return.</param>
            <param name="repository">Remote repository containing GeoBase map data</param>
            <returns>An array of <see cref="T:Telogis.GeoBase.GeocodeAddress">GeocodeAddresses</see>.</returns>
        </member>
        <member name="M:Telogis.GeoBase.RemoteGeoCoder.ReverseGeoCode(Telogis.GeoBase.Repositories.GeoStreamRepository,Telogis.GeoBase.LatLon)">
            <summary>
            Find an <see cref="T:Telogis.GeoBase.Address"/> from a <see cref="T:Telogis.GeoBase.LatLon"/>.
            </summary>
            <param name="location">A <see cref="T:Telogis.GeoBase.LatLon"/> to resolve.</param>
            <param name="repository">Remote repository containing GeoBase map data</param>
            <returns><see cref="T:Telogis.GeoBase.LatLon"/>.</returns>
        </member>
        <member name="M:Telogis.GeoBase.RemoteGeoCoder.ReverseGeoCode(Telogis.GeoBase.Repositories.GeoStreamRepository,Telogis.GeoBase.LatLon,System.Double@,Telogis.GeoBase.DistanceUnit)">
            <summary>
            From a given <see cref="T:Telogis.GeoBase.LatLon"/> find an <see cref="T:Telogis.GeoBase.Address"/>
            and the distance from the given <see cref="T:Telogis.GeoBase.LatLon"/> to that <see cref="T:Telogis.GeoBase.Address"/>.
            </summary>
            <param name="location">A <see cref="T:Telogis.GeoBase.LatLon"/> representing a known location.</param>
            <param name="distance">Distance (measured in degrees) to the <see cref="T:Telogis.GeoBase.Address"/>.</param>
            <param name="units"><see cref="T:Telogis.GeoBase.DistanceUnit">Units</see> in which <b>distance</b> is measured.</param>
            <param name="repository">Remote repository containing GeoBase map data</param>
            <returns><see cref="T:Telogis.GeoBase.Address"/>.</returns>
        </member>
        <member name="M:Telogis.GeoBase.RemoteGeoCoder.ReverseGeoCode(Telogis.GeoBase.Repositories.GeoStreamRepository,Telogis.GeoBase.Vector,Telogis.GeoBase.Vector,Telogis.GeoBase.Address)">
            <summary>
            Find an address from two successive locations (envisaged to be the current and last known locations).
            </summary>
            <remarks>This method uses the current location, last known location and last known address to improve
            the precision of the reverse geocode. It is suggested that this method is called repeatedly, with each
            successive call using the <see cref="T:Telogis.GeoBase.Address"/> and Location (<see cref="T:Telogis.GeoBase.Vector"/>)
            returned from the previous method call.</remarks>
            <param name="Location"><see cref="T:Telogis.GeoBase.Vector"/> reprsenting the current location.</param>
            <param name="LastLocation"><see cref="T:Telogis.GeoBase.Vector"/> representing the last known location.</param>
            <param name="repository">Remote repository containing GeoBase map data</param>
            <param name="LastAddress">The last known <see cref="T:Telogis.GeoBase.Address"/>.</param>
            <returns></returns>
        </member>
        <member name="M:Telogis.GeoBase.RemoteGeoCoder.ReverseGeoCodeFull(Telogis.GeoBase.Repositories.GeoStreamRepository,Telogis.GeoBase.LatLon)">
            <summary>
            Finds a <see cref="T:Telogis.GeoBase.GeoCodeFull"/> from a given <see cref="T:Telogis.GeoBase.LatLon"/>.
            </summary>
            <param name="location"><see cref="T:Telogis.GeoBase.LatLon"/>.</param>
            <param name="repository">The repository to perform the geocode.</param>
            <returns><see cref="T:Telogis.GeoBase.GeoCodeFull"/>.</returns>
        </member>
        <member name="M:Telogis.GeoBase.RemoteGeoCoder.ReverseGeoCodeFull(Telogis.GeoBase.Repositories.GeoStreamRepository,Telogis.GeoBase.LatLon,System.Double)">
            <summary>
            Finds a <see cref="T:Telogis.GeoBase.GeoCodeFull"/> from a given <see cref="T:Telogis.GeoBase.LatLon"/>
            and <b>heading</b>.
            </summary>
            <param name="location"><see cref="T:Telogis.GeoBase.LatLon"/>.</param>
            <param name="heading">A heading (bearing, in degrees).</param>
            <param name="repository">Remote repository containing GeoBase map data</param>
            <returns><see cref="T:Telogis.GeoBase.GeoCodeFull"/>.</returns>
        </member>
        <member name="M:Telogis.GeoBase.RemoteGeoCoder.ReverseGeoCodeFull(Telogis.GeoBase.Repositories.GeoStreamRepository,Telogis.GeoBase.LatLon,System.String[])">
            <summary>
            Finds a <see cref="T:Telogis.GeoBase.GeoCodeFull"/> from a given <see cref="T:Telogis.GeoBase.LatLon"/>
            and name(s) of the last known location.
            </summary>
            <param name="location"><see cref="T:Telogis.GeoBase.LatLon"/>.</param>
            <param name="lastName">An array of strings representing the name(s) of the last known location.</param>
            <param name="repository">Remote repository containing GeoBase map data</param>
            <returns><see cref="T:Telogis.GeoBase.GeoCodeFull"/>.</returns>
        </member>
        <member name="M:Telogis.GeoBase.RemoteGeoCoder.ReverseGeoCodeFull(Telogis.GeoBase.Repositories.GeoStreamRepository,Telogis.GeoBase.LatLon,System.String[],System.Double)">
            <summary>
            Finds a <see cref="T:Telogis.GeoBase.GeoCodeFull"/> from a given <see cref="T:Telogis.GeoBase.LatLon"/>
            and name(s) of the last known location and maximum (estimated) distance from that location.
            </summary>
            <param name="location"><see cref="T:Telogis.GeoBase.LatLon"/>.</param>
            <param name="lastName">An array of strings representing the name(s) of the last known location.</param>
            <param name="repository">Remote repository containing GeoBase map data</param>
            <param name="maxDist">The maximum distance (measured in degrees) we <i>expect</i> to be from the last known location.</param>
            <returns><see cref="T:Telogis.GeoBase.GeoCodeFull"/>.</returns>
        </member>
        <member name="M:Telogis.GeoBase.RemoteGeoCoder.ReverseGeoCodeFull(Telogis.GeoBase.Repositories.GeoStreamRepository,Telogis.GeoBase.LatLon,System.String[],System.Double,System.Boolean,Telogis.GeoBase.ReverseGeoCodeMode)">
            <summary>
            Finds a <see cref="T:Telogis.GeoBase.GeoCodeFull"/> from a given <see cref="T:Telogis.GeoBase.LatLon"/>
            and name(s) of the last known location and maximum (estimated) distance from that location.
            </summary>
            <remarks>The <i>global</i> flag controls the fallback state of the query. If <i>global</i> is <b>true</b>
            and the location cannot be resolved to a street address then the nearest city within 10 degrees is returned.
            This means that a successful resolution is almost certainly guaranteed (unless the <see cref="T:Telogis.GeoBase.LatLon"/>
            is located in an ocean), however there is a significant performance hit in finding the nearest city.
            </remarks>
            <param name="repository">Remote repository containing GeoBase map data</param>
            <param name="location"><see cref="T:Telogis.GeoBase.LatLon"/>.</param>
            <param name="lastName">An array of strings representing the name(s) of the last known location.</param>
            <param name="maxDist">The maximum distance (measured in degrees) we <i>expect</i> to be from the last known location.</param>
            <param name="globalFallback">If <b>true</b> and an address cannot be found a nearby city is returned. If <b>false</b> and
            an address cannot be found, the Reverse GeoCode will return a <b>null</b> <see cref="T:Telogis.GeoBase.GeoCodeFull"/>.
            See Remarks.</param>
            <param name="mode">Controls the type of streets that are returned by the search.</param>
            <returns><see cref="T:Telogis.GeoBase.GeoCodeFull"/>.</returns>
        </member>
        <member name="M:Telogis.GeoBase.RemoteGeoCoder.ReverseGeoCodeFull(Telogis.GeoBase.Repositories.GeoStreamRepository,Telogis.GeoBase.LatLon,System.String[],System.Double,System.Double,System.Boolean,Telogis.GeoBase.ReverseGeoCodeMode,System.Double)">
            <summary>
            Finds a <see cref="T:Telogis.GeoBase.GeoCodeFull"/> from a given <see cref="T:Telogis.GeoBase.LatLon"/>
            and name(s) of the last known location and maximum (estimated) distance from that location.
            </summary>
            <remarks>The <i>global</i> flag controls the fallback state of the query. If <i>global</i> is <b>true</b>
            and the location cannot be resolved to a street address then the nearest city within 10 degrees is returned.
            This means that a successful resolution is almost certainly guaranteed (unless the <see cref="T:Telogis.GeoBase.LatLon"/>
            is located in an ocean), however there is a significant performance hit in finding the nearest city.
            </remarks>
            <param name="repository">Remote repository containing GeoBase map data</param>
            <param name="location"><see cref="T:Telogis.GeoBase.LatLon"/>.</param>
            <param name="lastName">An array of strings representing the name(s) of the last known location.</param>
            <param name="maxDist">The maximum distance (measured in degrees) we <i>expect</i> to be from the last known location.</param>
            <param name="heading">A heading (measured in degrees).</param>
            <param name="globalFallback">If <b>true</b> and an address cannot be found a nearby city is returned. If <b>false</b> and
            an address cannot be found, the Reverse GeoCode will return a <b>null</b> <see cref="T:Telogis.GeoBase.GeoCodeFull"/>.
            See Remarks.</param>
            <param name="mode">Controls the type of streets that are returned by the search.</param>
            <param name="crossStreetDist">The maximum distance in degrees to search for a cross street.</param>
            <returns><see cref="T:Telogis.GeoBase.GeoCodeFull"/>.</returns>
        </member>
        <member name="T:Xheo.Licensing.OnServerLimit">
            <summary>
            Indicates whether the protected class can be used from a web server/web service
            and if it is required (not allowed to run on web forms).
            </summary>
        </member>
        <member name="M:Xheo.Licensing.OnServerLimit.#ctor">
            <summary>
            Initializes a new instance of the OnServerLimit class.
            </summary>
        </member>
        <member name="M:Xheo.Licensing.OnServerLimit.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the OnServerLimit class.
            </summary>
            <param name="allowed">
            	Indicates if running on a server is allowed.
            </param>
            <param name="required">
            	Indicats if running on a server is required.
            </param>
        </member>
        <member name="M:Xheo.Licensing.OnServerLimit.Validate(System.ComponentModel.LicenseContext,System.Type,System.Object)">
            <summary>
            Validates that the license being granted is within the limits enforced by
            this object.
            </summary>
            <param name="context">
            	The LicenseContext passed to <see cref="M:System.ComponentModel.LicenseProvider.GetLicense(System.ComponentModel.LicenseContext,System.Type,System.Object,System.Boolean)"/>.
            </param>
            <param name="type">
            	The Type of the object being licensed.
            </param>
            <param name="instance">
            	The instance of the object being licensed.
            </param>
            <returns>
            	Returns true if the limits are valid, otherwise false.
            </returns>
        </member>
        <member name="M:Xheo.Licensing.OnServerLimit.LoadFromXml(System.Xml.XmlNode)">
            <summary>
            Loads the contents of a Limit from an XML string.
            </summary>
            <param name="node">
            	The XML string to load from.
            </param>
            <returns>
            	Returns true if the load was successful, otherwise false.
            </returns>
        </member>
        <member name="M:Xheo.Licensing.OnServerLimit.SaveToXml(System.Xml.XmlNode)">
            <summary>
            Saves the contents of the Limit as an XML string.
            </summary>
            <returns>
            	Returns the saved XML.
            </returns>
        </member>
        <member name="M:Xheo.Licensing.OnServerLimit.GetDetailsDescription">
            <summary>
            Overrides <see cref="M:Xheo.Licensing.Limit.GetDetailsDescription"/>.
            </summary>
        </member>
        <member name="P:Xheo.Licensing.OnServerLimit.Allowed">
            <summary>
            Gets or sets a value that indicates if the class can be used on a web server
            or web service.
            </summary>
        </member>
        <member name="P:Xheo.Licensing.OnServerLimit.Required">
            <summary>
            Gets or sets a value that indicates if the class must be used on a web server
            or web service.
            </summary>
        </member>
        <member name="P:Xheo.Licensing.OnServerLimit.Description">
            <summary>
            Gets the description of the limit.
            </summary>
        </member>
        <member name="P:Xheo.Licensing.OnServerLimit.Name">
            <summary>
            Gets the display name of the limit.
            </summary>
        </member>
        <member name="T:Xheo.Configuration.NameValueSectionHandler">
            <summary>
            Implements a section handler that can actually handle multiple entries with 
            the same key.
            </summary>
        </member>
        <member name="M:Xheo.Configuration.NameValueSectionHandler.#ctor">
            <summary>
            Initializes a new instance of the NameValueSectionHandler class.
            </summary>
        </member>
        <member name="M:Xheo.Configuration.NameValueSectionHandler.Create(System.Object,System.Object,System.Xml.XmlNode)">
            <summary>
            Parses the configuration section and returns a new NameValueCollection.
            </summary>
            <param name="parent">
            	A parent configuration section if any.
            </param>
            <param name="configContext">
            	An HttpConfigurationContext if called from ASP.NET.
            </param>
            <param name="section">
            	The XmlNode representing the configuration section.
            </param>
            <returns>
            	Returns a new NameValueCollection.
            </returns>
        </member>
        <member name="T:Xheo.Configuration.NameValueSectionHandler.ReadOnlyNameValueCollection">
            <summary>
            Summary of ReadOnlyNameValueCollection
            </summary>
        </member>
        <member name="M:Xheo.Configuration.NameValueSectionHandler.ReadOnlyNameValueCollection.#ctor">
            <summary>
            Summary of ReadOnlyNameValueCollection.
            </summary>
        </member>
        <member name="M:Xheo.Configuration.NameValueSectionHandler.ReadOnlyNameValueCollection.#ctor(Xheo.Configuration.NameValueSectionHandler.ReadOnlyNameValueCollection)">
            <summary>
            Summary of ReadOnlyNameValueCollection.
            </summary>
            <param name="collection"></param>
        </member>
        <member name="M:Xheo.Configuration.NameValueSectionHandler.ReadOnlyNameValueCollection.SetReadOnly">
            <summary>
            Summary of SetReadOnly.
            </summary>
        </member>
        <member name="T:Xheo.Licensing.ExtendedLicense">
            <summary>
            Primary class for the XHEO|Licensing framework.
            </summary>
            <remarks>
            	Each <see cref="T:System.Type"/> in an assembly can be protected by XHEO|Licensing. The environment
            	that the Type is allowed to run in, is defined by a collection of <see cref="T:Xheo.Licensing.Limit"/>
            	instances defined for the license. For instance the license may limit a component for use 
            	on a computer with a specific IP address. These limits are implemented and enforced by 
            	subclasses of the <see cref="T:Xheo.Licensing.Limit"/> class.
            	<para>
            	To ensure that the license files have not been altered since they were
            	issued, each ExtendedLicense is signed with a <see cref="T:Xheo.Licensing.LicenseSigningKey"/>.
            	The signing key uses a public key encryption method (See 
            	<see cref="N:System.Security.Cryptography"/>) with the public key embedded in
            	the assembly that the component is implemented in. The private key remains
            	secured with the original developers ensuring that only they can grant
            	valid licenses.
            	</para>
            <seealso href="../Backgrounders/Probing.html">License File Probing</seealso>
            </remarks>
        </member>
        <member name="F:Xheo.Licensing.ExtendedLicense.ConfigSection">
            <summary>
            The configuration section where XHEO|Licensing settings are stored in the application's
            configuration file.
            </summary>
            <remarks>
            	All of XHEO|Licensing's configuration settings can be set from the application
            	or machine's configuration file. You can use the shared &lt;appSettings&gt;
            	section or the custom section to set settings.
            	<para>
            	Most configuration options can be set in the configuration file via code
            	by setting the public static property to the desired value. For example to
            	save the location of the KeyFolder simply set <see cref="P:Xheo.Licensing.ExtendedLicense.KeyFolder"/> to 
            	the desired value.
            	</para>
            </remarks>
            <example>
            <code>
            &lt;configuration&gt;
            &lt;appSettings&gt;
            	&lt;add key="Xheo.Licensing.TemplateFolder" value="X:\Keys" /&gt;
            &lt;/appSettings&gt;
            
            or
            
            &lt;configSections&gt;
            	&lt;sectionGroup name="Xheo"&gt;
            		&lt;section name="Licensing" type="System.Configuration.NameValueSectionHandler, System, Version=1.0.3300.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" /&gt;
            	&lt;/sectionGroup&gt;
            &lt;/configSections&gt;
            
            &lt;Xheo&gt;
            	&lt;Licensing&gt;
            		&lt;add key="TemplateFolder" value="D:\aaa" /&gt;
            	&lt;/Licensing&gt;
            &lt;/Xheo&gt;
            &lt;/configuration&gt;
            </code>
            </example>
        </member>
        <member name="F:Xheo.Licensing.ExtendedLicense.CurrentVersion">
            <summary>
            The current license scheme file version.
            </summary>
        </member>
        <member name="M:Xheo.Licensing.ExtendedLicense.#cctor">
            <summary>
            Initialize static values
            </summary>
        </member>
        <member name="M:Xheo.Licensing.ExtendedLicense.#ctor">
            <summary>
            Initializes a new instance of the ExtendedLicense class.
            </summary>
        </member>
        <member name="M:Xheo.Licensing.ExtendedLicense.#ctor(System.Xml.XmlNode)">
            <summary>
            Initializes a new instance of the ExtendedLicense class with the values
            of the given XmlNode.
            </summary>
            <param name="node">
            	The XmlNode of the <see cref="T:Xheo.Licensing.ExtendedLicensePack"/> to load the license
            	properties from.
            </param>
        </member>
        <member name="M:Xheo.Licensing.ExtendedLicense.Dispose">
            <summary>
            Releases any managed or unmanaged resources.
            </summary>
        </member>
        <member name="M:Xheo.Licensing.ExtendedLicense.FromXml(System.String)">
            <summary>
            Creates a new ExtendedLicense from an XML fragment.
            </summary>
            <param name="xml">
            	The xml to create the license from.
            </param>
            <returns>
            	Returns the newly created extended license.
            </returns>
        </member>
        <member name="M:Xheo.Licensing.ExtendedLicense.FromXml(System.Xml.XmlNode)">
            <summary>
            Creates a new ExtendedLicense from an XML fragment.
            </summary>
            <param name="xml">
            	The xml to create the license from.
            </param>
            <returns>
            	Returns the newly created extended license.
            </returns>
        </member>
        <member name="M:Xheo.Licensing.ExtendedLicense.InitLib">
            <summary>
            Initialize the library on first use.
            </summary>
        </member>
        <member name="M:Xheo.Licensing.ExtendedLicense.LoadLibraryExW(System.String,System.IntPtr,System.UInt32)">
            <summary>
            Summary of LoadLibraryExW.
            </summary>
            <param name="filename"></param>
            <param name="hFile"></param>
            <param name="flags"></param>
            <returns></returns>	
        </member>
        <member name="M:Xheo.Licensing.ExtendedLicense.FreeLibrary(System.IntPtr)">
            <summary>
            Summary of FreeLibrary.
            </summary>
            <param name="hModule"></param>
            <returns></returns>	
        </member>
        <member name="M:Xheo.Licensing.ExtendedLicense.ShowRegistrationForm(System.Collections.Specialized.NameValueCollection)">
            <summary>
            If the license contains a registration limit, then calling this method will
            display the registration form. If the registration is successful will
            unlock the application.
            <seealso cref="M:Xheo.Licensing.RegistrationForm.InitializeFields(System.Collections.Specialized.NameValueCollection)"/>
            </summary>
            <param name="initValues">
            	Initial values for the various fields on the registration form.
            </param>
            <returns>
            	Returns true if the license has a registration limit and the registration
            	was successful.
            </returns>
        </member>
        <member name="M:Xheo.Licensing.ExtendedLicense.ShowRegistrationForm">
            <summary>
            If the license contains a registration limit, then calling this method will
            display the registration form. If the registration is successful will
            unlock the application.
            </summary>
            <returns>
            	Returns true if the license has a registration limit and the registration
            	was successful.
            </returns>
        </member>
        <member name="M:Xheo.Licensing.ExtendedLicense.RegisterWithServer(System.Boolean,System.String)">
            <summary>
            Register the license with any <see cref="T:Xheo.Licensing.LicenseServer"/>s identified by
            <see cref="T:Xheo.Licensing.LicenseServerLimit"/> instances in the <see cref="P:Xheo.Licensing.ExtendedLicense.Limits"/> collection.
            </summary>
            <param name="includeAlternates">
            	Indicates if the license should be registered with the alternate servers
            	as well. Normally this should be true.
            </param>
            <param name="keys">
            	Name of the keys to use when validating and registering the license. If null
            	then the AssemblyName will be used.
            </param>
            <returns>
            	Returns true if the license was registered successfully with all the
            	servers, otherwise false. Check InvalidReason for additional information
            	on any failures.
            </returns>
            <remarks>
            	If the license contains a <see cref="T:Xheo.Licensing.LicenseServerLimit"/> the license
            	will be registered with the primary server. If includeAlternates is true
            	then the license will also be registered with the alternate servers.
            </remarks>
        </member>
        <member name="M:Xheo.Licensing.ExtendedLicense.RegisterWithServerRecursive(System.Boolean,Xheo.Licensing.LimitCollection,System.String,System.Text.StringBuilder,System.Boolean)">
            <summary>
            Summary of RegisterWithServerRecursive.
            </summary>
            <param name="includeAlternates"></param>
            <param name="limits"></param>
            <param name="keys"></param>
            <param name="invalidReason"></param>
            <param name="unregister"></param>
            <returns></returns>	
        </member>
        <member name="M:Xheo.Licensing.ExtendedLicense.RegisterWithServer(System.String,System.String)">
            <summary>
            Register the license on the given server.
            </summary>
            <param name="serverUrl">
            	URL of the Web Service to register with.
            </param>
            <param name="keys">
            	Name of the keys to use when validating and registering the license. If null
            	then the AssemblyName will be used.
            </param>
            <returns>
            	Returns true if the license was registered successfully with all the
            	servers, otherwise false. Check InvalidReason for additional information
            	on any failures.
            </returns>
        </member>
        <member name="M:Xheo.Licensing.ExtendedLicense.UnregisterFromServer(System.Boolean,System.String)">
            <summary>
            Unregisters the license from any <see cref="T:Xheo.Licensing.LicenseServer"/>s identified by
            <see cref="T:Xheo.Licensing.LicenseServerLimit"/> instances in the <see cref="P:Xheo.Licensing.ExtendedLicense.Limits"/> collection.
            </summary>
            <param name="includeAlternates">
            	Indicates if the license should be unregistered from the alternate servers
            	as well.
            </param>
            <param name="keys">
            	Name of the keys to use when validating and registering the license.
            </param>
            <returns>
            	Returns true if the license was unregistered successfully from all the
            	servers, otherwise false. Check InvalidReason for additional information
            	on any failures.
            </returns>
            <remarks>
            	If the license contains a <see cref="T:Xheo.Licensing.LicenseServerLimit"/> the license
            	will be unregistered from the primary server. If includeAlternates is true
            	then the license will also be unregistered from the alternate servers.
            </remarks>
        </member>
        <member name="M:Xheo.Licensing.ExtendedLicense.UnregisterFromServer(System.String,System.String)">
            <summary>
            Unregisters the license from the given server.
            </summary>
            <param name="serverUrl">
            	URL of the Web Service to unregister with.
            </param>
            <param name="keys">
            	Name of the keys to use when validating and registering the license.
            </param>
            <returns>
            	Returns true if the license was unregistered successfully from all the
            	servers, otherwise false. Check InvalidReason for additional information
            	on any failures.
            </returns>
        </member>
        <member name="M:Xheo.Licensing.ExtendedLicense.GetFullPath(System.String)">
            <summary>
            Utility function that gets the full path of a folder relative to the 
            "application root" of the current application.
            </summary>
            <param name="path">
            	The path to resolve to a complete path.
            </param>
            <remarks>
            	For console and forms applications the base folder is the folder of the entry
            	executable. For Web sites the base folder is the root of the site...rather than
            	the \bin folder.
            </remarks>
        </member>
        <member name="M:Xheo.Licensing.ExtendedLicense.UsesGui">
            <summary>
            Determines if the license uses limits that display a GUI to interact with the
            user.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Xheo.Licensing.ExtendedLicense.UsesGuiRecursive(Xheo.Licensing.LimitCollection)">
            <summary>
            Summary of UsesGuiRecursive.
            </summary>
            <param name="limits"></param>
            <returns></returns>	
        </member>
        <member name="M:Xheo.Licensing.ExtendedLicense.GetLimit(System.Type)">
            <summary>
            Gets the first instance of a Limit with the given Type in the license.
            </summary>
            <remarks>
            	Each tier is checked before drilling down to the next tier for
            	ContainerLimits such as the OrLimit.
            </remarks>
            <param name="type">
            	The Type of the license to load.
            </param>
            <returns>
            	Returns the first limit of the given Type if found, otherwise null.
            </returns>
        </member>
        <member name="M:Xheo.Licensing.ExtendedLicense.GetLimitRecursive(System.Type,Xheo.Licensing.LimitCollection)">
            <summary>
            Summary of GetLimitRecursive.
            </summary>
            <param name="type"></param>
            <param name="collection"></param>
            <returns></returns>	
        </member>
        <member name="M:Xheo.Licensing.ExtendedLicense.GetTrialLimit">
            <summary>
            Gets the first instance of a TrialLimit in the given license.
            </summary>
            <returns>
            	Returns the first TrialLimit in the license if found, otherwise null.
            </returns>
        </member>
        <member name="M:Xheo.Licensing.ExtendedLicense.GetValue(System.String,System.String)">
            <summary>
            Gets the first value from the <see cref="P:Xheo.Licensing.ExtendedLicense.Values"/> collection with the given
            key and if not found returns the default value instead.
            </summary>
            <param name="key">
            	The key of the value to return.
            </param>
            <param name="defaultValue">
            	The default value if not found.
            </param>
            <returns>
            	Returns the first value with the given key if found, otherwise the default value.
            </returns>
        </member>
        <member name="M:Xheo.Licensing.ExtendedLicense.GetShortAssemblyName">
            <summary>
            Gets the short name of the assembly. If the <see cref="P:Xheo.Licensing.ExtendedLicense.AssemblyName"/> property 
            contains version and key information, only the assembly name is returned.
            </summary>
            <returns>
            	Returns the short version of the <see cref="P:Xheo.Licensing.ExtendedLicense.AssemblyName"/> if set, otherwise
            	null.
            </returns>
        </member>
        <member name="M:Xheo.Licensing.ExtendedLicense.GetSigningKey(System.String)">
            <summary>
            Gets the LicenseSigningKey needed to sign the license. <see cref="P:Xheo.Licensing.ExtendedLicense.AssemblyName"/>
            must contain a valid name for this to return a value.
            </summary>
            <param name="folder">
            	The folder to look for keys. If null <see cref="P:Xheo.Licensing.ExtendedLicense.KeyFolder"/> is used.
            </param>
            <returns>
            	Returns the key needed to sign the license if found, otherwise null.
            </returns>
        </member>
        <member name="M:Xheo.Licensing.ExtendedLicense.GetSigningKey">
            <summary>
            Gets the LicenseSigningKey needed to sign the license. <see cref="P:Xheo.Licensing.ExtendedLicense.AssemblyName"/>
            must contain a valid name for this to return a value.
            </summary>
            <returns>
            	Returns the key needed to sign the license if found, otherwise null.
            </returns>
        </member>
        <member name="M:Xheo.Licensing.ExtendedLicense.Validate(System.ComponentModel.LicenseContext,System.Type,System.Object,System.Boolean)">
            <summary>
            Validates that the executing environment is within the limits required by
            this license. This method is called by the <see cref="T:Xheo.Licensing.ExtendedLicenseProvider"/>
            when granting licenses.
            </summary>
            <param name="context">
            	The LicenseContext passed to <see cref="M:System.ComponentModel.LicenseProvider.GetLicense(System.ComponentModel.LicenseContext,System.Type,System.Object,System.Boolean)"/>.
            </param>
            <param name="type">
            	The Type of the object being licensed.
            </param>
            <param name="instance">
            	The instance of the object being licensed.
            </param>
            <param name="includeRemote">
            	Indicates if limits that have <see cref="P:Xheo.Licensing.Limit.IsRemote"/> set to true 
            	should be included in the validation.
            </param>
            <returns>
            	Returns true if the limits are valid, otherwise false.
            </returns>
        </member>
        <member name="M:Xheo.Licensing.ExtendedLicense.LoadFromXml(System.Xml.XmlNode)">
            <summary>
            Loads the contents of a license from an XmlNode.
            </summary>
            <param name="node">
            	An XmlNode containing the license data.
            </param>
            <returns>
            	Returns true if the load was successful, otherwise false.
            </returns>
        </member>
        <member name="M:Xheo.Licensing.ExtendedLicense.SaveToXml(System.Xml.XmlNode)">
            <summary>
            Saves the contents of the ExtendedLicense to the given XmlNode.
            </summary>
            <param name="parent">
            	The parent XmlNode.
            </param>
            <returns>
            	Returns the root node of the saved license.
            </returns>
        </member>
        <member name="M:Xheo.Licensing.ExtendedLicense.FromXmlString(System.String)">
            <summary>
            Loads the contents of the license from an XML string.
            </summary>
            <param name="xml">
            	The XML string to load from.
            </param>
        </member>
        <member name="M:Xheo.Licensing.ExtendedLicense.ToXmlString">
            <summary>
            Saves the contents of the license to an XML string.
            </summary>
            <returns>
            	The saved XML.
            </returns>
        </member>
        <member name="M:Xheo.Licensing.ExtendedLicense.SetLicensePack(Xheo.Licensing.ExtendedLicensePack)">
            <summary>
            Sets the owning license pack.
            </summary>
            <param name="pack">
            	The license pack that owns the license.
            </param>
        </member>
        <member name="M:Xheo.Licensing.ExtendedLicense.ComponentsToString">
            <summary>
            Gets the components collection as a comma separated list.
            </summary>
            <returns>
            	Returns the list of components.
            </returns>
        </member>
        <member name="M:Xheo.Licensing.ExtendedLicense.ComponentsFromString(System.String)">
            <summary>
            Fills the components collection from a comma separated list.
            </summary>
            <param name="components">
            	Comma separated list of components.
            </param>
        </member>
        <member name="M:Xheo.Licensing.ExtendedLicense.Duplicate">
            <summary>
            Duplicates the current instance.
            </summary>
            <returns>
            	Returns a new instance that is a duplicate of the current instance.
            </returns>
        </member>
        <member name="M:Xheo.Licensing.ExtendedLicense.SetReadOnly">
            <summary>
            Makes the license readonly.
            </summary>
        </member>
        <member name="M:Xheo.Licensing.ExtendedLicense.AssertNotReadOnly">
            <summary>
            Checks if the license is currently read only and throws an exception if it is.
            </summary>
        </member>
        <member name="M:Xheo.Licensing.ExtendedLicense.CheckLastRun">
            <summary>
            Checks to see if the clock has been rolled back since the last time the
            license was checked.
            </summary>
            <returns>
            	Returns true if the clock is OK, otherwise false.
            </returns>
        </member>
        <member name="M:Xheo.Licensing.ExtendedLicense.UpdateLastRun">
            <summary>
            Updates the last run record for a license to prevent the clock from being rolled back.
            </summary>
        </member>
        <member name="M:Xheo.Licensing.ExtendedLicense.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Implements <see cref="M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)"/>.
            </summary>
        </member>
        <member name="M:Xheo.Licensing.ExtendedLicense.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Deserializes a license that was previously serialized. Used by the
            .NET framework when marshalling an object between AppDomains.
            </summary>
        </member>
        <member name="P:Xheo.Licensing.ExtendedLicense.LicenseKey">
            <summary>
            Overrides <see cref="P:System.ComponentModel.License.LicenseKey"/>.
            </summary>
        </member>
        <member name="P:Xheo.Licensing.ExtendedLicense.PersistantState">
            <summary>
            Gets a reference to per-license specific state that works independent
            of any underlying state schemes. This is used to safely track values that
            should be kept in memory even when a license is reloaded from disk.
            </summary>
        </member>
        <member name="P:Xheo.Licensing.ExtendedLicense.AssemblyName">
            <summary>
            Gets or sets the name of the assembly used to sign the license
            originally. The value of this property is for reference only and
            has no impact on the validation of a license.
            </summary>
        </member>
        <member name="P:Xheo.Licensing.ExtendedLicense.Signature">
            <summary>
            Gets or sets the signature used to validate the license data.
            </summary>
        </member>
        <member name="P:Xheo.Licensing.ExtendedLicense.Version">
            <summary>
            Gets or sets the version of the licensing scheme used.
            </summary>
        </member>
        <member name="P:Xheo.Licensing.ExtendedLicense.LicensePack">
            <summary>
            Gets the <see cref="T:Xheo.Licensing.ExtendedLicensePack"/> that owns the license.
            </summary>
        </member>
        <member name="P:Xheo.Licensing.ExtendedLicense.Components">
            <summary>
            Gets the collection of component names that the license applies to.
            </summary>
            <remarks>
            Each component name in the collection should be the <see cref="P:System.Type.FullName"/>
            of the <see cref="P:Xheo.Licensing.ExtendedLicense.Type"/> including the namespace. When the license is read only then
            a copy of the collection is returned and any changes to the collection
            are lost.
            </remarks>
        </member>
        <member name="P:Xheo.Licensing.ExtendedLicense.Limits">
            <summary>
            Gets the collection of limits for the current license.
            </summary>
        </member>
        <member name="P:Xheo.Licensing.ExtendedLicense.AbsoluteUser">
            <summary>
            Gets or sets the name of the user that the license is issued to.
            </summary>
        </member>
        <member name="P:Xheo.Licensing.ExtendedLicense.User">
            <summary>
            Gets or sets the value of the user as it should appear on screen. 
            </summary>
            <remarks>
            <blockquote class="dtBLOCK"><b>Warning</b> This value is unprotected and can be
            changed by the client. Do not assume the value is valid.</blockquote>
            </remarks>
        </member>
        <member name="P:Xheo.Licensing.ExtendedLicense.AbsoluteOrganization">
            <summary>
            Gets or sets the name of the organization that the license is issued to.
            </summary>
        </member>
        <member name="P:Xheo.Licensing.ExtendedLicense.Organization">
            <summary>
            Gets or sets the name of the organization that the license is issued to.
            </summary>
        </member>
        <member name="P:Xheo.Licensing.ExtendedLicense.MinimumSerialNumberSeed">
            <summary>
            Gets or sets the minimum serial number seed value accepted by this license. Use to partition
            serial number seeds to various vendors.
            </summary>
            <remarks>
            	Use MinimumSerialNumberSeed and <see cref="P:Xheo.Licensing.ExtendedLicense.MaximumSerialNumberSeed"/> to partition serial
            	numbers to various resellers or vendors. You can then use this to determine which vendor
            	sold your product in case of support requests.
            </remarks>
        </member>
        <member name="P:Xheo.Licensing.ExtendedLicense.MaximumSerialNumberSeed">
            <summary>
            Gets or sets the maximum serial number seed value accepted by this license. Use to partition
            serial number seeds to various vendors.
            </summary>
            <remarks>
            	Use <see cref="P:Xheo.Licensing.ExtendedLicense.MinimumSerialNumberSeed"/> and MaximumSerialNumberSeed to partition serial
            	numbers to various resellers or vendors. You can then use this to determine which vendor
            	sold your product in case of support requests.
            </remarks>
        </member>
        <member name="P:Xheo.Licensing.ExtendedLicense.UnlockBySerial">
            <summary>
            Gets or sets a value that indicates if the user must provide a valid serial number to fully unlock the license.
            </summary>
        </member>
        <member name="P:Xheo.Licensing.ExtendedLicense.IsUnlocked">
            <summary>
            Gets a value that indicates if the license uses Unlock By Serial and the license has been unlocked. 
            Even if the value is true, that does not indicate that the serial number is valid.
            </summary>
        </member>
        <member name="P:Xheo.Licensing.ExtendedLicense.AcceptedSerialNumberSizes">
            <summary>
            Gets or sets the serial number sizes that can be used to unlock the license. If a valid serial 
            number of a different size is used, license validation will fail.
            </summary>
            <remarks>
            	It is recommended that you only allow the largest size you will reasonably expect to issue
            	to your customers. A malicious user needs only to crack the smallest acceptable size to
            	gain access to the license. The Recommended sizes are Medium (for regular serial numbers)
            	and Huge (for activation keys).
            </remarks>
        </member>
        <member name="P:Xheo.Licensing.ExtendedLicense.AbsoluteSerialNumber">
            <summary>
            Gets or sets the serial number for the license.
            </summary>
            <remarks>
            	Generally the value of the serial number property is completely arbitrary and can
            	contain any value. However the values should be treated as a primary key that
            	uniquely identifies the license. Generally this is used to reference licenses in a 
            	back-end system and to uniquely identify the license.
            	<para>
            	By default a random GUID is generated for the serial number. You can
            	later change it to any desired value.
            	</para>
            	<para>
            	(Version 1.2+) When using <i><a href="../Backgrounders/UnlockBySerialNumber.html">Unlock by Serial</a></i> to unlock licenses, the Absolute
            	Serial Number is used to match user's serial numbers to licenses. 
            	</para>
            </remarks>
        </member>
        <member name="P:Xheo.Licensing.ExtendedLicense.SerialNumber">
            <summary>
            Gets or sets the value of the absolute serial number. 
            </summary>
            <remarks>
            The absolute serial number is
            used in unlocking a license by serial number. The absolute serial number must begin
            with the <see cref="P:Xheo.Licensing.ExtendedLicense.SerialNumber"/> for the license.
            <blockquote class="dtBLOCK"><b>Warning</b> This value is unprotected and can be
            changed by the client. Do not assume the value is valid.</blockquote>
            </remarks>
        </member>
        <member name="P:Xheo.Licensing.ExtendedLicense.Values">
            <summary>
            Gets a collection of arbitrary values to store with the license. 
            </summary>
            <remarks>
            	You can use this to store values for runtime adjustments such as
            	maximum values, names, etc. The values are also signed so adjustments
            	to the values after the license has been signed will invalidate
            	the license. Non primitive values must be marked as Serializable.
            </remarks>
        </member>
        <member name="P:Xheo.Licensing.ExtendedLicense.MetaValues">
            <summary>
            Gets a collection of arbitrary values to store with the license. These values
            <i>are not</i> protected and may be changed without affecting the validity
            of the license. Use for storing volitle information and other unsecured
            information.
            </summary>
            <remarks>
            	The MetaValues collection will be persisted with a license. However any changes
            	to the meta values collection after the license is signed will not affect the
            	validity of the signature. Use this to track volitle information that need
            	not be secured and is safe for the user to change.
            </remarks>
        </member>
        <member name="P:Xheo.Licensing.ExtendedLicense.Expires">
            <summary>
            Gets or sets the expiration date for the license.
            </summary>
        </member>
        <member name="P:Xheo.Licensing.ExtendedLicense.IssuerUrl">
            <summary>
            Gets or sets the URL to the company that issued the license.
            </summary>
        </member>
        <member name="P:Xheo.Licensing.ExtendedLicense.Tag">
            <summary>
            Gets or sets an arbitrary piece of data to track with the license. This 
            is a "cheap" way of extending the license scheme by allowing you to 
            store any kind of additional data that can be saved as a string to 
            the license.
            </summary>
        </member>
        <member name="P:Xheo.Licensing.ExtendedLicense.Type">
            <summary>
            Gets or sets an application/product specific description of the type of
            license. For examples "designer", "single user", "non-profit", etc. This can often be
            used a reference to the primary key in a database, such as a SKU, for the product 
            that the license represents.
            </summary>
        </member>
        <member name="P:Xheo.Licensing.ExtendedLicense.PublicKey">
            <summary>
            Gets a reference to the <see cref="T:Xheo.Licensing.LicenseSigningKey"/> being used to validate the license.
            </summary>
        </member>
        <member name="P:Xheo.Licensing.ExtendedLicense.XmlString">
            <summary>
            Gets or sets the contents of the license as an XML string fragment.
            </summary>
        </member>
        <member name="P:Xheo.Licensing.ExtendedLicense.InvalidReason">
            <summary>
            Gets or sets the reason the license was not valid. If Validate returns true this is an empty string.
            </summary>
        </member>
        <member name="P:Xheo.Licensing.ExtendedLicense.LicensedType">
            <summary>
            Gets the Type the license was/will be granted to.
            </summary>
        </member>
        <member name="P:Xheo.Licensing.ExtendedLicense.IsEmbedded">
            <summary>
            Gets or sets a value that indicates if the license was loaded from an embedded
            resource rather then an external .LIC file.
            </summary>
        </member>
        <member name="P:Xheo.Licensing.ExtendedLicense.SurrogateLicensePack">
            <summary>
            Gets or sets a surrogate license pack to use if validation of this license fails.
            </summary>
            <remarks>
            	For limits that alter the current license, or download new licenses you can
            	set this property so that the new or altered license pack is used instead. When 
            	<see cref="M:Xheo.Licensing.ExtendedLicense.Validate(System.ComponentModel.LicenseContext,System.Type,System.Object,System.Boolean)"/> is called on the current license, this is initially
            	set to null. If Validate returns false, and this is not null then the
            	license pack indicated in this property, if it contains a license, is used instead. 
            	If a surrogate license pack also defines a surrogate license, it will not be checked, 
            	the license provider only checks one level deep.
            	<para>
            	Generally you shouldn't set this to a license pack containing license with 
            	with a Trial limit or GUI limit because it will interfere with the optimal license 
            	selection of the license provider.
            	</para>
            </remarks>
        </member>
        <member name="P:Xheo.Licensing.ExtendedLicense.UnlockedLicense">
            <summary>
            Gets or sets the ExtendedLicense that was unlocked by the registration process.
            </summary>
        </member>
        <member name="P:Xheo.Licensing.ExtendedLicense.IsTrial">
            <summary>
            Gets a value that indicates if the license has a trial limit.
            </summary>
        </member>
        <member name="P:Xheo.Licensing.ExtendedLicense.IsActivation">
            <summary>
            Gets a value that indicates if the license is an activateable license.
            </summary>
        </member>
        <member name="P:Xheo.Licensing.ExtendedLicense.IsActivated">
            <summary>
            Gets a value that indicates if the license has been activated.
            </summary>
        </member>
        <member name="P:Xheo.Licensing.ExtendedLicense.UsesLicenseServer">
            <summary>
            Gets a value that indicates if the license uses a License Server for validation.
            </summary>
        </member>
        <member name="P:Xheo.Licensing.ExtendedLicense.IsReadOnly">
            <summary>
            Gets a value that indicates if the current license is read only.
            </summary>
        </member>
        <member name="P:Xheo.Licensing.ExtendedLicense.IsTimeSensitive">
            <summary>
            Gets a value that indicates if the license contians time sensitive data
            and the clock should be protected.
            </summary>
        </member>
        <member name="P:Xheo.Licensing.ExtendedLicense.LocalValidated">
            <summary>
            Gets or sets the time that this license was validated locally.
            </summary>
        </member>
        <member name="P:Xheo.Licensing.ExtendedLicense.RemoteValidated">
            <summary>
            Gets or sets the time that this license was validated remotely.
            </summary>
        </member>
        <member name="P:Xheo.Licensing.ExtendedLicense.PeriodicChecks">
            <summary>
            Gets or sets the times for periodic re-validations of the license.
            </summary>
        </member>
        <member name="P:Xheo.Licensing.ExtendedLicense.IisIsAvailable">
            <summary>
            Gets a value that indicates if IIS is installed and available on the
            machine. If false then HttpContext should not be checked because it will
            throw an exception.
            </summary>
        </member>
        <member name="P:Xheo.Licensing.ExtendedLicense.IsWebRequest">
            <summary>
            Gets a value indicating if a web request/HttpContext is currently available.
            </summary>
        </member>
        <member name="P:Xheo.Licensing.ExtendedLicense.KeyFolder">
            <summary>
            Gets the folder where the license keys are located as defined in the application's
            config file.
            </summary>
            <remarks>
            	You can configure the value of this property in your application's configuration
            	file. In the appSettings section add an entry for Xheo.Licensing.KeyFolder and
            	set it to the path where keys are stored on your machine.
            </remarks>
            <example>
            <code>
            &lt;configuration&gt;
            &lt;appSettings&gt;
            	&lt;add key="Xheo.Licensing.KeyFolder" value="X:\Keys" /&gt;
            &lt;/appSettings&gt;
            
            or
            
            &lt;configSections&gt;
            	&lt;sectionGroup name="Xheo"&gt;
            		&lt;section name="Licensing" type="System.Configuration.NameValueSectionHandler, System, Version=1.0.3300.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" /&gt;
            	&lt;/sectionGroup&gt;
            &lt;/configSections&gt;
            
            &lt;Xheo&gt;
            	&lt;Licensing&gt;
            		&lt;add key="KeyFolder" value="D:\aaa" /&gt;
            	&lt;/Licensing&gt;
            &lt;/Xheo&gt;
            &lt;/configuration&gt;
            </code>
            </example>
        </member>
        <member name="P:Xheo.Licensing.ExtendedLicense.LicenseFolders">
            <summary>
            Gets a collection of folders where the licenses are located as defined in the application's
            config file.
            </summary>
            <remarks>
            	<para>
            	Use this setting when you install XHEO|Licensing or licensed components into the GAC, or
            	when using a shared install in a hosting environment.
            	</para>
            	You can configure the value of this property in your application's configuration
            	file. In the appSettings section add an entry for Xheo.Licensing.LicenseFolders and
            	set it to the path where keys are stored on your machine.
            </remarks>
            <example>
            <code>
            &lt;configuration&gt;
            &lt;appSettings&gt;
            	&lt;add key="Xheo.Licensing.LicenseFolder" value="X:\Folder1" /&gt;
            	&lt;add key="Xheo.Licensing.LicenseFolder" value="X:\Folder2" /&gt;
            &lt;/appSettings&gt;
            
            or
            
            &lt;configSections&gt;
            	&lt;sectionGroup name="Xheo"&gt;
            		&lt;section name="Licensing" type="Xheo.Licensing.Configuration.NameValueSectionHandler, System, Version=1.1.0.0, Culture=neutral, PublicKeyToken=798276055709c98a" /&gt;
            	&lt;/sectionGroup&gt;
            &lt;/configSections&gt;
            
            &lt;Xheo&gt;
            	&lt;Licensing&gt;
            		&lt;add key="LicenseFolder" value="D:\aaa" /&gt;
            		&lt;add key="LicenseFolder" value="C:\other" /&gt;
            	&lt;/Licensing&gt;
            &lt;/Xheo&gt;
            &lt;/configuration&gt;
            </code>
            </example>
        </member>
        <member name="P:Xheo.Licensing.ExtendedLicense.TemplateFolder">
            <summary>
            Gets the folder where the license templates are located as defined in the application's
            config file.
            </summary>
            <remarks>
            	You can configure the value of this property in your application's configuration
            	file. In the appSettings section add an entry for Xheo.Licensing.TemplateFolder and
            	set it to the path where keys are stored on your machine.
            </remarks>
            <example>
            <code>
            &lt;configuration&gt;
            &lt;appSettings&gt;
            	&lt;add key="Xheo.Licensing.TemplateFolder" value="X:\Templates" /&gt;
            &lt;/appSettings&gt;
            
            or
            
            &lt;configSections&gt;
            	&lt;sectionGroup name="Xheo"&gt;
            		&lt;section name="Licensing" type="System.Configuration.NameValueSectionHandler, System, Version=1.0.3300.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" /&gt;
            	&lt;/sectionGroup&gt;
            &lt;/configSections&gt;
            
            &lt;Xheo&gt;
            	&lt;Licensing&gt;
            		&lt;add key="TemplateFolder" value="D:\aaa\Templates" /&gt;
            	&lt;/Licensing&gt;
            &lt;/Xheo&gt;
            &lt;/configuration&gt;
            </code>
            </example>
        </member>
        <member name="P:Xheo.Licensing.ExtendedLicense.ConnectionString">
            <summary>
            Gets the default database connection string for licensing components.
            </summary>
            <remarks>
            	You can configure the value of this property in your application's configuration
            	file. In the appSettings section add an entry for Xheo.Licensing.ConnectionString and
            	set it to the path where keys are stored on your machine.
            </remarks>
            <example>
            <code>
            &lt;configuration&gt;
            &lt;appSettings&gt;
            	&lt;add key="Xheo.Licensing.ConnectionString" value="server=localhost;catalog=Northwind" /&gt;
            &lt;/appSettings&gt;
            
            or
            
            &lt;configSections&gt;
            	&lt;sectionGroup name="Xheo"&gt;
            		&lt;section name="Licensing" type="System.Configuration.NameValueSectionHandler, System, Version=1.0.3300.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" /&gt;
            	&lt;/sectionGroup&gt;
            &lt;/configSections&gt;
            
            &lt;Xheo&gt;
            	&lt;Licensing&gt;
            		&lt;add key="ConnectionString" value="server=localhost;catalog=Northwind" /&gt;
            	&lt;/Licensing&gt;
            &lt;/Xheo&gt;
            &lt;/configuration&gt;
            </code>
            </example>
        </member>
        <member name="P:Xheo.Licensing.ExtendedLicense.SharedFolder">
            <summary>
            Gets or sets the path to the shared license folder. 
            </summary>
            <remarks>
            	The shared license folder is a location on the client machine where all 
            	XHEO|Licensing protected applications can look for licenses. This helps
            	with shared hosting environments and large applications that may include
            	multiple assemblies, some in the GAC. Rather then having .LIC files spread
            	over the machine they can be located into a single location.
            	<para>
            	This is a machine wide setting. The value of this property should be
            	considered configured by the machine's administrator. You should not change
            	it as it will effect all installed applications protected with XHEO|Licensing.
            	</para>
            	<para>
            	The folder location by default is <code class="code">[Common Files]\Xheo\SharedLicenses</code>.
            	This can be configured per machine or per user in the registry at 
            	<code class="code">HKLM</code> or <code class="code">HKLU\Software\Xheo\Licensing\SharedLicenseFolder</code>.
            	</para>
            	See <see cref="P:Xheo.Licensing.ExtendedLicense.LicenseFolders"/> for settings you can apply to the 
            	application's config or machine.config file.
            	<seealso cref="P:Xheo.Licensing.ExtendedLicense.LicenseFolders"/>
            </remarks>
        </member>
        <member name="P:Xheo.Licensing.ExtendedLicense.Proxy">
            <summary>
            Gets the Proxy to use when connecting to a web service.
            </summary>
            <remarks>
            	In most circumstances the default proxy settings for the machine will work
            	for the user. However certain proxy configurations can cause communication 
            	problems with XHEO|Licensing. XHEO|Licensing uses the default proxy settings
            	for the machine, when alternate settings are needed you can provide them
            	in the registry at <span class="code">HKLM</span> or 
            	<span class="code">HKLU\Software\Xheo\Licensing\ProxyAddress</span>.
            	<para>
            	The value of the Proxy value in the registry should be the address of the
            	proxy setting to use. If the value does not exist, XHEO|Licensing will use
            	the machine's default settings. If it does exist they will override the
            	machines settings. If the value exists, but is an empty string then no proxy
            	will be used even if the machine defines one.
            	</para>
            	<para>
            	To supply proxy credentials add ProxyUsername and ProxyPassword values to the
            	same key.
            	</para>
            	<para>
            	<blockquote class="dtBLOCK"><b>Note</b>This is a machine wide setting. Care should be taken not to overwrite any
            	existing settings when not necessary.</blockquote></para> 
            	<para>
            	You can also configure the value of this property in your application's configuration
            	file. In the appSettings section add an entry for Xheo.Licensing.ProxyAddress and
            	set it to the address of the proxy server. You can specify a username and 
            	password by using Xheo.Licensing.ProxyUsername and Xheo.Licensing.ProxyPassword.
            	</para>
            	<para>
            	If you specify settings in the registry and the config file, the settings in
            	the config file will be used.
            	</para>
            </remarks>
            <example>
            <code>
            &lt;configuration&gt;
            &lt;appSettings&gt;
            	&lt;add key="Xheo.Licensing.ProxyAddress" value="http://proxy:8080" /&gt;
            &lt;/appSettings&gt;
            
            or
            
            &lt;configSections&gt;
            	&lt;sectionGroup name="Xheo"&gt;
            		&lt;section name="Licensing" type="System.Configuration.NameValueSectionHandler, System, Version=1.0.3300.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" /&gt;
            	&lt;/sectionGroup&gt;
            &lt;/configSections&gt;
            
            &lt;Xheo&gt;
            	&lt;Licensing&gt;
            		&lt;add key="ProxyAddress" value="http://proxy:8080" /&gt;
            		&lt;add key="ProxyUsername" value="user" /&gt;
            		&lt;add key="ProxyPassword" value="password" /&gt;
            	&lt;/Licensing&gt;
            &lt;/Xheo&gt;
            &lt;/configuration&gt;
            </code>
            </example>
        </member>
        <member name="P:Xheo.Licensing.ExtendedLicense.IsTerminalServices">
            <summary>
            Gets a value that indicates if the current session is running under terminal services.
            </summary>
            <value></value>
        </member>
        <member name="P:Xheo.Licensing.ExtendedLicense.DisableTrials">
            <summary>
            Gets a value that indicates if trial licenses are disabled. 
            </summary>
            <remarks>
            	You can configure the value of this property in your application's configuration
            	file. In the appSettings section add an entry for Xheo.Licensing.DisableTrials and
            	set it to either true or false.
            </remarks>
            <example>
            <code>
            &lt;configuration&gt;
            &lt;appSettings&gt;
            	&lt;add key="Xheo.Licensing.DisableTrials" value="true" /&gt;
            &lt;/appSettings&gt;
            
            or
            
            &lt;configSections&gt;
            	&lt;sectionGroup name="Xheo"&gt;
            		&lt;section name="Licensing" type="System.Configuration.NameValueSectionHandler, System, Version=1.0.3300.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" /&gt;
            	&lt;/sectionGroup&gt;
            &lt;/configSections&gt;
            
            &lt;Xheo&gt;
            	&lt;Licensing&gt;
            		&lt;add key="DisableTrials" value="true" /&gt;
            	&lt;/Licensing&gt;
            &lt;/Xheo&gt;
            &lt;/configuration&gt;
            </code>
            </example>
        </member>
        <member name="P:Xheo.Licensing.ExtendedLicense.EmulateVersion">
            <summary>
            Gets a value that determines the release version that XHEO|Licensing should
            emulate.
            </summary>
            <remarks>
            	<para>
            	Use this value when migrating a solution from an earlier version to a 
            	newer one so that licenses generated with the new assembly will use the 
            	previous version until you have fully upgraded all dependent assemblies.
            	</para>
            	<para>
            	You can configure the value of this property in your application's configuration
            	file. In the appSettings section add an entry for Xheo.Licensing.EmulateVersion and
            	set it to either true or false.
            	</para>
            </remarks>
            <example>
            <code>
            &lt;configuration&gt;
            &lt;appSettings&gt;
            	&lt;add key="Xheo.Licensing.EmulateVersion" value="1.1" /&gt;
            &lt;/appSettings&gt;
            
            or
            
            &lt;configSections&gt;
            	&lt;sectionGroup name="Xheo"&gt;
            		&lt;section name="Licensing" type="System.Configuration.NameValueSectionHandler, System, Version=1.0.3300.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" /&gt;
            	&lt;/sectionGroup&gt;
            &lt;/configSections&gt;
            
            &lt;Xheo&gt;
            	&lt;Licensing&gt;
            		&lt;add key="EmulateVersion" value="1.1" /&gt;
            	&lt;/Licensing&gt;
            &lt;/Xheo&gt;
            &lt;/configuration&gt;
            </code>
            </example>
        </member>
        <member name="P:Xheo.Licensing.ExtendedLicense.Config">
            <summary>
            Gets the ConfigReadWriter for XHEO|Licensing configuration settings.
            <seealso cref="F:Xheo.Licensing.ExtendedLicense.ConfigSection"/>
            </summary>
        </member>
        <member name="T:Xheo.Licensing.LicenseValuesCollection">
            <summary>
            Maintains a collection of name value pairs. The collection can be serialized
            and marked as read only.
            </summary>
        </member>
        <member name="M:Xheo.Licensing.LicenseValuesCollection.#ctor">
            <summary>
            Initializes a new instance of the LicenseValuesCollection class.
            </summary>
        </member>
        <member name="M:Xheo.Licensing.LicenseValuesCollection.SetReadOnly">
            <summary>
            Summary of SetReadOnly.
            </summary>
        </member>
        <member name="M:Xheo.Licensing.LicenseValuesCollection.SaveToXml(System.Xml.XmlNode)">
            <summary>
            Saves the contents of the collection to the parent XmlNode.
            </summary>
            <param name="parentNode">
            	The XmlNode to save the collection to.
            </param>
            <returns>
            	Returns the root node of the saved collection.
            </returns>
        </member>
        <member name="M:Xheo.Licensing.LicenseValuesCollection.LoadFromXml(System.Xml.XmlNode)">
            <summary>
            Loades the contents of the collection from the XmlNode.
            </summary>
            <param name="parentNode">
            	The root XmlNode containing the collection. 
            </param>
        </member>
        <member name="M:Xheo.Licensing.LicenseValuesCollection.ToXmlString">
            <summary>
            Converts the collection to an XML string representation.
            </summary>
            <returns>
            	Returns the collection as an XML document string.
            </returns>
        </member>
        <member name="M:Xheo.Licensing.LicenseValuesCollection.FromXmlString(System.String)">
            <summary>
            Loads the values from an XML string.
            </summary>
            <param name="xml">
            	The XML document string containing the values collection.
            </param>
        </member>
        <member name="M:Xheo.Licensing.LicenseValuesCollection.Add(System.String)">
            <summary>
            Included for serialization compatability, do not use.
            </summary>
        </member>
        <member name="M:Xheo.Licensing.LicenseValuesCollection.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Implements <see cref="M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)"/>.
            </summary>
        </member>
        <member name="M:Xheo.Licensing.LicenseValuesCollection.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Deserializes a license that was previously serialzed. Used by the
            .NET framework when marshalling an object between AppDomains.
            </summary>
        </member>
        <member name="T:Xheo.Licensing.ExternalActivationServer.XheoLicensingActivationServer">
            <remarks/>
        </member>
        <member name="F:Xheo.Licensing.ExternalActivationServer.XheoLicensingActivationServer.LicenseCultureSoapHeaderValue">
            <summary>
            
            </summary>
        </member>
        <member name="M:Xheo.Licensing.ExternalActivationServer.XheoLicensingActivationServer.#ctor">
            <remarks/>
        </member>
        <member name="M:Xheo.Licensing.ExternalActivationServer.XheoLicensingActivationServer.Activate(System.String,System.String,System.String)">
            <remarks/>
        </member>
        <member name="M:Xheo.Licensing.ExternalActivationServer.XheoLicensingActivationServer.BeginActivate(System.String,System.String,System.String,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:Xheo.Licensing.ExternalActivationServer.XheoLicensingActivationServer.EndActivate(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="T:Xheo.Licensing.ExternalActivationServer.LicenseCultureSoapHeader">
            <remarks/>
        </member>
        <member name="F:Xheo.Licensing.ExternalActivationServer.LicenseCultureSoapHeader.CultureName">
            <remarks/>
        </member>
        <member name="T:Telogis.GeoBase.GpcWrapper">
            <summary>
            Summary description for GpcWrapper2.
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.Repositories.RepositoryDiscoverer">
            <summary>
            This class is for internal Telogis use only.
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.Repositories.RepositoryDiscoverer.#ctor">
            <summary>
            Constructs a new, empty RepositoryDiscoverer.
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.Repositories.RepositoryDiscoverer.#ctor(System.Net.IPAddress,System.Int32)">
            <summary>
            Creates a new RepositoryDiscoverer using an IP address and UDP port number as inputs.
            </summary>
            <param name="ipAddress"></param>
            <param name="udpPort"></param>
        </member>
        <member name="M:Telogis.GeoBase.Repositories.RepositoryDiscoverer.ListCountries">
            <summary>
            Returns a list of all available countries on the data server.
            </summary>
            <returns>An array of all available countries.</returns>
        </member>
        <member name="M:Telogis.GeoBase.Repositories.RepositoryDiscoverer.ListVendors">
            <summary>
            Returns a list of all available vendors on the data server.
            </summary>
            <returns>An array of vendor names for all available vendors.</returns>
        </member>
        <member name="M:Telogis.GeoBase.Repositories.RepositoryDiscoverer.FindGlobal(System.String)">
            <summary>
            Locate data source for the given vendor.
            </summary>
            <param name="vendor">The data vendor.</param>
            <returns></returns>
        </member>
        <member name="M:Telogis.GeoBase.Repositories.RepositoryDiscoverer.FindGlobal">
            <summary>
            Returns a list of all local repositories on the data server.
            </summary>
            <returns>An array of all local repositories.</returns>
        </member>
        <member name="M:Telogis.GeoBase.Repositories.RepositoryDiscoverer.FindData(Telogis.GeoBase.Country,System.String)">
            <summary>
            Locate country-specific data source for the given country and vendor.
            </summary>
            <param name="country">The country of the data.</param>
            <param name="vendor">The data vendor.</param>
            <returns>An array of local repositories supplied by the vendor for the specified country.</returns>
        </member>
        <member name="M:Telogis.GeoBase.Repositories.RepositoryDiscoverer.FindData(Telogis.GeoBase.Country)">
            <summary>
            Locate country-specific data source for the given country.
            </summary>
            <param name="country">The country of the data.</param>
            <returns>An array of local repositories that support the specified country.</returns>
        </member>
        <member name="M:Telogis.GeoBase.Repositories.RepositoryDiscoverer.FindData(System.String)">
            <summary>
            Locate data sources from a specified vendor.
            </summary>
            <param name="vendor">The data vendor.</param>
            <returns>An array of local repositories supplied by the vendor.</returns>
        </member>
        <member name="M:Telogis.GeoBase.Repositories.RepositoryDiscoverer.DiscoverServer">
            <summary>
            Locates a data server.
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.Repositories.RepositoryDiscoverer.GetUdpClients">
            <summary>
            Returns a list of UdpClients to use for sending multicast packets to try and find a
            data server.
            </summary>
            <returns>A list of UdpClients.</returns>
        </member>
        <member name="T:Telogis.GeoBase.Routing.ReachableArea.ReachableArea">
            <summary>
            A class to calculate all links that can be reached within a given time or distance limit.
            </summary>
            <remarks>
            Create instances of this class by calling the static <see cref="M:Telogis.GeoBase.Routing.ReachableArea.ReachableArea.WithinTimeSpan(Telogis.GeoBase.LatLon,System.TimeSpan,Telogis.GeoBase.Routing.RoutingStrategy)"/> or
            <see cref="M:Telogis.GeoBase.Routing.ReachableArea.ReachableArea.WithinDistance(Telogis.GeoBase.LatLon,System.Double,Telogis.GeoBase.DistanceUnit,Telogis.GeoBase.Routing.RoutingStrategy)"/> method. Once you have an instance,
            call the <see cref="M:Telogis.GeoBase.Routing.ReachableArea.ReachableArea.ComputeConvexPolygon"/>, 
            <see cref="M:Telogis.GeoBase.Routing.ReachableArea.ReachableArea.ComputeConcavePolygon"/>, or <see cref="M:Telogis.GeoBase.Routing.ReachableArea.ReachableArea.ComputeStreetLinks"/>
            method to determine the boundaries of the reachable area.
            </remarks>
        </member>
        <member name="M:Telogis.GeoBase.Routing.ReachableArea.ReachableArea.ComputeConvexPolygon">
            <summary>
            Computes the smallest convex polygon which contains every reachable link.
            </summary>
            <returns>A PolygonFence representing the convex polygon</returns>
        </member>
        <member name="M:Telogis.GeoBase.Routing.ReachableArea.ReachableArea.Dispose">
            <summary>
            Dispose the ReachableArea.
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.Routing.ReachableArea.ReachableArea.ComputeConvexPolygon(Telogis.GeoBase.Routing.ReachableArea.ReachableAreaProgress)">
            <summary>
            Computes the smallest convex polygon which contains every reachable link.
            </summary>
            <param name="progress">Delegate that will be called as progress is made on the
            computation.</param>
            <returns>A PolygonFence representing the convex polygon</returns>
        </member>
        <member name="M:Telogis.GeoBase.Routing.ReachableArea.ReachableArea.ComputeConcavePolygon">
            <summary>
            Computes the smallest concave polygon which contains every reachable link.
            </summary>
            <returns>A PolygonFence representing the concave polygon</returns>
        </member>
        <member name="M:Telogis.GeoBase.Routing.ReachableArea.ReachableArea.ComputeConcavePolygon(Telogis.GeoBase.Routing.ReachableArea.ReachableAreaProgress)">
            <summary>
            Computes the smallest concave polygon which contains every reachable link.
            </summary>
            <param name="progress">Delegate that will be called as progress is made on the
            computation.</param>
            <returns>A PolygonFence representing the concave polygon</returns>
        </member>
        <member name="M:Telogis.GeoBase.Routing.ReachableArea.ReachableArea.WithinTimeSpan(Telogis.GeoBase.LatLon,System.TimeSpan,Telogis.GeoBase.Routing.RoutingStrategy)">
            <summary>
            Computes the reachable area within a given time. 
            </summary>
            <param name="start">The location to start from.</param>
            <param name="maxTime">The maximum travel time from <paramref name="start"/>.</param>
            <param name="strategy">The strategy used to conduct the routing algorithm.</param>
        </member>
        <member name="M:Telogis.GeoBase.Routing.ReachableArea.ReachableArea.WithinDistance(Telogis.GeoBase.LatLon,System.Double,Telogis.GeoBase.DistanceUnit,Telogis.GeoBase.Routing.RoutingStrategy)">
            <summary>
            Computes the reachable area within a given distance. 
            </summary>
            <param name="start">The location to start from.</param>
            <param name="maxDistance">The maximum travel distance from <paramref name="start"/>.</param>
            <param name="unit">The unit <paramref name="maxDistance"/> is given in.</param>
            <param name="strategy">The strategy used to conduct the routing algorithm.</param>
        </member>
        <member name="M:Telogis.GeoBase.Routing.ReachableArea.ReachableArea.ComputeStreetLinks">
            <summary>
            Create a collection of all reachable streets links
            </summary>
            <returns>A GeoFenceCollection containing every reachable street link</returns>
        </member>
        <member name="M:Telogis.GeoBase.Routing.ReachableArea.ReachableArea.ComputeStreetLinks(Telogis.GeoBase.Routing.ReachableArea.ReachableAreaProgress)">
            <summary>
            Create a collection of all reachable streets links
            </summary>
            <param name="progress">Delegate that will be called as progress is made on the
            computation.</param>
            <returns>A GeoFenceCollection containing every reachable street link</returns>
        </member>
        <member name="T:Telogis.GeoBase.Routing.ReachableArea.ReachableAreaProgress">
            <summary>
            A delegate that is called as progress is made on the polygon computations of a <see cref="T:Telogis.GeoBase.Routing.ReachableArea.ReachableArea"/>.
            </summary>
            <param name="percentComplete">An approximate indication of the percentage of the
            computation that is complete, from 0 - 100.</param>
        </member>
        <member name="T:Telogis.GeoBase.Ram">
            <summary>
            This class represents your application's memory space and provides operations for
            manipulating its memory usage.
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.Ram.FreeUnusedPages">
            <summary>
            GeoBase typically holds onto memory it has already allocated so that it does
            not have to go through the process of re-allocating the memory again during future
            operations. A call to FreeUnusedPages will return any memory GeoBase doesn't currently
            need to the OS.
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.Ram.GetAllocatorInfo">
            <summary>
            Returns an array of information about all memory allocated for this application.
            </summary>
            <returns>An array of AllocatorInfo objects, where each object 
            describes the memory allocated for a different use.</returns>
            <remarks>This method is for internal use only.</remarks>
        </member>
        <member name="T:Telogis.GeoBase.Internationalization.MessagesBundle">
            <summary>
            Provides access to messages (for example strings and announcements) for a single culture.
            This class is abstract and has concrete subclasses that vary according to how the messages
            are configured, for example from an XML string or from an XML file in a directory on disk.
            By referencing instances of this abstract class rather than the concrete subclasses, the
            same code can access messages regardless of how they are configured.
            </summary>
            <remarks>
            <para><b>Related articles</b>: <a href="b60eb5b5-243d-455a-b8ac-bd33b46e510e.htm">Using Languages and Cultures</a>, 
            <a href="b41e0220-8487-43da-903b-b8238f5ee7d3.htm">Accessing Messages</a>.</para>
            </remarks>
        </member>
        <member name="F:Telogis.GeoBase.Internationalization.MessagesBundle.xmlSource">
            <summary>
            Source of the XML containing this bundle's configuration.  Used in Exception strings.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Internationalization.MessagesBundle.debugMode">
            <summary>
            Whether this bundle is running in debug mode, in which case
            MessagesBundleExceptions will be thrown.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Internationalization.MessagesBundle.messageTypes">
            <summary>
            The message types in this bundle.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Internationalization.MessagesBundle.loadXmlCalled">
            <summary>
            Whether LoadXML() has been called. This is just used to assert that the method
            only gets called once.
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.Internationalization.MessagesBundle.Error(System.String)">
            <summary>
            Handle a configuration error.  If running in debug mode an
            MessagesBundleException will be raised, otherwise execution will continue.
            </summary>
            <param name="msg"></param>
        </member>
        <member name="M:Telogis.GeoBase.Internationalization.MessagesBundle.LoadXML(System.Xml.XmlDocument)">
            <summary>
            Load an XML configuration document.
            </summary>
            <param name="langDoc">The XML configuration document.</param>
        </member>
        <member name="M:Telogis.GeoBase.Internationalization.MessagesBundle.GetString(System.String,System.String,System.Object)">
            <summary>
            Generate a phrase string from a Phrase tag within a Phrases node.
            </summary>
            <param name="type">The name of the node directly below the Lang node and containing
            the Phrases node.</param>
            <param name="phrase">The ID of the Phrase tag.</param>
            <param name="obj">The object whose fields and properties will be used to populate the
            phrase parameters.</param>
            <returns>The phrase string.</returns>
        </member>
        <member name="M:Telogis.GeoBase.Internationalization.MessagesBundle.GetPhraseString(System.Collections.Generic.Dictionary{System.String,Telogis.GeoBase.Internationalization.MessagesBundle.Group},Telogis.GeoBase.Internationalization.MessagesBundle.Group,System.Xml.XmlNode,System.Object,System.Text.RegularExpressions.Match)">
            <summary>
            Generate a phrase string from a general tag.
            </summary>
            <param name="groups">Groups for the requested message type.</param>
            <param name="group">Group that the phrase lies in.</param>
            <param name="node">XML node for the phrase.</param>
            <param name="obj">The object whose fields and properties will be used to populate the
            phrase parameters.</param>
            <param name="match">Match object, used for nodes within a Regexp node.</param>
            <returns>The phrase string.</returns>
        </member>
        <member name="M:Telogis.GeoBase.Internationalization.MessagesBundle.SelectGroup(System.Collections.Generic.Dictionary{System.String,Telogis.GeoBase.Internationalization.MessagesBundle.Group},System.Xml.XmlAttribute,System.Type)">
            <summary>
            Select the group that should be looked up to describe an object.
            </summary>
            <param name="groups">Groups for the message type being looked up.</param>
            <param name="nameAttr">Group name attribute, used to distinguish between different
            groups describing the same type object, null otherwise.</param>
            <param name="objType">Type of object that is being described.</param>
            <returns>The group.</returns>
        </member>
        <member name="M:Telogis.GeoBase.Internationalization.MessagesBundle.GetGroupString(System.Collections.Generic.Dictionary{System.String,Telogis.GeoBase.Internationalization.MessagesBundle.Group},Telogis.GeoBase.Internationalization.MessagesBundle.Group,System.Object)">
            <summary>
            Lookup a value in a group to produce a string describing that value.
            </summary>
            <param name="groups">Groups for the message type being looked up.</param>
            <param name="group">Group to look the value up in.</param>
            <param name="value">Value to look up.</param>
            <returns>String describing the value.</returns>
        </member>
        <member name="M:Telogis.GeoBase.Internationalization.MessagesBundle.GetObjectAsString(System.Object)">
            <summary>
            Convert an object into a string in a culturally invariant manner.
            </summary>
            <param name="value">Value to convert.</param>
            <returns>Value as a string.</returns>
        </member>
        <member name="M:Telogis.GeoBase.Internationalization.MessagesBundle.GetDigitexpString(System.Collections.Generic.Dictionary{System.String,Telogis.GeoBase.Internationalization.MessagesBundle.Group},Telogis.GeoBase.Internationalization.MessagesBundle.Group,System.String)">
            <summary>
            Lookup a value in a Digitexp group.
            </summary>
            <param name="groups">Groups for the message type being looked up.</param>
            <param name="group">The Digitexp group.</param>
            <param name="value">The value to lookup.</param>
            <returns>String describing the value.</returns>
        </member>
        <member name="M:Telogis.GeoBase.Internationalization.MessagesBundle.GetLetters(System.String)">
            <summary>
            Split a string into individual letters.
            </summary>
            <param name="value">The string to split.</param>
            <returns>The individual letters separated by spaces.</returns>
        </member>
        <member name="M:Telogis.GeoBase.Internationalization.MessagesBundle.GetRegexpString(System.Collections.Generic.Dictionary{System.String,Telogis.GeoBase.Internationalization.MessagesBundle.Group},Telogis.GeoBase.Internationalization.MessagesBundle.Group,System.Object)">
            <summary>
            Lookup a value in a Regexp group.
            </summary>
            <param name="groups">Groups for the message type being looked up.</param>
            <param name="group">The Regexp group.</param>
            <param name="obj">The value to lookup.</param>
            <returns>String describing the value.</returns>
        </member>
        <member name="M:Telogis.GeoBase.Internationalization.MessagesBundle.GetTypeValue(System.Object,System.String,System.Type@,System.Object@)">
            <summary>
            Get the type and value of a field or property on an object.
            </summary>
            <param name="obj">The object in question.</param>
            <param name="varName">Name of the field or property.  May contain "."s in which case
            each field or property will be looked up recursively.</param>
            <param name="varType">Set to the field or property type.</param>
            <param name="value">Set to the field or property value.</param>
        </member>
        <member name="M:Telogis.GeoBase.Internationalization.MessagesBundle.loadGroups(System.Collections.Generic.Dictionary{System.String,Telogis.GeoBase.Internationalization.MessagesBundle.Group},System.Xml.XmlDocument,System.String)">
            <summary>
            Load the groups in an XML document.
            </summary>
            <param name="groups">Groups for the message type being looked up.</param>
            <param name="langDoc">The XML document.</param>
            <param name="xpath">Xpath specifying the groups to load.</param>
        </member>
        <member name="M:Telogis.GeoBase.Internationalization.MessagesBundle.ListAllFiles">
            <summary>
            List all the Announcements files in the bundle.
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.Internationalization.MessagesBundle.LeaveNode(System.String)">
            <summary>
            Used to build the path - called when leaving a node
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Internationalization.MessagesBundle.LogMessagePaths">
            <summary>
            Whether this bundle should log each of the XML paths it traverses to build
            each message
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Internationalization.MessagesBundle.CultureDescription">
            <summary>
            Gets the description for the culture of this message bundle
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Internationalization.MessagesBundle.CultureID">
            <summary>
            Gets the IetfLanguageTag for the culture of this message bundle
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.Internationalization.MessagesBundle.Group">
            <summary>
            Represents a group of XML nodes.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Internationalization.MessagesBundle.Group.Values">
            <summary>
            All the nodes in the group.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Internationalization.MessagesBundle.Group.ValuesById">
            <summary>
            Nodes that have an Id, keyed by Id.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Internationalization.MessagesBundle.Group.ValuesByPattern">
            <summary>
            Nodes that have a Pattern, keyed by Pattern.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Internationalization.MessagesBundle.Group.Name">
            <summary>
            Group name.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Internationalization.MessagesBundle.Group.Type">
            <summary>
            Type that the group describes.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Internationalization.MessagesBundle.Group.From">
            <summary>
            The From attribute of the group.
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.Internationalization.MessagesBundle.Group.#ctor(System.String,System.String,System.String)">
            <summary>
            Create a group with the given name and type.
            </summary>
            <param name="name">Group name.</param>
            <param name="type">Type that the group describes.</param>
            <param name="from"></param>
        </member>
        <member name="F:Telogis.GeoBase.Internationalization.MessagesBundle.MessageType.groups">
            <summary>
            The groups for this message type.
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.Internationalization.DirectoryMessagesBundle">
            <summary>
            A messages bundle that provides access to internationalized messages (for example strings
            and announcements) for a single culture.  The messages for the culture are obtained from an
            XML file in a directory, allowing other resources (for example announcement sound files) to
            be obtained from the same directory.
            </summary>
            <remarks><para><b>Related articles</b>: <a href="b60eb5b5-243d-455a-b8ac-bd33b46e510e.htm">Using Languages and Cultures</a>, 
            <a href="b41e0220-8487-43da-903b-b8238f5ee7d3.htm">Accessing Messages</a>.</para></remarks>
        </member>
        <member name="F:Telogis.GeoBase.Internationalization.DirectoryMessagesBundle.subDir">
            <summary>
            The path to the directory containing the configuration for this bundle.
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.Internationalization.DirectoryMessagesBundle.GetAvailableCultures(System.String,System.String)">
            <summary>
            Get a Dictionary containing details of the available cultures.  The keys in the
            Dictionary are the formal names of the cultures, for example "en-US".  The values in
            the dictionary are their descriptions, for example "US English".
            </summary>
            <param name="rootPath">Root path containing directories for different cultures.</param>
            <param name="bundleFilename">Name of the XML file containing the configuration for a
            culture and placed within that culture's subdirectory.</param>
            <returns>Dictionary containing details of the available cultures.</returns>
        </member>
        <member name="M:Telogis.GeoBase.Internationalization.DirectoryMessagesBundle.GetDefaultCulture(System.String,System.String)">
            <summary>
            Get the full name of the default culture.
            </summary>
            <param name="rootPath">Root path containing directories for different cultures.</param>
            <param name="bundleFilename">Name of the XML file containing the configuration for a
            culture and placed within that culture's subdirectory.</param>
            <returns>The full name of the default culture, for example "en-US".</returns>
        </member>
        <member name="M:Telogis.GeoBase.Internationalization.DirectoryMessagesBundle.#ctor(System.String,System.String,System.Globalization.CultureInfo,System.Boolean)">
            <summary>
            Provides access to messages that are appropriate for the supplied culture.
            Bundles for different cultures are specified in separate directories beneath the
            supplied root path.
            </summary>
            <param name="rootPath">Root path containing directories for different cultures.</param>
            <param name="bundleFilename">Name of the XML file containing the configuration for a
            culture and placed within that culture's subdirectory.</param>
            <param name="culture">The bundle's culture.</param>
            <param name="debugMode">Whether debug mode will be used when generating strings.  If
            true then <see cref="T:Telogis.GeoBase.Exceptions.MessagesBundleException"/>s will be thrown when errors are
            encountered.  If false then when errors are encountered strings will be generated on a
            best effort basis and no <see cref="T:Telogis.GeoBase.Exceptions.MessagesBundleException"/>s
            will be thrown.</param>
        </member>
        <member name="M:Telogis.GeoBase.Internationalization.DirectoryMessagesBundle.#ctor(System.String,System.String,System.String,System.Boolean)">
            <summary>
            Provides access to messages that are appropriate for the supplied culture.
            Bundles for different cultures are specified in separate directories beneath the
            supplied root path.
            </summary>
            <param name="rootPath">Root path containing directories for different cultures.</param>
            <param name="bundleFilename">Name of the XML file containing the configuration for a
            culture and placed within that culture's subdirectory.</param>
            <param name="cultureId">The bundle's cultureId, e.g. "en-US".</param>
            <param name="debugMode">Whether debug mode will be used when generating strings.  If
            true then <see cref="T:Telogis.GeoBase.Exceptions.MessagesBundleException"/>s will be thrown when errors are
            encountered.  If false then when errors are encountered strings will be generated on a
            best effort basis and no <see cref="T:Telogis.GeoBase.Exceptions.MessagesBundleException"/>s
            will be thrown.</param>
        </member>
        <member name="M:Telogis.GeoBase.Internationalization.DirectoryMessagesBundle.GetSubDir(System.String,System.String,System.String)">
            <summary>
            Get the langs subdirectory containing wav files and configuration for the specified
            culture.  Falls back to defaults if required, for example culture "en-US" may return
            a directory containing files for "en-US", "en" or blank (the default culture),
            whichever is most specific.
            </summary>
            <param name="rootPath"></param>
            <param name="bundleFilename"></param>
            <param name="cultureId"></param>
            <returns>Path to the subdirectory, null if unavailable.</returns>
        </member>
        <member name="P:Telogis.GeoBase.Internationalization.DirectoryMessagesBundle.Directory">
            <summary>
            The path to the directory containing the configuration for this bundle.
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.Internationalization.StringMessagesBundle">
            <summary>
            A messages bundle that provides access to internationalized messages (for example strings
            and announcements) for a single culture.  The messages and associated resources for
            the culture are obtained from an XML string.
            </summary>
            <remarks><para><b>Related articles</b>: <a href="b60eb5b5-243d-455a-b8ac-bd33b46e510e.htm">Using Languages and Cultures</a>, 
            <a href="b41e0220-8487-43da-903b-b8238f5ee7d3.htm">Accessing Messages</a>.</para>
            </remarks>
        </member>
        <member name="M:Telogis.GeoBase.Internationalization.StringMessagesBundle.#ctor(System.String)">
            <summary>
            Create a MessagesBundle with messages configured in the supplied XML string. The
            string must be encoded in either ASCII or UTF8 format.
            </summary>
            <param name="XmlString">XML configuration for the bundle, in either ASCII or UTF8
            format.</param>
        </member>
        <member name="T:Telogis.GeoBase.Internal.UnobfuscatedAttribute">
            <summary>
            Marks a class, struct, method, property or field as unobfuscated so
            the obfuscator won't obfuscate it
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.Internal.MakeNativeEnum">
            <summary>
            Marks an enum so that StructReflector will generate a native version to compile alongside
            geobase.dll.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Internal.MakeNativeEnum.headerName">
            <summary>
            The name of the header file to output this to. If this is null, 
            then the name of the enum is used.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Internal.MakeNativeEnum.enumName">
            <summary>
            The name of the enum. If this is null, then the name of the 
            managed enum is used.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Internal.MakeNativeEnum.prefixName">
            <summary>
            The prefix to use for each member in the enum. If this is null,
            the name of the enum followed by an underscore is used.
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.Internal.MakeNativeStruct">
            <summary>
            Marks a struct so that StructReflector will generate a native version to compile alongside
            geobase.dll.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Internal.MakeNativeStruct.headerName">
            <summary>
            The name of the header file to output this to. If this is null, 
            then the name of the struct is used.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Internal.MakeNativeStruct.structName">
            <summary>
            The name of the enum. If this is null, then the name of the 
            managed enum is used.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Internal.MakeNativeStruct.cName">
            <summary>
            The C struct name for a C-style struct declaration
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Internal.MakeNativeStruct.pack">
            <summary>
            The #pragma pack value to use in the native code.
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.Internal.CustomNativeName">
            <summary>
            Marks an field so that StructReflector will use a custom name in output managed code.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Internal.CustomNativeName.name">
            <summary>
            The name to use instead of the default
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Internal.CustomNativeName.type">
            <summary>
            The type to use instead of the default
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Internal.CustomNativeName.keepPrefix">
            <summary>
            Whether the defaul prefix should still be appended
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.Internal.CustomNativeType">
            <summary>
            Marks an field so that StructReflector will use a custom type in output managed code.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Internal.CustomNativeType.type">
            <summary>
            The type to use instead of the default
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.Internal.CustomNativeArray">
            <summary>
            Marks an field so that StructReflector will use a custom type in output managed code.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Internal.CustomNativeArray.type">
            <summary>
            The type to use instead of the default
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.GeoStream.AsyncTileFetcher">
            <summary>
            Summary description for AsyncTileFetcher.
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.Concurrency.Deferred">
            <summary>
            An object to wait for the status of a one time operation.
            The typical usage pattern is:
            <code lang="C#">
            class DirectionsCalculator {
            	private Directions directions;
            	private AsyncEvent readyEvent = new AsyncEvent();
            
            	public DirectionsCalculator(Route route) {
            		Thread thread = new Thread(() => {
            			directions = route.GetDirections();
            			readyEvent.Set();
            		});
            		thread.Start();
            	}
            
            	public IAsyncResult GetDirections(AsyncCallback callback, object state) {
            		return readyEvent.BeginWait(callback, state);
            	}
            
            	public Directions EndGetDirections(IAsyncResult result) {
            		readyEvent.EndWait(result);
            		return directions;
            	}
            }
            </code>
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.Concurrency.Deferred.#ctor">
            <summary>
            Creates an AsyncEvent.
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.Concurrency.Deferred.BeginWait(System.AsyncCallback,System.Object)">
            <summary>
            Waits asynchronously for the event to complete.
            </summary>
            <param name="callback">A callback to be called when the event completes.</param>
            <param name="state">A user provided state object.</param>
            <returns>A handle for the asynchronous action.</returns>
        </member>
        <member name="M:Telogis.GeoBase.Concurrency.Deferred.EndWait(System.IAsyncResult)">
            <summary>
            Blocks until the event occurs.
            Returns immediately if the event has already occurred.
            </summary>
            <param name="res">A result object as returned by BeginWait.</param>
        </member>
        <member name="M:Telogis.GeoBase.Concurrency.Deferred.Wait">
            <summary>
            Blocks until the event occurs.
            Returns immediately if the event has already occurred.
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.Concurrency.Deferred.Defer(Telogis.GeoBase.Concurrency.Deferred.DeferredAction)">
            <summary>
            Invokes an action when the event occurs.
            If the event has already occured action is invoked synchronously.
            </summary>
            <param name="action">Called when the event occurs.</param>
        </member>
        <member name="M:Telogis.GeoBase.Concurrency.Deferred.Defer(Telogis.GeoBase.Concurrency.Deferred.ExceptionHandler,Telogis.GeoBase.Concurrency.Deferred.DeferredAction)">
            <summary>
            Invokes an action when the event occurs.
            If the event has already occured action is invoked synchronously.
            </summary>
            <param name="onException">Called when an exception occurs inside action.</param>
            <param name="action">Called when the event occurs.</param>
        </member>
        <member name="M:Telogis.GeoBase.Concurrency.Deferred.DeferAlways(Telogis.GeoBase.Concurrency.Deferred.DeferredAction)">
            <summary>
            Invokes an action once when the event reoccurs.
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.Concurrency.Deferred.DeferAlways(Telogis.GeoBase.Concurrency.Deferred.ExceptionHandler,Telogis.GeoBase.Concurrency.Deferred.DeferredAction)">
            <summary>
            Invokes an action once when the event reoccurs.
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.Concurrency.Deferred.Set">
            <summary>
            Raises the event and synchronously invokes all waiting callbacks.
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.Concurrency.Deferred.DeferredAction">
            <summary>
            An arbitrary action.
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.Concurrency.AsyncResult`1">
            <summary>
            An object to track the status of an operation that may be performed either synchronously
            or asynchronously.  The typical pattern of usage is:
            <code lang="C#">
            public IAsyncResult BeginOperation(AsyncCallback userCallback, object userState) {
            	AsyncResult&lt;T&gt; result = new AsyncResult&lt;T&gt;(userCallback, userState);
            	// Call result.SetResult if the operation can be done synchronously.
            	// Otherwise start a thread or similar to perform the operation.
            	result.EndSynchronous();
            	return result;
            }
            
            public T EndOperation(IAsyncResult result) {
            	return ((AsyncResult&lt;T&gt;)result).Result;
            }
            </code>
            </summary>
            <typeparam name="T">The type of object that will be returned by the operation.</typeparam>
        </member>
        <member name="M:Telogis.GeoBase.Concurrency.AsyncResult`1.#ctor(System.AsyncCallback,System.Object)">
            <summary>
            Sets up an AsyncResult for an asynchronous operation.
            </summary>
            <param name="callback">Callback that will be called once the result is
            obtained.</param>
            <param name="state">User object that is associated with the operation.</param>
        </member>
        <member name="M:Telogis.GeoBase.Concurrency.AsyncResult`1.#ctor(System.AsyncCallback,System.Object,`0)">
            <summary>
            Sets up an AsyncResult for an operation that could have been asynchronous but in fact
            has already been performed synchronously.
            </summary>
            <param name="callback">Callback that will be called immediately.</param>
            <param name="state">User object that is associated with the operation.</param>
            <param name="result">The result of the operation.</param>
        </member>
        <member name="M:Telogis.GeoBase.Concurrency.AsyncResult`1.Begin(System.AsyncCallback,System.Object,Telogis.GeoBase.Concurrency.AsyncResult{`0}.AsyncActionDelegate)">
            <summary>
            Called at the beginning of an AsyncResult for an operation that could have been asynchronous but in fact
            has already been performed synchronously.
            </summary>
            <param name="callback">Callback that is called immediately.</param>
            <param name="state">User object that is associated with the operation.</param>
            <param name="action">A callback that takes the result of the operation, which is executed after callback.</param>
            <returns></returns>
        </member>
        <member name="M:Telogis.GeoBase.Concurrency.AsyncResult`1.EndSynchronous">
            <summary>
            Called at the end of synchronous processing for the operation.  If the operation is
            complete, ie SetResult has been called, then the operation was synchronous.  Otherwise,
            the operation will be completed asynchronously.
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.Concurrency.AsyncResult`1.SetResult(`0)">
            <summary>
            Sets the result of the operation and calls the operation's callback.
            </summary>
            <param name="result"></param>
        </member>
        <member name="M:Telogis.GeoBase.Concurrency.AsyncResult`1.SetException(System.Exception)">
            <summary>
            Sets an exception result for this Asynchronous operation.
            If a result has already been set this function will rethrow an AsyncException.
            </summary>
            <param name="ex">The exception to set.</param>
        </member>
        <member name="P:Telogis.GeoBase.Concurrency.AsyncResult`1.Result">
            <summary>
            The result of the operation.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Concurrency.AsyncResult`1.Exception">
            <summary>
            This is an exception thrown by the asynchronous operation, if any. If no exception is thrown, will be null.
            </summary>
            <remarks>Can be set using the SetException method.</remarks>
        </member>
        <member name="P:Telogis.GeoBase.Concurrency.AsyncResult`1.AsyncState">
            <summary>
            The user object that is associated with the operation.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Concurrency.AsyncResult`1.AsyncWaitHandle">
            <summary>
            A handle that may be used to wait for the operation to complete.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Concurrency.AsyncResult`1.CompletedSynchronously">
            <summary>
            Whether the operation completed synchronously.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Concurrency.AsyncResult`1.IsCompleted">
            <summary>
            Whether the operation is complete.
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.Concurrency.AsyncResult`1.AsyncActionDelegate">
            <summary>
            The type of callbacks that execute after an asynchronous operation completes, for cases when you want to know the
            result of the operation from inside the callback.
            </summary>
            <param name="result">The result of the asynchronous operation that just completed.</param>
        </member>
        <member name="T:Telogis.GeoBase.Concurrency.SyncResult`1">
            <summary>
            An object to track the status of an operation that is using the IAsyncResult pattern but
            will be completed synchronously.
            </summary>
            <typeparam name="T">The type of object that will be returned by the operation.</typeparam>
        </member>
        <member name="M:Telogis.GeoBase.Concurrency.SyncResult`1.#ctor(System.AsyncCallback,System.Object,`0)">
            <summary>
            Creates a SyncResult.
            </summary>
            <param name="callback">Callback that will be called immediately.</param>
            <param name="state">User object that is associated with the operation.</param>
            <param name="result">The result of the operation.</param>
        </member>
        <member name="P:Telogis.GeoBase.Concurrency.SyncResult`1.AsyncState">
            <summary>
            User object that is associated with the operation.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Concurrency.SyncResult`1.AsyncWaitHandle">
            <summary>
            A handle that may be used to wait for the operation to complete.  The handle is set
            to signaled immediately.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Concurrency.SyncResult`1.CompletedSynchronously">
            <summary>
            Whether the operation completed synchronously.  Always true.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Concurrency.SyncResult`1.IsCompleted">
            <summary>
            Whether the operation is complete.  Always true.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Concurrency.SyncResult`1.Result">
            <summary>
            The result of the operation.
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.Clustering.ClusterSummaryDelegate">
            <summary>
            A delegate used for summarizing clustered features by a
            <see cref="T:Telogis.GeoBase.Clustering.LocalClusterLayer"/>.
            </summary>
            <param name="features">The features to be summarized.</param>
            <returns>A user-defined object that represents the set of summarized features.</returns>
            <remarks>The object produced by a ClusterSummaryDelegate is assigned by an
            <see cref="T:Telogis.GeoBase.Clustering.IClusteringAlgorithm"/> to the 
            <see cref="P:Telogis.GeoBase.Clustering.Cluster.Summary"/> property of a cluster.</remarks>
        </member>
        <member name="T:Telogis.GeoBase.Clustering.IClusteringAlgorithm">
            <summary>
            The interface for a clustering algoritm used by
            <see cref="T:Telogis.GeoBase.Clustering.LocalClusterLayer"/> to generate clusters.
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.Clustering.IClusteringAlgorithm.CalculateClusters(Telogis.GeoBase.IMap,System.Collections.Generic.IEnumerable{Telogis.GeoBase.DataSources.IPointFeature},Telogis.GeoBase.Clustering.ClusterSummaryDelegate,Telogis.GeoBase.Clustering.IClusterVisualization)">
            <summary>
            Calculates all clusters in terms of the given map.
            
            If clustering the whole world (i.e. when running on a tile-server) the map object should encompass the entire world.
            For example:
            
            <code>
            int worldSizePx = TileSize * TilesPerSuperTile * Zoom;
            Map map = new Map(new LatLon(0, 0), worldSizePx, worldSizePx, ZoomLevel.World);
            </code>
            
            IClusteringAlgorithms are not expected to implement caching.
            </summary>
            <param name="map">The map to use for calculating pixel coordinates.</param>
            <param name="features">The features to be clustered.</param>
            <param name="summaryDel">A function used for creating feature summaries (attached to
            each cluster).</param>
            <param name="visualization">The visualization which will be used to draw the
            clusters.</param>
            <returns>The set of all clusters.</returns>
        </member>
        <member name="M:Telogis.GeoBase.Clustering.IClusteringAlgorithm.GetQueryBounds(Telogis.GeoBase.IMap,Telogis.GeoBase.BoundingBox,Telogis.GeoBase.Clustering.IClusterVisualization)">
            <summary>
            Get the required query bounds for calculating clusters for the given viewport.
            </summary>
            <param name="map">The map to use for calculating pixel coordinates.</param>
            <param name="viewport">The bounding box of the viewport.</param>
            <param name="visualization">The visualization which will be used to draw the
            clusters.</param>
            <returns>The bounding box to be queried.</returns>
        </member>
        <member name="T:Telogis.GeoBase.Clustering.PieRing">
            <summary>
            A PieChart may represent multiple variables, each one of which is represented by a PieRing.
            For example, a PieChart may have a PieRing for "Vehicle Status" (Moving, Idle,
            Stationary,...)
            and a PieRing for "Vehicle Type" (Car, Van, Truck,...).
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.Clustering.PieRing.#ctor(System.Int32)">
            <summary>
            Creates a PieRing with the given radius.
            </summary>
            <param name="radius">The (pixel) radius with which to display this ring.</param>
        </member>
        <member name="M:Telogis.GeoBase.Clustering.PieRing.AddSlice(System.Drawing.Color,System.Int32)">
            <summary>
            Adds a slice to this PieRing.  A slice represents a single value for the variable
            represented by this PieRing.  For example, a PieRing representing Vehicle Status might
            have slices of Moving (Green, 4 vehicles), Idle (Orange, 2 vehicles) and Stationary
            (Red, 7 vehicles).
            </summary>
            <param name="sectionColor">The color to display the slice.</param>
            <param name="count">The number of items that are represented by the slice.</param>
        </member>
        <member name="T:Telogis.GeoBase.Clustering.PieChart">
            <summary>
            <para>
            A PieChart is used to represent the summary information of a cluster.
            A PieChart may have one or more variables, each represented by a PieRing.
            The PieRings for a PieChart should all have the same total count (which should
            equal the number of items in the Cluster it represents), and different radii
            so they will all be visible.
            </para>
            <para>
            The PieRing with the largest radius is rendered first.  The PieRing with the next largest
            radius is rendered on top, so that the only part of the first PieRing that's still visible
            is determined by the difference in the radii.  And so on until the PieRing with the
            smallest radius is rendered on the very top.  Finally the count of items in the cluster
            is rendered at the center of the PieChart.
            </para>
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.Clustering.PieChart.#ctor(System.Int32)">
            <summary>
            Creates a PieChart that will represent the given number of items.
            </summary>
            <param name="count">The number of items represented by this PieChart</param>
        </member>
        <member name="M:Telogis.GeoBase.Clustering.PieChart.AddRing(Telogis.GeoBase.Clustering.PieRing)">
            <summary>
            Adds a PieRing to this PieChart.  The PieRing must have already been populated by
            calling AddSlice.  The sum of the counts of the PieRing's slices must be the same as
            the count of this PieChart.
            </summary>
            <param name="ring">The PieRing to be added to this PieChart.</param>
        </member>
        <member name="T:Telogis.GeoBase.Clustering.PieChartDelegate">
            <summary>
            Creates a PieChart representing a cluster, based on a summary and count.
            </summary>
            <param name="summary">The summary object for the Cluster returned by the
            SummaryDelegate</param>
            <param name="clusterCount">The number of items in the Cluster</param>
            <returns>A PieChart representing the Cluster</returns>
        </member>
        <member name="T:Telogis.GeoBase.Clustering.ClusterVisualizationPieChart">
            <summary>
            Displays clusters as pie charts - one or more concentric discs each representing
            information about one variable relevant to the cluster, with the count of items in the
            cluster at the center of the pie chart.
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.Clustering.ClusterVisualizationPieChart.#ctor(Telogis.GeoBase.Clustering.PieChartDelegate)">
            <summary>
            Creates a visualization that will use the supplied delegate to create PieCharts for
            each cluster that is to be visualized.
            </summary>
            <param name="processSummary">A delegate that will be called for each cluster and that
            will return a PieChart representing each cluster.</param>
        </member>
        <member name="M:Telogis.GeoBase.Clustering.ClusterVisualizationPieChart.GetImageId(Telogis.GeoBase.Clustering.Cluster)">
            <summary>
            Gets the ImageId for a Cluster which can later be passed into GetImage in order to
            render the cluster.
            </summary>
            <param name="cluster">The cluster to visualize</param>
            <returns>The ImageId for the cluster</returns>
        </member>
        <member name="M:Telogis.GeoBase.Clustering.ClusterVisualizationPieChart.GetImage(System.String)">
            <summary>
            Creates the image described by an ImageId. The ImageId should have been obtained
            from a call to GetImageId on this ClusterVisualization.
            </summary>
            <param name="imageId">The string description of the Image to be created.</param>
            <returns>The visualization represented by the ImageId</returns>
        </member>
        <member name="P:Telogis.GeoBase.Navigation.WindowsSoundPlayer.Volume">
            <summary>
            <p>The low-order word contains the left-channel volume setting, and the high-order word contains the right-channel setting. A value of 0xFFFF represents full volume, and a value of 0x0000 is silence.
            0xFFFF represents full volume, and a value of 0x0000 is silence.</p>
            <p> If a device does not support both left and right volume control, the low-order word
            (left volume) of the specified location contains the mono volume level.</p>
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.Routing.RoundAboutMovement">
            <summary>
            A movement for a traffic circle.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Routing.RoundAboutMovement.ExitNumber">
            <summary>
            The number of the street on which to exit, counting as the vehicle
            progresses around the traffic circle.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Routing.RoundAboutMovement.TurnDirection">
            <summary>
            The direction to turn when navigating the traffic circle.
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.Routing.RoundAboutTurnDirection">
            <summary>
            A direction of movement through a traffic circle.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Routing.RoundAboutTurnDirection.Left">
            <summary>
            Left turn from the starting point.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Routing.RoundAboutTurnDirection.Right">
            <summary>
            Right turn from the starting point.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Routing.RoundAboutTurnDirection.None">
            <summary>
            Straight through the traffic circle.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Routing.RoundAboutTurnDirection.UTurn">
            <summary>
            U-turn, exiting on the same road used to enter the traffic circle.
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.Routing.DrivingBreakNote">
            <summary>
            A Note informing that the freeway ends.
            </summary>
        </member>
        <member name="T:Telogis.UI.GelButton">
            <summary>
            Simple GelButton - a modern alternative to a standard Windows CE button
            </summary>
        </member>
        <member name="F:Telogis.UI.GelButton.Style">
            <summary>
            The Style used for all the GelButtons
            </summary>
        </member>
        <member name="F:Telogis.UI.GelButton.TextBrush">
            <summary>
            The Brush used for all the text
            </summary>
        </member>
        <member name="M:Telogis.UI.GelButton.#ctor">
            <summary>
            Create a new GelButton
            </summary>
        </member>
        <member name="M:Telogis.UI.GelButton.OnMouseDown(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Handles a GelButton click event
            </summary>
            <param name="e"></param>
        </member>
        <member name="T:Telogis.GeoBase.TrafficSignalLocation">
            <summary>
            Location of traffic signals in relation to a streetlink.
            </summary>
            <remarks>Traffic signals are only reported when the direction of 
            travel is toward the signal. Thus, for example, if there are traffic
            signals on both ends of a street link that is part of a one-way street,
            the extra data for the street link will show only the signal at the end reached by the
            direction traffic is moving.
            </remarks>
        </member>
        <member name="F:Telogis.GeoBase.TrafficSignalLocation.None">
            <summary>
            There is no traffic signal that can be reached by traveling to the end of this <see cref="T:Telogis.GeoBase.StreetLink"/>,
            or there is no data about traffic signals for this StreeLink.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.TrafficSignalLocation.NonReference">
            <summary>
            There is a traffic signal that can be reached by traveling to the nonreference end of this <see cref="T:Telogis.GeoBase.StreetLink"/>.
            That is, traffic an move from the reference end to the nonreference end of the street link and encounter a traffic signal when reaching 
            the nonreference end.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.TrafficSignalLocation.Reference">
            <summary>
            There is a traffic signal that can be reached by traveling to the reference end of this <see cref="T:Telogis.GeoBase.StreetLink"/>.
            That is, traffic an move from the nonreference end to the reference end of the street link and encounter a traffic signal when reaching 
            the reference end.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.TrafficSignalLocation.Both">
            <summary>
            There are traffic signals at both ends of this <see cref="T:Telogis.GeoBase.StreetLink"/> (and traffic can move along this streetlink in
            either direction).
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.LinkExtraData">
            <summary>
            Extra data for a street link.
            Currently, the only extra data available is the location of Traffic Signals
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.LinkExtraData.TrafficSignal">
             <summary>
             Existence of traffic signals at either end of this link.
             </summary>
            <remarks>
             Traffic signal information is only available with Premium data,
             and only for road classes 1 through 4. Traffic signal information 
             is available through GeoStream only with the link from <b>ReverseGeoCodeFull</b>. 
             This data is compatible with GeoBase versions 3.x and greater.
             </remarks>
        </member>
        <member name="T:Telogis.GeoBase.Navigation.WaypointRouteCalculator">
            <summary>
            Provides methods and properties for a <see cref="T:Telogis.GeoBase.Navigation.Navigator">Navigator</see> to 
            route along a specified route comprising <see cref="T:Telogis.GeoBase.Waypoint">Waypoints</see>.
            </summary>
            <remarks>
            <para>For the Navigator to be able to use the route, create a route that contains only Waypoints, and then create a 
            WaypointRouteCalculator with this route. Next, set the WaypointRouteCalculator as the Navigator's RouteCalculator.</para>
            <para>For more information on Waypoints, see the API documentation, and the <b>Routing and Directions</b> topic in the <b>GeoBase | Map Explorer</b> section.</para>
            </remarks>
            <example>
            <code>
            Route myRoute;
            NavigationManager myNavMgr;
            ...
            WaypointRouteCalculator wprc = new WaypointRouteCalculator(myRoute);
            myNavMgr.Navigator.RouteCalculator = wprc;
            myNav.Destination = myRoute.End;
            </code>
            </example>
        </member>
        <member name="M:Telogis.GeoBase.Navigation.WaypointRouteCalculator.#ctor(Telogis.GeoBase.Routing.Route)">
            <summary>
            Creates a Waypoint route for the
            <see cref="T:Telogis.GeoBase.Navigation.Navigator">Navigator</see>.
            </summary>
            <param name="route">The <see cref="T:Telogis.GeoBase.Routing.Route">Route</see>
            comprising <see cref="T:Telogis.GeoBase.Waypoint">Waypoints</see>.  Ownership of this
            Route is passed to the WaypointRouteCalculator, which may modify and dispose of
            it. The route must have a defined Start value and End value, and every stop along the route must
            be a Waypoint. If the Start and/or End stop is undefined, or if there are no stops in
            addition to the Start and end Stop, the constructor throws a
            <see cref="T:Telogis.GeoBase.Exceptions.NotEnoughStopsException"/> exception. If the 
            route contains any stops that are not <see cref="T:Telogis.GeoBase.Waypoint"/> objects (i.e. RouteStop objects), the
            constructor throws an <see cref="T:Telogis.GeoBase.Exceptions.InvalidRouteStopTypeException"/> exception.</param>
        </member>
        <member name="M:Telogis.GeoBase.Navigation.WaypointRouteCalculator.SetVisitedThreshold(System.Double,Telogis.GeoBase.DistanceUnit)">
            <summary>
            Sets the threshold for deciding when a Waypoint has been visited. The default is 300 ft.
            </summary>
            <param name="distance">The distance before a Waypoint has been deemed visited.</param>
            <param name="units">The units for the distance.</param>
        </member>
        <member name="M:Telogis.GeoBase.Navigation.WaypointRouteCalculator.DescribeNext">
            <summary>
            This method is called by the navigator to describe the next turn on the route.
            </summary>
            <returns>
            Returns true if there are more turns to be described. The Navigator will
            call this repeatedly for a certain period of time so that the upcoming movement will always be described.
            </returns>
        </member>
        <member name="M:Telogis.GeoBase.Navigation.WaypointRouteCalculator.IsRouteLegal">
            <summary>
            Called by the Navigator to check whether the current route is free from constraint violations
            and if not, apply a routing constraint so that the next route calculated will be different.
            </summary>
            <returns>Returns true if the route is legal and hence does not need to be recalculated.</returns>
        </member>
        <member name="M:Telogis.GeoBase.Navigation.WaypointRouteCalculator.UpdatePosition(Telogis.GeoBase.Navigation.Position)">
            <summary>
            Update the GPS position.
            </summary>
            <param name="pos">The current <see cref="T:Telogis.GeoBase.Navigation.Position"/> of the GPS unit.</param>
            <remarks>
            <para>If <see cref="P:Telogis.GeoBase.Navigation.WaypointRouteCalculator.ForceWaypointOrder"/> is true, then GPS points are only compared with the next unvisited Waypoint.</para>
            <para>If <see cref="P:Telogis.GeoBase.Navigation.WaypointRouteCalculator.ForceWaypointOrder"/> is false, each time a GPS point comes in, it is compared with all Waypoints 
            that have not been visited, and if it is within the threshold of one of them, then it and all previous Waypoints 
            are marked as visited.</para>
            </remarks>
        </member>
        <member name="M:Telogis.GeoBase.Navigation.WaypointRouteCalculator.RecalculateRoute(Telogis.GeoBase.RouteStop,Telogis.GeoBase.RouteStop,Telogis.GeoBase.Routing.RoutingStrategy,Telogis.GeoBase.Routing.RouteProgress)">
            <summary>
            Does the work of recalculating the route.
            </summary>
            <param name="start">The starting point of this route, e.g. current GPS Position.</param>
            <param name="dest">Not used.</param>
            <param name="strategy">Not used.</param>
            <param name="RouteProgress">Not used.</param>
            <returns></returns>
            <remarks>
            <para>The parameters <codeInline>dest</codeInline>, <codeInline>strategy</codeInline> and <codeInline>RouteProgress</codeInline> are taken from the
            original route provided to the constructor.</para>
            <para>When <codeInline>RecalculateRoute</codeInline> is called then the route has to go to the
            nearest point on the leg between the first unvisited waypoint and its previous waypoint.</para>
            <para>For example:</para>
            <para>Start - W1 - W2 - W3 - End</para>
            <para>If W1 has not been visited then calculate the route from the original Start
            to W1.  Find the geographically nearest point on that route to the
            current location and call it P. Calculate a route CurPos - P - W1 - W2 - W3 - End
            (to do so, set P as a temporary waypoint, but don't consider it when
            working out which waypoints have been visited or not - i.e. P is
            discarded as soon as the new route is calculated).</para>
            <para>If W3 has not been visited then calculate the route W2 - W3. Find the
            geographically nearest point on that route to the current location
            and call it P.  Calculate a route CurPos - P - W3 - End.</para>
            </remarks>
            <returns></returns>
        </member>
        <member name="M:Telogis.GeoBase.Navigation.WaypointRouteCalculator.Dispose">
            <summary>
            Disposes of the WaypointRouteCalculator.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Navigation.WaypointRouteCalculator.ForceWaypointOrder">
            <summary>
            Forces Waypoints to be visited in the correct order, if true. If false, then a Waypoint may be 
            visited without one of the earlier ones having been visited. The default is true.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Navigation.WaypointRouteCalculator.Completed">
            <summary>
            Returns true if all the movements have been described in the route.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Navigation.WaypointRouteCalculator.Directions">
            <summary>
            Returns the <see cref="P:Telogis.GeoBase.Navigation.WaypointRouteCalculator.Directions"/> for this route.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Navigation.WaypointRouteCalculator.VehicleSpec">
            <summary>
            Gets / sets the <see cref="P:Telogis.GeoBase.Navigation.WaypointRouteCalculator.VehicleSpec"/> for this route.
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.Navigation.FilterMode">
            <summary>
            Describes the filtering level for a <see cref="T:Telogis.GeoBase.Navigation.FilteredGps">FilteredGps</see>
            device.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Navigation.FilterMode.None">
            <summary>
            No filtering is performed.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Navigation.FilterMode.Mild">
            <summary>
            Filtering is only performed on the quality of the GPS signal.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Navigation.FilterMode.Aggressive">
            <summary>
            Filtering is performed on the heading and fix type.
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.Navigation.FilteredGps">
            <summary>
            <para>In some instances (particularly at low speeds) a GPS device may report erroneous 
            heading and speed information. FilteredGps encapsulates and filters the heading and
            location of a raw GPS device. It also provides the capability to report the location 
            of the device ahead of time, using a prediction factor (see the FilteredGps constructor).</para>
            <para>FilteredGps implements the IGps interface and may be used as a drop-in replacement for other 
            GPS devices.</para>
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.Navigation.FilteredGps.#ctor(Telogis.GeoBase.Navigation.IGps,Telogis.GeoBase.Navigation.FilterMode,System.Double)">
            <summary>
            Create a new <b>FilteredGps</b> from a given source GPS device, a <see cref="T:Telogis.GeoBase.Navigation.FilterMode">FilterMode</see>
            and a prediction factor (in seconds, see remarks).
            </summary>
            <remarks>A prediction factor of 1 returns the filtered position of the GPS. A prediction factor of 2 
            returns the filtered position of the GPS, as estimated in 2 seconds time. This may be used to
            accurately display the position of the GPS whilst allowing for delays in map rendering.</remarks>
            <param name="source">An IGps member from which the GPS readings are taken</param>
            <param name="mode"><see cref="T:Telogis.GeoBase.Navigation.FilterMode">FilterMode</see></param>
            <param name="prediction">The GPS will return the estimated position of this GPS <i>prediction</i> seconds ahead of time.</param>
        </member>
        <member name="M:Telogis.GeoBase.Navigation.FilteredGps.PowerUp">
            <summary>
            Power up the (inner) GPS unit.
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.Navigation.FilteredGps.PowerDown">
            <summary>
            Power down the (inner) GPS unit.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Navigation.FilteredGps.HeadingSpeedThreshold">
            <summary>
            If the inner gps reports a speed lower than this threshold, then
            the heading information will be ignored
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Navigation.FilteredGps.FixTypeChangeBuffer">
            <summary>
            This is the number of position updates that a fix must stay the same type
            before it will be considered to have changed to that type
            </summary>
        </member>
        <member name="E:Telogis.GeoBase.Navigation.FilteredGps.Update">
            <summary>
            An eventhandler to be fired when the position of this GPS device is updated.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Navigation.FilteredGps.InnerGps">
            <summary>
            Returns the IGps member encapsulated within this <b>FilteredGps</b> object.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Navigation.FilteredGps.PoweredUp">
            <summary>
            Determine the powered state of the (inner) GPS unit.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Navigation.FilteredGps.Position">
            <summary>
            Get the <see cref="T:Telogis.GeoBase.Navigation.Position">Position</see> of the filtered GPS unit.
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.ShapeUI.State.SelectState">
            <summary>
            A state that allows entities on a layer to be selected.
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.ShapeUI.State.SelectState.#ctor(Telogis.GeoBase.ShapeUI.ShapeLayer,Telogis.GeoBase.ShapeUI.ShapeEntity)">
            <summary>
            The base selection state that will highlight any shape
            </summary>
            <param name="layer">The layer the selected entity belongs to</param>
            <param name="optSelection">The selected entity</param>
        </member>
        <member name="M:Telogis.GeoBase.ShapeUI.State.SelectState.Render(System.Drawing.Graphics,Telogis.GeoBase.RenderContext)">
            <summary>
            Render all of the relevant shapes for this layer.<br/>
             - Highlight the highlighted entity by changing the outline colour.
            </summary>
            <param name="graphics">The drawing surface</param>
            <param name="rc">Control for the placement of objects</param>
        </member>
        <member name="M:Telogis.GeoBase.ShapeUI.State.SelectState.OnMouseMove(System.Object,System.Windows.Forms.MouseEventArgs)">
            <summary>
            On a mouse move event check whether the mouse has highlighted any entity.
            </summary>
            <param name="sender">The object from the base event.</param>
            <param name="e">The mouse event arguments.</param>
            <returns>True if an entity is highlighted, else false.</returns>
        </member>
        <member name="M:Telogis.GeoBase.ShapeUI.State.SelectState.OnMouseClick(System.Object,System.Windows.Forms.MouseEventArgs)">
            <summary>
            On left click, selects the highlighted entity.
            </summary>
            <param name="sender">The object from the base event.</param>
            <param name="e">The mouse event arguments.</param>
            <returns>True if an entity is selected, else false</returns>
        </member>
        <member name="M:Telogis.GeoBase.ShapeUI.State.SelectState.OnMouseLeave(System.Object,System.EventArgs)">
            <summary>
            Unhighlight any highlighted entities.
            </summary>
            <param name="sender">The object from the base event.</param>
            <param name="e">The mouse event arguments.</param>
            <returns>true</returns>
        </member>
        <member name="P:Telogis.GeoBase.ShapeUI.State.SelectState.Highlight">
            <summary>
            The currently highlighted entity.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.ShapeUI.State.SelectState.Selection">
            <summary>
            The currently selected entity.
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.ShapeUI.State.DefaultState">
            <summary>
            A passive state.
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.ShapeUI.State.DefaultState.#ctor(Telogis.GeoBase.ShapeUI.ShapeLayer)">
            <summary>
            Creates a default state for the supplied layer.
            </summary>
            <param name="layer">The layer that this state will work with.</param>
        </member>
        <member name="M:Telogis.GeoBase.GeoStream.Server.WmsFetcher.FetchWmsTile">
            <summary>
            Get the supertile image from the WMS server. If the supertile dimensions exceed the
            maximum of the server, multiple image requests will be made to produce the supertile.
            </summary>
            <returns></returns>
        </member>
        <member name="F:Telogis.GeoBase.GeoStream.Server.WmsFetcher.arcImsErrRegex">
            <summary>
            Check if an arcIMS error code occurred. We may not want to propagate the exception and
            return an error code for all returned error codes.
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.GeoStream.Server.WmsFetcher.WmsRequest">
            <summary>
            This class encapsulates all the data that needs to be passed to the worker thread 
            which requests the Wms image.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.GeoStream.Server.WmsFetcher.WmsRequest.Img">
            <summary>
            The resulting image. Enlarged by pixelsToExpand.
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.GeoStream.Server.JSONRouteMatrix">
            <summary>
            Implements a JSON interface to the route matrix functionality.
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.GeoStream.Server.JSONRouteMatrix.RouteMatrix(System.String,System.Object[],Telogis.GeoBase.Routing.RoutingStrategy)">
            <summary>
            
            </summary>
            <param name="guid"></param>
            <param name="InitialStops"></param>
            <param name="strategy"></param>
            <returns></returns>
        </member>
        <member name="M:Telogis.GeoBase.GeoStream.Server.JSONRouteMatrix.RecalculateFull(System.String)">
            <summary>
            Does a full recalculation of all costs within the route matrix.
            </summary>
            <param name="guid"></param>
        </member>
        <member name="M:Telogis.GeoBase.GeoStream.Server.JSONRouteMatrix.AddStop(System.String,Telogis.GeoBase.RouteStop)">
            <summary>
            Add a new <see cref="T:Telogis.GeoBase.RouteStop">stop</see> to a given route matrix.
            </summary>
            <param name="guid">The route matrix's GUID.</param>
            <param name="newStop">The <see cref="T:Telogis.GeoBase.RouteStop"/> to add.</param>
            <returns>Offset of the new stop in the stop array.</returns>
        </member>
        <member name="M:Telogis.GeoBase.GeoStream.Server.JSONRouteMatrix.AddStop(System.String,System.Object[],System.Object[])">
            <summary>
            Add new <see cref="T:Telogis.GeoBase.RouteStop">stop</see> objects to a given route matrix.
            </summary>
            <param name="guid">The route matrix's GUID.</param>
            <param name="newStops">An array containing <see cref="T:Telogis.GeoBase.RouteStop"/> objects to add.</param>
            <param name="extraArgs"></param>
            <returns>Offsets of the new stops in the stop array.</returns>
        </member>
        <member name="M:Telogis.GeoBase.GeoStream.Server.JSONRouteMatrix.GetStops(System.String)">
            <summary>
            Returns an array of <see cref="T:Telogis.GeoBase.RouteStop">stops</see> in the
            order of the specified route matrix.
            </summary>
            <param name="guid">The route matrix's GUID.</param>
            <returns>An array of <see cref="T:Telogis.GeoBase.RouteStop"/>s.</returns>
        </member>
        <member name="M:Telogis.GeoBase.GeoStream.Server.JSONRouteMatrix.Times(System.String,System.Int32,System.Int32,Telogis.GeoBase.Routing.LinkCost)">
            <summary>
            Finds the time from the specified stop to all other stops
            in the specified route matrix.
            </summary>
            <param name="guid">The route matrix's GUID.</param>
            <param name="stopNumber">Offset of the stop in the stop array.</param>
            <param name="maxCost">Highest allowable cost for a route between stops.</param>
            <param name="maxStops">Maximum number of stops to route between.</param>
            <returns>An array of times (in seconds) from the specified stop to all other stops
            in the route matrix.</returns>
        </member>
        <member name="M:Telogis.GeoBase.GeoStream.Server.JSONRouteMatrix.Distances(System.String,System.Int32,System.Int32,Telogis.GeoBase.Routing.LinkCost)">
            <summary>
            Find the distances between the specified stop and all other
            stops in the specified route matrix.
            </summary>
            <param name="guid">The route matrix's GUID.</param>
            <param name="stopNumber">Offset of the stop in the stop array.</param>
            <param name="maxCost">Highest allowable cost for a route between stops.</param>
            <param name="maxStops">Maximum number of stops to route between.</param>
            <returns>An array of distances in meters.</returns>
        </member>
        <member name="M:Telogis.GeoBase.GeoStream.Server.JSONRouteMatrix.SetStrategy(System.String,Telogis.GeoBase.Routing.RoutingStrategy)">
            <summary>
            Sets the routing strategy. When the routing strategy is changed
            the existing network is recalculated rather than rebuilt. Changing the
            strategy on an existing RouteMatrix object is much faster than creating
            a new one.
            </summary>
            <param name="guid">The route matrix's GUID.</param>
            <param name="strategy">The strategy to use.</param>
        </member>
        <member name="M:Telogis.GeoBase.GeoStream.Server.JSONRouteMatrix.SetVehicleSpec(System.String,Telogis.GeoBase.Routing.VehicleSpec)">
            <summary>
            Applies a VehicleSpec to this RouteMatrix.
            </summary>
            <param name="guid">The route matrix's GUID.</param>
            <param name="spec">Vehicle spec to be honored when routing.</param>
        </member>
        <member name="M:Telogis.GeoBase.GeoStream.Server.JSONRouteMatrix.SetVehicleSpec(System.String,System.Boolean)">
            <summary>
            Setting this true ensures that constraints are obeyed when calculating routes.
            </summary>
            <remarks>
            Obeying constraints incurs a noticable performance penalty.
            </remarks>
            <param name="guid">The route matrix's GUID.</param>
            <param name="obeyConstraints">True if constraints should be honoured.</param>
        </member>
        <member name="M:Telogis.GeoBase.GeoStream.Server.JSONRouteMatrix.SetCurrentTime(System.String,System.String)">
            <summary>
            Sets the start time for each of the stops in the route matrix.
            </summary>
            <param name="guid"></param>
            <param name="currentTimeStr">DateTime has been converted to a culture invariant
            string to avoid uncontrollable serialization behavior in dotnet.</param>
        </member>
        <member name="T:Telogis.GeoBase.GeoStream.ServerSet">
            <summary>
            Represents a set of GeoStream servers.
            </summary>
            <example>
            The following example will test all the servers in a given ServerSet 'servers'.
            <code lang="C#">
            Console.WriteLine("TRUE means the server is functioning, FALSE means an error occurred\n");
            for (int i = 0; i &lt; servers.Servers.Length; i++)
            {
                Console.Writeline("Testing " + servers.CurrentServer);
                Console.Writeline("\t" + servers.TestServers());
                servers.NextServer(); // move to next server
            }
            </code>
            </example>
        </member>
        <member name="M:Telogis.GeoBase.GeoStream.ServerSet.#ctor(Telogis.GeoBase.Repositories.GeoStreamRepository,System.String[],System.Boolean)">
            <summary>
            Constructs a new ServerSet from an array of server URLs.
            </summary>
            <param name="servers">The URLs of the GeoStream servers to use.</param>
            <param name="owner">The parent GeoStreamRepository object.</param>
            <param name="keepAlive"></param>
        </member>
        <member name="M:Telogis.GeoBase.GeoStream.ServerSet.NextServer">
            <summary>
            Instructs GeoStream to start using the next server in the list. If at the end of the list,
            this method will cause the current server to wrap around back to the beginning.
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.GeoStream.ServerSet.TestServers">
            <summary>
            Tests that the current server is a functioning GeoStream server.
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.GeoStream.ServerSet.GeoBaseVersion">
            <summary>
            Gets the version of GeoBase running on the current server.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.GeoStream.ServerSet.Proxy">
            <summary>
            This property is used to set the proxy server for the program to use when accessing the servers.
            By default no proxy is used and this returns a null reference.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.GeoStream.ServerSet.RequestTimeoutMs">
            <summary>
            This property is used to change the Request timeout.
            The default timeout is 100,000 milliseconds.
            Ensure that the server is confiqured to serve a request of 
            this timespan. In IIS the MaxSessionLength/Session timeout property may need
            to be greater than this timeout. Note that these settings may
            vary between IIS versions.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.GeoStream.ServerSet.Expect100Continue">
            <summary>
            When this property is set to true this GeoStreamRepository object will wait for a 100 (Continue) 
            header from the GeoStream server before sending a PUT or POST request body. This allows the 
            GeoStreamRepository object to determine if the GeoStream server is willing to accept the GeoStream 
            request.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.GeoStream.ServerSet.UseKeepAlive">
            <summary>
            When true this object will attempt to open persistent connections to 
            GeoStream servers, by setting the Connection HTTP header to 'Keep-Alive'.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.GeoStream.ServerSet.Servers">
            <summary>
            Gets or sets the list of server URLs to use.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.GeoStream.ServerSet.CurrentServer">
            <summary>
            Gets the URL of the server currently being used.
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.Country">
            <summary>
            Defines countries.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Country.Unknown">
            <summary>
            Unknown
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Country.USA">
            <summary>
            USA
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Country.Canada">
            <summary>
            Canada
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Country.Mexico">
            <summary>
            Mexico
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Country.UK">
            <summary>
            UK
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Country.Ireland">
            <summary>
            Ireland
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Country.TrinidadTobago">
            <summary>
            TrinidadTobago
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Country.Afghanistan">
            <summary>
            Afghanistan
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Country.Albania">
            <summary>
            Albania
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Country.Algeria">
            <summary>
            Algeria
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Country.AmericanSamoa">
            <summary>
            AmericanSamoa
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Country.Andorra">
            <summary>
            Andorra
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Country.Angola">
            <summary>
            Angola
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Country.Anguilla">
            <summary>
            Anguilla
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Country.Antarctica">
            <summary>
            Antarctica
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Country.AntiguaandBarbuda">
            <summary>
            AntiguaandBarbuda
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Country.Argentina">
            <summary>
            Argentina
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Country.Armenia">
            <summary>
            Armenia
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Country.Aruba">
            <summary>
            Aruba
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Country.Australia">
            <summary>
            Australia
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Country.Austria">
            <summary>
            Austria
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Country.Azerbaijan">
            <summary>
            Azerbaijan
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Country.Bahamas">
            <summary>
            Bahamas
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Country.Bahrain">
            <summary>
            Bahrain
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Country.Bangladesh">
            <summary>
            Bangladesh
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Country.Barbados">
            <summary>
            Barbados
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Country.Belarus">
            <summary>
            Belarus
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Country.Belgium">
            <summary>
            Belgium
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Country.Belize">
            <summary>
            Belize
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Country.Benin">
            <summary>
            Benin
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Country.Bermuda">
            <summary>
            Bermuda
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Country.Bhutan">
            <summary>
            Bhutan
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Country.Bolivia">
            <summary>
            Bolivia
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Country.BosniaAndHerzegovina">
            <summary>
            BosniaAndHerzegovina
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Country.Botswana">
            <summary>
            Botswana
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Country.Brazil">
            <summary>
            Brazil
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Country.BritishVirginIslands">
            <summary>
            BritishVirginIslands
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Country.Brunei">
            <summary>
            Brunei
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Country.Bulgaria">
            <summary>
            Bulgaria
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Country.BurkinaFaso">
            <summary>
            BurkinaFaso
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Country.Burundi">
            <summary>
            Burundi
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Country.Cambodia">
            <summary>
            Cambodia
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Country.Cameroon">
            <summary>
            Cameroon
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Country.CapeVerde">
            <summary>
            CapeVerde
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Country.CaymanIslands">
            <summary>
            CaymanIslands
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Country.CentralAfricanRepublic">
            <summary>
            CentralAfricanRepublic
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Country.Chad">
            <summary>
            Chad
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Country.Chile">
            <summary>
            Chile
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Country.China">
            <summary>
            China
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Country.Colombia">
            <summary>
            Colombia
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Country.Comoros">
            <summary>
            Comoros
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Country.Congo">
            <summary>
            Congo
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Country.CongoDR">
            <summary>
            CongoDR
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Country.CookIslands">
            <summary>
            CookIslands
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Country.CostaRica">
            <summary>
            CostaRica
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Country.Croatia">
            <summary>
            Croatia
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Country.Cuba">
            <summary>
            Cuba
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Country.Cyprus">
            <summary>
            Cyprus
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Country.CzechRepublic">
            <summary>
            CzechRepublic
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Country.Denmark">
            <summary>
            Denmark
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Country.Djibouti">
            <summary>
            Djibouti
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Country.Dominica">
            <summary>
            Dominica
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Country.DominicanRepublic">
            <summary>
            DominicanRepublic
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Country.EastTimor">
            <summary>
            EastTimor
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Country.Ecuador">
            <summary>
            Ecuador
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Country.Egypt">
            <summary>
            Egypt
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Country.ElSalvador">
            <summary>
            ElSalvador
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Country.EquatorialGuinea">
            <summary>
            EquatorialGuinea
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Country.Eritrea">
            <summary>
            Eritrea
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Country.Estonia">
            <summary>
            Estonia
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Country.Ethiopia">
            <summary>
            Ethiopia
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Country.ExternalTerritoriesofAustralia">
            <summary>
            ExternalTerritoriesofAustralia
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Country.FalklandIslands">
            <summary>
            FalklandIslands
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Country.FaroeIslands">
            <summary>
            FaroeIslands
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Country.FijiIslands">
            <summary>
            FijiIslands
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Country.Finland">
            <summary>
            Finland
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Country.France">
            <summary>
            France
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Country.FrenchGuiana">
            <summary>
            FrenchGuiana
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Country.FrenchPolynesia">
            <summary>
            FrenchPolynesia
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Country.FrenchSouthernTerritories">
            <summary>
            FrenchSouthernTerritories
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Country.Gabon">
            <summary>
            Gabon
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Country.Gambia">
            <summary>
            Gambia
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Country.Georgia">
            <summary>
            Georgia
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Country.Germany">
            <summary>
            Germany
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Country.Ghana">
            <summary>
            Ghana
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Country.Gibraltar">
            <summary>
            Gibraltar
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Country.Greece">
            <summary>
            Greece
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Country.Greenland">
            <summary>
            Greenland
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Country.Grenada">
            <summary>
            Grenada
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Country.Guadeloupe">
            <summary>
            Guadeloupe
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Country.Guam">
            <summary>
            Guam
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Country.Guatemala">
            <summary>
            Guatemala
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Country.GuernseyandAlderney">
            <summary>
            GuernseyandAlderney
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Country.Guinea">
            <summary>
            Guinea
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Country.GuineaBissau">
            <summary>
            GuineaBissau
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Country.Guyana">
            <summary>
            Guyana
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Country.Haiti">
            <summary>
            Haiti
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Country.Honduras">
            <summary>
            Honduras
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Country.Hungary">
            <summary>
            Hungary
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Country.Iceland">
            <summary>
            Iceland
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Country.India">
            <summary>
            India
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Country.Indonesia">
            <summary>
            Indonesia
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Country.Iran">
            <summary>
            Iran
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Country.Iraq">
            <summary>
            Iraq
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Country.Israel">
            <summary>
            Israel
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Country.Italy">
            <summary>
            Italy
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Country.IvoryCoast">
            <summary>
            IvoryCoast
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Country.Jamaica">
            <summary>
            Jamaica
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Country.Japan">
            <summary>
            Japan
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Country.Jersey">
            <summary>
            Jersey
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Country.Jordan">
            <summary>
            Jordan
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Country.Kazakhstan">
            <summary>
            Kazakhstan
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Country.Kenya">
            <summary>
            Kenya
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Country.Kiribati">
            <summary>
            Kiribati
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Country.NorthKorea">
            <summary>
            NorthKorea
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Country.SouthKorea">
            <summary>
            SouthKorea
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Country.Kuwait">
            <summary>
            Kuwait
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Country.Kyrgyzstan">
            <summary>
            Kyrgyzstan
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Country.Laos">
            <summary>
            Laos
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Country.Latvia">
            <summary>
            Latvia
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Country.Lebanon">
            <summary>
            Lebanon
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Country.Lesotho">
            <summary>
            Lesotho
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Country.Liberia">
            <summary>
            Liberia
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Country.Libya">
            <summary>
            Libya
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Country.Liechtenstein">
            <summary>
            Liechtenstein
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Country.Lithuania">
            <summary>
            Lithuania
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Country.Luxembourg">
            <summary>
            Luxembourg
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Country.Macedonia">
            <summary>
            Macedonia
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Country.Madagascar">
            <summary>
            Madagascar
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Country.Malawi">
            <summary>
            Malawi
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Country.Malaysia">
            <summary>
            Malaysia
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Country.Maldives">
            <summary>
            Maldives
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Country.Mali">
            <summary>
            Mali
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Country.Malta">
            <summary>
            Malta
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Country.MarshallIslands">
            <summary>
            MarshallIslands
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Country.Martinique">
            <summary>
            Martinique
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Country.Mauritania">
            <summary>
            Mauritania
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Country.Mauritius">
            <summary>
            Mauritius
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Country.Mayotte">
            <summary>
            Mayotte
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Country.Micronesia">
            <summary>
            Micronesia
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Country.Moldova">
            <summary>
            Moldova
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Country.Monaco">
            <summary>
            Monaco
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Country.Mongolia">
            <summary>
            Mongolia
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Country.Montserrat">
            <summary>
            Montserrat
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Country.Morocco">
            <summary>
            Morocco
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Country.Mozambique">
            <summary>
            Mozambique
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Country.Myanmar">
            <summary>
            Myanmar
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Country.Namibia">
            <summary>
            Namibia
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Country.Nauru">
            <summary>
            Nauru
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Country.Nepal">
            <summary>
            Nepal
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Country.Netherlands">
            <summary>
            Netherlands
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Country.NetherlandsAntilles">
            <summary>
            NetherlandsAntilles
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Country.NewCaledonia">
            <summary>
            NewCaledonia
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Country.NewZealand">
            <summary>
            NewZealand
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Country.Nicaragua">
            <summary>
            Nicaragua
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Country.Niger">
            <summary>
            Niger
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Country.Nigeria">
            <summary>
            Nigeria
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Country.Niue">
            <summary>
            Niue
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Country.NorfolkIsland">
            <summary>
            NorfolkIsland
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Country.NorthernMarianaIslands">
            <summary>
            NorthernMarianaIslands
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Country.Norway">
            <summary>
            Norway
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Country.Oman">
            <summary>
            Oman
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Country.Pakistan">
            <summary>
            Pakistan
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Country.Palau">
            <summary>
            Palau
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Country.Palestine">
            <summary>
            Palestine
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Country.Panama">
            <summary>
            Panama
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Country.PapuaNewGuinea">
            <summary>
            PapuaNewGuinea
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Country.Paraguay">
            <summary>
            Paraguay
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Country.Peru">
            <summary>
            Peru
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Country.Philippines">
            <summary>
            Philippines
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Country.Poland">
            <summary>
            Poland
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Country.Portugal">
            <summary>
            Portugal
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Country.PuertoRico">
            <summary>
            PuertoRico
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Country.Qatar">
            <summary>
            Qatar
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Country.Reunion">
            <summary>
            Reunion
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Country.Romania">
            <summary>
            Romania
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Country.Russia">
            <summary>
            Russia
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Country.Rwanda">
            <summary>
            Rwanda
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Country.SaintHelena">
            <summary>
            SaintHelena
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Country.SaintKittsandNevis">
            <summary>
            SaintKittsandNevis
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Country.SaintLucia">
            <summary>
            SaintLucia
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Country.SaintPierreandMiquelon">
            <summary>
            SaintPierreandMiquelon
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Country.SaintVincentandTheGrenadines">
            <summary>
            SaintVincentandTheGrenadines
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Country.Samoa">
            <summary>
            Samoa
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Country.SanMarino">
            <summary>
            SanMarino
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Country.SaudiArabia">
            <summary>
            SaudiArabia
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Country.Senegal">
            <summary>
            Senegal
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Country.Serbia">
            <summary>
            Serbia
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Country.Seychelles">
            <summary>
            Seychelles
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Country.SierraLeone">
            <summary>
            SierraLeone
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Country.Singapore">
            <summary>
            Singapore
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Country.Slovakia">
            <summary>
            Slovakia
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Country.Slovenia">
            <summary>
            Slovenia
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Country.SmallerTerritoriesofChile">
            <summary>
            SmallerTerritoriesofChile
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Country.SmallerTerritoriesofNorway">
            <summary>
            SmallerTerritoriesofNorway
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Country.SmallerTerritoriesoftheUK">
            <summary>
            SmallerTerritoriesoftheUK
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Country.SolomonIslands">
            <summary>
            SolomonIslands
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Country.Somalia">
            <summary>
            Somalia
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Country.SouthAfrica">
            <summary>
            SouthAfrica
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Country.Spain">
            <summary>
            Spain
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Country.SriLanka">
            <summary>
            SriLanka
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Country.Sudan">
            <summary>
            Sudan
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Country.Suriname">
            <summary>
            Suriname
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Country.SvalbardandJanMayen">
            <summary>
            SvalbardandJanMayen
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Country.Swaziland">
            <summary>
            Swaziland
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Country.Sweden">
            <summary>
            Sweden
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Country.Switzerland">
            <summary>
            Switzerland
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Country.Syria">
            <summary>
            Syria
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Country.SaoTomeandPrincipe">
            <summary>
            SaoTomeandPrincipe
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Country.Taiwan">
            <summary>
            Taiwan
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Country.Tajikistan">
            <summary>
            Tajikistan
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Country.Tanzania">
            <summary>
            Tanzania
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Country.Thailand">
            <summary>
            Thailand
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Country.Togo">
            <summary>
            Togo
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Country.Tokelau">
            <summary>
            Tokelau
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Country.Tonga">
            <summary>
            Tonga
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Country.Tunisia">
            <summary>
            Tunisia
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Country.Turkey">
            <summary>
            Turkey
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Country.Turkmenistan">
            <summary>
            Turkmenistan
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Country.TurksandCaicosIslands">
            <summary>
            TurksandCaicosIslands
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Country.Tuvalu">
            <summary>
            Tuvalu
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Country.Uganda">
            <summary>
            Uganda
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Country.Ukraine">
            <summary>
            Ukraine
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Country.UnitedArabEmirates">
            <summary>
            UnitedArabEmirates
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Country.UnitedStatesMinorOutlyingIslands">
            <summary>
            UnitedStatesMinorOutlyingIslands
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Country.Uruguay">
            <summary>
            Uruguay
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Country.Uzbekistan">
            <summary>
            Uzbekistan
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Country.Vanuatu">
            <summary>
            Vanuatu
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Country.VaticanCity">
            <summary>
            VaticanCity
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Country.Venezuela">
            <summary>
            Venezuela
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Country.Vietnam">
            <summary>
            Vietnam
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Country.VirginIslandsoftheUnitedStates">
            <summary>
            VirginIslandsoftheUnitedStates
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Country.WallisandFutuna">
            <summary>
            WallisandFutuna
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Country.WesternSahara">
            <summary>
            WesternSahara
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Country.Yemen">
            <summary>
            Yemen
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Country.Zambia">
            <summary>
            Zambia
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Country.Zimbabwe">
            <summary>
            Zimbabwe
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Country.HongKong">
            <summary>
            HongKong
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Country.Macau">
            <summary>
            Macau
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Country.Montenegro">
            <summary>
            Montenegro
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.CountryToString">
            <summary>
            This class contains a single static method. The method returns a well-formatted 
            string to represent any <see cref="T:Telogis.GeoBase.Country"/>.
            </summary>
            <remarks>
            <para>It is possible to use the ToString() method of the <see cref="T:Telogis.GeoBase.Country">Country enum</see>,
            but for display purposes it is preferential to use this method to ensure that the country's name is 
            displayed correctly.</para><para>For example the "Bosnia and Herzegovina" has an enum ToString of "BosniaAndHerzegovina",
            which is undesirable.</para>
            <para>In all cases this method will return the country correctly, ie "Bosnia and Herzegovina".</para>
            </remarks>
        </member>
        <member name="M:Telogis.GeoBase.CountryToString.ToString(Telogis.GeoBase.Country)">
            <summary>
            Gets a well-formatted name for any given <see cref="T:Telogis.GeoBase.Country"/>
            </summary>
            <param name="country">The Country to get name for</param>
            <returns>A string containing the Country name eg "Trinidad and Tobago"</returns>
            <remarks>
            It is mostly possible to use the ToString() method of the Country enum, but for display purposes this
            is not suitable, as some countries like "Bosnia and Herzegovina" have an enum ToString of "BosniaAndHerzegovina".
            In all cases this method will return the country correctly, ie "Bosnia and Herzegovina".
            </remarks>
        </member>
        <member name="T:Telogis.GeoBase.CountryToIso3166">
            <summary>
            This class contains a single static method. The method returns the ISO 3166-1-alpha-2 code
            for any <see cref="T:Telogis.GeoBase.Country"/>.
            </summary>
            <example>
            <code lang="C#">
            String cname = CountryToIso3166.ToString(Country.UK);
            // cname = "GBR"
            </code>
            </example>
        </member>
        <member name="M:Telogis.GeoBase.CountryToIso3166.ToString(Telogis.GeoBase.Country)">
            <summary>
            Gets the ISO 3166-1-alpha-2 code any given <see cref="T:Telogis.GeoBase.Country"/>
            </summary>
            <param name="country">The Country to get the ISO 3166-1-alpha-2 code for</param>
            <returns>A string containing the Country's ISO 3166-1-alpha-2 code eg "US"</returns>
            <remarks>
            </remarks>
        </member>
        <member name="T:Telogis.GeoBase.Iso3166ToCountry">
            <summary>
            This class contains a single static method. The method returns the <see cref="T:Telogis.GeoBase.Country"/>
            for any ISO 3166-1-alpha-2 code.
            </summary>
            <example>
            <code lang="C#">
            Country country = Iso3166ToCountry.ToCountry(string iso3166Country);
            // country = "Country.UK"
            </code>
            </example>
        </member>
        <member name="M:Telogis.GeoBase.Iso3166ToCountry.ToCountry(System.String)">
            <summary>
            Gets the <see cref="T:Telogis.GeoBase.Country"/> for any given ISO 3166-1-alpha-2 code.
            </summary>
            <param name="iSOCountryCode">The ISO 3166-1-alpha-2 code to get the Country for.</param>
            <returns>A <see cref="T:Telogis.GeoBase.Country"/> from the ISO 3166-1-alpha-2 code eg Country.UK</returns>
            <remarks>
            </remarks>
        </member>
        <member name="T:Telogis.GeoBase.Clustering.RemoteClusterLayer">
            <summary>
            RemoteClusterLayer is responsible for the fetching, caching, indexing of clusters
            fetched from a ClusterPage running under an ASP.NET server. All clustering information
            (clusters / images etc) is fetched asynchronously. OnClustersChanged is called when
            updated clusters or images are available. Clusters will be fetched using the BoundingBox
            and worldpx of the most recent call to QueryClusters.
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.Clustering.RemoteClusterLayer.#ctor(System.Uri)">
            <summary>
            RemoteClusterLayer is responsible for the fetching, caching, and indexing of clusters
            and associated features. Feature infomation is fetched asynchronously from the specified url.
            It is assumed that the url points to an ASPX page being served using ClusterPage.ServeRequest.
            <see cref="E:Telogis.GeoBase.Clustering.RemoteClusterLayer.OnClustersChanged"/> is called when new features are available.
            </summary>
            <param name="uri">The URI of the page on the ASP.NET server that will supply cluster
            information and visualizations.</param>
        </member>
        <member name="M:Telogis.GeoBase.Clustering.RemoteClusterLayer.Dispose">
            <summary>
            Disposes of this cluster layer.
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.Clustering.RemoteClusterLayer.Dispose(System.Boolean)">
            <summary>
            Disposes of this cluster layer.
            </summary>
            <param name="disposing">Whether Dispose() has been called explicitly.</param>
        </member>
        <member name="M:Telogis.GeoBase.Clustering.RemoteClusterLayer.BeginGetClusters(System.Int32,Telogis.GeoBase.BoundingBox,System.AsyncCallback,System.Object)">
            <summary>
            Starts calculating clusters asynchronously.
            </summary>
            <param name="worldWidthPx">The width, in pixels, of the entire area where clusterable
            features can be situated.</param>
            <param name="bbox">The bounding box for the visible portion of the map for which
            clusters are calculated.</param>
            <param name="callback">A callback that is executed when the cluster calculation is
            complete.</param>
            <param name="state">The state of the asynchronous cluster calculation</param>
            <returns>An IAsyncResult allowing the caller to query the state of the
            calculation.</returns>
        </member>
        <member name="M:Telogis.GeoBase.Clustering.RemoteClusterLayer.EndGetClusters(System.IAsyncResult)">
            <summary>
            Returns the clusters calculated asynchronously by
            <see cref="M:Telogis.GeoBase.Clustering.IClusterLayer.BeginGetClusters(System.Int32,Telogis.GeoBase.BoundingBox,System.AsyncCallback,System.Object)"/> when the calculation is complete.
            </summary>
            <param name="result">The IAsyncResult that was returned by BeginGetClusters.</param>
            <returns>The set of clusters that was calculated by the cluster layer.</returns>
        </member>
        <member name="M:Telogis.GeoBase.Clustering.RemoteClusterLayer.BeginGetImage(System.String,System.AsyncCallback,System.Object)">
            <summary>
            Obtains the image for a cluster synchronously.
            </summary>
            <param name="imageId">The name (image ID) of the cluster image to obtain from
            the visualizer (<see cref="T:Telogis.GeoBase.Clustering.IClusterVisualization"/>) of the cluster layer.</param>
            <param name="callback">A callback that is executed when the image for the cluster is
            ready.</param>
            <param name="state">The state of the operation.</param>
            <returns>An IAsyncResult allowing the caller to query the state of the
            operation.</returns>
        </member>
        <member name="M:Telogis.GeoBase.Clustering.RemoteClusterLayer.EndGetImage(System.IAsyncResult)">
            <summary>
            Returns the image for a cluster made available by a call to
            <see cref="M:Telogis.GeoBase.Clustering.IClusterLayer.BeginGetImage(System.String,System.AsyncCallback,System.Object)"/>.
            </summary>
            <param name="result">The IAsyncResult that was returned by BeginGetImage.</param>
            <returns>The image of the cluster.</returns>
        </member>
        <member name="M:Telogis.GeoBase.Clustering.RemoteClusterLayer.BeginRefresh(System.AsyncCallback,System.Object)">
            <summary>
            Begin an unscheduled refresh of feature data asynchronously.
            </summary>
            <param name="callback">A callback that is executed when the cluster has refreshed.</param>
            <param name="state">A user-defined object that holds state information about the asynchronous operation.</param>
            <returns>An IAsyncResult that allows the caller to query the state of the refresh operation.</returns>
        </member>
        <member name="M:Telogis.GeoBase.Clustering.RemoteClusterLayer.EndRefresh(System.IAsyncResult)">
            <summary>
            Finish up after an asynchronous refresh begun by a call to BeginRefresh.
            </summary>
            <param name="result">The IAsyncResult value returned by BeginRefresh.</param>
        </member>
        <member name="E:Telogis.GeoBase.Clustering.RemoteClusterLayer.OnClustersChanged">
            <summary>
            Event that is fired when new features are available for the local cluster layer.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Clustering.RemoteClusterLayer.FetchImages">
            <summary>
            Whether images for each cluster will be fetched from the remote server.
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.Clustering.ClusterVisualizationDot">
            <summary>
            ClusterVisualizationDot displays Clusters as colored circle containing the number of 
            elements in the Cluster. The color of the circle depends on how many elements the Cluster
            contains.
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.Clustering.ClusterVisualizationDot.#ctor">
            <summary>
            Creates a new ClusterVisualizationDot with default settings.
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.Clustering.ClusterVisualizationDot.GetDotStyle(System.Drawing.Graphics,System.Int32)">
            <summary>
            Gets the DotStyle for a cluster containing a given number of items.
            </summary>
            <param name="graphics">The Graphics from the image that is being drawn to represent
            the cluster.</param>
            <param name="count">The count of items in the cluster.</param>
            <returns>The DotStyle for the cluster.</returns>
        </member>
        <member name="M:Telogis.GeoBase.Clustering.ClusterVisualizationDot.GetImageId(Telogis.GeoBase.Clustering.Cluster)">
            <summary>
            Gets the ImageId for a Cluster which can later be passed into GetImage in order to
            render the cluster.
            </summary>
            <param name="cluster">The cluster to visualize</param>
            <returns>The ImageId for the cluster</returns>
        </member>
        <member name="M:Telogis.GeoBase.Clustering.ClusterVisualizationDot.GetImage(System.String)">
            <summary>
            Creates the image described by an ImageId. The ImageId should have been obtained
            from a call to GetImageId on this ClusterVisualization.
            </summary>
            <param name="imageId">The string description of the Image to be created.</param>
            <returns>The visualization represented by the ImageId</returns>
        </member>
        <member name="M:Telogis.GeoBase.Clustering.ClusterVisualizationDot.Visualize(System.Drawing.Size,System.Drawing.Point,System.Int32)">
            <summary>
            Creates the image for a cluster with a given size, center and number of items.
            </summary>
            <param name="size">The size of the rectangle representing the area covered by the
            cluster.</param>
            <param name="center">The center of the cluster relative to the cluster rectangle.  This
            might not be the center of the rectangle, as the center depends on the location of the
            items within the cluster.</param>
            <param name="count">The count of items within the cluster.</param>
            <returns>An image representing the cluster.</returns>
        </member>
        <member name="T:Telogis.GeoBase.Clustering.ClusterVisualizationDot.DotStyle">
            <summary>
            Represents the style with which a cluster will be rendered.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Clustering.ClusterVisualizationDot.DotStyle.Radius">
            <summary>
            The radius of the dot.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Clustering.ClusterVisualizationDot.DotStyle.DotFill">
            <summary>
            The brush that will fill the dot.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Clustering.ClusterVisualizationDot.DotStyle.DotOutline">
            <summary>
            The pen that will outline the dot.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Clustering.ClusterVisualizationDot.DotStyle.ShellFill">
            <summary>
            The brush that will fill the rectangle that covers the entire cluster.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Clustering.ClusterVisualizationDot.DotStyle.ShellOutline">
            <summary>
            The pen that will outline the rectangle that covers the entire cluster.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Clustering.ClusterVisualizationDot.DotStyle.Font">
            <summary>
            The font that will be used to write the dot's label.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Clustering.ClusterVisualizationDot.DotStyle.Image">
            <summary>
            The image that will be rendered instead of a dot, for when there is only one
            feature in the cluster.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Clustering.ClusterVisualizationDot.DotStyle.ImageAnchor">
            <summary>
            The offset of the point on Image that will be located at (0,0) on the image
            returned by the visualization.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Clustering.ClusterVisualizationDot.DotStyle.Label">
            <summary>
            The dot's label, by default the number of features in the cluster.
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.Clustering.ClusterRenderer">
             <summary>
             The ClusterRenderer class renders clusters from an <see cref="T:Telogis.GeoBase.Clustering.IClusterLayer"/> on a map.
            
             A ClusterRenderer will automatically Invalidate the most recent MapCtrl drawn to when the underlying clusters
             change. If clusters are desired on more than one MapCtrl it is recommended to use a separate ClusterRenderer for
             each.
             </summary>
        </member>
        <member name="F:Telogis.GeoBase.Clustering.ClusterRenderer.m_layer">
            <summary>
            The cluster layer to be rendered.
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.Clustering.ClusterRenderer.#ctor(Telogis.GeoBase.Clustering.IClusterLayer)">
             <summary>
             Creates and initializes the cluster renderer.
            
             A ClusterRenderer will automatically Invalidate the most recent MapCtrl drawn to when the underlying clusters
             change. If clusters are desired on more than one MapCtrl it is recommended to use a separate ClusterRenderer for
             each.
             </summary>
             <param name="layer">The cluster layer that produces and visualizes the clusters.</param>
        </member>
        <member name="M:Telogis.GeoBase.Clustering.ClusterRenderer.Dispose">
            <summary>
            Disposes of the renderer's resources.
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.Clustering.ClusterRenderer.Dispose(System.Boolean)">
            <summary>
            Disposes of the renderer's resources.
            </summary>
            <param name="disposing">Whether Dispose() was called explicitly.</param>
        </member>
        <member name="M:Telogis.GeoBase.Clustering.ClusterRenderer.OnUpdate">
            <summary>
            The default method that is called when the clusters are updated.  Invalidates the
            BoundMap.
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.Clustering.ClusterRenderer.Render(System.Drawing.Graphics,Telogis.GeoBase.RenderContext)">
            <summary>
            Renders the clusters on the <see cref="T:Telogis.GeoBase.IMap"/> associated with a
            specified render context.
            </summary>
            <param name="graphics">The <see cref="T:System.Drawing.Graphics"/> that does the
            drawing.</param>
            <param name="rc">The <see cref="T:Telogis.GeoBase.RenderContext"/> in which the
            clusters are to be rendered.</param>
        </member>
        <member name="M:Telogis.GeoBase.Clustering.ClusterRenderer.RenderCluster(System.Drawing.Graphics,Telogis.GeoBase.RenderContext,Telogis.GeoBase.Clustering.Cluster)">
            <summary>
            Renders a cluster on a map.
            </summary>
            <param name="graphics">The <see cref="T:System.Drawing.Graphics"/> that does the
            drawing.</param>
            <param name="rc">The <see cref="T:Telogis.GeoBase.RenderContext"/> in which the
            cluster is to be rendered.</param>
            <param name="cluster">The cluster to render.</param>
        </member>
        <member name="M:Telogis.GeoBase.Clustering.ClusterRenderer.GetClusterSet(Telogis.GeoBase.IMap)">
            <summary>
            Gets the current ClusterSet on a given map.
            </summary>
            <param name="map">The map to get clusters for.</param>
            <returns>A ClusterSet object containing clusters located within the map -
            possibly null if no clusters have been loaded yet.</returns>
        </member>
        <member name="M:Telogis.GeoBase.Clustering.ClusterRenderer.GetClusterAt(Telogis.GeoBase.IMap,System.Drawing.Point)">
            <summary>
            Gets the cluster at the specified location.
            </summary>
            <param name="map">The map clusters are placed on.</param>
            <param name="point">A point within the map possibly contained within a cluster.</param>
            <returns>A cluster containing the given point or null.</returns>
        </member>
        <member name="P:Telogis.GeoBase.Clustering.ClusterRenderer.Layer">
            <summary>
            The cluster layer to be rendered.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Clustering.ClusterRenderer.BoundMap">
            <summary>
            The <see cref="T:Telogis.GeoBase.MapCtrl"/> that this renderer will Invalidate when
            the clusters are updated.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Clustering.ClusterRenderer.OnUpdateDelegate">
            <summary>
            A delegate that will be called when the clusters are updated.  By default this
            Invalidates the BoundMap.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Clustering.ClusterRenderer.RequiredRendermodes">
            <summary>
            Gets the <see cref="T:Telogis.GeoBase.RenderMode">RenderMode</see> required in order
            to render the clusters.
            </summary>
            <remarks>Clusters are rendered in the PostLabelling render mode.</remarks>
        </member>
        <member name="T:Telogis.GeoBase.GeoStream.TileParams">
            <summary>
            Encapsulates all the parameters of a tile: zoom, position, size and number of tiles per supertile.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.GeoStream.TileParams.X">
            <summary>
            The X position of this tile.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.GeoStream.TileParams.Y">
            <summary>
            The Y position of this tile.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.GeoStream.TileParams.TileSize">
            <summary>
            The size (in pixels) of each side of this tile.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.GeoStream.TileParams.TilesPerSuperTile">
            <summary>
            The number of tiles per supertile.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.GeoStream.TileParams.Zoom">
            <summary>
            The zoom level of this tile.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.GeoStream.TileParams.MapSize">
            <summary>
            The size of a supertile in pixels. Calculated automatically as TileSize * TilesPerSuperTile.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.GeoStream.TileParams.reqString">
            <summary>
            The &amp;t=[params] component of the tile request URL, excluding the "&amp;t".
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.GeoStream.TileParams.#ctor(System.String)">
            <summary>
            Assign the tile parameter properties to values extracted from a string.
            </summary>
            <param name="t">The string from which to extract parameters. (The query parameters
            of an HTTP request message). The parameters
            should be separated by commas, in the order X, Y, TileSize, TilesPerSuperTile,
            Zoom. </param>
        </member>
        <member name="M:Telogis.GeoBase.GeoStream.TileParams.ToString">
            <summary>
            The query parameters portion of the tile request URL.
            </summary>
            <returns>The parameter string.</returns>
        </member>
        <member name="T:Telogis.GeoBase.Clustering.TransientClusterLayer">
            <summary>
            TransientClusterLayer is responsible for the fetching and indexing clusters
            and associated features. Feature infomation is fetched every time it calculates clusters.
            </summary>
            <remarks>
            LocalClusterLayer is intended to act as a temporary object that persists only as long as it takes
            to generate a set of clusters. If the feature data that is grouped into clusters does not change
            frequently, you might consider using <see cref="T:Telogis.GeoBase.Clustering.LocalClusterLayer"/> Instead.
            LocalClusterLayer caches point data to improve performance.
            </remarks>
        </member>
        <member name="M:Telogis.GeoBase.Clustering.TransientClusterLayer.#ctor(Telogis.GeoBase.Clustering.IClusteringAlgorithm,Telogis.GeoBase.DataSources.IPointFeatureSource,Telogis.GeoBase.Clustering.ClusterSummaryDelegate,Telogis.GeoBase.Clustering.IClusterVisualization)">
            <summary>
            Creates and initializes a transient cluster layer for fetching and indexing clusters.
            </summary>
            <param name="algorithm">The clustering algorithm to use for combining map features into
            clusters.</param>
            <param name="datasource">A data source for obtaining point features to be
            clustered.</param>
            <param name="summaryDel">A function for combining the features in a cluster into a
            single summary object.</param>
            <param name="visualization">A visualizer for producing the image that appears on maps
            to represent the cluster.</param>
        </member>
        <member name="M:Telogis.GeoBase.Clustering.TransientClusterLayer.Dispose">
            <summary>
            Disposes of this transient cluster layer.
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.Clustering.TransientClusterLayer.Dispose(System.Boolean)">
            <summary>
            Disposes of this transient cluster layer.
            </summary>
            <param name="disposing">Whether Dispose() has been called explicitly.</param>
        </member>
        <member name="M:Telogis.GeoBase.Clustering.TransientClusterLayer.BeginGetClusters(System.Int32,Telogis.GeoBase.BoundingBox,System.AsyncCallback,System.Object)">
            <summary>
            Calculates clusters.
            </summary>
            <param name="worldWidthPx">The width, in pixels, of the entire area where clusterable
            features can be situated.</param>
            <param name="viewport">The bounding box for the visible portion of the map for which
            clusters are calculated.</param>
            <param name="callback">A callback that is executed when the cluster calculation is
            complete.</param>
            <param name="state">The state of the asynchronous cluster calculation</param>
            <returns>An IAsyncResult to be passed to <see cref="M:Telogis.GeoBase.Clustering.TransientClusterLayer.EndGetClusters(System.IAsyncResult)"/>.</returns>
        </member>
        <member name="M:Telogis.GeoBase.Clustering.TransientClusterLayer.EndGetClusters(System.IAsyncResult)">
            <summary>
            Returns the clusters calculated by
            <see cref="M:Telogis.GeoBase.Clustering.TransientClusterLayer.BeginGetClusters(System.Int32,Telogis.GeoBase.BoundingBox,System.AsyncCallback,System.Object)"/>.
            </summary>
            <param name="result">The IAsyncResult that was returned by BeginGetClusters.</param>
            <returns>The set of clusters that was calculated by the cluster layer.</returns>
        </member>
        <member name="M:Telogis.GeoBase.Clustering.TransientClusterLayer.BeginGetImage(System.String,System.AsyncCallback,System.Object)">
            <summary>
            Obtains the image for a cluster.
            </summary>
            <param name="imageId">The name (image ID) of the cluster image to obtain from
            the visualizer (<see cref="T:Telogis.GeoBase.Clustering.IClusterVisualization"/>) of the cluster layer.</param>
            <param name="callback">A callback that is executed when the image for the cluster is
            ready.</param>
            <param name="state">The state of the asynchronous operation.</param>
            <returns>An IAsyncResult allowing the caller to query the state of the
            operation.</returns>
        </member>
        <member name="M:Telogis.GeoBase.Clustering.TransientClusterLayer.EndGetImage(System.IAsyncResult)">
            <summary>
            Returns the image for a cluster made available by a call to
            <see cref="M:Telogis.GeoBase.Clustering.IClusterLayer.BeginGetImage(System.String,System.AsyncCallback,System.Object)"/>.
            </summary>
            <param name="result">The IAsyncResult that was returned by BeginGetImage.</param>
            <returns>The image of the cluster.</returns>
        </member>
        <member name="M:Telogis.GeoBase.Clustering.TransientClusterLayer.BeginRefresh(System.AsyncCallback,System.Object)">
            <summary>
            Starts updating the feature data for the clusters asynchronously.
            </summary>
            <param name="callback">A callback that is executed when the feature data is updated.</param>
            <param name="state">A user-defined object that represents the state of the asynchronous update.</param>
            <returns>An IAsyncResult allowing the caller to query the state of the calculation.</returns>
            <remarks>TransientClusterLayer automatically updates its feature data every time
            you call <see cref="M:Telogis.GeoBase.Clustering.TransientClusterLayer.BeginGetClusters(System.Int32,Telogis.GeoBase.BoundingBox,System.AsyncCallback,System.Object)"/>. 
            Calling this method allows you to force a refresh and execute the callback without
            generating new clusters.
            </remarks>
        </member>
        <member name="M:Telogis.GeoBase.Clustering.TransientClusterLayer.EndRefresh(System.IAsyncResult)">
            <summary>
            Executes when a refresh initiated by a call to <see cref="M:Telogis.GeoBase.Clustering.LocalClusterLayer.BeginRefresh(System.AsyncCallback,System.Object)"/> completes.
            </summary>
            <param name="result">The IAsyncResult that was returned by BeginRefresh.</param>
        </member>
        <member name="E:Telogis.GeoBase.Clustering.TransientClusterLayer.OnClustersChanged">
            <summary>
            Event that is fired when new features are available for the transient cluster layer.
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.Clustering.ColumnClustering">
            <summary>
            A clustering algorithm which works by first creating a grid of clusters
            This clustering algorithm attempts to merge clusters so that cluster labels will not be incorrectly placed.
            This should mean that the center of any cluster icon will be over the centroid of the cluster.
            </summary>
            <remarks>First partitions the features into a grid of small sub clusters
            Where possible these sub clusters are combined into a grid of clusters.
            Edge sub clusters are not initially placed on the grid - instead they are merged into adjacent clusters 
            in a second pass.  This is so that the cluster labels do not have to be drawn a large distance from the
            centroid of the cluster.</remarks>
        </member>
        <member name="M:Telogis.GeoBase.Clustering.ColumnClustering.CalculateClusters(Telogis.GeoBase.IMap,System.Collections.Generic.IEnumerable{Telogis.GeoBase.DataSources.IPointFeature},Telogis.GeoBase.Clustering.ClusterSummaryDelegate,Telogis.GeoBase.Clustering.IClusterVisualization)">
            <summary>
            Calculates the clusters for a specified map and set of features.
            </summary>
            <param name="map">The map to contain the clusters.</param>
            <param name="features">The features on the map to be grouped into clusters.</param>
            <param name="summaryDel">A function for summarizing the features in a cluster. The
            results of this summary are assigned to the
            <see cref="P:Telogis.GeoBase.Clustering.Cluster.Summary"/> property of each
            cluster.</param>
            <param name="visualization">An object to visualize clusters into images.</param>
            <returns>A collection of cluster objects.</returns>
        </member>
        <member name="M:Telogis.GeoBase.Clustering.ColumnClustering.GroupEdgeFeatures(System.Collections.Generic.List{Telogis.GeoBase.Clustering.FeatureGroup})">
            <summary>
            Attempts to group unclustered FeatureGroups using various methods
            <remarks>
            First it tries to expand into another feature group or empty space in the directions that the feature group icon is cut off
            Next it tries to expand into an intermediate cluster in the directions that the feature group icon is cut off
            Next it attempts to expand into an intermediate cluster in any direction
            Next it attempts to expand in any direction into any nearby feature group or empty space
            Finally it converts any feature groups with icons which aren't cut off directly into clusters.
            If any feature groups fail to expand when they need to, they are simply converted into intermediate clusters.
            </remarks>
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.Clustering.IntermediateClusters">
            <summary>
            A class which contains a list of all IntermediateClusters.
            It contains helper functions to get an IntermediateCluster at a give FeatureGroup index and to create new IntermediateClusters
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.Clustering.FeatureGrid">
            <summary>
            This class contains a grid of FeatureGroup's which cover the entire map.
            The FeatureGroup at a certain index can be obtained by calling featureGroups[index]
            And the FeatureGroup at a certain map XY location can be obtained by calling featureGroups[FeatureGroups.XYToIndex(XYPoint)]
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.Clustering.FeatureGrid.CreateAt(System.Drawing.Point,Telogis.GeoBase.Clustering.FeatureGroup)">
            <summary>Create an feature group at the specified index</summary>
        </member>
        <member name="M:Telogis.GeoBase.Clustering.FeatureGrid.RectangluarIndexToXY(Telogis.GeoBase.Clustering.ClusterRectangle)">
            <summary>Convert an index rectangle into a point rectangle</summary>
        </member>
        <member name="P:Telogis.GeoBase.Clustering.FeatureGrid.Item(System.Drawing.Point)">
            <summary>get the feature group at the specified index</summary>
        </member>
        <member name="M:Telogis.GeoBase.Clustering.BaseCluster.ToCluster(Telogis.GeoBase.IMap,Telogis.GeoBase.Clustering.IClusterVisualization,Telogis.GeoBase.Clustering.ClusterSummaryDelegate)">
            <summary>convert a BaseCluster into a Telogis.GeoBase.Clustering.Cluster</summary>
        </member>
        <member name="T:Telogis.GeoBase.Clustering.FeatureGroup">
            <summary>
            An FeatureGroup is a constant sized cluster of IPointFeatures
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.Clustering.IntermediateCluster">
            <summary>
            This class is an internal intermediate form of a Telogis.Geobase.Clustering.Cluster.
            instances of this class contain a rectangular set of FeatureGroups
            once all FeatureGroups have been put into an IntermediateCluster the IntermediateClusters
            are converted into cluster objects and returned.
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.Clustering.IntermediateCluster.Recalculate">
            <summary>recalculate the centroid and number of features in the IntermediateCluster.</summary>
        </member>
        <member name="M:Telogis.GeoBase.Clustering.IntermediateCluster.ResizeAndCenter(System.Int32)">
            <summary>This is called to do a final resize of the cluster so that the label is drawn in the correct place,
            the cluster rectangle is not overly large </summary>
        </member>
        <member name="M:Telogis.GeoBase.Clustering.IntermediateCluster.RepositionCentroid">
            <summary>Push the center towards the middle of the cluster if it is too close to an edge.</summary>
        </member>
        <member name="M:Telogis.GeoBase.Clustering.IntermediateCluster.ContractRectangle">
            <summary> Contract the bounding box rectangle so that it does not contain space without features in it</summary>
        </member>
        <member name="T:Telogis.GeoBase.Clustering.FeatureSizeInfo">
            <summary>class which stores information about feature icon sizes </summary>
        </member>
        <member name="T:Telogis.GeoBase.Clustering.ClusterRectangle">
            <summary>
            A rectangle class which uses four corners to determine its position
            (System.Drawing.Rectangle uses TopLeft + Size and so is hard to work with)
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.Clustering.ClusterRectangle.EnlargeToContain(System.Drawing.Point)">
            <summary> Enlarge the rectangle so that it contains other </summary>
        </member>
        <member name="M:Telogis.GeoBase.Clustering.ClusterRectangle.EnlargeToContain(Telogis.GeoBase.Clustering.ClusterRectangle)">
            <summary> Enlarge the rectangle so that it contains other </summary>
        </member>
        <member name="P:Telogis.GeoBase.Clustering.ClusterRectangle.MinimumRectangle">
            <summary>returns a rectangle for which any call to makeContain will cause it to be enlarged</summary>
        </member>
        <member name="T:Telogis.GeoBase.Clustering.Directions">
            <summary>
            Helper class for the Direction enum - for a given direction returns related directions or Points
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.Clustering.Directions.PointInDirection(System.Drawing.Point,Telogis.GeoBase.Clustering.Direction)">
            <summary>moves the point one space in direction dir.</summary>
        </member>
        <member name="M:Telogis.GeoBase.Clustering.Directions.NextClockwiseDirection(Telogis.GeoBase.Clustering.Direction)">
            <summary>return the direction to the right of dir</summary>
        </member>
        <member name="M:Telogis.GeoBase.Clustering.Directions.NextAntiClockwiseDirection(Telogis.GeoBase.Clustering.Direction)">
            <summary>return the direction to the left of dir</summary>
        </member>
        <member name="T:Telogis.GeoBase.Traffic.NavteqRealTimeTrafficSource">
            <summary>
            This class supports NAVTEQ real-time traffic data
            </summary>
            <remarks>
            <para><b>Related articles</b>: <a href="html/ecb16ee8-6223-40bc-a4bb-a3c03c73c13a.htm">Configuring the server</a>.</para>
            </remarks>
        </member>
        <member name="M:Telogis.GeoBase.Traffic.NavteqRealTimeTrafficSource.#ctor(System.Xml.XmlReader)">
            <summary>
            Construct a new <b>NavteqRealTimeTraffic</b> from the given (NAVTEQ) XML data source.
            </summary>
            <param name="reader"></param>
        </member>
        <member name="T:Telogis.GeoBase.Traffic.InrixPredictiveRealTimeTrafficSource">
            <summary>
            This Inrix V1 traffic source includes both current data and predicted data for the next hour.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Traffic.InrixPredictiveRealTimeTrafficSource.fractionForClass">
            <summary>
            The next hour's prediction is given in "3,3,3,3" format, each number is a color (class 
            id) in order to return next hour's speed, we need to convert the color (which means 3
            here) to a speed.  Because 3 is in the range of 92% -- 100% of the reference speed
            category, so 0.96 = (0.92 + 1.0)/2 = 0.96. The same function is used for calculating
            class one, two, three...
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.Traffic.InrixPredictiveRealTimeTrafficSource.#ctor(System.Xml.XmlReader,System.Xml.XmlReader)">
            <summary>
            Creates an INRIX V1 traffic source with prediction of upcoming traffic congestion.
            </summary>
            <param name="trafficData">XML data source providing traffic speed data.
            <see cref="T:System.Xml.XmlReader"/>.</param>
            <param name="dataDefinition">XML data source providing reference speed data.
            <see cref="T:System.Xml.XmlReader"/>.</param>
        </member>
        <member name="T:Telogis.GeoBase.Routing.RouteIndex">
            <summary>
            Describes the type of street index available.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Routing.RouteIndex.Surface">
            <summary>
            Surface streets, arterial roads, and highways.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Routing.RouteIndex.Arterial">
            <summary>
            Major arterial roads and highways.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Routing.RouteIndex.Secondaries">
            <summary>
            Secondary highways and larger roads.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Routing.RouteIndex.Highways">
            <summary>
            Major and super highways.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Routing.RouteIndex.All">
            <summary>
            All streets.
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.Routing.RouteMarshalHelper">
            <summary>
            Summary description for Route.
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.Routing.RouteStopFullUnmanaged">
             <summary>
            
             </summary>
        </member>
        <member name="F:Telogis.GeoBase.Routing.RouteStopFullUnmanaged.Location">
             <summary>
            
             </summary>
        </member>
        <member name="F:Telogis.GeoBase.Routing.RouteStopFullUnmanaged.Costs">
             <summary>
            
             </summary>
        </member>
        <member name="F:Telogis.GeoBase.Routing.RouteStopFullUnmanaged.Distances">
             <summary>
            
             </summary>
        </member>
        <member name="F:Telogis.GeoBase.Routing.RouteStopFullUnmanaged.Times">
             <summary>
            
             </summary>
        </member>
        <member name="F:Telogis.GeoBase.Routing.RouteStopFullUnmanaged.NumCosts">
             <summary>
            
             </summary>
        </member>
        <member name="F:Telogis.GeoBase.Routing.RouteStopFullUnmanaged.Heading">
             <summary>
            
             </summary>
        </member>
        <member name="F:Telogis.GeoBase.Routing.RouteStopFullUnmanaged.IsWaypoint">
             <summary>
            
             </summary>
        </member>
        <member name="F:Telogis.GeoBase.Routing.RouteStopFullUnmanaged.TimeSincePreviousStop">
            <summary>
            The time since the previous stop, in seconds.  Used when
            calculating a route highlight.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Routing.RouteStopFullUnmanaged.Speed">
            <summary>
            The unit's speed, in knots, when it was at this stop in the route
            history.  Used when calculating a route highlight.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Routing.RouteStopFullUnmanaged.IgnitionOn">
            <summary>
            Whether the unit's ignition was on when it was at this stop in the
            route history.  Used when calculating a route highlight.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Routing.RouteStopFullUnmanaged.DirectToNext">
            <summary>
            Whether the unit should just go straight to the next stop in the
            route history.  Calculated by native code, and used when
            calculating a route highlight.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Routing.RouteStopFullUnmanaged.Critical">
            <summary>
            Whether this stop is a critical point in a route highlight.
            Native code must only be asked to generate route highlights between
            critical points.
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.Routing.RouteBusyException">
            <summary>
            Thrown when a Routing object attempts to make an interop call before a previous one has completed, which would
            otherwise result in an AccessViolationException.
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.Routing.RouteNotFoundException">
            <summary>
            Thrown when a route cannot be found between given locations
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.Routing.RouteStopFull">
             <summary>
            
             </summary>
        </member>
        <member name="F:Telogis.GeoBase.Routing.RouteStopFull.theStop">
             <summary>
            
             </summary>
        </member>
        <member name="F:Telogis.GeoBase.Routing.RouteStopFull.costs">
            <summary>
            Costs to route to all other stops
            Zero cost to route to ourself
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Routing.RouteStopFull.Critical">
            <summary>
            Whether this stop is a critical point in a route highlight.
            Native code must only be asked to generate route highlights between
            critical points.
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.Routing.RouteStopFull.#ctor(Telogis.GeoBase.RouteStop)">
             <summary>
            
             </summary>
             <param name="aStop"></param>
        </member>
        <member name="F:Telogis.GeoBase.Routing.ConstraintBlockType.None">
            <summary>
            This is the end of this constraint
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Routing.ConstraintBlockType.DateMod">
            <summary>
            Deprecated 
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Routing.ConstraintBlockType.Restricted">
            <summary>
            Restricted route
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Routing.ConstraintBlockType.MultiLink">
            <summary>
            Multi-link
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Routing.ConstraintBlockType.KeyAccess">
            <summary>
            Key access
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Routing.ConstraintBlockType.VehicleType">
            <summary>
            Vehicle type
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Routing.ConstraintBlockType.DayMask">
            <summary>
            Day mask
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Routing.ConstraintBlockType.GrossWeight_kg">
            <summary>
            Gross vehicle weight (measured in kilograms)
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Routing.ConstraintBlockType.WeightPerAxle_kg">
            <summary>
            Weight per axle (measured in kilograms) 
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Routing.ConstraintBlockType.TandemAxleWeight_kg">
            <summary>
            Weight of tandem axles (measured in kilograms)
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Routing.ConstraintBlockType.TridemAxleWeight_kg">
            <summary>
            Weight of tridem axles (three axles in a row, measured in kilograms) 
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Routing.ConstraintBlockType.UnladenWeight_kg">
            <summary>
            Weight of the unladen vehicle (measured in kilograms) 
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Routing.ConstraintBlockType.Length_cm">
            <summary>
            Total length of the vehicle (measured in centimeters) 
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Routing.ConstraintBlockType.ExtremeAxleLength_cm">
            <summary>
            Maximum (outer) axle dimension (measured in centimeters). Not currently supported. 
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Routing.ConstraintBlockType.TrailerLength_cm">
            <summary>
            Length of the trailer (measured in centimeters) 
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Routing.ConstraintBlockType.TractorLength_cm">
            <summary>
            Length of the tractor (measured in centimeters) 
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Routing.ConstraintBlockType.KingpinToLastAxle_cm">
            <summary>
            Length from the kingpin to the last axle on the trailer (measured in centimeters) 
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Routing.ConstraintBlockType.KingpinToMiddleOfLastTandem_cm">
            <summary>
            Length from the kingpin to the middle of the last tandem (axles) on the trailer (measured in centimeters) 
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Routing.ConstraintBlockType.KingpinToEnd_cm">
            <summary>
            Length from the kingpin to the end of the trailer (measured in centimeters) 
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Routing.ConstraintBlockType.Width_cm">
            <summary>
            Maximum width of the vehicle (measured in centimeters) 
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Routing.ConstraintBlockType.Height_cm">
            <summary>
            Maximum height of the vehicle (measured in centimeters) 
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Routing.ConstraintBlockType.NumberOfAxles">
            <summary>
            Total number of axles on the vehicle 
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Routing.ConstraintBlockType.NumberOfAxlesOnTrailers">
            <summary>
            Total number of axles on all trailers 
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Routing.ConstraintBlockType.NumberOfWheels">
            <summary>
            Total number of wheels on the vehicle (including trailers) 
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Routing.ConstraintBlockType.NumberOfTrailers">
            <summary>
            Number of trailers 
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Routing.ConstraintBlockType.ATrainConverter">
            <summary>
            Number of A-Train converters on this vehicle (Not currently supported)
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Routing.ConstraintBlockType.BTrainConverter">
            <summary>
            Number of B-Train converters on this vehicle  (Not currently supported)
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Routing.ConstraintBlockType.CTrainConverter">
            <summary>
            Number of C-Train converters on this vehicle (Not currently supported)
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Routing.ConstraintBlockType.Hazmat_1_kg">
            <summary>
            Kilograms of class 1 HAZMAT (explosives) carried by this vehicle 
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Routing.ConstraintBlockType.Hazmat_2_kg">
            <summary>
            Kilograms of class 2 HAZMAT (compressed gases) carried by this vehicle 
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Routing.ConstraintBlockType.Hazmat_3_kg">
            <summary>
            Kilograms of class 3 HAZMAT (flammable liquids) carried by this vehicle 
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Routing.ConstraintBlockType.Hazmat_4_kg">
            <summary>
            Kilograms of class 4 HAZMAT (flammable solids) carried by this vehicle 
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Routing.ConstraintBlockType.Hazmat_5_kg">
            <summary>
            Kilograms of class 5 HAZMAT (oxidizers) carried by this vehicle 
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Routing.ConstraintBlockType.Hazmat_6_kg">
            <summary>
            Kilograms of class 6 HAZMAT (poisons) carried by this vehicle
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Routing.ConstraintBlockType.Hazmat_7_kg">
            <summary>
            Kilograms of class 7 HAZMAT (radioactive materials) carried by this vehicle 
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Routing.ConstraintBlockType.Hazmat_8_kg">
            <summary>
            Kilograms of class 8 HAZMAT (corrosive liquids) carried by this vehicle 
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Routing.ConstraintBlockType.Hazmat_9_kg">
            <summary>
            Kilograms of class 9 HAZMAT (miscellaneous, not falling into HAZMAT classes 1-8) carried by this vehicle 
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Routing.ConstraintBlockType.Hazmat_I_kg">
            <summary>
            Kilograms of HAZMAT posing an inhalation risk carried by this vehicle 
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Routing.ConstraintBlockType.Hazmat_kg">
            <summary>
            Kilograms of unspecified HAZMAT material carried by this vehicle 
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Routing.ConstraintBlockType.GoodsHarmfulToWater_kg">
            <summary>
            Kilograms of goods carried by this vehicle that are harmful to water 
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Routing.ConstraintBlockType.Agriculture_kg">
            <summary>
            Kilograms of agricultural material carried by this vehicle 
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Routing.ConstraintBlockType.Coal_kg">
            <summary>
            Kilograms of coal carried by this vehicle 
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Routing.ConstraintBlockType.BuildingMaterial_kg">
            <summary>
            Kilograms of building material carried by this vehicle 
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Routing.ConstraintBlockType.SanitaryWaste_kg">
            <summary>
            Kilograms of sanitary waste carried by this vehicle 
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Routing.ConstraintBlockType.SandOrGravel_kg">
            <summary>
            Kilograms of sand and/or gravel carried by this vehicle 
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Routing.ConstraintBlockType.Commodity_kg">
            <summary>
            Kilograms of some commodity carried by this vehicle 
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Routing.ConstraintBlockType.NaturalResource_kg">
            <summary>
            Kilograms of natural resources carried by this vehicle 
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Routing.ConstraintBlockType.NumberOfAxlesUpTo">
            <summary>
            Upper limit on the number of axles this vehicle has (Not currently supported)
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Routing.ConstraintBlockType.PreferredRoute">
            <summary>
            Whether a vehicle follows preferred routes (Not currently supported)
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Routing.ConstraintBlockType.NumberOfAxlesOnTrailersGTE">
            <summary>
            Lower limit on the total number of axles on this vehicle's trailers 
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Routing.ConstraintBlockType.TrailerLengthLTE_cm">
            <summary>
            Upper limit on the length of the trailer 
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.Routing.ConditionBlock">
            <summary>
            Describes a single constraint condition belonging to a <see cref="T:Telogis.GeoBase.Routing.ConstraintLinks"/> object. 
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Routing.ConditionBlock.blockType">
            <summary>
            The type of the condition.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Routing.ConditionBlock.blockValue">
            <summary>
            The value of the condition. The interpretation of this value depends on the blockType.
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.Routing.ConstraintLinks">
            <summary>
            A class used to describe the constraints along links.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Routing.ConstraintLinks.fromLinkId">
            <summary>
            The start link ID
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Routing.ConstraintLinks.milesPerHour">
            <summary>
            The link's speed limit
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Routing.ConstraintLinks.links">
            <summary>
            The links pertaining to these constraints. This excludes the link which the constraint
            begins on, so will only be populated for constraints which span multiple links.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Routing.ConstraintLinks.startLocation">
            <summary>
            The start location.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Routing.ConstraintLinks.endLocation">
            <summary>
            The end location. This will only be set to a valid LatLon if the constraint spans
            multiple links.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Routing.ConstraintLinks.conditions">
            <summary>
            The conditions for the constraint
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.Routing.ConstraintLinks.ToString">
            <summary>
            Describes the properties of a single constraint.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Telogis.GeoBase.Routing.ConstraintLinkDirection">
            <summary>
            Describes the direction of travel along a street link. Each street link has a reference
            end and a non-reference end.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Routing.ConstraintLinkDirection.ToReference">
            <summary>
            Toward the reference
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Routing.ConstraintLinkDirection.FromReference">
            <summary>
            From the reference
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Routing.ConstraintLinkDirection.Both">
            <summary>
            Both directions
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.Routing.Routing">
             <summary>
            
             </summary>
        </member>
        <member name="M:Telogis.GeoBase.Routing.Routing.ProgressCallback(System.Double,System.IntPtr)">
            <summary>
            Progress update callback.
            </summary>
            <param name="complete">Step completion, between 0 and 1
            inclusive.</param>
            <param name="doing">Pointer to the step description.</param>
        </member>
        <member name="M:Telogis.GeoBase.Routing.Routing.CalculateFullMatrixCosts(Telogis.GeoBase.Routing.RouteStopFull[],Telogis.GeoBase.Routing.RoutingStrategy,System.Boolean,System.Int32,System.Int32)">
            <summary>
            Calculate the cost to go from each point in the network to every other point.
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.Routing.Routing.RememberIllegalUturn(Telogis.GeoBase.Routing.ConstraintInfo)">
            <summary>
            "Remembers" a U-Turn. This puts a constraint in the network if an illegal
            U-Turn has been found.
            </summary>
            <param name="cinfo">The UTurn info</param>
            <returns>true if the UTurn was remembered just now, false if this UTurn has
            already been remembered (a constraint has already been placed)</returns>
        </member>
        <member name="T:Telogis.GeoBase.Routing.AccessAllowedDelegate">
            <summary>
            Used to determine whether access to the given link (specified by ID) is allowed.
            </summary>
            <param name="link_id"></param>
            <returns></returns>
        </member>
        <member name="T:Telogis.GeoBase.Routing.RouteProgress">
            <summary>
            Returns progress during a route operation.
            </summary>
            <remarks>
            <b>complete</b> is a value between 0 and 100, representing the
            percentage of the route that has been completed. This value may
            go down if the routing engine backtracks.<br/>
            <b>doing</b> reports the co-ordinates of the <see cref="T:Telogis.GeoBase.RouteStop"/>s
            that the routing engine is currently routing between.
            </remarks>
        </member>
        <member name="T:Telogis.GeoBase.Routing.IRoute">
            <summary>
            Provides a common interface that all Route implementations implement.
            </summary>
            <remarks>
            <para><b>Related articles</b>: <a href="7149832b-c202-4c69-9716-d4fc2876aaa4.htm">Routing Concept</a>, 
            <a href="70746bb6-4c27-4ed5-a312-1faa1f86a3bf.htm">Map Control Tutorial</a>, 
            <a href="14ad9e39-768a-4a15-9e0e-c7d3dd2b7d25.htm">Creating a Route</a>, 
            <a href="60998f81-efa9-4743-afcc-6e6f943a4fa1.htm">Routing with Traffic</a>.</para>
            </remarks>
        </member>
        <member name="M:Telogis.GeoBase.Routing.IRoute.AddStop(Telogis.GeoBase.RouteStop)">
            <summary>
            Adds a single stop to the route.
            </summary>
            <param name="stop"></param>
        </member>
        <member name="M:Telogis.GeoBase.Routing.IRoute.AddStop(Telogis.GeoBase.RouteStop,System.Int32)">
            <summary>
            Adds a single stop to a specified position in the route.
            </summary>
            <param name="stop"></param>
            <param name="at"></param>
        </member>
        <member name="M:Telogis.GeoBase.Routing.IRoute.AddStops(Telogis.GeoBase.RouteStop[])">
            <summary>
            Adds a number of stops to the route.
            </summary>
            <param name="stops"></param>
        </member>
        <member name="M:Telogis.GeoBase.Routing.IRoute.Calculate">
            <summary>
            Calculates the cost of the route using the units in
            <see cref="F:Telogis.GeoBase.Settings.Units"/>
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.Routing.IRoute.Calculate(Telogis.GeoBase.Navigation.UnitSystem)">
            <summary>
            Calculates the cost of the route using the specified units.
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.Routing.IRoute.Calculate(Telogis.GeoBase.Navigation.UnitSystem,Telogis.GeoBase.Routing.IAsyncDirectionsHandler)">
            <summary>
            Calculates the cost of the route using the specified units.
            </summary>
            <param name="units">The type of units in which to measure cost.</param>
            <param name="handler">The handler for managing updates to the <see cref="T:Telogis.GeoBase.Routing.Directions"/>.</param>
        </member>
        <member name="M:Telogis.GeoBase.Routing.IRoute.CalculateCostMatrix">
            <summary>
            Creates a cost matrix representing all stops in the route.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Telogis.GeoBase.Routing.IRoute.Clear">
            <summary>
            Clear all <see cref="T:Telogis.GeoBase.RouteStop"/>s and <see cref="T:Telogis.GeoBase.Break"/>s 
            from the route, including <see cref="P:Telogis.GeoBase.Routing.Route.Start"/> and <see cref="P:Telogis.GeoBase.Routing.Route.End"/>.
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.Routing.IRoute.ClearStops">
            <summary>
            Clear all <see cref="T:Telogis.GeoBase.RouteStop"/>s and <see cref="T:Telogis.GeoBase.Break"/>s
            with specific locations from the route.
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.Routing.IRoute.DeleteStop(Telogis.GeoBase.RouteStop)">
            <summary>
            Delete a specified <see cref="T:Telogis.GeoBase.RouteStop"/>
            from the route.
            </summary>
            <param name="aStop"></param>
        </member>
        <member name="M:Telogis.GeoBase.Routing.IRoute.ForceRecalculate">
            <summary>
            Forces the optimal route to be recalculated.
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.Routing.IRoute.GetDirections">
            <summary>
            Gets the <see cref="T:Telogis.GeoBase.Routing.Directions"/> for the
            route using the units in
            <see cref="F:Telogis.GeoBase.Settings.Units"/>
            </summary>
            <returns>The directions for traversing the route.</returns>
        </member>
        <member name="M:Telogis.GeoBase.Routing.IRoute.GetDirections(Telogis.GeoBase.Navigation.UnitSystem)">
            <summary>
            Gets the <see cref="T:Telogis.GeoBase.Routing.Directions"/> for the
            route using the specified units.
            </summary>
            <param name="units">The type of units to use.</param>
            <returns>The directions for traversing the route.</returns>
        </member>
        <member name="M:Telogis.GeoBase.Routing.IRoute.GetDirections(Telogis.GeoBase.Navigation.UnitSystem,System.String)">
            <summary>
            Gets the <see cref="T:Telogis.GeoBase.Routing.Directions"/> for the
            route using the specified culture and units.
            </summary>
            <param name="units">The type of units to use.</param>
            <param name="culture">The culture that determines the language to use for instructions.</param>
            <returns>The directions for traversing the route.</returns>
        </member>
        <member name="M:Telogis.GeoBase.Routing.IRoute.GetDirections(System.String)">
            <summary>
            Gets the <see cref="T:Telogis.GeoBase.Routing.Directions"/> for the
            route using the specified culture.
            </summary>
            <param name="culture">The culture that determines the types of units and the 
            language to use for instructions.</param>
            <returns>The directions for traversing the route.</returns>
        </member>
        <member name="M:Telogis.GeoBase.Routing.IRoute.GetDirections(Telogis.GeoBase.Navigation.UnitSystem,System.String,Telogis.GeoBase.Routing.IAsyncDirectionsHandler)">
            <summary>
            Gets the <see cref="T:Telogis.GeoBase.Routing.Directions"/> for the
            route using the specified units. Directions events are sent to 'handler' as directions are built.
            </summary>
            <param name="units">The units to return distance in.</param>
            <param name="culture">The culture to use when generating directions.</param>
            <param name="handler">A set of functions called as directions are being built.</param>
        </member>
        <member name="M:Telogis.GeoBase.Routing.IRoute.GetStop(System.Int32)">
            <summary>
            Gets a specified <see cref="T:Telogis.GeoBase.RouteStop"/> on the route.
            </summary>
            <param name="number">Stop index.</param>
            <returns><see cref="T:Telogis.GeoBase.RouteStop"/></returns>
        </member>
        <member name="M:Telogis.GeoBase.Routing.IRoute.OptimizeStops">
            <summary>
            Optimizes the stop ordering on the route.
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.Routing.IRoute.OptimizeStops(System.DateTime)">
            <summary>
            Optimizes the stop ordering on the route in consideration of the traffic and the time
            windows of the stops.
            </summary>
            <param name="startTime">Start time of the route.</param>
            <returns>An OptimizeResult class containing a list of the stops in optimized order.
            </returns>
        </member>
        <member name="M:Telogis.GeoBase.Routing.IRoute.GetTimeAndDistance(Telogis.GeoBase.DistanceUnit,System.Double@,System.TimeSpan@,Telogis.GeoBase.Routing.LinkCost)">
            <summary>
            Gets the total time and distance for the route.
            </summary>
            <param name="units">The units to return distance in.</param>
            <param name="distance">Populated with the total driving distance for this route.</param>
            <param name="time">Populated with the driving time for this route.</param>
            <param name="maxCost">The maximum cost of the route - if this cost is exceeded, then a <see cref="T:Telogis.GeoBase.Exceptions.RouteExceedsCostException"/> is thrown.</param>
        </member>
        <member name="M:Telogis.GeoBase.Routing.IRoute.GetTimeAndDistance(Telogis.GeoBase.DistanceUnit,System.Double@,System.TimeSpan@)">
            <summary>
            Gets the total time and distance for the route.
            </summary>
            <param name="units">The units to return distance in.</param>
            <param name="distance">Populated with the total driving distance for this route.</param>
            <param name="time">Populated with the driving time for this route.</param>
        </member>
        <member name="M:Telogis.GeoBase.Routing.IRoute.GetQuickDirections">
            <summary>
            Gets the (Quick) <see cref="T:Telogis.GeoBase.Routing.Directions"/> for the route.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Telogis.GeoBase.Routing.IRoute.GetRouteHighlight">
             <summary>
             Get the likely route that was taken between the points in a given
             route history, without generating natural language directions or
             checking for route legality.
             </summary>
             <returns><see cref="T:Telogis.GeoBase.Routing.Directions"/> without
             natural language directions.</returns>
             <remarks>
             <para>Route Highlighting is used to display the most likely route taken based on a series of RouteStops. 
             This is useful when only the route stops are known, and the actual route taken is not known.
             In the example below, figure 1 shows three route stops (the arrows depict the vehicle's heading) without a known route. 
             When the "Highlight" button is pressed, GetRouteHighlight() is called, the most likely directions are calculated, 
             and the Route Highlight is displayed on the map, as shown in figure 2.</para>
             <para>The route is calculated based on the RouteStops' properties:</para>
             <list type="bullet">
             <item>StartTime</item>
             <item>Lat</item>
             <item>Lon</item>
             <item>Heading</item>
             <item>TimeSincePreviousStop</item>
             <item>Speed</item>
             <item>IgnitionOn</item>
             </list>
             <para>If not all of these RouteStop properties are known, the bare minimum that can be used is: Lat, Lon, TimeSincePreviousStop
             </para></remarks>
             <example>
             <para>This example is designed with just a MapCtrl, and a button. When the program is loaded, the RouteStops
             are displayed with their headings. When the button is pressed, the route highlight is rendered on the map. 
             The map's properties are as follows:</para>
             <para>
             <list type="bullet">
             <item>CenterLat: 37.29524</item>
             <item>CenterLon: -120.4906</item>
             <item>Zoom: 3</item>
             </list>
             </para>
             <code>
             // Create a route
             Route myRoute = new Route();
            
             // Create rendererlist
             RendererList renderList = new RendererList();
            
            private void btnHiLite_Click(object sender, EventArgs e)
            {
                displayDirections();
            }
            
            private void displayDirections()
            {
             // Create directions
             Directions dir;
             
             // Add route highlight
             dir = myRoute.GetRouteHighlight();
            
             // Add route and highlight directions
             renderList.Add(dir);
            
             // Force redraw
             mapCtrl.Invalidate();
            
            }
            
            private void mapCtrl_Load(object sender, EventArgs e)
            {
             // Create stops
             RouteStop s1 = new RouteStop(new LatLon(37.2981, -120.4979));
             RouteStop s2 = new RouteStop(new LatLon(37.2952, -120.4906));
             RouteStop s3 = new RouteStop(new LatLon(37.2839, -120.4948));
            
             // Add intervals between stops
             s1.TimeSincePreviousStop = 0;
             s2.TimeSincePreviousStop = 120;
             s3.TimeSincePreviousStop = 180;
             
             //Add headings
             s1.Heading = 90;
             s2.Heading = 180;
             s3.Heading = 180;
            
             // Add stops to route
             myRoute.AddStops(new RouteStop[] { s1, s2, s3 });
            
             //Add to renderer
             mapCtrl.Renderer = renderList;
             renderList.Add(myRoute);
            }
             </code>
             <img src="Art/route_highlight_1.png"></img>
             <para>Figure 1</para>
             <img src="Art/route_highlight_2.png"></img>
             <para>Figure 2</para>
             </example>
        </member>
        <member name="M:Telogis.GeoBase.Routing.IRoute.GetRouteHighlight(System.String)">
            <summary>
            Get the likely route that was taken between the points in a given
            route history, without generating natural language directions or
            checking for route legality.
            </summary>
            <param name="dataUrl">URL from which the stop data should be
            obtained.</param>
            <returns><see cref="T:Telogis.GeoBase.Routing.Directions"/> without
            natural language directions.</returns>
            <remarks>
            <para>The RouteStop data should be in a CSV file. The file can contain the following column headings:</para>
            <para><list type="bullet">
            <item>StartTime</item>
            <item>Lat</item>
            <item>Lon</item>
            <item>Heading</item>
            <item>TimeSincePreviousStop</item>
            <item>Speed</item>
            <item>IgnitionOn</item>
            </list></para>
            <para>The column headings do not have to be in any particular order, but the method expects to see values for, as a bare minimum: Lat, Lon, and TimeSincePreviousStop. 
            </para>
            <para>Column headings that GeoBase does not recognize, will be ignored.</para>
            <para>For an example of how route highlighting works, see <see cref="M:Telogis.GeoBase.Routing.IRoute.GetRouteHighlight"/></para>
            </remarks>
        </member>
        <member name="M:Telogis.GeoBase.Routing.IRoute.CreateConstraint(System.UInt64,System.UInt64[],System.Int32,Telogis.GeoBase.LatLon,Telogis.GeoBase.LatLon,Telogis.GeoBase.LatLon)">
            <summary>
            Generate a new constraint for this route.
            </summary>
            <param name="fromLink">The link ID for the starting link.</param>
            <param name="linkids">The link ID's for any additional street links (after the first) that the
            constraint applies to. This is empty for constraints that apply to a single street link.</param>
            <param name="length">The number of street links the constraint applies to.</param>
            <param name="startLoc">The starting location.</param>
            <param name="firstInterLoc">The location of the first intersection.</param>
            <param name="endLoc">The end location. This is only needed if the constraint spans multiple links.</param>
        </member>
        <member name="P:Telogis.GeoBase.Routing.IRoute.Calculated">
            <summary>
            Indicates if the route has been calculated.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Routing.IRoute.End">
            <summary>
            Gets or sets the end stop of the route.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Routing.IRoute.PersistNetwork">
            <summary>Gets or sets a flag that signals whether to keep the routing
            network in memory after the route has been calculated.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Routing.IRoute.Start">
            <summary>
            Gets or sets the start point of the route.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Routing.IRoute.CurrentTime">
            <summary>
            Gets or sets the current time, as used by the route.
            </summary>
            <see cref="T:System.DateTime"/>
        </member>
        <member name="P:Telogis.GeoBase.Routing.IRoute.StopCount">
            <summary>
            Gets the number of stops on the route.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Routing.IRoute.Strategy">
            <summary>
            Gets or sets the <see cref="T:Telogis.GeoBase.Routing.RoutingStrategy"/> used
            to calculate the route costs.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Routing.IRoute.PermittedLinks">
            <summary>
            Sets permitted links.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Routing.IRoute.VehicleSpec">
            <summary>
            Gets or sets the <see cref="T:Telogis.GeoBase.Routing.VehicleType">VehicleType</see>
            for the route.
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.Routing.IAsyncDirectionsHandler">
            <summary>
            Handles updates to the Directions object.
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.Routing.IAsyncDirectionsHandler.OnDirectionsAppended(Telogis.GeoBase.Routing.AsyncDirectionsEventArgs)">
            <summary>
            Fires when new directions are appended to the Directions object.
            </summary>
            <param name="args">Provides access to the Directions object and information about its status.</param>
        </member>
        <member name="M:Telogis.GeoBase.Routing.IAsyncDirectionsHandler.OnDirectionsCommitted(Telogis.GeoBase.Routing.AsyncDirectionsEventArgs)">
            <summary>
            Fires when new directions are committed.
            </summary>
            <param name="args">Provides access to the Directions object and information about its status.</param>
        </member>
        <member name="M:Telogis.GeoBase.Routing.IAsyncDirectionsHandler.OnDirectionsClearUncommitted(Telogis.GeoBase.Routing.AsyncDirectionsEventArgs)">
            <summary>
            Fires when uncommitted directions are backed out.
            </summary>
            <param name="args">Provides access to the Directions object and information about its status.</param>
        </member>
        <member name="M:Telogis.GeoBase.Routing.IAsyncDirectionsHandler.OnDirectionsCompleted(Telogis.GeoBase.Routing.AsyncDirectionsEventArgs)">
            <summary>
            Fires when all directions have been generated.
            </summary>
            <param name="args">Provides access to the Directions object and information about its status.</param>
        </member>
        <member name="T:Telogis.GeoBase.Routing.AsyncDirectionsEventArgs">
            <summary>
            Provides information associated with an AsyncDirectionsEvent.
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.Routing.AsyncDirectionsEventArgs.Abort">
            <summary>
            Called to abort directions generation.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Routing.AsyncDirectionsEventArgs.Directions">
            <summary>
            The associated directions object.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Routing.AsyncDirectionsEventArgs.IsCompleted">
            <summary>
            Whether all directions have been generated.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Routing.AsyncDirectionsEventArgs.IsAborted">
            <summary>
            Whether directions generation has been aborted.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Routing.AsyncDirectionsEventArgs.UncommittedIndex">
            <summary>
            The index at which directions are unstable.
            Unstable directions are not fully calculated and may be cleared
            in a subsequent call to OnDirectionsClearUncommitted.
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.Routing.Route">
            <summary>
            A <see cref="T:Telogis.GeoBase.Routing.Route"/> consists of a series of <see cref="T:Telogis.GeoBase.RouteStop"/>s.
            The <see cref="T:Telogis.GeoBase.Routing.Route"/> can generate point to point directions and optimize multi-stop routes.
            </summary>
            <remarks><para><b>Related articles</b>: <a href="7149832b-c202-4c69-9716-d4fc2876aaa4.htm">Routing Concept</a>, 
            <a href="70746bb6-4c27-4ed5-a312-1faa1f86a3bf.htm">Map Control Tutorial</a>, 
            <a href="14ad9e39-768a-4a15-9e0e-c7d3dd2b7d25.htm">Creating a Route</a>, 
            <a href="60998f81-efa9-4743-afcc-6e6f943a4fa1.htm">Routing with Traffic</a>.</para>
            </remarks>
        </member>
        <member name="F:Telogis.GeoBase.Routing.Route.TrafficSource">
            <summary>
            Gets or sets the current GeoStream TrafficSource used by this route. For internal use only.
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.Routing.Route.#ctor">
            <summary>
            Create a new <see cref="T:Telogis.GeoBase.Routing.Route"/>.
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.Routing.Route.FromXml(System.Xml.XmlNode)">
            <summary>
            Clear any existing <see cref="T:Telogis.GeoBase.RouteStop"/>s from our route and
            load a new set of <see cref="T:Telogis.GeoBase.RouteStop"/>s from XML
            (passed to this method as a <see cref="T:System.Xml.XmlNode"/>.
            </summary>
            <remarks><para>See also <see cref="M:Telogis.GeoBase.Routing.Route.ToXmlString(System.Xml.XmlNode)"/>.</para></remarks>
            <param name="doc"><see cref="T:System.Xml.XmlNode"/></param>
        </member>
        <member name="M:Telogis.GeoBase.Routing.Route.Dispose">
            <summary>
            Dispose of this route object.
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.Routing.Route.Serialize(System.IO.Stream)">
            <summary>
            Serialize the Route to the supplied stream.  The serialized Route can be deserialized
            using the Deserialize method.
            </summary>
            <param name="outputStream">Stream which the Route is to be serialized to.</param>
        </member>
        <member name="M:Telogis.GeoBase.Routing.Route.Deserialize(System.IO.Stream)">
            <summary>
            Deserialize a Route after it has previously been serialized using the Serialize method.
            </summary>
            <param name="inputStream">Stream which the Route is to be deserialized from.</param>
            <returns>The deserialized Route object.</returns>
        </member>
        <member name="M:Telogis.GeoBase.Routing.Route.ToXmlString(System.Xml.XmlNode)">
            <summary>
            Convert this route to XML.
            The XML is added to the passed in XmlNode.
            </summary>
            <param name="node"><see cref="T:System.Xml.XmlNode"/></param>
        </member>
        <member name="M:Telogis.GeoBase.Routing.Route.#ctor(Telogis.GeoBase.RouteStop,Telogis.GeoBase.RouteStop)">
            <summary>
            Create a new route with given start and end points.
            </summary>
            <param name="start">A <see cref="T:Telogis.GeoBase.RouteStop"/> representing the start of the route.</param>
            <param name="end">A <see cref="T:Telogis.GeoBase.RouteStop"/> representing the end of the route.</param>
        </member>
        <member name="M:Telogis.GeoBase.Routing.Route.AddStop(Telogis.GeoBase.RouteStop)">
            <summary>
            Adds a <see cref="T:Telogis.GeoBase.RouteStop"/> at the
            most logical place in the list. <b>Multiple stops at the same location are ignored.</b>
            </summary>
            <remarks>
            If a high-numbered <see cref="T:Telogis.GeoBase.RouteStop"/> is
            added between two lower numbered ones, this method will re-order
            those stops to avoid back-tracking. For example, imagine a straight
            road with stops 1 and 2 on it. Using this method, should stop 3
            be added between 1 and 2, the stops will be re-ordered to run 1,2,3.<br/>
            Please note that this is not comparable to the optimization available via
            <see cref="M:Telogis.GeoBase.Routing.Route.OptimizeStops"/>.
            <para><b>Related articles</b>: <a href="60b7ec5d-a96d-4143-a76b-2231d01dd002.htm">Using a RouteMatrix</a>.</para>
            </remarks>
            <param name="stop">The <see cref="T:Telogis.GeoBase.RouteStop"/> to add.</param>
        </member>
        <member name="M:Telogis.GeoBase.Routing.Route.AddStop(Telogis.GeoBase.RouteStop,System.Int32)">
            <summary>
            Adds a <see cref="T:Telogis.GeoBase.RouteStop"/> at the
            specified location in the list.
            </summary>
            <param name="stop">The <see cref="T:Telogis.GeoBase.RouteStop"/> to add.</param>
            <param name="at">The index in the list at which to add.</param>
        </member>
        <member name="M:Telogis.GeoBase.Routing.Route.AddStopAtEnd(Telogis.GeoBase.RouteStop)">
            <summary>
            Adds a <see cref="T:Telogis.GeoBase.RouteStop"/> at the end of the list of stops.
            </summary>
            <param name="stop">The stop to add.</param>
        </member>
        <member name="M:Telogis.GeoBase.Routing.Route.AddStops(Telogis.GeoBase.RouteStop[])">
            <summary>
            Adds all the supplied RouteStop objects to the route at the most logical places in the list.
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.Routing.Route.Calculate">
            <summary>
            Calculates the route, from <see cref="P:Telogis.GeoBase.Routing.Route.Start"/> to <see cref="P:Telogis.GeoBase.Routing.Route.End"/>
            through intervening <see cref="T:Telogis.GeoBase.RouteStop"/>s.
            </summary>
            <remarks>
            When a route is <see cref="M:Telogis.GeoBase.Routing.Route.OptimizeStops">optimized</see> the order
            of its <see cref="T:Telogis.GeoBase.RouteStop"/>s changes, as may the <see cref="P:Telogis.GeoBase.Routing.Route.Start"/>
            and <see cref="P:Telogis.GeoBase.Routing.Route.End"/> points. Thus it will be necessary to recalculate
            a route after optimization as well as after additional stops are added. Calculation takes into
            account the designated <see cref="T:Telogis.GeoBase.Routing.RoutingStrategy"/> and
            should be performed if the strategy changes.
            </remarks>
        </member>
        <member name="M:Telogis.GeoBase.Routing.Route.Calculate(Telogis.GeoBase.Navigation.UnitSystem)">
            <summary>
            Calculates the route, from <see cref="P:Telogis.GeoBase.Routing.Route.Start"/> to <see cref="P:Telogis.GeoBase.Routing.Route.End"/>
            through intervening <see cref="T:Telogis.GeoBase.RouteStop"/>s.
            </summary>
            <remarks>
            When a route is <see cref="M:Telogis.GeoBase.Routing.Route.OptimizeStops">optimized</see> the order
            of its <see cref="T:Telogis.GeoBase.RouteStop"/>s changes, as may the <see cref="P:Telogis.GeoBase.Routing.Route.Start"/>
            and <see cref="P:Telogis.GeoBase.Routing.Route.End"/> points. Thus it will be necessary to recalculate
            a route after optimization as well as after additional stops are added. Calculation takes into
            account the designated <see cref="T:Telogis.GeoBase.Routing.RoutingStrategy"/> and
            should be performed if the strategy changes.
            </remarks>
        </member>
        <member name="M:Telogis.GeoBase.Routing.Route.Calculate(Telogis.GeoBase.Navigation.UnitSystem,Telogis.GeoBase.Routing.IAsyncDirectionsHandler)">
            <summary>
            Calculates the route, from <see cref="P:Telogis.GeoBase.Routing.Route.Start"/> to <see cref="P:Telogis.GeoBase.Routing.Route.End"/>
            through intervening <see cref="T:Telogis.GeoBase.RouteStop"/>s.
            </summary>
            <remarks>
            When a route is <see cref="M:Telogis.GeoBase.Routing.Route.OptimizeStops">optimized</see> the order
            of its <see cref="T:Telogis.GeoBase.RouteStop"/>s changes, as may the <see cref="P:Telogis.GeoBase.Routing.Route.Start"/>
            and <see cref="P:Telogis.GeoBase.Routing.Route.End"/> points. Thus it will be necessary to recalculate
            a route after optimization as well as after additional stops are added. Calculation takes into
            account the designated <see cref="T:Telogis.GeoBase.Routing.RoutingStrategy"/> and
            should be performed if the strategy changes.
            </remarks>
        </member>
        <member name="M:Telogis.GeoBase.Routing.Route.CalculateCostMatrix">
            <summary>
            Calculates a matrix of costs to travel from and to each stop in the route.
            </summary>
            <remarks><para><b>Related articles</b>: <a href="60b7ec5d-a96d-4143-a76b-2231d01dd002.htm">Using a RouteMatrix</a>.</para></remarks>
            <returns></returns>
        </member>
        <member name="M:Telogis.GeoBase.Routing.Route.Clear">
            <summary>
            Clear all <see cref="T:Telogis.GeoBase.RouteStop"/>s and <see cref="T:Telogis.GeoBase.Break"/>s, 
            including <see cref="P:Telogis.GeoBase.Routing.Route.Start"/> and <see cref="P:Telogis.GeoBase.Routing.Route.End"/>.
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.Routing.Route.ClearStops">
            <summary>
            Clear all <see cref="T:Telogis.GeoBase.RouteStop"/>s and <see cref="T:Telogis.GeoBase.Break"/>s 
            with specific locations on the route - but not the start and end stops.
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.Routing.Route.DeleteStop(Telogis.GeoBase.RouteStop)">
            <summary>
            Removes the given <see cref="T:Telogis.GeoBase.RouteStop"/> from the route. Note that if
            an OptimizeStops() operation has been performed on the Route, the original RouteStops
            may have been replaced.
            </summary>
            <param name="aStop">The <see cref="T:Telogis.GeoBase.RouteStop"/> to remove.</param>
        </member>
        <member name="M:Telogis.GeoBase.Routing.Route.ForceRecalculate">
            <summary>
            Force the route to be recalculated. This should be called if anything the route is unaware of changes. 
            </summary>
            <remarks><para>This method should be called if a Route has already calculated directions using 
            <see cref="M:Telogis.GeoBase.Routing.Route.GetDirections">GetDirections</see>, and then subsequently had changes made to its 
            <see cref="T:Telogis.GeoBase.Routing.RoutingStrategy"/> or <see cref="T:Telogis.GeoBase.Routing.VehicleSpec"/>.</para>
            <para>
            Examples include setting a <see cref="N:Telogis.GeoBase.GeoFence"/> in the <see cref="T:Telogis.GeoBase.Routing.RoutingStrategy"/>'s 
            <see cref="P:Telogis.GeoBase.Routing.RoutingStrategy.KeepOut"/> list, or changing the height of your 
            <see cref="T:Telogis.GeoBase.Routing.VehicleSpec"/>.</para>
            <para>If not called under these circumstances then the route will simply return previously calculated directions. 
            These may violate a GeoFence or produce a route unsuitable for the given vehicle specifications.</para>
            </remarks>
        </member>
        <member name="M:Telogis.GeoBase.Routing.Route.GetDirections">
            <summary>
            Calculate the route and return a representative
            <see cref="T:Telogis.GeoBase.Routing.Directions"/> object.  The
            <see cref="T:Telogis.GeoBase.Navigation.UnitSystem"/> for the
            directions is taken from
            <see cref="F:Telogis.GeoBase.Settings.Units"/>.
            </summary>
            <remarks><para><b>Related articles</b>: <a href="14ad9e39-768a-4a15-9e0e-c7d3dd2b7d25.htm">Creating a Route</a>, 
            <a href="d2cbdf1c-bc58-48bb-9d33-e29e6c7ca27a.htm">Using Directions</a>.</para></remarks>
            <returns><see cref="T:Telogis.GeoBase.Routing.Directions"/> for this
            route.</returns>
        </member>
        <member name="M:Telogis.GeoBase.Routing.Route.GetDirections(Telogis.GeoBase.Navigation.UnitSystem)">
            <summary>
            Calculate the route and return a representative
            <see cref="T:Telogis.GeoBase.Routing.Directions"/> object using the
            specified <see cref="T:Telogis.GeoBase.Navigation.UnitSystem"/>.
            </summary>
            <remarks>
            <para>The <see cref="M:Telogis.GeoBase.Routing.Route.GetQuickDirections">GetQuickDirections</see> method also
            returns a Directions object, but does not generate natural language directions
            or check for route legality (for example, illegal u-turns).
            </para>
            <para><b>Related articles</b>: <a href="14ad9e39-768a-4a15-9e0e-c7d3dd2b7d25.htm">Creating a Route</a>, 
            <a href="d2cbdf1c-bc58-48bb-9d33-e29e6c7ca27a.htm">Using Directions</a>.</para>
            </remarks>
            <returns><see cref="T:Telogis.GeoBase.Routing.Directions"/> for this
            route.</returns>
            <param name="units">Defines the unit system used when generating natural-language
            directions. In the USA you would typically use <see cref="F:Telogis.GeoBase.Navigation.UnitSystem.ImperialFeet"/>
            and in Australia you would typically use <see cref="F:Telogis.GeoBase.Navigation.UnitSystem.Metric"/>. This
            ensures that the generated directions are given in units familiar to the end user.</param>
        </member>
        <member name="M:Telogis.GeoBase.Routing.Route.GetDirections(System.String)">
            <summary>
            Calculate the route and return a representative <see cref="T:Telogis.GeoBase.Routing.Directions"/> object using the given culture.
            </summary>
            <remarks><para><b>Related articles</b>: <a href="14ad9e39-768a-4a15-9e0e-c7d3dd2b7d25.htm">Creating a Route</a>, 
            <a href="d2cbdf1c-bc58-48bb-9d33-e29e6c7ca27a.htm">Using Directions</a>.</para></remarks>
            <param name="culture">The culture that the returned <see cref="T:Telogis.GeoBase.Routing.Directions"/> will use.</param>
            <returns><see cref="T:Telogis.GeoBase.Routing.Directions"/> for this route.</returns>
        </member>
        <member name="M:Telogis.GeoBase.Routing.Route.GetDirections(Telogis.GeoBase.Navigation.UnitSystem,System.String)">
            <summary>
            Calculate the route and return a representative 
            <see cref="T:Telogis.GeoBase.Routing.Directions"/> object using the specified <see cref="T:Telogis.GeoBase.Navigation.UnitSystem"/> and culture.
            </summary>
            <remarks><para><b>Related articles</b>: <a href="14ad9e39-768a-4a15-9e0e-c7d3dd2b7d25.htm">Creating a Route</a>, 
            <a href="d2cbdf1c-bc58-48bb-9d33-e29e6c7ca27a.htm">Using Directions</a>.</para></remarks>
            <param name="units">Defines the unit system used when generatiing natural-language
            directions. In the USA you would typically use <see cref="F:Telogis.GeoBase.Navigation.UnitSystem.ImperialFeet"/>
            and in Australia you would typically use <see cref="F:Telogis.GeoBase.Navigation.UnitSystem.Metric"/>. This
            ensures that the generated directions are given in units familiar to the end user.</param>
            <param name="culture">The culture that the returned <see cref="T:Telogis.GeoBase.Routing.Directions"/> will use.</param>
            <returns><see cref="T:Telogis.GeoBase.Routing.Directions"/> for this route.</returns>
        </member>
        <member name="M:Telogis.GeoBase.Routing.Route.GetDirections(Telogis.GeoBase.Navigation.UnitSystem,System.String,Telogis.GeoBase.Routing.IAsyncDirectionsHandler)">
             <summary>
             Calculate the route and return a representative 
             <see cref="T:Telogis.GeoBase.Routing.Directions"/> object using the specified <see cref="T:Telogis.GeoBase.Navigation.UnitSystem"/> and culture.
             </summary>
             <remarks>
             <para>
             Used to asynchronously supply natural-language directions as they are generated. <see cref="T:Telogis.GeoBase.Routing.IAsyncDirectionsHandler"/> 
             methods supported include <see cref="M:Telogis.GeoBase.Routing.IAsyncDirectionsHandler.OnDirectionsAppended(Telogis.GeoBase.Routing.AsyncDirectionsEventArgs)"/> which 
             fires when a new direction is added to the Directions object; 
             <see cref="M:Telogis.GeoBase.Routing.IAsyncDirectionsHandler.OnDirectionsClearUncommitted(Telogis.GeoBase.Routing.AsyncDirectionsEventArgs)"/> which fires when a 
             direction is found to be incorrect clearing all uncommitted directions, 
             <see cref="M:Telogis.GeoBase.Routing.IAsyncDirectionsHandler.OnDirectionsCommitted(Telogis.GeoBase.Routing.AsyncDirectionsEventArgs)"/> which fires when 
             directions are confirmed as correct and commits all appended directions since the last commit, and
             <see cref="M:Telogis.GeoBase.Routing.IAsyncDirectionsHandler.OnDirectionsCompleted(Telogis.GeoBase.Routing.AsyncDirectionsEventArgs)"/> which fires when all directions 
             have been generated and committed.
             </para>
             <para>
             <b>Related articles</b>: <a href="14ad9e39-768a-4a15-9e0e-c7d3dd2b7d25.htm">Creating a Route</a>, 
             <a href="d2cbdf1c-bc58-48bb-9d33-e29e6c7ca27a.htm">Using Directions</a>.</para>
             </remarks>
             <example>
             <code lang="C#">
                class DirectionsHandler : IAsyncDirectionsHandler
                {
                    #region IAsyncDirectionsHandler Members
            
                    public void OnDirectionsAppended(AsyncDirectionsEventArgs args)
                    {
            
                        Console.WriteLine("OnDirectionsAppended");
                        DisplayDirectionsSoFar(args);
            
                        Console.ReadKey();
                    }
            
                    public void OnDirectionsCommitted(AsyncDirectionsEventArgs args)
                    {
                        // This will be called when all the directions in the list
                        // args.Directions are confirmed to be correct
                        Console.WriteLine("OnDirectionsCommitted");
            
                        DisplayDirectionsSoFar(args);
                    }
            
                    public void OnDirectionsClearUncommitted(AsyncDirectionsEventArgs args)
                    {
            
                        // This will be called when the last uncommitted directions instruction in
                        // args.Directions is confirmed to be incorrect
                        Console.WriteLine("OnDirectionsClearUncommitted");
                        DisplayDirectionsSoFar(args);
            
                    }
            
                    public void OnDirectionsCompleted(AsyncDirectionsEventArgs args)
                    {
            
                        // This will be called when  all the directions for the route has been
                        // confirmed as correct
                        Console.WriteLine("That's all the directions!");
                        DisplayDirectionsSoFar(args);
            
                    }
            
                    private void DisplayDirectionsSoFar(AsyncDirectionsEventArgs args)
                    {
                        // List the directions that GetDirections is sure about
                        for (int i = 0; i &lt; args.UncommittedIndex; i++)
                        {
                            Console.WriteLine(" * " + args.Directions[i]);
                        }
            
                        // List the directions that GetDirections is unsure about (the rest of the directions)
                        for (int i = args.UncommittedIndex; i  &lt; args.Directions.Count; i++)
                        {
                            Console.WriteLine("   " + args.Directions[i]);
                        }
                    }
            
                    #endregion
                }
            
                Main() 
            
                {
            	   Route route = new Route();
            
                    route.Start = new RouteStop(33.903187, -118.225697);
                    route.AddStopAtEnd(new RouteStop(33.903457, -118.225756));
                    route.End = new RouteStop(33.903178, -118.225835);
            
                    DirectionsHandler dh = new DirectionsHandler();
            
                    //r.GetDirections();
                    route.GetDirections(Telogis.GeoBase.Navigation.UnitSystem.Metric, "en-US", dh);
                }
             </code>
             </example>
             <param name="units">Defines the unit system used when generatiing natural-language
             directions. In the USA you would typically use <see cref="F:Telogis.GeoBase.Navigation.UnitSystem.ImperialFeet"/>
             and in Australia you would typically use <see cref="F:Telogis.GeoBase.Navigation.UnitSystem.Metric"/>. This
             ensures that the generated directions are given in units familiar to the end user.</param>
             <param name="culture">The culture that the returned <see cref="T:Telogis.GeoBase.Routing.Directions"/> will use.</param>
             <param name="handler">A handler for asynchronous generation of directions.</param>
             <returns><see cref="T:Telogis.GeoBase.Routing.Directions"/> for this route.</returns>
        </member>
        <member name="M:Telogis.GeoBase.Routing.Route.GetQuickDirections">
            <summary>
            Calculate the route and return a <see cref="T:Telogis.GeoBase.Routing.Directions"/> object, without generating
            natural language directions or checking for route legality.
            </summary>
            <remarks><para>The Directions object returned by GetQuickDirections() may be used to
            draw the Route on a Map.</para><para>An alternative to GetQuickDirections is the
            <see cref="M:Telogis.GeoBase.Routing.Route.GetDirections">GetDirections</see>
            method. The GetDirections method will return a full Directions object, including
            natural language directions and checks for illegal maneuvers.</para></remarks>
            <returns><see cref="T:Telogis.GeoBase.Routing.Directions"/> without natural language directions.</returns>
        </member>
        <member name="M:Telogis.GeoBase.Routing.Route.GetTimeAndDistance(Telogis.GeoBase.DistanceUnit,System.Double@,System.TimeSpan@)">
            <summary>
            Calculate the time and distance for this route.
            </summary>
            <remarks>
            This method does not calculate driving directions or check for route legality.
            Therefore, it can be used to quickly calculate driving time and distance
            with a low calculation cost.
            </remarks>
            <param name="units">The units to return distance in</param>
            <param name="distance">Populated with the total driving distance for this route</param>
            <param name="time">Populated with the driving time for this route</param>
        </member>
        <member name="M:Telogis.GeoBase.Routing.Route.GetTimeAndDistance(Telogis.GeoBase.DistanceUnit,System.Double@,System.TimeSpan@,Telogis.GeoBase.Routing.LinkCost)">
            <summary>
            Calculate the time and distance for this route.
            </summary>
            <remarks>
            This method does not calculate driving directions or check for route legality.
            Therefore, it can be used to quickly calculate driving time and distance
            with a low calculation cost.
            </remarks>
            <param name="units">The units to return distance in</param>
            <param name="distance">Populated with the total driving distance for this route</param>
            <param name="time">Populated with the driving time for this route</param>
            <param name="maxCost">The maximum cost of the route - if this cost is exceeded, then a <see cref="T:Telogis.GeoBase.Exceptions.RouteExceedsCostException"/> is thrown.</param>
        </member>
        <member name="M:Telogis.GeoBase.Routing.Route.GetStop(System.Int32)">
            <summary>
            Gets the <see cref="T:Telogis.GeoBase.RouteStop"/> at <b>index</b>.
            </summary>
            <param name="number">Index to return.</param>
            <returns>The <see cref="T:Telogis.GeoBase.RouteStop"/> at <b>index</b>.</returns>
        </member>
        <member name="M:Telogis.GeoBase.Routing.Route.GetRouteHighlight">
             <summary>
             Get the likely route that was taken between the points in a given
             route history, without generating natural language directions or
             checking for route legality.
             </summary>
             <returns><see cref="T:Telogis.GeoBase.Routing.Directions"/> without
             natural language directions.</returns>
             <remarks>
             <para>Route Highlighting is used to display the most likely route taken based on a series of RouteStops. 
             This is useful when only the route stops are known, and the actual route taken is not known.
             In the example below, figure 1 shows three route stops (the arrows depict the vehicle's heading) without a known route. 
             When the "Highlight" button is pressed, GetRouteHighlight() is called, the most likely directions are calculated, 
             and the Route Highlight is displayed on the map, as shown in figure 2.</para>
             <para>The route is calculated based on the RouteStops' properties:</para>
             <list type="bullet">
             <item>StartTime</item>
             <item>Lat</item>
             <item>Lon</item>
             <item>Heading</item>
             <item>TimeSincePreviousStop</item>
             <item>Speed</item>
             <item>IgnitionOn</item>
             </list>
             <para>If not all of these RouteStop properties are known, the bare minimum that can be used is: Lat, Lon, TimeSincePreviousStop
             </para></remarks>
             <example>
             <para>This example is designed with just a MapCtrl, and a button. When the program is loaded, the RouteStops
             are displayed with their headings. When the button is pressed, the route highlight is rendered on the map. 
             The map's properties are as follows:</para>
             <para>
             <list>
             <item>CenterLat: 37.29524</item>
             <item>CenterLon: -120.4906</item>
             <item>Zoom: 3</item>
             </list>
             </para>
             <code>
             // Create a route
             Route myRoute = new Route();
            
             // Create rendererlist
             RendererList renderList = new RendererList();
            
            private void btnHiLite_Click(object sender, EventArgs e)
            {
                displayDirections();
            }
            
            private void displayDirections()
            {
             // Create directions
             Directions dir;
             
             // Add route highlight
             dir = myRoute.GetRouteHighlight();
            
             // Add route and highlight directions
             renderList.Add(dir);
            
             // Force redraw
             mapCtrl.Invalidate();
            
            }
            
            private void mapCtrl_Load(object sender, EventArgs e)
            {
             // Create stops
             RouteStop s1 = new RouteStop(37.2981, -120.4979);
             RouteStop s2 = new RouteStop(37.2952, -120.4906);
             RouteStop s3 = new RouteStop(37.2839, -120.4948);
            
             // Add intervals between stops
             s1.TimeSincePreviousStop = 0;
             s2.TimeSincePreviousStop = 120;
             s3.TimeSincePreviousStop = 180;
             
             //Add headings
             s1.Heading = 90;
             s2.Heading = 180;
             s3.Heading = 180;
            
             // Add stops to route
             myRoute.AddStops(new RouteStop[] { s1, s2, s3 });
            
             //Add to renderer
             mapCtrl.Renderer = renderList;
             renderList.Add(myRoute);
            }
             </code>
             <img src="Art/route_highlight_1.png"></img>
             <para>Figure 1</para>
             <img src="Art/route_highlight_2.png"></img>
             <para>Figure 2</para>
             </example>
        </member>
        <member name="M:Telogis.GeoBase.Routing.Route.GetRouteHighlight(System.String)">
            <summary>
            Get the likely route that was taken between the points in a given
            route history, without generating natural language directions or
            checking for route legality.
            </summary>
            <param name="dataUrl">URL from which the stop data should be
            obtained.</param>
            <returns><see cref="T:Telogis.GeoBase.Routing.Directions"/> without
            natural language directions.</returns>
            <remarks>
            <para>The RouteStop data should be in a CSV file. The file can contain the following column headings:</para>
            <para>
            <list type="bullet">
            <item>StartTime</item>
            <item>Lat</item>
            <item>Lon</item>
            <item>Heading</item>
            <item>TimeSincePreviousStop</item>
            <item>Speed</item>
            <item>IgnitionOn</item>
            </list></para>
            <para>The column headings do not have to be in any particular order, but the method expects to see values for, as a bare minimum: Lat, Lon, and TimeSincePreviousStop. 
            </para>
            <para>Column headings that GeoBase does not recognize, will be ignored.</para>
            <para>For an example of how route highlighting works, see <see cref="M:Telogis.GeoBase.Routing.Route.GetRouteHighlight"/></para>
            </remarks>
        </member>
        <member name="M:Telogis.GeoBase.Routing.Route.HitTest(System.Int32,System.Int32,Telogis.GeoBase.IMap)">
            <summary>
            Check if there is a <see cref="M:Telogis.GeoBase.IMapMouseHandler.HitTest(System.Int32,System.Int32,Telogis.GeoBase.IMap)">hit</see> on
            any of the <see cref="T:Telogis.GeoBase.RouteStop"/>s in this route.
            </summary>
            <param name="x">The x coordinate to be tested</param>
            <param name="y">The y coordinate to be tested</param>
            <param name="aMap">The <see cref="T:Telogis.GeoBase.IMap"/> upon which to perform the test.</param>
            <returns>If there is a hit, returns the <see cref="T:Telogis.GeoBase.RouteStop"/> that was hit. If not, returns <b>null</b></returns>
        </member>
        <member name="M:Telogis.GeoBase.Routing.Route.OptimizeStops">
            <summary>
            Reorders the <see cref="T:Telogis.GeoBase.RouteStop"/> for an optimal route, according
            to the current <see cref="P:Telogis.GeoBase.Routing.Route.Strategy"/>.
            </summary>
            <remarks>
            Because route optimization is complex, this method may
            take some time to complete. Completion time
            increases with route complexity and number of stops.
            <para><b>Related articles</b>: <a href="14ad9e39-768a-4a15-9e0e-c7d3dd2b7d25.htm">Creating a Route</a>.</para>
            </remarks>
        </member>
        <member name="M:Telogis.GeoBase.Routing.Route.OptimizeStops(System.DateTime)">
            <summary>
            Reorder the route stops for an optimal route, according to the current <see cref="P:Telogis.GeoBase.Routing.Route.Strategy"/>.
            </summary>
            <param name="startTime">The date and time when the route starts.</param>
            <returns>An indication of whether time windows can be achieved.</returns>
        </member>
        <member name="M:Telogis.GeoBase.Routing.Route.Render(System.Drawing.Graphics,Telogis.GeoBase.RenderContext)">
            <summary>
            Renders the route on the given <see cref="T:Telogis.GeoBase.IMap"/>.
            </summary>
            <param name="graphics">The <see cref="T:System.Drawing.Graphics"/> responsible for rendering.</param>
            <param name="rc">The <see cref="T:Telogis.GeoBase.RenderContext"/> information for this call.</param>
        </member>
        <member name="M:Telogis.GeoBase.Routing.Route.GetConstraints(Telogis.GeoBase.LatLon)">
            <summary>
            Return a list of <see cref="T:Telogis.GeoBase.Routing.ConstraintLinks"/> for the given link location.
            </summary>
            <param name="latLon">The <see cref="T:Telogis.GeoBase.LatLon"/> specifying the location of the link; it needs to be the first point on the StreetLink.</param>
            <returns>A list of <see cref="T:Telogis.GeoBase.Routing.ConstraintLinks"/> describing the constraints for the given location.</returns>
            <remarks>
            The first argument to this method should be a <see cref="T:Telogis.GeoBase.LatLon"/> describing the first point of the <see cref="T:Telogis.GeoBase.StreetLink"/>. 
            This can be attained with the <see cref="P:Telogis.GeoBase.StreetLink.FirstPoint"/> property, as shown in the code example below. 
            </remarks>
            <example>
            <code>
            ...
            
            //Create the location and Route that we want to query
            LatLon myLoc = new LatLon(33.708480, -117.851811);
            Route myRoute = new Route();
            
            //We need to find the first point on the StreetLink. This is achieved by 
            //reverse geocoding 'myLoc', and then using its 'StreetLink.FirstPoint' property as the first argument to GetConstraints.
            GeoCodeFull gcf = GeoCoder.ReverseGeoCodeFull(myLoc);
            List&lt;ConstraintLinks&gt; constraints = myRoute.GetConstraints(gcf.StreetLink.FirstPoint, false);
            
            ...
            </code>
            </example>
        </member>
        <member name="M:Telogis.GeoBase.Routing.Route.GetConstraints(Telogis.GeoBase.LatLon,System.Boolean)">
            <summary>
            Return a list of <see cref="T:Telogis.GeoBase.Routing.ConstraintLinks"/> for the given link location.
            </summary>
            <param name="latLon">The <see cref="T:Telogis.GeoBase.LatLon"/> specifying the location of the link; it needs to be the first point on the StreetLink.</param>
            <param name="validOnly">If true, will only return constraints valid to the vehicle (<see cref="T:Telogis.GeoBase.Routing.VehicleSpec"/>), and route time. </param>
            <returns>A list of <see cref="T:Telogis.GeoBase.Routing.ConstraintLinks"/> describing the constraints for the given location.</returns>
            <remarks>
            The first argument to this method should be a <see cref="T:Telogis.GeoBase.LatLon"/> describing the first point of the <see cref="T:Telogis.GeoBase.StreetLink"/>. 
            This can be attained with the <see cref="P:Telogis.GeoBase.StreetLink.FirstPoint"/> property, as shown in the code example below. 
            </remarks>
            <example>
            <code>
            ...
            
            //Create the location and Route that we want to query
            LatLon myLoc = new LatLon(33.708480, -117.851811);
            Route myRoute = new Route();
            
            //We need to find the first point on the StreetLink. This is achieved by 
            //reverse geocoding 'myLoc', and then using its 'StreetLink.FirstPoint' property as the first argument to GetConstraints.
            GeoCodeFull gcf = GeoCoder.ReverseGeoCodeFull(myLoc);
            List&lt;ConstraintLinks&gt; constraints = myRoute.GetConstraints(gcf.StreetLink.FirstPoint, false);
            
            ...
            </code>
            </example>
        </member>
        <member name="M:Telogis.GeoBase.Routing.Route.CreateConstraint(System.UInt64,System.UInt64[],System.Int32,Telogis.GeoBase.LatLon,Telogis.GeoBase.LatLon,Telogis.GeoBase.LatLon)">
            <summary>
            Generate a new constraint for this route.
            </summary>
            <param name="fromLink">The link ID for the starting link.</param>
            <param name="linkids">The link ID's for any additional street links (after the first) that the
            constraint applies to. This is empty for constraints that apply to a single street link.</param>
            <param name="length">The number of street links the constraint applies to.</param>
            <param name="startLoc">The starting location.</param>
            <param name="firstInterLoc">The location of the first intersection.</param>
            <param name="endLoc">The end location. This is only needed if the constraint spans multiple links.</param>
        </member>
        <member name="M:Telogis.GeoBase.Routing.Route.GetVehicleSpeedLimit(Telogis.GeoBase.StreetLink,Telogis.GeoBase.SpeedUnit)">
             <summary>
             Gets the speed limit on a link for a vehicle whose specifications are in the
             VehicleSpec of this Route.
             </summary>
             <remarks>
             A speed limit is defined as a single-link constraint that applies to the specified link
             and that is valid for this Route's VehicleSpec.  If no such speed limit applies, then
             the link's posted speed limit is returned.  If the data for the link does not contain a
             posted speed limit then -1 is returned.
             </remarks>
             <example>
             <code lang="C#">
             StreetLink streetLink = ...;
             VehicleSpec overweight = new VehicleSpec();
             overweight.GrossWeight_kg = 4000;
            
             using (Route rt = new Route()) {
            		rt.VehicleSpec = overweight;
            		double speedLim = rt.GetVehicleSpeedLimit(streetLink, SpeedUnit.MilesPerHour);
            	}
             </code>
             </example>
             <param name="link">The link whose speed limit is to be returned.</param>
             <param name="units">The units in which to return the result.</param>
             <returns>The speed limit that applies to the VehicleSpec of this Route when traveling
             along the specified link.</returns>
        </member>
        <member name="M:Telogis.GeoBase.Routing.Route.GetVehicleSpeedLimit(Telogis.GeoBase.LatLon,System.UInt64,Telogis.GeoBase.SpeedUnit)">
             <summary>
             Gets the speed limit on a link for a vehicle whose specifications are in the
             VehicleSpec of this Route.
             </summary>
             <remarks>
             A speed limit is defined as a single-link constraint that applies to the specified link
             and that is valid for this Route's VehicleSpec.  If no such speed limit applies, then
             the link's posted speed limit is returned.  If the data for the link does not contain a
             posted speed limit then -1 is returned.
             </remarks>
             <example>
             <code lang="C#">
             VehicleSpec overweight = new VehicleSpec();
             overweight.GrossWeight_kg = 4000;
            
             using (Route rt = new Route()) {
            		rt.VehicleSpec = overweight;
            		double speedLim = rt.GetVehicleSpeedLimit(	new LatLon(41.471900, -81.841810),
            													815665229,
            													SpeedUnit.MilesPerHour);
            	}
             </code>
             </example>
             <param name="location">The location of the start of the link (in the direction of
             travel).</param>
             <param name="linkId">The link ID.</param>
             <param name="units">The units in which to return the result.</param>
             <returns>The speed limit that applies to the VehicleSpec of this Route when traveling
             along the specified link.</returns>
        </member>
        <member name="M:Telogis.GeoBase.Routing.Route.ReturnNegativeSpeedIfUnset(System.Double)">
            <summary>
            Returns -1 if the input speed is unset (ie is still a very large number), otherwise
            returns the input speed.
            </summary>
            <param name="inputSpeedMph">The input speed.</param>
            <returns>The input speed if it is set to a sensible value, otherwise -1.</returns>
        </member>
        <member name="M:Telogis.GeoBase.Routing.Route.QuickOptimizeStops">
            <summary>
            Reorders the RouteStops already attached to the Route. This is a much simplified version
            of OptimizeStops() which may be used on Mobile applications. Does not support 
            unpinned breaks since there are no windows.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Routing.Route.VehicleSpec">
            <summary>
            The specifications of the vehicle to drive the route.
            </summary>
            <remarks><para>
            It may be necessary to call <see cref="M:Telogis.GeoBase.Routing.Route.ForceRecalculate">ForceRecalculate</see> 
            if a vehicle's specifications are changed after a route has been calculated.</para></remarks>
        </member>
        <member name="P:Telogis.GeoBase.Routing.Route.PermittedLinks">
            <summary>
            Set permitted links.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Routing.Route.ValidLinks">
            <summary>
            Set table of links that can be used.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Routing.Route.CurrentTime">
            <summary>
            Get or set the current time, as a <see cref="T:System.DateTime">DateTime</see>.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Routing.Route.RouteProgress">
            <summary>
            Gets or sets the <see cref="T:Telogis.GeoBase.Routing.RouteProgress"/> delegate
            used to calculate the progress made as the user travels along the route.
            </summary>
            <remarks>This feature is not available in GeoStream mode.</remarks>
        </member>
        <member name="P:Telogis.GeoBase.Routing.Route.PersistNetwork">
            <summary>
            Gets or sets a flag that signals whether to keep the routing
            network in memory after the route has been calculated. This
            uses more memory but speeds recalculation of the route when
            using multiple routing strategies.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Routing.Route.Calculated">
            <summary>
            Check if this route needs to be calculated.
            </summary>
            <remarks>
            Use to check whether the current route has been calculated, avoiding
            the need for a call to <see cref="M:Telogis.GeoBase.Routing.Route.Calculate"/>. A route needs to
            be recalculated when any of the <see cref="T:Telogis.GeoBase.RouteStop"/>s
            have changed, or if the route has been <see cref="M:Telogis.GeoBase.Routing.Route.OptimizeStops">optimized</see>.
            </remarks>
        </member>
        <member name="P:Telogis.GeoBase.Routing.Route.End">
            <summary>
            The end location of this route.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Routing.Route.MapMouseEventsHandler">
            <summary>
            Gets the events object for the list - Always <b>null</b>.
            </summary>
            <remarks>This is <b>null</b> because individual <see cref="T:Telogis.GeoBase.RouteStop"/>s handle
            mouse events themselves.</remarks>
        </member>
        <member name="P:Telogis.GeoBase.Routing.Route.RequiredRendermodes">
            <summary>
            Gets the <see cref="T:Telogis.GeoBase.RenderMode">RenderMode</see> required by this <b>Route</b>
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Routing.Route.Start">
            <summary>
            Get or set the starting location of route.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Routing.Route.StopCount">
            <summary>
            Return the number of <see cref="T:Telogis.GeoBase.RouteStop"/>s on the route.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Routing.Route.Strategy">
            <summary>
            Sets the <see cref="T:Telogis.GeoBase.Routing.RoutingStrategy"/> used
            to optimize stops and calculate directions. Default is <see cref="T:Telogis.GeoBase.Routing.RoutingStrategyFastest"/>.
            </summary>
            <remarks>
            Changing the <see cref="T:Telogis.GeoBase.Routing.RoutingStrategy"/> will alter
            the priorities of the routing optimization routine.
            <para>It may be necessary to call <see cref="M:Telogis.GeoBase.Routing.Route.ForceRecalculate">ForceRecalculate</see> 
            if the routing strategy is changed after a route has been calculated.</para>
            <para><b>Related articles</b>: <a href="20a4ecb6-ef4a-4252-905b-2e4c89a6644f.htm">Modifying the Routing Strategy</a>, 
            <a href="60998f81-efa9-4743-afcc-6e6f943a4fa1.htm">Routing with Traffic</a>.</para>
            </remarks>
        </member>
        <member name="T:Telogis.GeoBase.Routing.RouteBase">
            <summary>
            Provides a common base implementation for the different Route implementations
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.Routing.RouteBase.AddStop(Telogis.GeoBase.RouteStop)">
            <summary>
            Adds a <see cref="T:Telogis.GeoBase.RouteStop"/> at the
            most logical place in the list (see remarks). <b>Multiple stops at the same location are ignored.</b>
            </summary>
            <remarks>
            If a high-numbered <see cref="T:Telogis.GeoBase.RouteStop"/> is
            added between two lower numbered ones, this method will re-order
            those stops to avoid back-tracking. For example, imagine a straight
            road with stops 1 and 2 on it. Using this method, should stop 3
            be added between 1 and 2, the stops will be re-ordered to run 1,2,3.<br/>
            Please note that this is not comparable to the optimization available via
            <see cref="M:Telogis.GeoBase.Routing.Route.OptimizeStops"/>.
            </remarks>
            <param name="stop">The <see cref="T:Telogis.GeoBase.RouteStop"/> to add.</param>
        </member>
        <member name="M:Telogis.GeoBase.Routing.RouteBase.ValidateStop(Telogis.GeoBase.RouteStop,Telogis.GeoBase.RouteStop,Telogis.GeoBase.RouteStop)">
            <summary>
            Derived classes implement this method to ensure that we can route
            through this <see cref="T:Telogis.GeoBase.RouteStop"/>.
            </summary>
            <param name="stop">This stop.</param>
            <param name="prev">The previous stop.</param>
            <param name="next">The next stop.</param>
        </member>
        <member name="M:Telogis.GeoBase.Routing.RouteBase.VerifyStopToAdd(Telogis.GeoBase.RouteStop)">
            <summary>
            Adds a route stop
            </summary>
            <param name="stop"></param>
        </member>
        <member name="M:Telogis.GeoBase.Routing.RouteBase.AddStop(Telogis.GeoBase.RouteStop,System.Int32)">
            <summary>
            Adds a <see cref="T:Telogis.GeoBase.RouteStop"/> at the
            specified location in the list.
            </summary>
            <param name="stop">The <see cref="T:Telogis.GeoBase.RouteStop"/> to add.</param>
            <param name="at">The index in the list at which to add.</param>
        </member>
        <member name="M:Telogis.GeoBase.Routing.RouteBase.AddStops(Telogis.GeoBase.RouteStop[])">
            <summary>
            Add a number of <see cref="T:Telogis.GeoBase.RouteStop"/>s to the list.
            </summary>
            <param name="stops"></param>
        </member>
        <member name="M:Telogis.GeoBase.Routing.RouteBase.Calculate(Telogis.GeoBase.Navigation.UnitSystem,Telogis.GeoBase.Routing.IAsyncDirectionsHandler)">
            <summary>
            Derived classes implement this method to optimize the route through
            the defined <see cref="P:Telogis.GeoBase.Routing.RouteBase.Strategy">routing strategy</see>.
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.Routing.RouteBase.ClearStops">
            <summary>
            Clear all <see cref="T:Telogis.GeoBase.RouteStop"/>s on the route.
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.Routing.RouteBase.Clear">
            <summary>
            Clear  all <see cref="T:Telogis.GeoBase.RouteStop"/>s and <see cref="T:Telogis.GeoBase.Break"/>s,
            including <see cref="P:Telogis.GeoBase.Routing.Route.Start"/> and <see cref="P:Telogis.GeoBase.Routing.Route.End"/>.
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.Routing.RouteBase.GetStop(System.Int32)">
            <summary>
            Gets the <see cref="T:Telogis.GeoBase.RouteStop"/> at <b>index</b>.
            </summary>
            <param name="number">Index to return.</param>
            <returns>The <see cref="T:Telogis.GeoBase.RouteStop"/> at <b>index</b>.</returns>
        </member>
        <member name="M:Telogis.GeoBase.Routing.RouteBase.DeleteStop(Telogis.GeoBase.RouteStop)">
            <summary>
            Removes the given <see cref="T:Telogis.GeoBase.RouteStop"/> from the route. Note that if
            an OptimizeStops() operation has been performed on the Route, the original RouteStops
            may have been replaced.
            </summary>
            <param name="aStop">The <see cref="T:Telogis.GeoBase.RouteStop"/> to remove.</param>
        </member>
        <member name="M:Telogis.GeoBase.Routing.RouteBase.ForceRecalculate">
            <summary>
            Force the route to be recalculated.  This should happen if something the route doesn't
            know about changes, such as items like strategy paramaters or keep-outs.
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.Routing.RouteBase.GetDirections">
            <summary>
            Calculate the route and return a representative
            <see cref="T:Telogis.GeoBase.Routing.Directions"/> object.  The
            <see cref="T:Telogis.GeoBase.Navigation.UnitSystem"/> for the
            directions is taken from
            <see cref="F:Telogis.GeoBase.Settings.Units"/>.
            </summary>
            <returns><see cref="T:Telogis.GeoBase.Routing.Directions"/> for this
            route.</returns>
        </member>
        <member name="M:Telogis.GeoBase.Routing.RouteBase.GetDirections(Telogis.GeoBase.Navigation.UnitSystem)">
            <summary>
            Calculate the route and return a representative
            <see cref="T:Telogis.GeoBase.Routing.Directions"/> object using the
            specified <see cref="T:Telogis.GeoBase.Navigation.UnitSystem"/>
            </summary>
            <returns><see cref="T:Telogis.GeoBase.Routing.Directions"/> for this
            route.</returns>
        </member>
        <member name="M:Telogis.GeoBase.Routing.RouteBase.OptimizeStops(System.DateTime)">
            <summary>
            Reorders the RouteStop for an optimal route, according to the given start time.
            </summary>
            <param name="startTime">Start time of the route.</param>
            <returns>An array of optimized stops.</returns>
        </member>
        <member name="M:Telogis.GeoBase.Routing.RouteBase.Render(System.Drawing.Graphics,Telogis.GeoBase.RenderContext)">
            <summary>
            Renders the route on the given <see cref="T:Telogis.GeoBase.IMap"/>.
            </summary>
            <param name="graphics">The <see cref="T:System.Drawing.Graphics"/> responsible for rendering.</param>
            <param name="rc">The <see cref="T:Telogis.GeoBase.RenderContext"/> information for this call.</param>
        </member>
        <member name="M:Telogis.GeoBase.Routing.RouteBase.HitTest(System.Int32,System.Int32,Telogis.GeoBase.IMap)">
            <summary>
            Check if there is a <see cref="M:Telogis.GeoBase.IMapMouseHandler.HitTest(System.Int32,System.Int32,Telogis.GeoBase.IMap)">hit</see> on
            any of the <see cref="T:Telogis.GeoBase.RouteStop"/>s in this route.
            </summary>
            <param name="x">The x co-ordinate to be tested</param>
            <param name="y">The y co-ordinate to be tested</param>
            <param name="aMap">The <see cref="T:Telogis.GeoBase.IMap"/> upon which to perform the test.</param>
            <returns>If there is a hit, returns the <see cref="T:Telogis.GeoBase.RouteStop"/> that was hit. If not, returns <b>null</b></returns>
        </member>
        <member name="P:Telogis.GeoBase.Routing.RouteBase.Start">
            <summary>
            Starting location of route.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Routing.RouteBase.End">
            <summary>
            End location of this route.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Routing.RouteBase.StopCount">
            <summary>
            Return the number of <see cref="T:Telogis.GeoBase.RouteStop"/>s on the route.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Routing.RouteBase.Calculated">
            <summary>
            Check if this route needs to be calculated.
            </summary>
            <remarks>
            Use to check whether the current route has been calculated, avoiding
            the need for a call to <see cref="M:Telogis.GeoBase.Routing.Route.Calculate"/>. A route needs to
            be recalculated when any of the <see cref="T:Telogis.GeoBase.RouteStop"/>s
            have changed, or if the route has been <see cref="M:Telogis.GeoBase.Routing.Route.OptimizeStops">optimized</see>.
            </remarks>
        </member>
        <member name="P:Telogis.GeoBase.Routing.RouteBase.MapMouseEventsHandler">
            <summary>
            Gets the events object for the list - Always <b>null</b>.
            </summary>
            <remarks>This is <b>null</b> because individual <see cref="T:Telogis.GeoBase.RouteStop"/>s handle
            mouse events themselves.</remarks>
        </member>
        <member name="P:Telogis.GeoBase.Routing.RouteBase.Strategy">
            <summary>
            Sets the <see cref="T:Telogis.GeoBase.Routing.RoutingStrategy"/> used
            to optimize stops and calculate directions. Default is <see cref="T:Telogis.GeoBase.Routing.RoutingStrategyFastest"/>.
            </summary>
            <remarks>
            Changing the <see cref="T:Telogis.GeoBase.Routing.RoutingStrategy"/> will alter
            the priorities of the routing optimization routine.
            </remarks>
        </member>
        <member name="M:Telogis.GeoBase.Routing.LocalRoute.CalculateWithoutTraffic(Telogis.GeoBase.Routing.LocalRoute.CalcuationDelegate)">
            <summary>
            Do something without traffic enabled
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.Routing.LocalRoute.CalculateMatrix(System.Double[][]@,System.Double[][]@,Telogis.GeoBase.Routing.LocalRoute.CalculateMatrixMode,System.Int32)">
            <summary>
            Calculates a row of a matrix or a full matrix (Specified by mode). 
            When calculating a full matrix, rowIndex is ignored.
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.Routing.LocalRoute.CalculateMatrixHelper">
            <summary>
            For the Route Matrix Class
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.Routing.LocalRoute.CalculateMatrixHelper(Telogis.GeoBase.Routing.RouteStopFull,System.Int32,System.Int32,Telogis.GeoBase.Routing.LinkCost,System.Boolean)">
            <summary>
            For the Route Matrix Class
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.Routing.LocalRoute.#ctor(Telogis.GeoBase.Routing.LocalRoute,System.String)">
            <summary>
            Copy constructor which keeps Route settings only without keeping stops
            or calculations.
            </summary>
            <param name="other"></param>
            <param name="journalFile"></param>
        </member>
        <member name="M:Telogis.GeoBase.Routing.LocalRoute.SnapRouteHighlightStop(Telogis.GeoBase.LatLon,Telogis.GeoBase.Routing.DirectionLink)">
            <summary>
            Makes a route highlight look better by snapping stops to links thereby avoiding the
            appearance of "stubble".
            </summary>
            <param name="stopLocation">Stop location.</param>
            <param name="prevLegEndLink">The end link of the last leg.</param>
        </member>
        <member name="P:Telogis.GeoBase.Routing.LocalRoute.RouteProgress">
            <summary>
            Delegate to call during routing operation to return progress
            information.
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.Routing.RemoteRoute.#ctor">
            <summary>
            Create a route
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.Routing.RemoteRoute.GetDirectionsNavigation">
            <summary>
            Get the directions from the server with additional information for navigation.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Telogis.GeoBase.Routing.RouteSuperLeg">
            <summary>
            A super leg is a series of route legs which are sent to native code to route all at once.
            In route highlights, super legs contain all the legs between two critical points.  In other
            routes, super legs contain just one leg.
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.Routing.ConstrainedVehicle">
            <summary>
            Used to describe the type of a ConstrainedVehicle
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Routing.ConstrainedVehicle.None">
            <summary>
            This vehicle is not constrained
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Routing.ConstrainedVehicle.Auto">
            <summary>
            Car
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Routing.ConstrainedVehicle.Bus">
            <summary>
            Bus
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Routing.ConstrainedVehicle.Taxi">
            <summary>
            Taxi
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Routing.ConstrainedVehicle.CarPool">
            <summary>
            Car-pool
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Routing.ConstrainedVehicle.Pedestrian">
            <summary>
            Pedestrian
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Routing.ConstrainedVehicle.ThruTraff">
            <summary>
            Through-traffic
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Routing.ConstrainedVehicle.Emergency">
            <summary>
            Emergency vehicle
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Routing.ConstrainedVehicle.StraightTruck">
            <summary>
            Straight truck (non-articulated)
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Routing.ConstrainedVehicle.TractorSemiTrailer">
            <summary>
            Tractor/semi-trailer truck
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Routing.ConstrainedVehicle.StandardDouble">
            <summary>
            Standard double-axle truck
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Routing.ConstrainedVehicle.IntermediateDouble">
            <summary>
            Intermediate-length double-axle truck
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Routing.ConstrainedVehicle.LongDouble">
            <summary>
            Long double-axle truck
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Routing.ConstrainedVehicle.Triple">
            <summary>
            Triple-axle truck
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Routing.ConstrainedVehicle.OtherLCV">
            <summary>
            Some other light commercial vehicle
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Routing.ConstrainedVehicle.Trailer">
            <summary>
            Trailer
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Routing.ConstrainedVehicle.Truck">
            <summary>
            Generic truck
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.Routing.LinkEdit.PolygonSelection">
            <summary>
            Selects all links touching or intersecting with a given Telogis.Geometry.Polygon.
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.Routing.LinkEdit.PolygonSelection.#ctor(Telogis.GeoBase.Geometry.Polygon)">
            <summary>
            Selects all links touching or intersecting with the given Telogis.Geometry.Polygon.
            </summary>
            <param name="polygon">The polygon that is used to select the links for editing.</param>
        </member>
        <member name="M:Telogis.GeoBase.Routing.LinkEdit.PolygonSelection.ToString">
            <summary>
            Returns the polygon in WKT format.
            </summary>
            <returns>The polygon in WKT format.</returns>
        </member>
        <member name="P:Telogis.GeoBase.Routing.LinkEdit.PolygonSelection.Polygon">
            <summary>
            The polygon that is used to select the links for editing.
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.Routing.DistanceValue">
            <summary>
            A class to describe a distance and its associated unit system. 
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.Routing.DistanceValue.#ctor(System.Double,Telogis.GeoBase.Navigation.UnitSystem)">
            <summary>
            Creates a DistanceValue from a specified distance in radians converted to a specified type of distance units.
            </summary>
            <param name="radians">The distance in radians.</param>
            <param name="units">The type of distance units to convert the value to.</param>
        </member>
        <member name="P:Telogis.GeoBase.Routing.DistanceValue.Value">
            <summary>
            The distance value.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Routing.DistanceValue.Units">
            <summary>
            The units of the distance value (metric, imperial)
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.Navigation.UnitSystem">
            <summary>
            References the type of unit system in use (e.g. Metric).
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Navigation.UnitSystem.Unknown">
            <summary>
            Unsure of which system.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Navigation.UnitSystem.Metric">
            <summary>
            Using Metric (meters).
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Navigation.UnitSystem.ImperialFeet">
            <summary>
            Using Imperial (feet).
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Navigation.UnitSystem.ImperialYards">
            <summary>
            Using Imperial (yards).
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.Navigation.GpsQualityIndicators">
            <summary>
            These flags describe which indicators of the quality of the GPS fix are currently in use.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Navigation.GpsQualityIndicators.None">
            <summary>
            No GPS fix.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Navigation.GpsQualityIndicators.NumSats">
            <summary>
            The number of satellites we have a lock on.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Navigation.GpsQualityIndicators.Mode">
            <summary>
            The type of the GPS fix.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Navigation.GpsQualityIndicators.hdop">
            <summary>
            Horizontal Dilution Of Precision. 
            </summary>
            <remarks>Lower values represents higher precision.</remarks>
        </member>
        <member name="F:Telogis.GeoBase.Navigation.GpsQualityIndicators.pdop">
            <summary>
            Positional  Dilution Of Precision.
            </summary>
            <remarks>Lower values represents higher precision.</remarks>
        </member>
        <member name="F:Telogis.GeoBase.Navigation.GpsQualityIndicators.vdop">
            <summary>
            Vertical Dilution Of Precision.
            </summary>
            <remarks>Lower values represents higher precision.</remarks>
        </member>
        <member name="T:Telogis.GeoBase.Navigation.GpsFixType">
            <summary>
            <para>Describes the type of the GPS fix: None, 2D or 3D.</para><para>A 2D fix (FixType2d) is 
            sufficient to provide location information. A 3D fix (FixType3d) is typically required for
            routing operations and directions generation. This is because routing operations and directions 
            generation require a level of precision that only a 3D fix can provide.</para>
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Navigation.GpsFixType.FixNone">
            <summary>
            No fix - we have no positional information.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Navigation.GpsFixType.FixType2d">
            <summary>
            2D fix - position, but no height information. Sufficient for location information.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Navigation.GpsFixType.FixType3d">
            <summary>
            3D fix - position and height information. Typically required for routing operations.
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.Navigation.GpsQuality">
            <summary>
            Describes the quality of the GPS fix.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Navigation.GpsQuality.indicators">
            <summary>
            Flags to indicate which values are currently recorded and 
            available for use.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Navigation.GpsQuality.NumSats">
            <summary>
            The number of satellites that we have a lock on.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Navigation.GpsQuality.Mode">
            <summary>
            The <see cref="T:Telogis.GeoBase.Navigation.GpsFixType">type of the GPS fix</see>.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Navigation.GpsQuality.hdop">
            <summary>
            Horizontal Dilution Of Precision. 
            </summary>
            <remarks>Lower values represents higher precision.</remarks>
        </member>
        <member name="F:Telogis.GeoBase.Navigation.GpsQuality.pdop">
            <summary>
            Positional Dilution Of Precision. 
            </summary>
            <remarks>Lower values represents higher precision.</remarks>
        </member>
        <member name="F:Telogis.GeoBase.Navigation.GpsQuality.vdop">
            <summary>
            Vertical Dilution Of Precision. 
            </summary>
            <remarks>Lower values represents higher precision.</remarks>
        </member>
        <member name="M:Telogis.GeoBase.Navigation.GpsQuality.Equals(System.Object)">
            <summary>
            Compares two <see cref="T:Telogis.GeoBase.Navigation.GpsQuality"/> structures for equality.
            </summary>
            <param name="obj">A <see cref="T:Telogis.GeoBase.Navigation.GpsQuality"/> to compare with this object.</param>
            <returns><b>True</b> if the two are equal in all respects, otherwise <b>false</b>.</returns>
        </member>
        <member name="T:Telogis.GeoBase.Navigation.Position">
            <summary>
            The Position structure describes various attributes of a GPS unit (such as location, signal quality, speed and heading) 
            as recorded from a GPS unit at an instant in time.
            </summary>
            <remarks>Used primarily by GPS and <see cref="N:Telogis.GeoBase.Navigation"/> classes.
            <para><b>Related articles</b>: <a href="b0f30dda-fc24-4b79-aa45-2077f0a6df13.htm">Implementing an IGps Member</a>.</para>
            </remarks>
        </member>
        <member name="F:Telogis.GeoBase.Navigation.Position.location">
            <summary>
            The recorded location.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Navigation.Position.speed">
            <summary>
            The recorded speed, measured in this Position's <see cref="F:Telogis.GeoBase.Navigation.Position.units"/>.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Navigation.Position.units">
            <summary>
            The <see cref="T:Telogis.GeoBase.SpeedUnit">SpeedUnit</see>s in which <see cref="F:Telogis.GeoBase.Navigation.Position.speed"/> is measured.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Navigation.Position.heading">
            <summary>
            The recorded heading, measured in degrees. See remarks.
            </summary>
            <remarks>The heading describes the direction of travel as an angle (measure clockwise) from due North.
            For example, a heading of zero degrees represents due North, and a heading of 90 degrees represents due East.
            Due to the nature of GPS, this may become unreliable at low speeds. 
            Consider using the <see cref="T:Telogis.GeoBase.Navigation.FilteredGps">FilteredGps</see> class.</remarks>
        </member>
        <member name="F:Telogis.GeoBase.Navigation.Position.time">
            <summary>
            A timestamp identifying the time at which this Position was recorded.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Navigation.Position.quality">
            <summary>
            The <see cref="T:Telogis.GeoBase.Navigation.GpsQuality"/> of the GPS unit, when this Position was recorded.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Navigation.Position.PositionNumber">
            <summary>
            A tag used to identify this Position.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Navigation.Position.TickCount">
            <summary>
            The value of the system <see cref="P:System.Environment.TickCount">TickCount</see> when this Position was recorded.
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.Navigation.Position.#ctor(System.Int32)">
            <summary>
            Create a new position, with a given <see cref="F:Telogis.GeoBase.Navigation.Position.PositionNumber">position number</see>.
            </summary>
            <param name="pNum"></param>
        </member>
        <member name="M:Telogis.GeoBase.Navigation.Position.HeadingString(System.Double)">
            <summary>
            Returns the abbreviation ("N", "NE", "E" etc) for a given heading.
            </summary>
            <remarks>The given heading is rounded to the nearest 45 degrees.</remarks>
            <param name="Heading">The heading, in <b>degrees</b>.</param>
            <returns>The single or double-letter abbreviation for the given heading.</returns>
        </member>
        <member name="T:Telogis.GeoBase.Navigation.GpsDeviceState">
            <summary>
            GpsDeviceState holds the state of the gps device and the friendly name if the 
            gps supports them.
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.Navigation.GpsDeviceState.#ctor(System.IntPtr)">
            <summary>
            Constructor of GpsDeviceState.  It copies values from the native pointer 
            passed in. 
            </summary>
            <param name="pGpsDevice">Native pointer to memory that contains
            the GPS_DEVICE data</param>
        </member>
        <member name="P:Telogis.GeoBase.Navigation.GpsDeviceState.ServiceState">
            <summary>
            State of the GPS Intermediate Driver service
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Navigation.GpsDeviceState.DeviceState">
            <summary>
            Status of the actual GPS device driver.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Navigation.GpsDeviceState.FriendlyName">
            <summary>
            Friendly name of the real GPS device we are currently using.
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.Navigation.StaticGps">
            <summary>
            A <see cref="T:Telogis.GeoBase.Navigation.StaticGps"/> is used for testing. It always has the same location
            and requires no hardware or resources.
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.Navigation.StaticGps.#ctor(System.String,Telogis.GeoBase.Country)">
            <summary>
            Creates a new static GPS from the given address and <see cref="T:Telogis.GeoBase.Country"/>.
            </summary>
            <param name="address">An address representing a street address.</param>
            <param name="country"><see cref="T:Telogis.GeoBase.Country"/></param>
        </member>
        <member name="M:Telogis.GeoBase.Navigation.StaticGps.#ctor(System.Double,System.Double)">
            <summary>
            Creates a new static GPS from the given positional parameters.
            </summary>
            <remarks>See also <see cref="T:Telogis.GeoBase.LatLon"/>.</remarks>
            <param name="lat"></param>
            <param name="lon"></param>
        </member>
        <member name="M:Telogis.GeoBase.Navigation.StaticGps.ChangePos(System.Double,System.Double)">
            <summary>
            Update the position of the static GPS to the specified value.
            </summary>
            <param name="lat">The new latitude for the static GPS.</param>
            <param name="lon">The new longitude for the static GPS.</param>
        </member>
        <member name="M:Telogis.GeoBase.Navigation.StaticGps.PowerUp">
            <summary>
            Powers up the static GPS.
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.Navigation.StaticGps.PowerDown">
            <summary>
            Powers down the static GPS.
            </summary>
        </member>
        <member name="E:Telogis.GeoBase.Navigation.StaticGps.Update">
            <summary>
            Implemented as a member of IGps. The position of a StaticGps never
            changes unless there is a call to the <see cref="M:Telogis.GeoBase.Navigation.StaticGps.ChangePos(System.Double,System.Double)"/> method. This EventHandler is called regularly whilst the StaticGps
            is <see cref="M:Telogis.GeoBase.Navigation.StaticGps.PowerUp">powered up</see>.
            </summary>
        </member>
        <member name="E:Telogis.GeoBase.Navigation.StaticGps.GPSException">
            <summary>
            Implemented as part of the IGPS interface (to be called when the GPS experiences a fatal exception), this
            should not occur for the static GPS.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Navigation.StaticGps.Position">
            <summary>
            Gets the <see cref="T:Telogis.GeoBase.Navigation.Position"/>.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Navigation.StaticGps.PoweredUp">
            <summary>
            Gets the power status of the static GPS.
            </summary>
            <remarks>Returns <b>true</b> if the static GPS is powered up. Otherwise <b>false</b>.</remarks>
        </member>
        <member name="T:Telogis.GeoBase.Navigation.InteractiveGps">
            <summary>
            An <see cref="T:Telogis.GeoBase.Navigation.IGps">IGps</see> member designed for testing; an alternative
            to <see cref="T:Telogis.GeoBase.Navigation.GpsSimulator">GpsSimulator</see>. See remarks.
            </summary>
            <remarks>
            Unlike the GpsSimulator (which follows a predetermined route), the InteractiveGps may
            be controlled using the keyboard: the heading of an InteractiveGps may be adjusted using the left and right
            arrowkeys. Use the up arrowkey to move the location of the InteractiveGps.
            </remarks>
        </member>
        <member name="M:Telogis.GeoBase.Navigation.InteractiveGps.#ctor(Telogis.GeoBase.LatLon)">
            <summary>
            Creates a new interactive GPS from the given positional parameters.
            </summary>
            <remarks>See also <see cref="T:Telogis.GeoBase.LatLon"/>.</remarks>
            <param name="location">The initial location.</param>
        </member>
        <member name="M:Telogis.GeoBase.Navigation.InteractiveGps.#ctor(Telogis.GeoBase.LatLon,System.IO.StreamWriter)">
            <summary>
            Creates a new interactive GPS from the given positional parameters.
            </summary>
            <remarks>See also <see cref="T:Telogis.GeoBase.LatLon"/>.</remarks>
            <param name="location">The initial location.</param>
            <param name="log">A StreamWriter or null. Periodically the location, speed, heading and
            update counter (in that order) will be written to the <i>log</i> stream.</param>
        </member>
        <member name="M:Telogis.GeoBase.Navigation.InteractiveGps.PowerUp">
            <summary>
            Powers up the interactive GPS.
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.Navigation.InteractiveGps.PowerDown">
            <summary>
            Powers down the interactive GPS.
            </summary>
        </member>
        <member name="E:Telogis.GeoBase.Navigation.InteractiveGps.Update">
            <summary>
            Called when the interactive GPS updates its position.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Navigation.InteractiveGps.SpeedMultiplier">
            <summary>
            The amount by which the speed of the interactive GPS changes when the SHIFT key is down.
            <remarks>
            The value of <see cref="P:Telogis.GeoBase.Navigation.InteractiveGps.Speed">Speed</see> is periodically multiplied by this value
            to simulate acceleration when the SHIFT key is pressed. Pressing the MINUS key reduces this
            value (to a minimum value of 1) and pressing the PLUS key increases this value (to a maximum of 7).</remarks>
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Navigation.InteractiveGps.Speed">
             <summary>
             The simulated speed of the interactive GPS.
             </summary>
            <remarks>
             This value can be increased by pressing the SHIFT key when the value of <see cref="P:Telogis.GeoBase.Navigation.InteractiveGps.SpeedMultiplier">SpeedMultiplier</see> is
             greater than one and decreased by pressing the CTRL key.
             </remarks>
        </member>
        <member name="P:Telogis.GeoBase.Navigation.InteractiveGps.SpeedUnits">
            <summary>
            The units used for the <see cref="P:Telogis.GeoBase.Navigation.InteractiveGps.Speed">Speed</see> property.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Navigation.InteractiveGps.Position">
            <summary>
            Gets the <see cref="T:Telogis.GeoBase.Navigation.Position"/>.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Navigation.InteractiveGps.PoweredUp">
            <summary>
            Gets whether the interactive GPS is powered up.
            </summary>
            <remarks>Returns <b>true</b> if the static GPS is powered up. Otherwise <b>false</b>.</remarks>
        </member>
        <member name="E:Telogis.GeoBase.Navigation.InteractiveGps.GPSException">
            <summary>
            Implemented as part of the IGPS interface (to be called when the GPS experiences a fatal exception), this
            should not occur for the interactive GPS.
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.Navigation.CEGps">
            <summary>
            A GPS implementation for use with Windows CE 5.01 and above.
            </summary>
            <remarks><para>This class is designed for Windows CE/Windows Mobile devices which support the 
            Microsoft GPS Intermediate Driver (GPSID). This allows multiple applications on your device 
            to access GPS data simultaneously.</para>
            <para>If your mobile device/GPS does not support GPSID, the <see cref="T:Telogis.GeoBase.Navigation.NMEAGps"/> class can be used to 
            interface with standard NMEA devices via a COM port.</para><para>
            <b>Related articles</b>: <a href="135e6827-fd28-45fa-b5f6-73926f90ea1c.htm">The IGps Interface</a>. </para></remarks>
        </member>
        <member name="F:Telogis.GeoBase.Navigation.CEGps.Bad">
            <summary>
            <i>For internal use. Marks a bad data packet.</i>
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.Navigation.CEGps.GetDeviceState">
            <summary>
            Queries the device state.
            </summary>
            <returns>Device state information</returns>
        </member>
        <member name="M:Telogis.GeoBase.Navigation.CEGps.ConstructGPS">
            <summary>
            Initialize the GPS.
            </summary>
            <remarks><para>This is a convenience method, designed to be run on a Windows Mobile device, 
            which will first try to set up a <see cref="T:Telogis.GeoBase.Navigation.CEGps"/> class. If this is not possible, it will then scan the 
            COM ports to create an <see cref="T:Telogis.GeoBase.Navigation.NMEAGps"/> class. As a last resort it will create a <see cref="T:Telogis.GeoBase.Navigation.StaticGps"/> class.</para></remarks>
            <remarks><para><b>Related articles</b>: <a href="135e6827-fd28-45fa-b5f6-73926f90ea1c.htm">The IGps Interface</a>.</para></remarks>
            <returns><para>Returns a <see cref="T:Telogis.GeoBase.Navigation.StaticGps"/> centered on (0,0) if no hardware is found.</para>
            <para>Returns a <see cref="T:Telogis.GeoBase.Navigation.NMEAGps"/> if the hardware is detected as conforming to the NMEA standard.</para></returns>
        </member>
        <member name="M:Telogis.GeoBase.Navigation.CEGps.#ctor">
            <summary>
            Creates a new CEGps device.
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.Navigation.CEGps.PowerUp">
            <summary>
            Prepares the GPS unit for use. This must be called before the GPS unit is used.
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.Navigation.CEGps.PowerDown">
            <summary>
            Closes down the GPS unit, after which the unit may not be used
            until <see cref="M:Telogis.GeoBase.Navigation.CEGps.PowerUp"/> is called.
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.Navigation.CEGps.Close">
            <summary>
            Closes down the GPS unit, after which the unit may not be used
            until <see cref="M:Telogis.GeoBase.Navigation.CEGps.PowerUp"/> is called.
            <i>Functionally equivalent to <see cref="M:Telogis.GeoBase.Navigation.CEGps.PowerDown"/>.</i>
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.Navigation.CEGps.Dispose">
            <summary>
            Powers down the GPS unit.
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.Navigation.CEGps.Finalize">
            <summary>
            This destructor powers down the GPS unit.
            </summary>
        </member>
        <member name="E:Telogis.GeoBase.Navigation.CEGps.GPSException">
            <summary>
            Called when the GPS experiences a fatal exception.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Navigation.CEGps.PoweredUp">
            <summary>
            Gets the powered up state of the GPS unit. Returns <b>true</b> if the GPS is
            powered up, otherwise false.
            </summary>
        </member>
        <member name="E:Telogis.GeoBase.Navigation.CEGps.Update">
            <summary>
            This event handler is called every time the CEGps updates its position.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Navigation.CEGps.Position">
            <summary>
            Gets a the last recorded GPS position.
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.Navigation.NMEAGps">
            <summary>
            Represents a GPS unit conforming to the NMEA standard. See remarks.
            </summary>
            <remarks><para>The NMEAGps class listens for the following standard NMEA GPS sentences:</para>
            <para>GGA - 3D location and precision information</para>
            <para>GSA - active satellites</para>
            <para>RMC - position, velocity and time</para>
            <para>The <see cref="T:Telogis.GeoBase.Navigation.NMEAGps"/> class connects to a COM port, and is intended for interfacing directly with NMEA standard
            GPS hardware. This requires exclusive access to the COM port, and may not be compatible with other applications
            on the same device which require GPS data.</para>
            <para>If your device supports the Microsoft GPS Intermediate Driver (GPSID), we recommend either using the <see cref="T:Telogis.GeoBase.Navigation.CEGps"/> 
            class, or using <see cref="T:Telogis.GeoBase.Navigation.NMEAGps"/> with a GPSID-managed Virtual COM port. Both of these approaches will allow multiple 
            applications to access GPS information simultaneously.</para>
            <para>See the GPSID documentation for more details: <a href="http://msdn.microsoft.com/en-us/library/bb202128.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/bb202128.aspx</a>.</para>
            <para><b>Related articles</b>: <a href="135e6827-fd28-45fa-b5f6-73926f90ea1c.htm">The IGps Interface</a>.</para>
            </remarks>
        </member>
        <member name="F:Telogis.GeoBase.Navigation.NMEAGps.SpeedThreshold">
            <summary>
            Speed threshold of this GPS unit.
            </summary>
            <remarks>
            <para>
            SpeedThreshold is measured in knots. You may use 
            <see cref="M:Telogis.GeoBase.MathUtil.ConvertUnits(System.Double,Telogis.GeoBase.SpeedUnit,Telogis.GeoBase.SpeedUnit)"/>
            to convert between units.
            </para>
            <para>
            To avoid GPS drift the GPS unit's heading information (read directly from the GPS unit's GPSRMC tag by
            the NMEAGps object) will be ignored unless the speed of the GPS unit exceeds this SpeedThreshold value.
            </para>
            </remarks>
        </member>
        <member name="M:Telogis.GeoBase.Navigation.NMEAGps.#ctor(System.IO.Ports.SerialPort)">
            <summary>
            Create a new NMEA GPS with the given serial port.
            </summary>
            <param name="sp">The <see cref="T:System.IO.Ports.SerialPort"/> to which the GPS is connected.</param>
        </member>
        <member name="M:Telogis.GeoBase.Navigation.NMEAGps.#ctor(System.String,System.Int32)">
            <summary>
            Create a new NMEA GPS with the given serial port name and baud rate.
            </summary>
            <remarks>Causes NMEA GPS to use native API calls to read the port, circumventing incorrect .NET CF SerialPorts on some devices.</remarks>
            <param name="portName">Name of port, eg. "COM1"</param>
            <param name="baudRate">Baud rate to use, eg. 9600</param>
        </member>
        <member name="M:Telogis.GeoBase.Navigation.NMEAGps.#ctor(System.IO.Stream)">
            <summary>
            Create a new NMEA GPS, using an input stream. This constructor should be used for
            custom hardware interfaces that can provide the NMEA data as a stream.
            </summary>
            <remarks>The Stream provided should manage normal data exceptions such as <see cref="T:System.IO.EndOfStreamException">EndOfStreamException</see>, as well as managing the stream itself as <see cref="M:Telogis.GeoBase.Navigation.NMEAGps.PowerDown">PowerDown</see> and <see cref="M:Telogis.GeoBase.Navigation.NMEAGps.PowerUp">PowerUp</see> will not be able to do this.</remarks>
            <param name="s">The <see cref="T:System.IO.Stream"/> that supplies GPS data</param>
        </member>
        <member name="M:Telogis.GeoBase.Navigation.NMEAGps.#ctor(System.IO.StreamReader)">
            <summary>
            Create a new NMEA GPS, using a StreamReader as input. This constructor should be used for
            replay of GPS data captured using <see cref="F:Telogis.GeoBase.Navigation.NMEAGps.Trace">Trace</see> during an earlier session.
            </summary>
            <param name="input">An <see cref="T:System.IO.StreamReader">input stream</see>.</param>
        </member>
        <member name="M:Telogis.GeoBase.Navigation.NMEAGps.#ctor(System.IO.StreamReader,System.Int32)">
            <summary>
            Create a new NMEA GPS, using a StreamReader as input. This constructor should be used for
            replay of GPS data captured using <see cref="F:Telogis.GeoBase.Navigation.NMEAGps.Trace">Trace</see> during an earlier session.
            </summary>
            <param name="input">An <see cref="T:System.IO.StreamReader">input stream</see>.</param>
            <param name="speedup">A time multiplier to allow the reader to replay more rapidly</param>
        </member>
        <member name="M:Telogis.GeoBase.Navigation.NMEAGps.PowerUp">
            <summary>
            Initializes the GPS hardware interface.
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.Navigation.NMEAGps.PowerDown">
            <summary>
            Closes down the GPS interface and releases the port.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Navigation.NMEAGps.Trace">
            <summary>
            May be used to record the raw NMEA data read from the device.
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.Navigation.NMEAGps.Replay">
            <summary>
            Replays the stream.
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.Navigation.NMEAGps.Dispose">
            <summary>
            Powers down the GPS unit.
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.Navigation.NMEAGps.Finalize">
            <summary>
            This destructor powers down the GPS unit.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Navigation.NMEAGps.PortName">
            <summary>
            Gets the name of the port, as a string.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Navigation.NMEAGps.PoweredUp">
            <summary>
            Gets the powered up state of the GPS interface.
            </summary>
            <remarks>Returns <b>true</b> if the interface is powered up, otherwise <b>false</b>.</remarks>
        </member>
        <member name="E:Telogis.GeoBase.Navigation.NMEAGps.GPSException">
            <summary>
            Called when the GPS experiences a fatal exception that may affect its ability to
            continue working.
            </summary>
        </member>
        <member name="E:Telogis.GeoBase.Navigation.NMEAGps.Update">
            <summary>
            This event handler will be called every time the NMEAGps updates its position.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Navigation.NMEAGps.Position">
            <summary>
            Gets the last recorded GPS <see cref="T:Telogis.GeoBase.Navigation.Position"/>.
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.Navigation.GpsAutomaton">
            <summary>
            A simple Gps class that takes a set of directions and advances a point when Advance() is called
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.Navigation.GpsAutomaton.#ctor(Telogis.GeoBase.Routing.Directions)">
            <summary>
            Create a new GpsAutomaton with the given directions
            </summary>
            <param name="dir">Directions of a route</param>
        </member>
        <member name="M:Telogis.GeoBase.Navigation.GpsAutomaton.#ctor(Telogis.GeoBase.Routing.Directions,System.DateTime)">
            <summary>
            Create a new GpsAutomaton with the given directions and time.
            </summary>
            <param name="dir">Directions of a route.</param>
            <param name="currentTime">Current Time.</param>
        </member>
        <member name="M:Telogis.GeoBase.Navigation.GpsAutomaton.Advance(System.Double)">
            <summary>
            Advance down the route by a certain number of seconds
            </summary>
            <param name="seconds">Number of seconds</param>
        </member>
        <member name="M:Telogis.GeoBase.Navigation.GpsAutomaton.SetNewRoute(Telogis.GeoBase.Routing.Directions)">
            <summary>
            Set a new route, clearing the old route.
            </summary>
            <param name="dir">The route to travel, specified as <see cref="T:Telogis.GeoBase.Routing.Directions"/>.</param>
        </member>
        <member name="M:Telogis.GeoBase.Navigation.GpsAutomaton.PowerUp">
            <summary>
            Implemented as part of the IGps interface. This method is a stub that does nothing.
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.Navigation.GpsAutomaton.PowerDown">
            <summary>
            Implemented as a part of the IGps interface. This method is a stub that does nothing.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Navigation.GpsAutomaton.Location">
            <summary>
            Gets the current position.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Navigation.GpsAutomaton.Speed">
            <summary>
            Gets the current speed.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Navigation.GpsAutomaton.Heading">
            <summary>
            Get the current heading, in degrees.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Navigation.GpsAutomaton.Arrived">
            <summary>
            Get whether or not the GpsAutomaton has arrived at its destination.
            </summary>
        </member>
        <member name="E:Telogis.GeoBase.Navigation.GpsAutomaton.Arrive">
            <summary>
            This event handler will be called when the GpsAutomaton arrives at its destination.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Navigation.GpsAutomaton.PoweredUp">
            <summary>
            Implemented as part of the IGps interface. This method always returns true.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Navigation.GpsAutomaton.Position">
            <summary>
            The current position of the GPS Automaton.
            </summary>
        </member>
        <member name="E:Telogis.GeoBase.Navigation.GpsAutomaton.Update">
            <summary>
            Called when the <see cref="M:Telogis.GeoBase.Navigation.GpsAutomaton.Advance(System.Double)"/> method is called to update
            the current position.
            </summary>
        </member>
        <member name="E:Telogis.GeoBase.Navigation.GpsAutomaton.GPSException">
            <summary>
            Implemented as part of the IGPS interface (to be called when the GPS experiences a fatal exception), this
            should not occur for the GPS Automaton.
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.Navigation.GpsSimulator">
            <summary>
            This class simulates a GPS unit by following a predefined <see cref="T:Telogis.GeoBase.Routing.Directions">route</see>
            at the allowable speed limit. The <see cref="P:Telogis.GeoBase.Navigation.GpsSimulator.TimeMultiplier"/>
            allows the speed of the simulation to run quickly if desired. 
            This class is intended for testing or demonstration purposes.
            </summary>
            <remarks><para><b>Related articles</b>: <a href="135e6827-fd28-45fa-b5f6-73926f90ea1c.htm">The IGps Interface</a>.</para></remarks>
        </member>
        <member name="M:Telogis.GeoBase.Navigation.GpsSimulator.#ctor(Telogis.GeoBase.Routing.Directions,System.Int32)">
            <summary>
            Creates a simulated GPS unit from a predefined route.
            </summary>
            <param name="dir">The route to travel, specified as <see cref="T:Telogis.GeoBase.Routing.Directions"/>.</param>
            <param name="TimeMultiplier">May be used to increase the speed of the simulation. A value of 2
            will make the simulator run twice as fast as real life.</param>
        </member>
        <member name="M:Telogis.GeoBase.Navigation.GpsSimulator.#ctor(Telogis.GeoBase.Routing.Directions,System.Int32,System.Int32)">
            <summary>
            Creates a simulated GPS unit from a predefined route.
            </summary>
            <param name="dir">The route to travel, specified as <see cref="T:Telogis.GeoBase.Routing.Directions"/>.</param>
            <param name="TimeMultiplier">May be used to increase the speed of the simulation. A value of 2
            will make the simulator run twice as fast as real life.</param>
            <param name="delayStartMilliseconds">The delay, in milliseconds, before the simulater starts moving along the route.</param>
        </member>
        <member name="M:Telogis.GeoBase.Navigation.GpsSimulator.SetNewRoute(Telogis.GeoBase.Routing.Directions)">
            <summary>
            Set a new route, clearing the old route.
            </summary>
            <param name="dir"></param>
        </member>
        <member name="M:Telogis.GeoBase.Navigation.GpsSimulator.ResetLastTime">
            <summary>
            Synchronizes the simulation time with the current system time.
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.Navigation.GpsSimulator.PowerUp">
            <summary>
            Implemented as a member of <see cref="T:Telogis.GeoBase.Navigation.IGps"/>. Non-functional.
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.Navigation.GpsSimulator.PowerDown">
            <summary>
            Performs an orderly shut down of the simulated GPS unit.
            </summary>
        </member>
        <member name="E:Telogis.GeoBase.Navigation.GpsSimulator.Arrive">
            <summary>
            Called when the GPS arrives at its destintation.
            </summary>
        </member>
        <member name="E:Telogis.GeoBase.Navigation.GpsSimulator.Update">
            <summary>
            This event handler is called every time the GpsSimulator updates its position.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Navigation.GpsSimulator.Time">
            <summary>
            Gets the current time.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Navigation.GpsSimulator.TimeMultiplier">
            <summary>
            Gets or sets the TimeMultiplier. Used to increase the speed of the simulation.
            </summary>
            <remarks>A TimeMultiplier of 1 is equivalent to real-time. A TimeMultiplier
            of two causes the simulation to run two times faster than real-time.</remarks>
        </member>
        <member name="P:Telogis.GeoBase.Navigation.GpsSimulator.UpdateInterval">
            <summary>
            The number of milliseconds that elapses between updates of the simulated GPS' position.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Navigation.GpsSimulator.Position">
            <summary>
            Gets the current (simulated) <see cref="T:Telogis.GeoBase.Navigation.Position"/>. This also includes
            speed, time, heading and GPS quality information.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Navigation.GpsSimulator.Arrived">
            <summary>
            Indicates whether the simulated GPS has arrived at its destination.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Navigation.GpsSimulator.Heading">
            <summary>
            Get the current heading, in degrees.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Navigation.GpsSimulator.Location">
            <summary>
            Get the current position.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Navigation.GpsSimulator.Speed">
            <summary>
            Get the current speed.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Navigation.GpsSimulator.PoweredUp">
            <summary>
            Indicates whether the simulated GPS unit is running.
            </summary>
        </member>
        <member name="E:Telogis.GeoBase.Navigation.GpsSimulator.GPSException">
            <summary>
            Implemented as part of the IGPS interface (to be called when the GPS experiences a fatal exception), this
            should not occur for the simulated GPS.
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.Navigation.DriftyGpsSimulator.#ctor(Telogis.GeoBase.Routing.Directions,System.Int32)">
            <summary>
            Creates a drifty GPS simulator for a predefined route.
            </summary>
            <param name="dir">The predefined route that the GPS simulator follows</param>
            <param name="TimeMultiplier">May be used to increase the speed of simulation. A value of
            2 makes the simulator run twice as fast as real life.</param>
        </member>
        <member name="P:Telogis.GeoBase.Navigation.DriftyGpsSimulator.Inaccuracy">
            <summary>
            Gets or sets the inaccuracy level of the GPS Simulator in meters
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Navigation.DriftyGpsSimulator.ActualLocation">
            <summary>
            Gets the current position that is accurate and not subject to drift
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Navigation.DriftyGpsSimulator.Location">
            <summary>
            Gets the current position, which includes some random drift.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Navigation.DriftyGpsSimulator.Position">
            <summary>
            Gets the current (simulated) <see cref="T:Telogis.GeoBase.Navigation.Position"/>. This also includes
            speed, time, heading and GPS quality information.
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.MapChangedEventArgs">
            <summary>
            The arguments passed to an event handler that responds when a map property changes.
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.MapChangedEventArgs.#ctor">
            <summary>
            Create a new MapChangedEventArgs object.
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.MapChangedEventArgs.#ctor(System.String,System.Object,System.Object)">
            <summary>
            Create and initialize a MapChangedEventArgs object.
            </summary>
            <param name="PropertyName">The name of the property that changed.</param>
            <param name="OldValue">The old value of the property.</param>
            <param name="NewValue">The new value of the property.</param>
        </member>
        <member name="P:Telogis.GeoBase.MapChangedEventArgs.PropertyName">
            <summary>
            The name of the property that changed.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.MapChangedEventArgs.OldValue">
            <summary>
            The value of the property before the change.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.MapChangedEventArgs.NewValue">
            <summary>
            The value of the property after the change.
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.MapChangedEventHandler">
            <summary>
            The type of event handlers that are called when a map property changes.
            </summary>
            <param name="sender">The IMap that changed.</param>
            <param name="e">Event handler arguments, indicating the property that changed, and how the property value changed.</param>
        </member>
        <member name="T:Telogis.GeoBase.MapQuality">
            <summary>
            An enumeration of the options available for map rendering accuracy. Increased accuracy is more
            processor intensive. Note that the actual outcome of the MapQuality depends on the <see cref="T:Telogis.GeoBase.MapStyle">
            MapStyle</see> being used. MapStyles can change their output based on the MapStyle Setting.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.MapQuality.Panning">
            <summary>
            This map is a very quick map, drawn when the map control is panning.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.MapQuality.Fast">
            <summary>
            The least processor intensive mode, this settings results in less accurate maps.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.MapQuality.Good">
            <summary>
            A balance between accuracy and processor intensiveness.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.MapQuality.Perfect">
            <summary>
            This mode results in the most accurate maps, but is also the most processor intensive.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.MapQuality.FastStreets">
            <summary>
            This mode is like Perfect except that lines are drawn 
            using Xiaolin Wu's anti-aliasing algorithm to speed rendering. 
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.MapPerspective">
            <summary>
            An enumeration of options for the perspective to draw a map from.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.MapPerspective.TwoD">
            <summary>
            Draw the map from a plain top down perspective similar to a paper map. This is
            the default
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.MapPerspective.TwoPointFiveD">
            <summary>
            Draw the map from an angled perspective, useful for navigation.
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.Map">
            <summary>
            Generates Maps.
            </summary>
            <remarks>
            <para>
            Map classes can also be used to translate from X, Y points to <see cref="T:Telogis.GeoBase.LatLon"/> for
            panning and zooming operations.
            </para>
            <para>
            A Map object is not a lightweight object. Operations on the map are swift but the object has
            a memory footprint proportional to the size of the image to be generated. As such, it is recommended
            that the pattern below be used when dealing with maps in a transient fashion.
            </para>
            <para>
            Also note that the Image returned by GetMap will be disposed when the Map object is
            disposed. To work around this copy the Bitmap object as in the following snippet.
            </para>
            <para><b>Related articles</b>: <a href="9af7c41f-fabe-48be-9317-1e019cc19c33.htm">Map Concept</a>.</para>
            </remarks>
            <example>
            <code lang="C#">
            Image toKeep;
            using (Map map = new Map(center, width, height, zoom)) {
            	toKeep = new Bitmap(map.GetMap());	// toKeep is a copy, so will not be disposed.
            	...
            	Image transient = map.GetMap(); // This image will be disposed when this block exits.
            }
            </code>
            </example>
        </member>
        <member name="M:Telogis.GeoBase.Map.#ctor">
            <summary>
            Create with default size, center and zoom level.
            </summary>
            <remarks>
            Default size: 100 x 100<br/>
            Default zoom: <see cref="P:Telogis.GeoBase.Map.MaxZoom"/><br/>
            Default center: 0, 0<br/>
            </remarks>
        </member>
        <member name="M:Telogis.GeoBase.Map.#ctor(Telogis.GeoBase.LatLon,System.Int32,System.Int32,System.Double)">
            <summary>
            Create a map with the given parameters.
            </summary>
            <param name="Center">A <see cref="T:Telogis.GeoBase.LatLon"/> specifying the point
            that the map should be centered upon when created.</param>
            <param name="Width">The width of this map in pixels.</param>
            <param name="Height">The height of this map in pixels.</param>
            <param name="Zoom">The zoom level that this map should be set to when created.
            Somewhere between <see cref="P:Telogis.GeoBase.Map.MinZoom"/> and <see cref="P:Telogis.GeoBase.Map.MaxZoom"/>.
            </param>
        </member>
        <member name="M:Telogis.GeoBase.Map.GetMap">
            <summary>
            Generate an <see cref="T:System.Drawing.Image"/> of the map using the current <see cref="P:Telogis.GeoBase.Map.Center"/>, <see cref="P:Telogis.GeoBase.Map.Size"/>, and <see cref="P:Telogis.GeoBase.Map.Zoom"/>.
            </summary>
            <returns>A 32bpp <see cref="T:System.Drawing.Image"/>.</returns>
        </member>
        <member name="M:Telogis.GeoBase.Map.GetMap(System.Boolean,Telogis.GeoBase.MapProgress,System.Boolean@)">
             <summary>
             Generate an <see cref="T:System.Drawing.Image"/> of the map using the current <see cref="P:Telogis.GeoBase.Map.Center"/>, <see cref="P:Telogis.GeoBase.Map.Size"/>, and <see cref="P:Telogis.GeoBase.Map.Zoom"/>.
             </summary>
             <param name="isAsync">True to request a map asynchronously (only useful for Geostream).</param>
             <param name="progressDelegate">When requesting an async map this will update the progress if done isn't returned as <b>true</b>.</param>
             <param name="done">When using GeoStream, done will be <b>true</b> if a complete map is returned to an asynchronous request.</param>
             <returns>A 32bpp <see cref="T:System.Drawing.Image"/>.</returns>
             <example>
             <code lang="C#">
             private static ManualResetEvent m_mre = new ManualResetEvent(false);
            
             private static int m_imageId = 0;
            
             public static void TestAsyncGSMap() {
                 // asynchronous maps are only used when fetching from GeoStream
                 Repository.Default = new GeoStreamRepository(...);
            
                 Map map = new Map(new LatLon(34, -118), 600, 600, 10);
            
                 int imageId = m_imageId++;
                 bool done;
            
                 // call GetMap with isAsync set to true. MapProgress is our callback
                 Image image = new Bitmap(map.GetMap(true, MapProgress, out done));
                 
                 // we are saving the map image, even if it is incomplete
                 image.Save(string.Format(@"C:\Users\User\Documents\AsyncMap\{0}.bmp", imageId));
            
                 // done indicates whether the entire map was returned.
                 // Block the current thread if we do not have a complete map.
                 if (!done) {
                     m_mre.WaitOne();
                 }
             }
            
             // MapProgress is our callback -- it is called whenever more tiles are available
             public static void MapProgress(IMap caller, bool isComplete) {
            
                 int imageId = m_imageId++;
                 bool done;
            
                 // Inside our callback, call GetMap again to fetch the updated map image.
                 // Pass in this callback so that we can be called recursively 
                 // when more tiles are available.
                 Image image = new Bitmap(caller.GetMap(true, MapProgress, out done));
            
                 image.Save(string.Format(@"C:\Users\User\Documents\AsyncMap\{0}.bmp", imageId));
            
                 // When we are finally called with all tiles, set the ManualResetEvent
                 // so that our waiting thread can continue.
                 if (done) {
                     m_mre.Set();
                 }     
             }        
             </code>
             </example>
        </member>
        <member name="M:Telogis.GeoBase.Map.CancelAsync">
            <summary>
            Cancels a pending asynchronous map request, if there is one.
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.Map.LatLontoXY(System.Int32@,System.Int32@,Telogis.GeoBase.LatLon)">
            <summary>
            Convert from a <see cref="T:Telogis.GeoBase.LatLon"/> to an X,Y location on the map.
            </summary>
            <remarks>
            Because the projection is curved, this function should be used when translating from a <see cref="T:Telogis.GeoBase.LatLon"/>
            to X,Y co-ordinates.
            <seealso cref="M:Telogis.GeoBase.Map.XYtoLatLon(System.Int32,System.Int32)"/>
            </remarks>
            <param name="x">x co-ordinate.</param>
            <param name="y">y co-ordinate.</param>
            <param name="loc"><see cref="T:Telogis.GeoBase.LatLon"/> to convert from.</param>
        </member>
        <member name="M:Telogis.GeoBase.Map.XYtoLatLon(System.Int32,System.Int32)">
            <summary>
            Convert from map X,Y co-ordinates to a <see cref="T:Telogis.GeoBase.LatLon"/>.
            </summary>
            <remarks>
            Because the projection is curved, this function should be used when translating from X,Y to a <see cref="T:Telogis.GeoBase.LatLon"/>.
            <seealso cref="M:Telogis.GeoBase.Map.LatLontoXY(System.Int32@,System.Int32@,Telogis.GeoBase.LatLon)"/>
            </remarks>
            <param name="x">x coordinate.</param>
            <param name="y">y coordinate.</param>
            <returns>A <see cref="T:Telogis.GeoBase.LatLon"/> for the given X,Y coordinates.</returns>
        </member>
        <member name="M:Telogis.GeoBase.Map.XYtoBoundingBox(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Gets the <see cref="T:Telogis.GeoBase.BoundingBox"/> of two pixel locations, x1,y1 and x2,y2
            </summary>
            <remarks>
            </remarks>
            <param name="x1">The x co-ordinate of the first point to translate.</param>
            <param name="y1">The y co-ordinate of the first point to translate.</param>
            <param name="x2">The x co-ordinate of the second point to translate.</param>
            <param name="y2">The y co-ordinate of the second point to translate.</param>
            <returns>A <see cref="T:Telogis.GeoBase.BoundingBox"/> representing the map co-ordinates of the given points.</returns>
        </member>
        <member name="M:Telogis.GeoBase.Map.Contains(Telogis.GeoBase.LatLon)">
            <summary>
            Check whether the map contains the given <see cref="T:Telogis.GeoBase.LatLon"/>.
            </summary>
            <remarks></remarks>
            <param name="aPoint"></param>
            <returns></returns>
        </member>
        <member name="M:Telogis.GeoBase.Map.ZoomToBoundingBox(Telogis.GeoBase.BoundingBox,System.Int32)">
            <summary>
            Zooms and centers the map to the given <see cref="T:Telogis.GeoBase.BoundingBox"/>.
            </summary>
            <remarks>
            Use to zoom the map to display the area of the given <see cref="T:Telogis.GeoBase.BoundingBox"/>.<br/>
            Use the <b>buffer_pixels</b> parameter to set the amount by which <b>abox</b> is inside the resulting
            visible map area. For example, setting <b>buffer_pixels</b> to 10 results in a map where the edges of
            <b>abox</b> are 10 pixels in from the edge of the map.
            </remarks>
            <param name="abox">The <see cref="T:Telogis.GeoBase.BoundingBox"/> to zoom and center on.</param>
            <param name="buffer">The number of pixels between the edge of <b>abox</b> and the edge of the visible map area. See remarks.</param>
        </member>
        <member name="M:Telogis.GeoBase.Map.SetProperty(System.String,System.Object)">
            <summary>
            Sets internal map parameters.
            </summary>
            <param name="name">Parameter to set.</param>
            <param name="prop_value">Value to set the parameter to.</param>
        </member>
        <member name="M:Telogis.GeoBase.Map.Dispose">
            <summary>
            Disposes of this Map
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Map.Busy">
            <summary>
            Indicates if this Map is busy processing an asynchronous map request.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Map.Center">
            <summary>
            Gets or sets the current center point of the map.
            </summary>
            <remarks>
            This <b>LatLon</b> represents the current center
            of the map. A call to <see cref="M:Telogis.GeoBase.Map.GetMap"/> will return
            an image of the map, centered on this point.
            </remarks>
        </member>
        <member name="P:Telogis.GeoBase.Map.Heading">
            <summary>
            Gets or sets the heading of the map.
            </summary>
            <remarks>This controls the orientation of the map (that is, it defines which direction
            is 'up' on the map). The heading may be changed at any time.</remarks>
        </member>
        <member name="P:Telogis.GeoBase.Map.MapQuality">
            <summary>
            Gets or sets the <see cref="T:Telogis.GeoBase.MapQuality">quality</see> at which this Map will be rendered.
            </summary>
            <remarks>
            See <see cref="T:Telogis.GeoBase.MapQuality"/> for more information.
            </remarks>
        </member>
        <member name="P:Telogis.GeoBase.Map.MapRepository">
            <summary>
            Gets or sets the <see cref="T:Telogis.GeoBase.Repositories.Repository"/> used to render the map.
            </summary>
            <value>
            The <see cref="T:Telogis.GeoBase.Repositories.Repository"/> being used to render the map.
            </value>
        </member>
        <member name="P:Telogis.GeoBase.Map.MaxZoom">
            <summary>
            Gets the maximum zoom value of this map.
            </summary>
            <remarks><see cref="P:Telogis.GeoBase.AbstractMap.Zoom"/>.</remarks>
        </member>
        <member name="P:Telogis.GeoBase.Map.MinZoom">
            <summary>
            Gets the minimum zoom value of this map.
            </summary>
            <remarks>See <seealso cref="P:Telogis.GeoBase.Map.MaxZoom"/> and
            <see cref="P:Telogis.GeoBase.AbstractMap.Zoom"/>.
            </remarks>
        </member>
        <member name="P:Telogis.GeoBase.Map.Perspective">
            <summary>
            Gets or sets the perspective of this map. See <see cref="T:Telogis.GeoBase.MapPerspective">MapPerspectiv</see>.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Map.PixelSizeMeters">
            <summary>
            Gets the number of meters each pixel of the map represents.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Map.PixelSizeMiles">
            <summary>
            Gets the number of miles each pixel of the map represents.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Map.Progressive">
            <summary>
            Whether the map should be drawn in progressive mode, a mode designed for a MapCtrl that
            is being used in a navigation context - where the bounding box of the map does not
            change a lot from one rendering to the next.
            </summary>
            <remarks>
            In non-progressive mode, each time the map is rendered the polygons, lines, points and
            streets are queried afresh from the data file.  In progressive mode, polygons and
            streets are only queried from the data file on every alternate rendering.  On
            renderings when they are not queried, the only features that are drawn are those that
            were drawn the previous time the map was rendered.  This causes a performance
            improvement.
            </remarks>
        </member>
        <member name="P:Telogis.GeoBase.Map.Projected">
            <summary>
            Gets or sets whether this map is projected (curved) or not.
            </summary>
            <returns><b>true</b> is the map is projected, <b>false</b> if it is not.</returns>
            <remarks>The projection is updated automatically when this property is set.</remarks>
        </member>
        <member name="P:Telogis.GeoBase.Map.Renderer">
            <summary>
            An <see cref="T:Telogis.GeoBase.IMapRenderer"/> that will be called when the map is rendered.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Map.Satellite">
            <summary>
            Gets or sets whether the map is rendered using satellite imagery.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Map.SatelliteLayerName">
            <summary>
            The name of the map layer that will be used to provide satellite imagery.  If 
            specified then the imagery will be taken from the appropriate WMS layer in the
            GeoStream's layers.config file.  Otherwise, standard Telogis GeoBase satellite imagery
            will be used.
            </summary>
            <remarks>
            <para>
            In order to get satellite imagery from a WMS layer, this property must be specified and
            Satellite must be true.
            </para>
            <para>
            "on", "off", "true" and "false" cannot be used as WMS satellite layer names.
            </para>
            </remarks>
        </member>
        <member name="P:Telogis.GeoBase.Map.Size">
            <summary>
            Gets or sets the map size in pixels.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Map.Style">
            <summary>
            The map style used to draw the map.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Map.RenderLabels">
            <summary>
            Controls whether labels are rendered on the map.
            </summary>
            <remarks>When <b>true</b> labels are rendered. Otherwise, labels are not rendered.</remarks>
        </member>
        <member name="P:Telogis.GeoBase.Map.Warnings">
            <summary>
            Gets all local Warnings associated with this map.
            </summary>
            <remarks>Returns an empty string array for GeoStream applications (local GeoStream
            warnings are generated on the server).</remarks>
        </member>
        <member name="P:Telogis.GeoBase.Map.Zoom">
            <summary>
            Gets or sets the zoom height of the map.
            </summary>
            <remarks>See <see cref="P:Telogis.GeoBase.AbstractMap.Zoom"/> and <see cref="T:Telogis.GeoBase.ZoomLevel"/>.
            </remarks>
        </member>
        <member name="P:Telogis.GeoBase.Map.CenterPixelOffset">
            <summary>
            Used to line up tiles. Sets an offset <see cref="T:System.Drawing.Point"/>, in pixels, for the center of this Map tile, relative to the <see cref="P:Telogis.GeoBase.Map.Center"/> point of the center Map tile.
            </summary>
            <remarks>
            <para>
            CenterPixelOffset allows you to treat the Map object conceptually as an infinitely
            large map. The map is centered around the <see cref="P:Telogis.GeoBase.Map.Center"/> point. <see cref="M:Telogis.GeoBase.Map.GetMap"/>
            returns a portion of the infinite map, <b>Width</b> wide and <b>Height</b>
            high. By setting CenterPixelOffset the portion of the underlying map that is
            rendered by <see cref="M:Telogis.GeoBase.Map.GetMap"/> can be controlled.
            This allows you to request several smaller maps from the same <see cref="T:Telogis.GeoBase.Map"/>
            object and then reconstruct a larger map from these tiles. This is especially
            useful in web applications.
            </para>
            <para>Not valid on GeoStream maps, which can already be treated this way.</para>
            </remarks>
            <example>
            <para> Consider an underlying <see cref="T:Telogis.GeoBase.Map"/> object. Overlaid
            are three maps, each generated by setting the <b>Width</b> and
            <b>Height</b> to 100 each, then adjusting the <see cref="P:Telogis.GeoBase.Map.CenterPixelOffset"/>
            for each. The first map (Map 1) has the <see cref="P:Telogis.GeoBase.Map.CenterPixelOffset"/> set to (0,0), so it
            renders a map exactly as normal, centered around the underlying map's <see cref="P:Telogis.GeoBase.Map.Center"/>.
            </para><para>The second map (Map 2) has the same <see cref="P:Telogis.GeoBase.Map.Center"/> as Map 1 but has
            <see cref="P:Telogis.GeoBase.Map.CenterPixelOffset"/> set to (-100,0) it renders an area to the left of Map 1.
            </para>
            <para>
            Similarly, Map 3 is positioned below and to the left Map 1 as it has the same <see cref="P:Telogis.GeoBase.Map.Center"/>
            but a <see cref="P:Telogis.GeoBase.Map.CenterPixelOffset"/> of (-100,100) - a sideways shift of 100 pixels and 100 pixels lower.
            </para>
            </example>
        </member>
        <member name="P:Telogis.GeoBase.Map.ProjectionCentre">
            <summary>
            Represents the center of the map projection. By default this value is <b>null</b> and the center is always the center of the visible map area.
            </summary>
            <remarks>
            Not settable on GeoStream maps, which are never projected.<br/><br/>
            By setting ProjectionCentre one is able to lock the center of the map projection. Rather than updating the projection to center on
            the center of the displayed map, the center will remain fixed as the map is panned around. As the map is panned further
            away from the center the display will appear more skewed, however the constant center allows sections of
            map to be stitched together. This is only possible when the center is locked, as otherwise the automatically reprojected map
            segments will not match up.<br/>
            </remarks>
        </member>
        <member name="P:Telogis.GeoBase.Map.TimeStatistics">
            <summary>
            For internal use only
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Map.TilePerSuperTile">
            <summary>
            Gets or sets the number of tiles per supertile.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Map.TileSize">
            <summary>
            Gets or sets the size of a tile.
            </summary>
            <remarks>
            This value is the number of pixels wide and high each map tile should be.
            </remarks>
        </member>
        <member name="P:Telogis.GeoBase.Map.Zooms">
            <summary>
            Defines the set of zoom levels to use.
            </summary>
            <remarks>
            A zoom level represents the number of Supertiles required to cover
            the world (horizontally). Zoom levels should always be ordered from lowest (least zoomed) to highest.
            Only the specified zoom levels will be used when rendering the map.
            </remarks>
        </member>
        <member name="P:Telogis.GeoBase.Map.ZoomLevel">
            <summary>
            This defines the current zoom level. This differs from Zoom, in that
            ZoomLevel is expressed in terms of the array of Zooms; ZoomLevel is an index into the array.
            </summary>
            <remarks>
            This property corresponds to the index into the Zooms array that is
            currently set. This property is generally preferable to using Zoom,
            as it sets the exact zoom level, while using Zoom will cause the map to zoom to the closest
            available ZoomLevel that is as big or larger than the requested Zoom.
            </remarks>
        </member>
        <member name="E:Telogis.GeoBase.Map.ZoomChanged">
            <summary>
            This event handler is called when the zoom level of the map changes.
            </summary>
        </member>
        <member name="E:Telogis.GeoBase.Map.CenterChanged">
            <summary>
            This event handler is called when the map is panned so that the center point changes.
            </summary>
        </member>
        <member name="E:Telogis.GeoBase.Map.SizeChanged">
            <summary>
            This event handler is called when the size of the map (in pixels) changes.
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.RenderMode">
            <summary>
            An enumeration representing the three stages of rendering, which are used by
            <see cref="M:Telogis.GeoBase.IMapRenderer.Render(System.Drawing.Graphics,Telogis.GeoBase.RenderContext)"/> and <see cref="T:Telogis.GeoBase.RenderContext"/>
            to control the priority and behavior of rendering objects.
            </summary>
            <remarks>
            <para>RenderMode values may be used to give priority to the rendering of certain objects, entirely independent
            of their order in a <see cref="T:Telogis.GeoBase.RendererList"/>.</para>
            <para>
            When rendering occurs four passes are made over the objects in a <see cref="T:Telogis.GeoBase.RendererList"/>.
            During the first pass, objects that implement <b>PreStreets</b> rendering are drawn. The second pass covers 
            <b>PreLabelling</b>, the third <b>Labelling</b> and the fourth <b>PostLabelling</b>.
            There is essentially no difference in the behavior of objects rendered in PreLabelling or Labelling, other than that
            PreLabelling objects render first. This is nevertheless an important distinction as it allows for two levels of priority
            in rendering before labels are drawn on the map. An example is <see cref="T:Telogis.GeoBase.BalloonPushPin"/> which renders
            the <see cref="T:Telogis.GeoBase.PushPin"/> icon in PreLabelling, and then follows up by rendering the informational
            balloon in Labelling. This split-level rendering ensures that all PushPin icons are <see cref="M:Telogis.GeoBase.RenderContext.Place(System.Drawing.Rectangle,System.Int32,System.Double,Telogis.GeoBase.RenderMask)"/>d
            on the map before balloons are drawn, thus allowing the use of <see cref="M:Telogis.GeoBase.RenderContext.Test(System.Drawing.Rectangle,System.Int32,System.Double,Telogis.GeoBase.RenderMask)"/> to ensure
            that no balloon obscures a <see cref="T:Telogis.GeoBase.PushPin"/>.</para>
            <para><b>Related articles</b>: <a href="685458eb-ffb4-4b03-b3fd-97997a647a7f.htm">How Renderers Work</a>.</para>
            </remarks>
        </member>
        <member name="F:Telogis.GeoBase.RenderMode.None">
            <summary>
            Objects with a <b>RenderMode</b> of <b>None</b> are not rendered.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.RenderMode.PreStreets">
            <summary>
            Objects that render PreStreets are drawn before the streets are rendered - typically used for satellite imagery.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.RenderMode.PreLabelling">
            <summary>
            Objects that render in PreLabelling are drawn first, before labels are rendered.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.RenderMode.Labelling">
            <summary>
            Objects that render in Labelling are drawn after those that render in PreLabelling, but before labels are rendered.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.RenderMode.PostLabelling">
            <summary>
            Objects that render PostLabelling are drawn last, after labels are rendered.
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.RenderMask">
            <summary>
            Specifies the layer mask upon which a label should be drawn.
            </summary>
            <remarks>During rendering,
            label placement is affected by the position of other labels on the same mask; labels
            drawn on the Overlay mask are affected only by other labels on the Overlay mask.<br/>
            GeoBase draws internal labels on the Primary mask by default, but the map style used can
            change this behavior.
            </remarks>
        </member>
        <member name="F:Telogis.GeoBase.RenderMask.None">
            <summary>
            None
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.RenderMask.Primary">
            <summary>
            The primary label rendering mask
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.RenderMask.Overlay">
            <summary>
            The overlay label rendering mask
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.RenderMask.Both">
            <summary>
            Both label rendering masks
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.RenderContext">
            <summary>
            A RenderContext is an abstract class implemented to control the placement of renderable objects.
            </summary>
            <remarks>
            See <see cref="T:Telogis.GeoBase.RenderMode"/> for further explanation of the render modes and how they can be used.
            <para><b>Related articles</b>: <a href="685458eb-ffb4-4b03-b3fd-97997a647a7f.htm">How Renderers Work</a>, 
            <a href="21c94945-b858-44ef-a272-619f06783968.htm">Defining the Renderer</a>.</para>
            </remarks>
        </member>
        <member name="M:Telogis.GeoBase.RenderContext.Test(System.Drawing.Rectangle,System.Int32,System.Double,Telogis.GeoBase.RenderMask)">
            <summary>
            Implemented by derived classes to check whether the given <see cref="T:System.Drawing.Rectangle"/>
            lies over an area reserved by an already <see cref="M:Telogis.GeoBase.RenderContext.Place(System.Drawing.Rectangle,System.Int32,System.Double,Telogis.GeoBase.RenderMask)">placed</see> object.
            </summary>
            <remarks>
            <para>See <see cref="M:Telogis.GeoBase.RenderContext.Place(System.Drawing.Rectangle,System.Int32,System.Double,Telogis.GeoBase.RenderMask)"/> for an explanation of <b>buffer</b> values.</para>
            </remarks>
            <param name="rect">The <see cref="T:System.Drawing.Rectangle"/> area to be tested.</param>
            <param name="buffer">The buffer value specifies the number of pixels on each side of the object that must remain
            clear of other objects, for the purpose of visual separation.</param>
            <param name="angle">Specifies a clockwise rotation (in degrees) of the testable area.</param>
            <param name="which">Specifies which <see cref="T:Telogis.GeoBase.RenderMask"/> layer to test.</param>
            <returns><b>True</b> if the tested area is available for placement, <b>false</b> if there is an overlap with
            an already-placed area.</returns>
        </member>
        <member name="M:Telogis.GeoBase.RenderContext.Test(System.Drawing.Rectangle,System.Int32,System.Double)">
            <summary>
            Implemented by derived classes to check whether the given <see cref="T:System.Drawing.Rectangle"/> lies
            over an area reserved by an already <see cref="M:Telogis.GeoBase.RenderContext.Place(System.Drawing.Rectangle,System.Int32,System.Double,Telogis.GeoBase.RenderMask)">placed</see> object.
            </summary>
            <remarks>
            <para>See <see cref="M:Telogis.GeoBase.RenderContext.Place(System.Drawing.Rectangle,System.Int32,System.Double,Telogis.GeoBase.RenderMask)"/> for an explanation of <b>buffer</b> values.</para>
            </remarks>
            <param name="rect">The <see cref="T:System.Drawing.Rectangle"/> area to be tested.</param>
            <param name="buffer">The buffer value specifies the number of pixels on each side of the object that must remain
            clear of other objects, for the purpose of visual separation.</param>
            <param name="angle">Specifies a clockwise rotation (in degrees) of the testable area.</param>
            <returns><b>True</b> if the tested area is available for placement, <b>false</b> if there is an overlap with
            an already-placed area.</returns>
        </member>
        <member name="M:Telogis.GeoBase.RenderContext.Test(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Double,Telogis.GeoBase.RenderMask)">
            <summary>
            Implemented by derived classes to check whether the given screen area overlaps an area reserved by
            an already <see cref="M:Telogis.GeoBase.RenderContext.Place(System.Drawing.Rectangle,System.Int32,System.Double,Telogis.GeoBase.RenderMask)">placed</see> object.
            </summary>
            <remarks>
            <para>The <b>x</b>, <b>y</b>, <b>width</b> and <b>height</b> parameters describe a rectangle, with the given
            height and width, with the top-left corner anchored at the
            co-ordinates specified by <b>x</b> and <b>y</b>.</para>
            <para>See <see cref="M:Telogis.GeoBase.RenderContext.Place(System.Drawing.Rectangle,System.Int32,System.Double,Telogis.GeoBase.RenderMask)"/>
            for an explanation of <b>buffer</b> values.</para></remarks>
            <param name="x">The horizontal position of the top left corner of the rectangle.</param>
            <param name="y">The vertical position of the top left corner of the rectangle.</param>
            <param name="width">The width of the rectangle in pixels</param>
            <param name="height">The height of the rectangle in pixels</param>
            <param name="buffer">The buffer value specifies the number of pixels on each side of the object that must remain
            clear of other objects, for the purpose of visual separation.</param>
            <param name="angle">Specifies a clockwise rotation (in degrees) of the testable area.</param>
            <param name="which">Specifies which <see cref="T:Telogis.GeoBase.RenderMask"/> layer to test.</param>
            <returns><b>True</b> if the tested area is available for placement, <b>false</b> if there is an overlap with
            an already-placed area.</returns>
        </member>
        <member name="M:Telogis.GeoBase.RenderContext.Test(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Double)">
            <summary>
            Implemented by derived classes to check whether the given screen area overlaps an area reserved by
            an already <see cref="M:Telogis.GeoBase.RenderContext.Place(System.Drawing.Rectangle,System.Int32,System.Double,Telogis.GeoBase.RenderMask)">placed</see> object.
            </summary>
            <remarks>
            <para>The <b>x</b>, <b>y</b>, <b>width</b> and <b>height</b> parameters describe a rectangle, with the given
            height and width, with the top-left corner anchored at the
            co-ordinates specified by <b>x</b> and <b>y</b>.</para></remarks>
            <param name="x">The horizontal position of the top left corner of the rectangle.</param>
            <param name="y">The vertical position of the top left corner of the rectangle.</param>
            <param name="width">The width of the rectangle in pixels</param>
            <param name="height">The height of the rectangle in pixels</param>
            <param name="buffer">The buffer value specifies the number of pixels on each side of the object that must remain
            clear of other objects, for the purpose of visual separation.</param>
            <param name="angle">Specifies a clockwise rotation (in degrees) of the testable area.</param>
            <returns><b>True</b> if the tested area is available for placement, <b>false</b> if there is an overlap with an
            already-placed area.</returns>
        </member>
        <member name="M:Telogis.GeoBase.RenderContext.Place(System.Drawing.Rectangle,System.Int32,System.Double,Telogis.GeoBase.RenderMask)">
            <summary>
            Implemented by derived classes to reserve the specified screen area for object placement.
            </summary>
            <remarks>
            <para>This method should reserve an area of the screen to which an object will be rendered. After placement,
            any future calls to <see cref="M:Telogis.GeoBase.RenderContext.Test(System.Drawing.Rectangle,System.Int32,System.Double,Telogis.GeoBase.RenderMask)"/> which specify an area that overlaps
            with this one will return <b>false</b>.<br/></para></remarks>
            <param name="rect">The <see cref="T:System.Drawing.Rectangle"/> area to be reserved.</param>
            <param name="buffer">The buffer value specifies the number of pixels on each side of the object that must remain clear, for the purpose of visual separation.</param>
            <param name="angle">Specifies a clockwise rotation (in degrees) of the placed area.</param>
            <param name="which">Specifies which <see cref="T:Telogis.GeoBase.RenderMask"/> layer to place the label on.</param>
        </member>
        <member name="M:Telogis.GeoBase.RenderContext.Place(System.Drawing.Rectangle,System.Int32,System.Double)">
            <summary>
            Implemented by derived classes to reserve the specified screen area for object placement.
            </summary>
            <remarks>
            <para>This method should reserve an area of the screen to which an object will be rendered. After placement,
            any future calls to <see cref="M:Telogis.GeoBase.RenderContext.Test(System.Drawing.Rectangle,System.Int32,System.Double,Telogis.GeoBase.RenderMask)"/> which specify an area that overlaps
            with this one will return <b>false</b>.<br/></para></remarks>
            <param name="rect">The <see cref="T:System.Drawing.Rectangle"/> area to be reserved.</param>
            <param name="buffer">The buffer value specifies the number of pixels on each side of the object that must
            remain clear, for the purpose of visual separation.</param>
            <param name="angle">Specifies a clockwise rotation (in degrees) of the placed area.</param>
        </member>
        <member name="M:Telogis.GeoBase.RenderContext.Place(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Double,Telogis.GeoBase.RenderMask)">
            <summary>
            Implemented by derived classes to reserve the specified screen area for object placement.
            </summary>
            <remarks>
            <para>This method should reserve an area of the screen to which an object will be rendered. After placement,
            any future calls to <see cref="M:Telogis.GeoBase.RenderContext.Test(System.Drawing.Rectangle,System.Int32,System.Double,Telogis.GeoBase.RenderMask)"/> which specify an area that overlaps
            with this one will return <b>false</b>.<br/></para>
            <para>The <b>x</b>, <b>y</b>, <b>width</b> and <b>height</b> parameters describe a rectangle, with the given
            height and width, with the top-left corner anchored at the
            co-ordinates specified by <b>x</b> and <b>y</b>.</para></remarks>
            <param name="x">The horizontal position of the top left corner of the rectangle.</param>
            <param name="y">The vertical position of the top left corner of the rectangle.</param>
            <param name="width">The width of the rectangle in pixels</param>
            <param name="height">The height of the rectangle in pixels</param>
            <param name="buffer">The buffer value specifies the number of pixels on each side of the object that must remain clear, for the purpose of visual separation.</param>
            <param name="angle">Specifies a clockwise rotation (in degrees) of the testable area.</param>
            <param name="which">Specifies which <see cref="T:Telogis.GeoBase.RenderMask"/> layer to place the label on.</param>
        </member>
        <member name="M:Telogis.GeoBase.RenderContext.Place(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Double)">
            <summary>
            Implemented by derived classes to reserve the specified screen area for object placement.
            </summary>
            <remarks>
            <para>This method should reserve an area of the screen to which an object will be rendered. After placement,
            any future calls to <see cref="M:Telogis.GeoBase.RenderContext.Test(System.Drawing.Rectangle,System.Int32,System.Double,Telogis.GeoBase.RenderMask)"/> which specify an area that overlaps
            with this one will return <b>false</b>.<br/></para>
            <para>The <b>x</b>, <b>y</b>, <b>width</b> and <b>height</b> parameters describe a rectangle, with the given
            height and width, with the top-left corner anchored at the
            co-ordinates specified by <b>x</b> and <b>y</b>.</para></remarks>
            <param name="x">The horizontal position of the top left corner of the rectangle.</param>
            <param name="y">The vertical position of the top left corner of the rectangle.</param>
            <param name="width">The width of the rectangle in pixels</param>
            <param name="height">The height of the rectangle in pixels</param>
            <param name="buffer">The buffer value specifies the number of pixels on each side of the object that must remain clear, for the purpose of visual separation.</param>
            <param name="angle">Specifies a clockwise rotation (in degrees) of the testable area.</param>
        </member>
        <member name="M:Telogis.GeoBase.RenderContext.End">
            <summary>
            Clears the RenderContext after the drawing of a new map
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.RenderContext.Dispose">
            <summary>
            Implemented by derived classes to dispose of a map.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.RenderContext.Map">
            <summary>
            Implemented by derived classes to get the <see cref="T:Telogis.GeoBase.IMap"/> being used by this RenderContext.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.RenderContext.Mode">
            <summary>
            Implemented by derived classes to get and set the <see cref="T:Telogis.GeoBase.RenderMode"/> being used by this RenderContext.
            </summary>
            <remarks><para><b>Related articles</b>: <a href="929e54d5-f994-4e7e-aa42-c3920a2d7c30.htm">Using Multiple Renderers</a>, 
            <a href="fe19284f-8b0d-4ec7-a801-c1e70f3180ce.htm">Render Modes in Detail</a>.</para></remarks>
        </member>
        <member name="M:Telogis.GeoBase.LocalRenderContext.#ctor(Telogis.GeoBase.IMap)">
            <summary>
            Create a RenderContext with the given <see cref="T:Telogis.GeoBase.IMap"/>
            </summary>
            <param name="map">The <see cref="T:Telogis.GeoBase.IMap"/> with which to create a RenderContext.</param>
        </member>
        <member name="M:Telogis.GeoBase.LocalRenderContext.Finalize">
            <summary>
            Destructor for RenderContext
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.LocalRenderContext.Test(System.Drawing.Rectangle,System.Int32,System.Double,Telogis.GeoBase.RenderMask)">
            <summary>
            Checks whether the given <see cref="T:System.Drawing.Rectangle"/> lies over an area reserved by an already
            <see cref="M:Telogis.GeoBase.RenderContext.Place(System.Drawing.Rectangle,System.Int32,System.Double,Telogis.GeoBase.RenderMask)">placed</see> object.
            </summary>
            <remarks>
            <para>See <see cref="M:Telogis.GeoBase.RenderContext.Place(System.Drawing.Rectangle,System.Int32,System.Double,Telogis.GeoBase.RenderMask)"/>
            for an explanation of <b>buffer</b> values.</para>
            <para>This method only checks for overlaps with non-label objects. Support for testing map labels for overlaps
            is not provided because the sheer number of labels on a typical map would cause the Test to fail in most cases.</para>
            <para>By using this method in conjunction with <see cref="M:Telogis.GeoBase.RenderContext.Place(System.Drawing.Rectangle,System.Int32,System.Double,Telogis.GeoBase.RenderMask)"/>
            one can control the positioning of renderable components.</para>
            </remarks>
            <param name="rect">The <see cref="T:System.Drawing.Rectangle"/> area to be tested.</param>
            <param name="buffer">The buffer value specifies the number of pixels on each side of the object that must
            remain clear of other objects, for the purpose of visual separation.</param>
            <param name="angle">Specifies a clockwise rotation (in degrees) of the testable area.</param>
            <param name="which">Specifies which <see cref="T:Telogis.GeoBase.RenderMask"/> layer to test.</param>
            <returns><b>True</b> if the tested area is available for placement, <b>false</b> if there is an overlap with
            an already-placed area.</returns>
        </member>
        <member name="M:Telogis.GeoBase.LocalRenderContext.Test(System.Drawing.Rectangle,System.Int32,System.Double)">
            <summary>
            Checks whether the given <see cref="T:System.Drawing.Rectangle"/> lies over an area reserved by an already
            <see cref="M:Telogis.GeoBase.RenderContext.Place(System.Drawing.Rectangle,System.Int32,System.Double,Telogis.GeoBase.RenderMask)">placed</see> object.
            </summary>
            <remarks>
            <para>See <see cref="M:Telogis.GeoBase.RenderContext.Place(System.Drawing.Rectangle,System.Int32,System.Double,Telogis.GeoBase.RenderMask)"/>
            for an explanation of <b>buffer</b> values.</para>
            <para>This method only checks for overlaps with non-label objects. Support for testing map labels for overlaps
            is not provided because the sheer number of labels on a typical map would cause the Test to fail in most cases.</para>
            <para>By using this method in conjunction with <see cref="M:Telogis.GeoBase.RenderContext.Place(System.Drawing.Rectangle,System.Int32,System.Double,Telogis.GeoBase.RenderMask)"/>
            one can control the positioning of renderable components.</para>
            </remarks>
            <param name="rect">The <see cref="T:System.Drawing.Rectangle"/> area to be tested.</param>
            <param name="buffer">The buffer value specifies the number of pixels on each side of the object that must
            remain clear of other objects, for the purpose of visual separation.</param>
            <param name="angle">Specifies a clockwise rotation (in degrees) of the testable area.</param>
            <returns><b>True</b> if the tested area is available for placement, <b>false</b> if there is an overlap with
            an already-placed area.</returns>
        </member>
        <member name="M:Telogis.GeoBase.LocalRenderContext.Test(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Double,Telogis.GeoBase.RenderMask)">
            <summary>
            Checks whether the given screen area overlaps an area reserved by an already
            <see cref="M:Telogis.GeoBase.RenderContext.Place(System.Drawing.Rectangle,System.Int32,System.Double,Telogis.GeoBase.RenderMask)">placed</see> object.
            </summary>
            <remarks>
            <para>The <b>x</b>, <b>y</b>, <b>width</b> and <b>height</b> parameters describe a rectangle, with the given
            height and width, with the top-left corner anchored at the coordinates specified by <b>x</b> and <b>y</b>.</para>
            <para>See <see cref="M:Telogis.GeoBase.RenderContext.Place(System.Drawing.Rectangle,System.Int32,System.Double,Telogis.GeoBase.RenderMask)"/>
            for an explanation of <b>buffer</b> values.</para> <para>This method only checks for overlaps with non-label objects.
            Support for testing map labels for overlaps is not provided because the sheer number of labels on a typical map would
            cause the Test to fail in most cases.</para><para>By using this method in conjunction with
            <see cref="M:Telogis.GeoBase.RenderContext.Place(System.Drawing.Rectangle,System.Int32,System.Double,Telogis.GeoBase.RenderMask)"/>
            one can control the positioning of renderable components.</para>
            </remarks>
            <param name="x">The horizontal position of the top left corner of the rectangle.</param>
            <param name="y">The vertical position of the top left corner of the rectangle.</param>
            <param name="width">The width of the rectangle in pixels</param>
            <param name="height">The height of the rectangle in pixels</param>
            <param name="buffer">The buffer value specifies the number of pixels on each side of the object that must
            remain clear of other objects, for the purpose of visual separation.</param>
            <param name="angle">Specifies a clockwise rotation (in degrees) of the testable area.</param>
            <param name="which">Specifies which <see cref="T:Telogis.GeoBase.RenderMask"/> layer to test.</param>
            <returns><b>true</b> if the tested area is available for placement, <b>false</b> if there is an overlap with
            an already-placed area.</returns>
        </member>
        <member name="M:Telogis.GeoBase.LocalRenderContext.Test(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Double)">
            <summary>
            Checks whether the given screen area overlaps an area reserved by an already
            <see cref="M:Telogis.GeoBase.RenderContext.Place(System.Drawing.Rectangle,System.Int32,System.Double,Telogis.GeoBase.RenderMask)">placed</see> object.
            </summary>
            <remarks>
            <para>The <b>x</b>, <b>y</b>, <b>width</b> and <b>height</b> parameters describe a rectangle, with the given
            height and width, with the top-left corner anchored at the coordinates specified by <b>x</b> and <b>y</b>.</para>
            <para>See <see cref="M:Telogis.GeoBase.RenderContext.Place(System.Drawing.Rectangle,System.Int32,System.Double,Telogis.GeoBase.RenderMask)"/>
            for an explanation of <b>buffer</b> values.</para> <para>This method only checks for overlaps with non-label objects.
            Support for testing map labels for overlaps is not provided because the sheer number of labels on a typical map would
            cause the Test to fail in most cases.</para><para>By using this method in conjunction with
            <see cref="M:Telogis.GeoBase.RenderContext.Place(System.Drawing.Rectangle,System.Int32,System.Double,Telogis.GeoBase.RenderMask)"/>
            one can control the positioning of renderable components.</para>
            </remarks>
            <param name="x">The horizontal position of the top left corner of the rectangle.</param>
            <param name="y">The vertical position of the top left corner of the rectangle.</param>
            <param name="width">The width of the rectangle in pixels</param>
            <param name="height">The height of the rectangle in pixels</param>
            <param name="buffer">The buffer value specifies the number of pixels on each side of the object that must remain
            clear of other objects, for the purpose of visual separation.</param>
            <param name="angle">Specifies a clockwise rotation (in degrees) of the testable area.</param>
            <returns><b>true</b> if the tested area is available for placement, <b>false</b> if there is an overlap with an already-placed area.</returns>
        </member>
        <member name="M:Telogis.GeoBase.LocalRenderContext.Place(System.Drawing.Rectangle,System.Int32,System.Double,Telogis.GeoBase.RenderMask)">
            <summary>
            Reserves the specified screen area for object placement.
            </summary>
            <remarks>
            <para>The purpose of this method is to reserve an area of the screen to which an object will be rendered. After
            placement, any future calls to <see cref="M:Telogis.GeoBase.RenderContext.Test(System.Drawing.Rectangle,System.Int32,System.Double,Telogis.GeoBase.RenderMask)"/>
            which specify an area that overlaps with this one will return <b>false</b>.<br/></para><para>By using this method in conjunction with
            <see cref="M:Telogis.GeoBase.RenderContext.Test(System.Drawing.Rectangle,System.Int32,System.Double,Telogis.GeoBase.RenderMask)"/> one can control
            the positioning of renderable components.</para> <para>The <b>buffer</b> parameter may be used to specify a 'clear'
            buffer zone around the outside of the rendered area. The purpose of this zone is to prevent other objects from placing
            themselves immediately adjacent. A good example is in the placing of <see cref="T:Telogis.GeoBase.BalloonPushPin"/>s,
            where a buffer value is used to prevent the edges of balloons touching each other.<br/> It should be noted that
            adjacent buffers automatically collapse to the minimum separation agreeable to both objects. For example, if object A
            has a buffer value of 10, and adjacent object B has a buffer value of 5, the buffers will collapse so that the two
            objects are 10 pixels apart, that being the smallest value acceptable to both A and B.
            </para>		
            <para>By using this method in conjunction with
            <see cref="M:Telogis.GeoBase.RenderContext.Place(System.Drawing.Rectangle,System.Int32,System.Double,Telogis.GeoBase.RenderMask)"/>
            one can control the positioning of renderable components.</para></remarks>
            <param name="rect">The <see cref="T:System.Drawing.Rectangle"/> area to be reserved.</param>
            <param name="buffer">The buffer value specifies the number of pixels on each side of the object that must remain clear,
            for the purpose of visual separation.</param>
            <param name="angle">Specifies a clockwise rotation (in degrees) of the placed area.</param>
            <param name="which">Specifies which <see cref="T:Telogis.GeoBase.RenderMask"/> layer to place the label on.</param>
        </member>
        <member name="M:Telogis.GeoBase.LocalRenderContext.Place(System.Drawing.Rectangle,System.Int32,System.Double)">
            <summary>
            Reserves the specified screen area for object placement.
            </summary>
            <remarks>
            <para>The purpose of this method is to reserve an area of the screen to which an object will be rendered. After
            placement, any future calls to <see cref="M:Telogis.GeoBase.RenderContext.Test(System.Drawing.Rectangle,System.Int32,System.Double,Telogis.GeoBase.RenderMask)"/>
            which specify an area that overlaps with this one will return <b>false</b>.<br/></para><para>By using this method in
            conjunction with <see cref="M:Telogis.GeoBase.RenderContext.Test(System.Drawing.Rectangle,System.Int32,System.Double,Telogis.GeoBase.RenderMask)"/>
            one can control the positioning of renderable components.</para><para>The <b>buffer</b> parameter may be used to specify a 'clear'
            buffer zone around the outside of the rendered area. The purpose of this zone is to prevent other objects from placing
            themselves immediately adjacent. A good example is in the placing of <see cref="T:Telogis.GeoBase.BalloonPushPin"/>s,
            where a buffer value is used to prevent the edges of balloons touching each other.<br/> It should be noted that
            adjacent buffers automatically collapse to the minimum separation agreeable to both objects. For example, if object A
            has a buffer value of 10, and adjacent object B has a buffer value of 5, the buffers will collapse so that the two
            objects are 10 pixels apart, that being the smallest value acceptable to both A and B.
            </para>		
            <para>By using this method in conjunction with
            <see cref="M:Telogis.GeoBase.RenderContext.Place(System.Drawing.Rectangle,System.Int32,System.Double,Telogis.GeoBase.RenderMask)"/>
            one can control the positioning of renderable components.</para></remarks>
            <param name="rect">The <see cref="T:System.Drawing.Rectangle"/> area to be reserved.</param>
            <param name="buffer">The buffer value specifies the number of pixels on each side of the object that must remain clear,
            for the purpose of visual separation.</param>
            <param name="angle">Specifies a clockwise rotation (in degrees) of the placed area.</param>
        </member>
        <member name="M:Telogis.GeoBase.LocalRenderContext.Place(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Double,Telogis.GeoBase.RenderMask)">
            <summary>
            Reserves the specified screen area for object placement.
            </summary>
            <remarks>
            <para>The purpose of this method is to reserve an area of the screen to which an object will be rendered. After placement,
            any future calls to <see cref="M:Telogis.GeoBase.RenderContext.Test(System.Drawing.Rectangle,System.Int32,System.Double,Telogis.GeoBase.RenderMask)"/>
            which specify an area that overlaps with this one will return <b>false</b>.<br/></para><para>The <b>x</b>, <b>y</b>, <b>width</b>
            and <b>height</b> parameters describe a rectangle, with the given height and width, with the top-left corner anchored at the
            co-ordinates specified by <b>x</b> and <b>y</b>.</para>
            <para>The <b>buffer</b> parameter may be used to specify a 'clear' buffer zone around the outside of the rendered area. The
            purpose of this zone is to prevent other objects from placing themselves immediately adjacent.
            A good example is in the placing of <see cref="T:Telogis.GeoBase.BalloonPushPin"/>s, where a buffer value is used to prevent
            the edges of balloons touching each other.<br/> It should be noted that adjacent buffers automatically collapse to the minimum
            separation agreeable to both objects. For example, if object A has a buffer value of 10, and adjacent object B has a buffer value of 5,
            the buffers will collapse so that the two objects are 10 pixels apart, that being the smallest value acceptable to both A and B.
            </para>	
            <para>By using this method in conjunction with <see cref="M:Telogis.GeoBase.RenderContext.Place(System.Drawing.Rectangle,System.Int32,System.Double,Telogis.GeoBase.RenderMask)"/>
            one can control the positioning of renderable components.</para></remarks>
            <param name="x">The horizontal position of the top left corner of the rectangle.</param>
            <param name="y">The vertical position of the top left corner of the rectangle.</param>
            <param name="width">The width of the rectangle in pixels</param>
            <param name="height">The height of the rectangle in pixels</param>
            <param name="buffer">The buffer value specifies the number of pixels on each side of the object that must remain clear, for
            the purpose of visual separation.</param>
            <param name="angle">Specifies a clockwise rotation (in degrees) of the testable area.</param>
            <param name="which">Specifies which <see cref="T:Telogis.GeoBase.RenderMask"/> layer to place the label on.</param>
        </member>
        <member name="M:Telogis.GeoBase.LocalRenderContext.Place(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Double)">
            <summary>
            Reserves the specified screen area for object placement.
            </summary>
            <remarks>
            <para>The purpose of this method is to reserve an area of the screen to which an object will be rendered. After placement,
            any future calls to <see cref="M:Telogis.GeoBase.RenderContext.Test(System.Drawing.Rectangle,System.Int32,System.Double,Telogis.GeoBase.RenderMask)"/>
            which specify an area that overlaps with this one will return <b>false</b>.<br/></para>
            <para>The <b>x</b>, <b>y</b>, <b>width</b> and <b>height</b> parameters describe a rectangle, with the given height and width,
            with the top-left corner anchored at the coordinates specified by <b>x</b> and <b>y</b>.</para>
            <para>The <b>buffer</b> parameter may be used to specify a 'clear' buffer zone around the outside of the rendered area.
            The purpose of this zone is to prevent other objects from placing themselves immediately adjacent.
            A good example is in the placing of <see cref="T:Telogis.GeoBase.BalloonPushPin"/>s, where a buffer value is used to prevent
            the edges of balloons touching each other.<br/> It should be noted that adjacent buffers automatically collapse to the minimum
            separation agreeable to both objects. For example, if object A has a buffer value of 10, and adjacent object B has a buffer value of 5,
            the buffers will collapse so that the two objects are 10 pixels apart, that being the smallest value acceptable to both A and B.
            </para>	
            <para>By using this method in conjunction with <see cref="M:Telogis.GeoBase.RenderContext.Place(System.Drawing.Rectangle,System.Int32,System.Double,Telogis.GeoBase.RenderMask)"/>
            one can control the positioning of renderable components.</para></remarks>
            <param name="x">The horizontal position of the top left corner of the rectangle.</param>
            <param name="y">The vertical position of the top left corner of the rectangle.</param>
            <param name="width">The width of the rectangle in pixels</param>
            <param name="height">The height of the rectangle in pixels</param>
            <param name="buffer">The buffer value specifies the number of pixels on each side of the object that must remain clear, for the purpose of visual separation.</param>
            <param name="angle">Specifies a clockwise rotation (in degrees) of the testable area.</param>
        </member>
        <member name="M:Telogis.GeoBase.LocalRenderContext.Dispose">
            <summary>
            Dispose of the RenderContext
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.LocalRenderContext.Map">
            <summary>
            Gets the <see cref="T:Telogis.GeoBase.IMap"/> being used by this RenderContext.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.LocalRenderContext.Mode">
            <summary>
            Gets the current <see cref="T:Telogis.GeoBase.RenderMode"/> for this RenderContext.
            </summary>
        </member>
        <member name="T:Xheo.Licensing.TrialLimitForm">
            <summary>
            Implements the GUI for a <see cref="T:Xheo.Licensing.TrialLimit"/>.
            </summary>
        </member>
        <member name="F:Xheo.Licensing.TrialLimitForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Xheo.Licensing.TrialLimitForm.#ctor">
             Initializes a new instance of the TrialLimitForm class.
            <summary>
            Summary of TrialLimitForm.
            </summary>
        </member>
        <member name="M:Xheo.Licensing.TrialLimitForm.#ctor(Xheo.Licensing.TrialLimit)">
             Initializes a new instance of the TrialLimitForm class.
            <summary>
            Summary of TrialLimitForm.
            </summary>
            <param name="limit"></param>
        </member>
        <member name="M:Xheo.Licensing.TrialLimitForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:Xheo.Licensing.TrialLimitForm.OnLoad(System.EventArgs)">
            <summary>
            If logo or bitmap images are null, then replace them with defaults so it
            still looks professional.
            </summary>
        </member>
        <member name="M:Xheo.Licensing.TrialLimitForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:Xheo.Licensing.TrialLimitForm._link_LinkClicked(System.Object,System.Windows.Forms.LinkLabelLinkClickedEventArgs)">
            <summary>
            Summary of _link_LinkClicked.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Xheo.Licensing.TrialLimitForm._buyNow_Click(System.Object,System.EventArgs)">
            <summary>
            Summary of _buyNow_Click.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Xheo.Licensing.TrialLimitForm._cancel_Click(System.Object,System.EventArgs)">
            <summary>
            Summary of _cancel_Click.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Xheo.Licensing.TrialLimitForm._try_Click(System.Object,System.EventArgs)">
            <summary>
            Summary of _try_Click.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Xheo.Licensing.TrialLimitForm._info_Click(System.Object,System.EventArgs)">
            <summary>
            Summary of _info_Click.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="P:Xheo.Licensing.TrialLimitForm.Bitmap">
            <summary>
            Gets or sets the bitmap to display in the window. Should be 456 x 270.
            </summary>
        </member>
        <member name="P:Xheo.Licensing.TrialLimitForm.Logo">
            <summary>
            Gets or sets the bitmap to display in the logo window. Should be 88 x 88.
            </summary>
        </member>
        <member name="T:Xheo.Licensing.ProxyForm">
            <summary>
            Summary description for ProxyForm.
            </summary>
        </member>
        <member name="F:Xheo.Licensing.ProxyForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Xheo.Licensing.ProxyForm.#ctor(System.Uri)">
            <summary>
            Initializes a new instance of the ProxyForm class.
            </summary>
        </member>
        <member name="M:Xheo.Licensing.ProxyForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:Xheo.Licensing.ProxyForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="P:Xheo.Licensing.ProxyForm.Proxy">
            <summary>
            Gets the proxy information provided.
            </summary>
        </member>
        <member name="T:Xheo.Licensing.LocalComputerLimit">
            <summary>
            Enforces a limit that requires the component to be accessible only from the
            local computer.
            </summary>
        </member>
        <member name="M:Xheo.Licensing.LocalComputerLimit.Validate(System.ComponentModel.LicenseContext,System.Type,System.Object)">
            <summary>
            Validates that the license being granted is within the limits enforced by
            this object.
            </summary>
            <param name="context">
            	The LicenseContext passed to <see cref="M:System.ComponentModel.LicenseProvider.GetLicense(System.ComponentModel.LicenseContext,System.Type,System.Object,System.Boolean)"/>.
            </param>
            <param name="type">
            	The Type of the object being licensed.
            </param>
            <param name="instance">
            	The instance of the object being licensed.
            </param>
            <returns>
            	Returns true if the limits are valid, otherwise false.
            </returns>
        </member>
        <member name="M:Xheo.Licensing.LocalComputerLimit.Granted(System.ComponentModel.LicenseContext,System.Type,System.Object)">
            <summary>
            Summary of Granted.
            </summary>
            <param name="context"></param>
            <param name="type"></param>
            <param name="instance"></param>
        </member>
        <member name="M:Xheo.Licensing.LocalComputerLimit.LoadFromXml(System.Xml.XmlNode)">
            <summary>
            Loads the contents of a Limit from an XML string.
            </summary>
            <param name="node">
            	The XML string to load from.
            </param>
            <returns>
            	Returns true if the load was successful, otherwise false.
            </returns>
        </member>
        <member name="M:Xheo.Licensing.LocalComputerLimit.SaveToXml(System.Xml.XmlNode)">
            <summary>
            Saves the contents of the Limit as an XML string.
            </summary>
            <returns>
            	Returns the saved XML.
            </returns>
        </member>
        <member name="P:Xheo.Licensing.LocalComputerLimit.Description">
            <summary>
            Gets the description of the limit.
            </summary>
        </member>
        <member name="P:Xheo.Licensing.LocalComputerLimit.Name">
            <summary>
            Gets the display name of the limit.
            </summary>
        </member>
        <member name="T:Xheo.Licensing.LicenseSigningKey">
            <summary>
            Implements a key pair for signing licenses. 
            </summary>
            <remarks>
            	See <see cref="T:Xheo.Licensing.ExtendedLicense"/> for details on how this class works with
            	others in the library to enforce component licenses.
            </remarks>
        </member>
        <member name="F:Xheo.Licensing.LicenseSigningKey.CurrentVersion">
            <summary>
            The current version of the LicenseSigningKey class. 
            </summary>
            <remarks>
            Later versions may introduce a new signing/file scheme. To maintain backwards 
            compatability the keys are versioned.
            </remarks>
        </member>
        <member name="M:Xheo.Licensing.LicenseSigningKey.#ctor">
            <summary>
            Initializes a new instance of the LicenseSigningKey class.
            </summary>
        </member>
        <member name="M:Xheo.Licensing.LicenseSigningKey.InitKey(System.Boolean)">
            <summary>
            
            </summary>
            <param name="initialize">
            	Indicates if the keys must be initialized or just created.
            </param>
        </member>
        <member name="M:Xheo.Licensing.LicenseSigningKey.#ctor(System.String)">
            <summary>
            Initializes a new instance of the LicenseSigningKey class with the key from
            the given file.
            </summary>
            <param name="filename">
            	Path to the file where the LicenseSigningKey is saved. 
            </param>
        </member>
        <member name="M:Xheo.Licensing.LicenseSigningKey.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of the LicenseSigningKey class with the key from
            the given Stream object.
            </summary>
            <param name="stream">
            	The Stream object that contains the data.
            </param>
        </member>
        <member name="M:Xheo.Licensing.LicenseSigningKey.Dispose">
            <summary>
            Implements <see cref="M:System.IDisposable.Dispose"/>.
            </summary>
        </member>
        <member name="M:Xheo.Licensing.LicenseSigningKey.AssertLicensed">
            <summary>
            Summary of AssertLicensed.
            </summary>
        </member>
        <member name="M:Xheo.Licensing.LicenseSigningKey.Save(System.String,System.Boolean)">
            <summary>
            Saves the contents of the LicenseSigningKey to a file with the given
            file name.
            </summary>
            <param name="filename">
            	Path to the file where the LicenseSigningKey should be saved.
            </param>
            <param name="includePrivateData">
            	Indicates if the private portion of the key should be included.
            </param>
        </member>
        <member name="M:Xheo.Licensing.LicenseSigningKey.Save(System.String)">
            <summary>
            Saves the contents of the LicenseSigningKey to a file with the given
            file name.
            </summary>
            <param name="filename">
            	Path to the file where the LicenseSigningKey should be saved.
            </param>
        </member>
        <member name="M:Xheo.Licensing.LicenseSigningKey.Export(System.String)">
            <summary>
            Saves the public key contents of the LicenseSigningKey to a file with the given
            file name.
            </summary>
            <param name="filename">
            	Path to the file where the LicenseSigningKey should be saved.
            </param>
        </member>
        <member name="M:Xheo.Licensing.LicenseSigningKey.Save(System.IO.Stream,System.Boolean)">
            <summary>
            Saves the contents of the LicenseSigningKey to a Stream object.
            </summary>
            <param name="stream">
            	The Stream object to receive the data.
            </param>
            <param name="includePrivateData">
            	Indicates if the private portion of the key should be included.
            </param>
        </member>
        <member name="M:Xheo.Licensing.LicenseSigningKey.Save(System.IO.Stream)">
            <summary>
            Saves the contents of the LicenseSigningKey to a Stream object.
            </summary>
            <param name="stream">
            	The Stream object to receive the data.
            </param>
        </member>
        <member name="M:Xheo.Licensing.LicenseSigningKey.Export(System.IO.Stream)">
            <summary>
            Saves the contents of the LicenseSigningKey to a Stream object.
            </summary>
            <param name="stream">
            	The Stream object to receive the data.
            </param>
        </member>
        <member name="M:Xheo.Licensing.LicenseSigningKey.Load(System.String)">
            <summary>
            Loads the LicenseSigningKey with the contents of the given file.
            </summary>
            <param name="filename">
            	Path to the file where the LicenseSigningKey is saved.
            </param>
        </member>
        <member name="M:Xheo.Licensing.LicenseSigningKey.Load(System.IO.Stream)">
            <summary>
            Loads the LicenseSigningKey from a Stream object.
            </summary>
            <param name="stream">
            	The Stream object that contains the data.
            </param>
        </member>
        <member name="M:Xheo.Licensing.LicenseSigningKey.ToXmlString(System.Boolean)">
            <summary>
            Gets the LicenseSigningKey as an XML strign.
            </summary>
            <param name="includePrivateData">
            	Indicates if the private data shouls be included.
            </param>
            <returns>
            	Returns an XML string representation of the object.
            </returns>
        </member>
        <member name="M:Xheo.Licensing.LicenseSigningKey.FromXmlString(System.String)">
            <summary>
            Initializes the contents of the LicenseSigningKey from the XML string.
            </summary>
            <param name="xml">
            	A string containing an XML representaion of the key.
            </param>
        </member>
        <member name="M:Xheo.Licensing.LicenseSigningKey.GetKeyAsXml(System.Boolean,Xheo.Licensing.SerialNumberSizes)">
            <summary>
            Persists the LicenseSigningKey into an XML document object.
            </summary>
            <param name="includePrivateData">
            	True if the private data should be included.
            </param>
            <param name="sizes">
            	The valid serial number sizes when exporting the public key.
            </param>
            <returns>
            	Returns the persisted XML as an <see cref="T:System.Xml.XmlDocument"/>.
            </returns>
        </member>
        <member name="M:Xheo.Licensing.LicenseSigningKey.LoadKeyFromXml(System.Xml.XmlDocument)">
            <summary>
            Loads the state of the LicenseSigningKey from an XML document.
            </summary>
            <param name="xmlDoc">
            	The XmlDocument that contains the LicenseSigningKey.
            </param>
        </member>
        <member name="M:Xheo.Licensing.LicenseSigningKey.SignLicense(Xheo.Licensing.ExtendedLicense)">
            <summary>
            Signs the ExtendedLicense and sets the LicenseKey property
            </summary>
            <param name="license"></param>
        </member>
        <member name="M:Xheo.Licensing.LicenseSigningKey.SignResponse(System.String)">
            <summary>
            Signs a response so that the originator of the message can be validated.
            </summary>
            <param name="response">
            	The response to sign.
            </param>
            <returns>
            	Returns a signature for the response.
            </returns>
        </member>
        <member name="M:Xheo.Licensing.LicenseSigningKey.ValidateLicense(Xheo.Licensing.ExtendedLicense)">
            <summary>
            Validates that the contents of the license has not been changed since it
            was signed. 
            </summary>
            <param name="license">
            	The license to validate.
            </param>
            <returns>
            	Returns true if the contents of the license have not been changed,
            	otherwise false.
            </returns>
            <remarks>
            	You must use the same LicenseSigningKey to validate the license as you
            	did to sign it. You can use either the full public/private key or just
            	the public key.
            </remarks>
        </member>
        <member name="M:Xheo.Licensing.LicenseSigningKey.VerifyData(System.Byte[],System.Byte[])">
            <summary>
            
            </summary>
            <param name="data"></param>
            <param name="signature"></param>
            <returns></returns>
        </member>
        <member name="M:Xheo.Licensing.LicenseSigningKey.SignData(System.Byte[])">
            <summary>
            
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:Xheo.Licensing.LicenseSigningKey.ValidateResponse(System.String,System.String)">
            <summary>
            Validates a response signature.
            </summary>
            <param name="response">
            	The original response.
            </param>
            <param name="signature">
            	The signature generated from <see cref="M:Xheo.Licensing.LicenseSigningKey.SignResponse(System.String)"/>.
            </param>
            <returns>
            	Returns true if the signature and response match.
            </returns>
        </member>
        <member name="M:Xheo.Licensing.LicenseSigningKey.Encrypt(System.Byte[])">
            <summary>
            Encrypts the data using the key. Use <see cref="M:Xheo.Licensing.LicenseSigningKey.Decrypt(System.Byte[])"/> to retrieve the 
            encrypted value.
            </summary>
            <param name="data">
            	The data to encrypt.
            </param>
            <returns>
            	Returns the encrypted version of the data.
            </returns>
        </member>
        <member name="M:Xheo.Licensing.LicenseSigningKey.EncryptString(System.String)">
            <summary>
            Encrypts the data using the key. Use <see cref="M:Xheo.Licensing.LicenseSigningKey.DecryptString(System.Byte[])"/> to retrieve the 
            encrypted value.
            </summary>
            <param name="data">
            	The data to encrypt.
            </param>
            <returns>
            	Returns the encrypted version of the data.
            </returns>
        </member>
        <member name="M:Xheo.Licensing.LicenseSigningKey.Decrypt(System.Byte[])">
            <summary>
            Decrypts the data using the key. Use <see cref="M:Xheo.Licensing.LicenseSigningKey.Encrypt(System.Byte[])"/> to encrypt
            values.
            </summary>
            <param name="data">
            	Data previously encrypted with <see cref="M:Xheo.Licensing.LicenseSigningKey.Encrypt(System.Byte[])"/>.
            </param>
            <returns>
            	Returns the original value.
            </returns>
        </member>
        <member name="M:Xheo.Licensing.LicenseSigningKey.DecryptString(System.Byte[])">
            <summary>
            Decrypts the data using the key. Use <see cref="M:Xheo.Licensing.LicenseSigningKey.EncryptString(System.String)"/> to encrypt
            values.
            </summary>
            <param name="data">
            	Data previously encrypted with <see cref="M:Xheo.Licensing.LicenseSigningKey.EncryptString(System.String)"/>.
            </param>
            <returns>
            	Returns the original value.
            </returns>
        </member>
        <member name="M:Xheo.Licensing.LicenseSigningKey.GetInnerXmlAsString(Xheo.Licensing.ExtendedLicense)">
            <summary>
            Gets the inner XML of the license as a string for signing.
            </summary>
            <param name="license">
            	The license.
            </param>
            <returns>
            	Returns the inner XML of the license as a string.
            </returns>
        </member>
        <member name="M:Xheo.Licensing.LicenseSigningKey.GetSigningKey(System.String,System.String)">
            <summary>
            Attempts to locate a signing key pair by name in the key folder specified
            in <see cref="P:Xheo.Licensing.ExtendedLicense.KeyFolder"/>.
            </summary>
            <param name="name">
            	Name of the keys.
            </param>
            <param name="folder">
            	Path to the folder where the keys are located.
            </param>
            <returns>
            	Returns the signing key if found, otherwise null.
            </returns>
        </member>
        <member name="M:Xheo.Licensing.LicenseSigningKey.GetSigningKey(System.String)">
            <summary>
            Attempts to locate a signing key pair by name in the key folder specified
            in <see cref="P:Xheo.Licensing.ExtendedLicense.KeyFolder"/>.
            </summary>
            <param name="name">
            	Name of the keys.
            </param>
            <returns>
            	Returns the signing key if found, otherwise null.
            </returns>
        </member>
        <member name="M:Xheo.Licensing.LicenseSigningKey.GetPublicKey(System.Type)">
            <summary>
            Gets the runtime.lic embedded in the assembly hosting the given type.
            </summary>
            <param name="type">
            	The reference type to use for obtaining the assembly.
            </param>
        </member>
        <member name="M:Xheo.Licensing.LicenseSigningKey.UpgradeVersion(System.Version)">
            <summary>
            Upgrades the keys to the format used by the specified version. 
            </summary>
            <param name="version">
            	The version to upgrade to.
            </param>
            <remarks>
            	The changes should be saved over the existing keys and the public key re-exported
            	after the upgrade.
            </remarks>
        </member>
        <member name="M:Xheo.Licensing.LicenseSigningKey.MakeSerialNumber(Xheo.Licensing.ExtendedLicense,Xheo.Licensing.SerialNumberSizes,System.Int32[],System.Int32)">
            <summary>
            Makes an encoded serial number for the given license.
            </summary>
            <param name="license">
            	The license to generate a serial number for.
            </param>
            <param name="size">
            	The key size to use when encrypting the serial number.
            </param>
            <param name="seed">
            	The serial number value to encode.
            </param>
            <param name="groupSizes">
            	Defines the group sizes used to split the serial number into smaller chunks. A null
            	value will use the default sizes for the given key size.
            </param>
            <returns>
            	Returns a new serial number encrypted with the key.
            </returns>
            <exception cref="T:Xheo.Licensing.ExtendedLicenseException">
            	Thrown when the license keys have not been upgraded to at least version 2.0.
            </exception>
        </member>
        <member name="M:Xheo.Licensing.LicenseSigningKey.MakeSerialNumber(Xheo.Licensing.ExtendedLicense,Xheo.Licensing.SerialNumberSizes,System.Int32)">
            <summary>
            Makes an encoded serial number for the given license.
            </summary>
            <param name="license">
            	The license to generate a serial number for.
            </param>
            <param name="size">
            	The key size to use when encrypting the serial number.
            </param>
            <param name="seed">
            	The serial number value to encode.
            </param>
            <returns>
            	Returns a new serial number encrypted with the key.
            </returns>
            <exception cref="T:Xheo.Licensing.ExtendedLicenseException">
            	Thrown when the license keys have not been upgraded to at least version 2.0.
            </exception>
        </member>
        <member name="M:Xheo.Licensing.LicenseSigningKey.MakeSerialNumber(System.String,Xheo.Licensing.SerialNumberSizes,System.Int32[],System.Int32)">
            <summary>
            Makes an encoded serial number for the given license.
            </summary>
            <param name="size">
            	The key size to use when encrypting the serial number.
            </param>
            <param name="seed">
            	The serial number value to encode.
            </param>
            <param name="groupSizes">
            	Defines the group sizes used to split the serial number into smaller chunks. A null
            	value will use the default sizes for the given key size.
            </param>
            <param name="prefix">
            	The prefix to add to the serial number. It must match the <see cref="P:Xheo.Licensing.ExtendedLicense.AbsoluteSerialNumber"/>
            	of the license it will be assigned to.
            </param>
            <returns>
            	Returns a new serial number encrypted with the key.
            </returns>
        </member>
        <member name="M:Xheo.Licensing.LicenseSigningKey.MakeSerialNumber(System.String,Xheo.Licensing.SerialNumberSizes,System.Int32)">
            <summary>
            Makes an encoded serial number for the given license.
            </summary>
            <param name="size">
            	The key size to use when encrypting the serial number.
            </param>
            <param name="seed">
            	The serial number value to encode.
            </param>
            <param name="prefix">
            	The prefix to add to the serial number. It must match the <see cref="P:Xheo.Licensing.ExtendedLicense.AbsoluteSerialNumber"/>
            	of the license it will be assigned to.
            </param>
            <returns>
            	Returns a new serial number encrypted with the key.
            </returns>
        </member>
        <member name="M:Xheo.Licensing.LicenseSigningKey.MakeActivationKey(Xheo.Licensing.ExtendedLicense)">
            <summary>
            Makes an activation key for the current machine and the given license that can
            be used to generate an unlock key with <see cref="M:Xheo.Licensing.LicenseSigningKey.MakeActivationUnlockKey(System.String)"/>.
            </summary>
            <param name="license">
            	The license to generate the key for.
            </param>
            <returns>
            	Returns the activation key.
            </returns>
        </member>
        <member name="M:Xheo.Licensing.LicenseSigningKey.MakeActivationUnlockKey(System.String)">
            <summary>
            Makes an unlock key for use with activation.
            </summary>
            <param name="activationKey">
            	The activation key created by <see cref="M:Xheo.Licensing.LicenseSigningKey.MakeActivationKey(Xheo.Licensing.ExtendedLicense)"/>
            </param>
            <returns>
            	Returns a new unlock key.
            </returns>
        </member>
        <member name="M:Xheo.Licensing.LicenseSigningKey.ValidateActivationUnlockKey(System.String,System.String)">
            <summary>
            Validates that the activation unlock key is valid and matches the profile hash.
            </summary>
            <param name="profileHash">
            	The profile hash of the computer being activated.
            </param>
            <param name="unlockKey">
            	The unlock key generated from <see cref="M:Xheo.Licensing.LicenseSigningKey.MakeActivationUnlockKey(System.String)"/>.
            </param>
            <returns>
            	Returns true if the unlock key is valid, otherwise false.
            </returns>
        </member>
        <member name="M:Xheo.Licensing.LicenseSigningKey.ValidateSerialNumber(Xheo.Licensing.ExtendedLicense,System.String)">
            <summary>
            Validates that a serial number was signed with the license key and falls within
            a given range of valid numbers.
            </summary>
            <param name="license">
            	The license the seral number is checked against.
            </param>
            <param name="serialNumber">
            	The serial number to check.
            </param>
            <returns>
            	Returns true of the serial number is valid, otherwise false.
            </returns>
        </member>
        <member name="M:Xheo.Licensing.LicenseSigningKey.ValidateSerialNumber(System.String,System.String,System.Int32,System.Int32,Xheo.Licensing.SerialNumberSizes)">
            <summary>
            Validates that a serial number was signed with the license key and falls within
            a given range of valid numbers.
            </summary>
            <param name="maxAcceptedSeed">
            	The maximim acceptable seed value.
            </param>
            <param name="minAcceptedSeed">
            	The minimum acceptable seed value.
            </param>
            <param name="prefix">
            	The serial number prefix required.
            </param>
            <param name="serialNumber">
            	The serial number to check.
            </param>
            <param name="acceptedSizes">
            	The accepted serial number sizes.
            </param>
            <returns>
            	Returns true of the serial number is valid, otherwise false.
            </returns>				
        </member>
        <member name="M:Xheo.Licensing.LicenseSigningKey.GetSerialNumberSeed(Xheo.Licensing.ExtendedLicense,System.String)">
            <summary>
            Gets the original unmasked serial number seed (Int32 value) from the encoded value.
            </summary>
            <param name="license">
            	The license the serial number was generated for.
            </param>
            <param name="serialNumber">
            	The masked serial number created by <see cref="M:Xheo.Licensing.LicenseSigningKey.MakeSerialNumber(Xheo.Licensing.ExtendedLicense,Xheo.Licensing.SerialNumberSizes,System.Int32)"/>.
            </param>
            <returns>
            	Returns the original Int32 seed value for the masked serial number.
            </returns>
        </member>
        <member name="P:Xheo.Licensing.LicenseSigningKey.GlobalKeys">
            <summary>
            Gets the global key used by the trial version.
            </summary>
        </member>
        <member name="P:Xheo.Licensing.LicenseSigningKey.SnKeys">
            <summary>
            Gets the serial number keys
            </summary>
        </member>
        <member name="P:Xheo.Licensing.LicenseSigningKey.IsGlobalKey">
            <summary>
            Gets a value that indicates if the keys are the global keys used during the trial.
            </summary>
        </member>
        <member name="P:Xheo.Licensing.LicenseSigningKey.Location">
            <summary>
            Gets the location where the keys were loaded from.
            </summary>
        </member>
        <member name="P:Xheo.Licensing.LicenseSigningKey.Version">
            <summary>
            Gets or sets the version of the signing key.
            </summary>
        </member>
        <member name="T:Xheo.Licensing.SerialNumberSizes">
            <summary>
            Possible key sizes for use when generating serial numbers. More bits makes it
            more difficult to crack but also increase the size of the serial number.
            </summary>
        </member>
        <member name="F:Xheo.Licensing.SerialNumberSizes.None">
            <summary>
            Indicates that no serial number sizes are valid.
            </summary>
        </member>
        <member name="F:Xheo.Licensing.SerialNumberSizes.Small">
            <summary>
            Uses a key of 64 bits in length. Generates a serial number ~13 characters in length.
            Recommended group size = 4.
            </summary>
        </member>
        <member name="F:Xheo.Licensing.SerialNumberSizes.Medium">
            <summary>
            Uses a key of 96 bits in length. Generates a serial number ~20 characters in length.
            Recommended group size = 5.
            </summary>
        </member>
        <member name="F:Xheo.Licensing.SerialNumberSizes.Large">
            <summary>
            Uses a key of 128 bits in length. Generates a serial number ~25 characters in length.
            Recommended group size = 5.
            </summary>
        </member>
        <member name="F:Xheo.Licensing.SerialNumberSizes.Huge">
            <summary>
            Uses a key of 320 bits in length. Generates a serial number ~64 characters in length.
            Recommended group size = 8.
            </summary>
        </member>
        <member name="F:Xheo.Licensing.SerialNumberSizes.All">
            <summary>
            Allow any of the stored serial number sizes.
            </summary>
        </member>
        <member name="F:Xheo.Licensing.SerialNumberSizes.MediumAndBigger">
            <summary>
            Allow the medium and bigger sizes.
            </summary>
        </member>
        <member name="F:Xheo.Licensing.SerialNumberSizes.LargeAndBigger">
            <summary>
            Allow the large and bigger sizes.
            </summary>
        </member>
        <member name="F:Xheo.Licensing.SerialNumberSizes.Recommended">
            <summary>
            Recommended sizes for licenses.
            </summary>
        </member>
        <member name="T:Xheo.Licensing.BigInteger">
            <summary>
            Implements an large integer of arbitrary length.
            </summary>
        </member>
        <member name="T:Xheo.Licensing.LicenseServerLimit">
            <summary>
            Enforces a limit for a LicenseServers license.
            </summary>
        </member>
        <member name="M:Xheo.Licensing.LicenseServerLimit.#ctor">
            <summary>
            Initializes a new instance of the LicenseServerLimit class.
            </summary>
        </member>
        <member name="M:Xheo.Licensing.LicenseServerLimit.#ctor(System.String)">
            <summary>
            Initializes a new instance of the LicenseServerLimit class.
            </summary>
            <param name="url">
            	Url of the license server.
            </param>
        </member>
        <member name="M:Xheo.Licensing.LicenseServerLimit.#ctor(System.String,System.Int32)">
            <summary>
            Initializes a new instance of the LicenseServerLimit class.
            </summary>
            <param name="url">
            	Url of the license server.
            </param>
            <param name="allowedFailures">
            	Number of times the validation can fail before the limit is considered
            	invalid.
            </param>
        </member>
        <member name="M:Xheo.Licensing.LicenseServerLimit.#ctor(System.String,System.Int32,System.Boolean)">
            <summary>
            Initializes a new instance of the LicenseServerLimit class.
            </summary>
            <param name="url">
            	Url of the license server.
            </param>
            <param name="allowedFailures">
            	Number of times the validation can fail before the limit is considered
            	invalid.
            </param>
            <param name="isLeased">
            	Indicates if the license is leased.
            </param>
        </member>
        <member name="M:Xheo.Licensing.LicenseServerLimit.#ctor(System.String,System.Int32,System.Boolean,System.Int32)">
            <summary>
            Initializes a new instance of the LicenseServerLimit class.
            </summary>
            <param name="url">
            	Url of the license server.
            </param>
            <param name="allowedFailures">
            	Number of times the validation can fail before the limit is considered
            	invalid.
            </param>
            <param name="isLeased">
            	Indicates if the license is leased.
            </param>
            <param name="leaseLength">
            	The length of thelease in hours.
            </param>
        </member>
        <member name="M:Xheo.Licensing.LicenseServerLimit.Validate(System.ComponentModel.LicenseContext,System.Type,System.Object)">
            <summary>
            Validates that the license being granted is within the limits enforced by
            this object.
            </summary>
            <param name="context">
            	The LicenseContext passed to <see cref="M:System.ComponentModel.LicenseProvider.GetLicense(System.ComponentModel.LicenseContext,System.Type,System.Object,System.Boolean)"/>.
            </param>
            <param name="type">
            	The Type of the object being licensed.
            </param>
            <param name="instance">
            	The instance of the object being licensed.
            </param>
            <returns>
            	Returns true if the limits are valid, otherwise false.
            </returns>
        </member>
        <member name="M:Xheo.Licensing.LicenseServerLimit.LoadFromXml(System.Xml.XmlNode)">
            <summary>
            Loads the contents of a Limit from an XML string.
            </summary>
            <param name="node">
            	The XML string to load from.
            </param>
            <returns>
            	Returns true if the load was successful, otherwise false.
            </returns>
        </member>
        <member name="M:Xheo.Licensing.LicenseServerLimit.SaveToXml(System.Xml.XmlNode)">
            <summary>
            Saves the contents of the Limit as an XML string.
            </summary>
            <returns>
            	Returns the saved XML.
            </returns>
        </member>
        <member name="M:Xheo.Licensing.LicenseServerLimit.GetDetailsDescription">
            <summary>
            Overrides <see cref="M:Xheo.Licensing.Limit.GetDetailsDescription"/>.
            </summary>
        </member>
        <member name="P:Xheo.Licensing.LicenseServerLimit.Url">
            <summary>
            Gets or sets the URL of the license server web service.
            </summary>
            <remarks>
            	<seealso cref="T:Xheo.Licensing.LicenseServer"/>
            </remarks>
        </member>
        <member name="P:Xheo.Licensing.LicenseServerLimit.Alternates">
            <summary>
            Gets a collection of alternate server URLs to use in case a connection to the primary
            server cannot be established. If the license is read only then a copy of the collection
            is returned and any changes made are lost.
            </summary>
        </member>
        <member name="P:Xheo.Licensing.LicenseServerLimit.AllowedFailures">
            <summary>
            Gets or sets the number of times the remote validation can fail before the
            limit is considered violated. Allows for congestion, and other internet 
            problems.
            </summary>
        </member>
        <member name="P:Xheo.Licensing.LicenseServerLimit.IsLeased">
            <summary>
            Gets or sets a value that indicates if the license should be leased.
            </summary>
            <remarks>
            	Leased licenses can help reduce network traffic and increase reliability by
            	reducing the number of times a remote server is queried for validation. When
            	a leased license is validated by a <see cref="T:Xheo.Licensing.LicenseServer"/>, the lease is 
            	renewed for the amount of time  specified in <see cref="P:Xheo.Licensing.LicenseServerLimit.LeaseLength"/>. 		///		
            	<para>
            	XHEO|Licensing must have permission to overwrite the original license file for 
            	the lease to renew. If it can't write to the file then the lease is not reviewed, but 
            	the license validation still succeeds. The lease is only valid on the machine 
            	it was originally granted to. If copied to a new machine a new lease is 
            	requested from the license server.
            	</para>
            </remarks>
        </member>
        <member name="P:Xheo.Licensing.LicenseServerLimit.LeaseLength">
            <summary>
            Gets or sets the length of a the lease in hours. 
            </summary>
        </member>
        <member name="P:Xheo.Licensing.LicenseServerLimit.LeaseExpires">
            <summary>
            Gets or sets the date when the current lease expires.
            </summary>
        </member>
        <member name="P:Xheo.Licensing.LicenseServerLimit.LeasedMachine">
            <summary>
            Gets or sets the profile hash of the machine the license was leased to.
            </summary>
        </member>
        <member name="P:Xheo.Licensing.LicenseServerLimit.UseValidateEx">
            <summary>
            Gets or sets a value that indicates if XHEO|Licensing should call the ValidateEx method
            on the license server. License server must be running version 2.0 or later.
            </summary>
        </member>
        <member name="P:Xheo.Licensing.LicenseServerLimit.AllowInitialFailure">
            <summary>
            Gets or sets a value that indicates if a failure the first time the Type is requested
            after the process starts should cause a hard failure.
            </summary>
            <remarks>
            	Previous versions of XHEO|Licensing allowed a minimum number of failures to 
            	occur before a hard failure. If the process was restarted before the maximum
            	number of failures occurred, a user could effectively run without ever checking
            	back with the license server. By setting AllowInitialFailure to false, the
            	process must acquire a valid response at least the first time it is requested.
            	Further requests are allowed to fail to enable an ongoing application to continue
            	running even if the license server goes down.
            	<blockquote class="dtBLOCK"><b>Note</b> Rather then using a failure tolerance
            	it is better to use <see cref="P:Xheo.Licensing.LicenseServerLimit.IsLeased"/> to force the license to obtain a
            	long running validate to eliminate most intermittent problems associated with
            	Internet connectivity.</blockquote>
            </remarks>
        </member>
        <member name="P:Xheo.Licensing.LicenseServerLimit.IsRemote">
            <summary>
            Overrides <see cref="P:Xheo.Licensing.Limit.IsRemote"/>.
            </summary>
        </member>
        <member name="P:Xheo.Licensing.LicenseServerLimit.Description">
            <summary>
            Gets the description of the limit.
            </summary>
        </member>
        <member name="P:Xheo.Licensing.LicenseServerLimit.Name">
            <summary>
            Gets the display name of the limit.
            </summary>
        </member>
        <member name="P:Xheo.Licensing.LicenseServerLimit.IsTimeSensitive">
            <summary>
            Gets a value that indicates if the license server limit is time sensitive.
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.UPoint">
            <summary>
            Summary description for UPoint.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.UPoint.x">
            <summary>
            
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.UPoint.y">
            <summary>
            
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.UPoint.#ctor(System.UInt32,System.UInt32)">
            <summary>
            
            </summary>
            <param name="_x"></param>
            <param name="_y"></param>
        </member>
        <member name="M:Telogis.GeoBase.UPoint.#ctor(System.Double,System.Double)">
            <summary>
            
            </summary>
            <param name="_x"></param>
            <param name="_y"></param>
        </member>
        <member name="M:Telogis.GeoBase.UPoint.#ctor(System.Double,System.Double,System.Boolean)">
            <summary>
            
            </summary>
            <param name="_x"></param>
            <param name="_y"></param>
            <param name="degrade_to_grid"></param>
        </member>
        <member name="M:Telogis.GeoBase.UPoint.FromReal(System.Double)">
            <summary>
            
            </summary>
            <param name="_x"></param>
            <returns></returns>
        </member>
        <member name="M:Telogis.GeoBase.UPoint.ToReal(System.UInt32)">
            <summary>
            
            </summary>
            <param name="_x"></param>
            <returns></returns>
        </member>
        <member name="M:Telogis.GeoBase.UPoint.Write(System.IO.BinaryWriter)">
            <summary>
            
            </summary>
            <param name="wr"></param>
        </member>
        <member name="M:Telogis.GeoBase.UPoint.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Telogis.GeoBase.DynamicDllImportAttribute.GetOriginalPathOfExecutingAssembly">
            <summary>
            Gets the original path of the executing assembly.  This is used when we are running as
            a GeoStream, in which case IIS copies geobase.net to a temporary folder.
            GetPathOfExecutingAssembly will return the temporary folder, which doesn't include
            geobase[64].dll.  GetOriginalPathOfExecutingAssembly returns the original bin folder,
            which does.
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.Transactional.TransactionalRepository">
            <summary>
            Allows access to an updateable GeoBase Transactional database.
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.Transactional.TransactionalRepository.#ctor(System.String)">
            <summary>
            Opens or creates a transactional database on disk.
            </summary>
            <remarks>
            When you have finished with a transactional repository you should call
            the dispose method to release memory and release the file handle.
            </remarks>
            <example>
            This code snippet demonstrates how you can check to see if the 
            repository was created, or simply loaded from disk. If the 
            repository was created it will be empty. This is typically a 
            good place in the execution cycle of your application to create
            any tables and indexes that your application needs to function.
            <code lang="C#">
            String fname = "MyData.gbtx";
            
            bool created = !System.IO.File.Exists(fname);
            TransactionalRepository tr = new TransactionalRepository(fname);
            
            if (created) {
                // we should add all the tables and 
                // indexes we need to the repository
            } else {
                // the repository already exists and
                // we simply opened it. we probably
                // don't need to do anything.
            }
            
            ...
            
            // finished with the repository:
            tr.Dispose();
            </code></example>
            <param name="fname">The filename to open. Typically this filename
            will end with the 'gbtx' extension.</param>
        </member>
        <member name="M:Telogis.GeoBase.Transactional.TransactionalRepository.BeginTransaction">
            <summary>
            Begins a new transaction. This is required before any operations can
            be performed on the repository.
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.Transactional.TransactionalRepository.EndTransaction">
            <summary>
            Closes the existing transaction. If any changes have been made to the database
            they are committed at this time.
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.Transactional.TransactionalRepository.AbortTransaction">
            <summary>
            Aborts the existing transaction.  If any changes have been made to the database they
            are rolled back.
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.Transactional.TransactionalRepository.CreateTable(System.String)">
            <summary>
            Creates a new table in the <see cref="T:Telogis.GeoBase.Transactional.TransactionalRepository"/>.
            </summary>
            <param name="name">The name of the table to create. There must not be
            an existing table with this name. The name will be converted to lowercase.</param>
            <returns>The newly created table.</returns>
            <remarks>
            <para>This method must be called using a current transaction (see example).</para>
            <para>Whenever a new table is created, GeoBase automatically adds an "id" field. 
            The "id" is a unique identifier within the table for each record in the table.
            This field cannot be modified.</para>
            </remarks>  
            <example>
            An exception will be thrown if you try to recreate a table that already exists.
            For many applications it is sufficient to only create any necessary tables when
            you initialize your transactional repository. See the example for the  
            <see cref="M:Telogis.GeoBase.Transactional.TransactionalRepository.#ctor(System.String)">transactional repository constructor</see>.
            <code lang="C#">
            using (EnsureTransaction trans = new EnsureTransaction(myTransactionalRepository)) {
            // creates a new table named 'warehouses'
                Table myTable = myTransactionalRepository.CreateTable("Warehouses"); 
                ...
            }
            </code>
            </example>
        </member>
        <member name="M:Telogis.GeoBase.Transactional.TransactionalRepository.GetRepositoriesForCountry(Telogis.GeoBase.Country)">
            <summary>
            A stub for the method that returns a list of sub-repositories that contain data about a specified country.
            </summary>
            <param name="Country">The country for which data is desired.</param>
            <returns>An empty list.</returns>
        </member>
        <member name="M:Telogis.GeoBase.Transactional.TransactionalRepository.SetCopyrightString(System.String)">
            <summary>
            Sets the copyright string associated with this TransactionalRepository.
            </summary>
            <param name="copyright"></param>
        </member>
        <member name="P:Telogis.GeoBase.Transactional.TransactionalRepository.InTransaction">
            <summary>
            True if a transaction has begun and has not ended, false otherwise.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Transactional.TransactionalRepository.Indexes">
            <summary>
            Gets the collection of indexes in this <see cref="T:Telogis.GeoBase.Transactional.TransactionalRepository"/>.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Transactional.TransactionalRepository.Tables">
            <summary>
            Gets the collection of tables in this transactional repository.
            </summary>
            <example>
            This code snippet lists all the table names from a given transactional 
            repository.
            <code lang="C#">
            void ListTables(TransactionalRepository tr)
            { 
                Console.WriteLine("Repository contains these tables:");
                foreach (String name in tr.Tables.Names)
                {
                    Console.WriteLine("\t{0}", name);
                }
            }
            </code>
            Typically, though, you will already know the names of the tables in
            your repository. In which case you can simply grab the desired table:
            <code lang="C#">
            Table myWarehouses = myTransactionalRepository.Tables["warehouses"];
            </code>
            </example>
        </member>
        <member name="P:Telogis.GeoBase.Transactional.TransactionalRepository.HasGlobalData">
            <summary>
            Returns whether this <see cref="T:Telogis.GeoBase.Transactional.TransactionalRepository"/> contains any global
            data. Always false.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Transactional.TransactionalRepository.CopyrightString">
            <summary>
            Returns the copyright string associated with this TransactionalRespository.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Transactional.TransactionalRepository.FileName">
            <summary>
            Gets or sets the file name to open. Typically ends with the 'gbtx' extension.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Transactional.TransactionalRepository.Countries">
            <summary>
            Returns an array of the Countries inside this <see cref="T:Telogis.GeoBase.Transactional.TransactionalRepository"/>.
            Always a zero-length array.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Transactional.TransactionalRepository.Regions">
            <summary>
            Returns an empty array.
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.Transactional.EnsureTransaction">
            <summary>
            Create an EnsureTransaction object for a specified transactional repository to ensure that
            method calls take place within a transaction. When you create an EnsureTransaction object,
            it starts a new transaction if there is not already a transaction in progress.
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.Transactional.EnsureTransaction.#ctor(Telogis.GeoBase.Transactional.TransactionalRepository)">
            <summary>
            Creates a new EnsureTransaction object for a specified repository.
            </summary>
            <param name="repo">The transactional repository to which the transaction belongs.</param>
        </member>
        <member name="M:Telogis.GeoBase.Transactional.EnsureTransaction.Dispose">
            <summary>
            Ends the current transaction if it was begun by this EnsureTransaction object.
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.Transactional.IndexCollection">
            <summary>
            A collection of indexes in a table or transactional repository.
            </summary>
            <example>
            You must use an index when querying a table for records. An IndexCollection object
            provides the means to select an index by name, from either a table or a transactional 
            repository:
            <code lang="C#">
            Index idx = myTable.Indexes["myindex"];
            Records[] records = idx.Query(...);
            </code>
            or
            <code lang="C#">
            Index idx = myTransactionalRepository["myindex"];
            Records[] records = idx.Query(...);
            </code>
            You can also use the <see cref="P:Telogis.GeoBase.Transactional.IndexCollection.Names">IndexCollection.Names</see> property to 
            list all the indexes in a table (or repository).
            <code lang="C#">
            //
            // the repository contains these indexes...
            //
            IndexCollection ic = myTransactionalRepository.Indexes;
            Console.WriteLine("From repository:");
            foreach (String name in ic.Names) { Console.WriteLine("\t{0}", name); }
            
            //
            // ...and the table contains these indexes
            //
            ic = myTable.Indexes;
            Console.WriteLine("From table:");
            foreach (String name in ic.Names) { Console.WriteLine("\t{0}", name); }
            </code>
            </example>
        </member>
        <member name="M:Telogis.GeoBase.Transactional.IndexCollection.TryGetIndex(System.String,Telogis.GeoBase.Transactional.Index@)">
            <summary>
            Gets an <see cref="T:Telogis.GeoBase.Transactional.Index"/> object from this collection specified by name.
            </summary>
            <remarks>
            See <see cref="M:Telogis.GeoBase.Transactional.Table.CreateIndex(System.String,Telogis.GeoBase.Transactional.IndexColumn[])"/> to create an index or 
            <see cref="P:Telogis.GeoBase.Transactional.TransactionalRepository.Indexes"/> to retrieve an already-created Index.
            </remarks>
            <param name="name">The name of the <see cref="T:Telogis.GeoBase.Transactional.Index"/> to return. 
            Case is not important.</param>
            <param name="result">The named index.</param>
            <returns>True if the the specified index was found.</returns>
        </member>
        <member name="P:Telogis.GeoBase.Transactional.IndexCollection.Names">
            <summary>
            Gets a list of the names of the <see cref="T:Telogis.GeoBase.Transactional.Index"/>es in this collection.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Transactional.IndexCollection.Item(System.String)">
            <summary>
            Returns the <see cref="T:Telogis.GeoBase.Transactional.Index"/> with the given name from this IndexCollection.
            </summary>
            <remarks>
            See <see cref="M:Telogis.GeoBase.Transactional.Table.CreateIndex(System.String,Telogis.GeoBase.Transactional.IndexColumn[])"/> to create an index or 
            <see cref="P:Telogis.GeoBase.Transactional.TransactionalRepository.Indexes"/> to retrieve an already-created Index.
            </remarks>
            <param name="name">The name of the index to return.</param>
            <returns>The Index in this IndexCollection with the given name.</returns>
        </member>
        <member name="T:Telogis.GeoBase.ShapeUI.ShapeLayer">
            <summary>
            A layer that holds ShapeEntity objects that may be selected, edited, and rendered on a
            map.
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.ShapeUI.ShapeLayer.#ctor(Telogis.GeoBase.IMap)">
            <summary>
            Creates a base shapelayer that renders shapes on a map.
            </summary>
            <param name="map"></param>
        </member>
        <member name="M:Telogis.GeoBase.ShapeUI.ShapeLayer.Dispose">
            <summary>
            Disposes of any state and disconnects from the rtree.
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.ShapeUI.ShapeLayer.GetSelectState(Telogis.GeoBase.ShapeUI.ShapeEntity)">
            <summary>
            Returns an ISelectState used to perform selection related operations.
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.ShapeUI.ShapeLayer.GetDefaultState">
            <summary>
            Returns an IState used to perform default operations.
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.ShapeUI.ShapeLayer.EnterSelectMode">
            <summary>
            Changes the state to selection mode without any currently selected entity.
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.ShapeUI.ShapeLayer.Select(Telogis.GeoBase.ShapeUI.ShapeEntity)">
            <summary>
            Selects a specific entity and changes the state to a selection state.
            </summary>
            <param name="entity"></param>
        </member>
        <member name="M:Telogis.GeoBase.ShapeUI.ShapeLayer.Edit(Telogis.GeoBase.ShapeUI.ShapeEntity)">
            <summary>
            Edits a specific entity and changes the state to a edit state.
            </summary>
            <param name="entity"></param>
        </member>
        <member name="M:Telogis.GeoBase.ShapeUI.ShapeLayer.FinishEditing">
            <summary>
            Selects the previously edited entity and changes the state to a selection state
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.ShapeUI.ShapeLayer.AddShape(Telogis.GeoBase.ShapeUI.ShapeEntity)">
            <summary>
            Adds a new shape entity to the layer.
            </summary>
            <param name="entity">The entity to add to the layer</param>
        </member>
        <member name="M:Telogis.GeoBase.ShapeUI.ShapeLayer.RemoveShape(Telogis.GeoBase.ShapeUI.ShapeEntity)">
            <summary>
            Removes a specific shape from the layer if it exists.
            </summary>
            <param name="entity">The entity to be removed</param>
            <returns>True if the shape is removed, else false.</returns>
        </member>
        <member name="M:Telogis.GeoBase.ShapeUI.ShapeLayer.Clear">
            <summary>
            Removes all entities from the layer.
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.ShapeUI.ShapeLayer.QueryShapes">
            <summary>
            Gets all of the shape entities within the layer.
            </summary>
            <returns>A list of all the shape entities returned</returns>
        </member>
        <member name="M:Telogis.GeoBase.ShapeUI.ShapeLayer.QueryShapes(Telogis.GeoBase.BoundingBox)">
            <summary>
            Gets all of the shape entities that exist within a specific bounding box.
            </summary>
            <param name="query">The bounding box to look within for shapes</param>
            <returns>A list of all the shape entities returned</returns>
        </member>
        <member name="M:Telogis.GeoBase.ShapeUI.ShapeLayer.QueryShapes(Telogis.GeoBase.Indexes.RTreeRect)">
            <summary>
            Gets all of the shape entities that exist within a specific rectangle.
            </summary>
            <param name="query">The rectangle to look within for shapes</param>
            <returns>A list of all the shape entities returned</returns>
        </member>
        <member name="M:Telogis.GeoBase.ShapeUI.ShapeLayer.QueryShapes(Telogis.GeoBase.IMap)">
            <summary>
            Gets all of the shape entities within a map view.
            </summary>
            <param name="map">The map to used to look for entities existing within it</param>
            <returns>A list of all the shape entities returned</returns>
        </member>
        <member name="M:Telogis.GeoBase.ShapeUI.ShapeLayer.Render(System.Drawing.Graphics,Telogis.GeoBase.RenderContext)">
            <summary>
            Renders all of the shape entities according to the layer's current mode.
            </summary>
            <param name="graphics">The drawing surface</param>
            <param name="rc">Control for the placement of objects</param>
        </member>
        <member name="M:Telogis.GeoBase.ShapeUI.ShapeLayer.FireEvent``1(System.EventHandler{``0},``0)">
            <summary>
            Handles all generic events.
            </summary>
            <typeparam name="T">The event type (using generics)</typeparam>
            <param name="eventDel">The relevant event delegate</param>
            <param name="e">The event to fire</param>
        </member>
        <member name="M:Telogis.GeoBase.ShapeUI.ShapeLayer.OnMouseMove(System.Object,System.Windows.Forms.MouseEventArgs)">
            <summary>
            Calls mouse move on the layer's current state.
            </summary>
            <param name="sender">The object received from the event handler</param>
            <param name="e">The mouse event arguments</param>
            <returns>True if the movement was successfully handled.</returns>
        </member>
        <member name="M:Telogis.GeoBase.ShapeUI.ShapeLayer.OnMouseUp(System.Object,System.Windows.Forms.MouseEventArgs)">
            <summary>
            Calls mouse up on the layer's current state.
            </summary>
            <param name="sender">The object received from the event handler</param>
            <param name="e">The mouse event arguments</param>
            <returns>True if the up mouse movement was successfully handled.</returns>
        </member>
        <member name="M:Telogis.GeoBase.ShapeUI.ShapeLayer.OnMouseDown(System.Object,System.Windows.Forms.MouseEventArgs)">
            <summary>
            Calls mouse down on the layer's current state.
            </summary>
            <param name="sender">The object received from the event handler</param>
            <param name="e">The mouse event arguments</param>
            <returns>True if the down mouse movement was successfully handled.</returns>
        </member>
        <member name="M:Telogis.GeoBase.ShapeUI.ShapeLayer.OnMouseLeave(System.Object,System.EventArgs)">
            <summary>
            Calls mouse leave (when the mouse leaves the current map space) on the layer's current
            state.
            </summary>
            <param name="sender">The object received from the event handler</param>
            <param name="e">The mouse event arguments</param>
            <returns>True if the leave mouse movement was successfully handled.</returns>
        </member>
        <member name="M:Telogis.GeoBase.ShapeUI.ShapeLayer.OnMouseClick(System.Object,System.Windows.Forms.MouseEventArgs)">
            <summary>
            Calls mouse click on the layer's current state.
            </summary>
            <param name="sender">The object received from the event handler</param>
            <param name="e">The mouse event arguments</param>
            <returns>True if the mouse click was successfully handled.</returns>
        </member>
        <member name="M:Telogis.GeoBase.ShapeUI.ShapeLayer.FireRedraw">
            <summary>
            Rerenders the layer from scratch.
            </summary>
        </member>
        <member name="E:Telogis.GeoBase.ShapeUI.ShapeLayer.ShapeAdded">
            <summary>
            Event that is fired when a shape is added to the layer.
            </summary>
        </member>
        <member name="E:Telogis.GeoBase.ShapeUI.ShapeLayer.ShapeRemoved">
            <summary>
            Event that is fired when a shape is removed from the layer.
            </summary>
        </member>
        <member name="E:Telogis.GeoBase.ShapeUI.ShapeLayer.SelectionChanged">
            <summary>
            Event that is fired when which shape is selected changes.
            </summary>
        </member>
        <member name="E:Telogis.GeoBase.ShapeUI.ShapeLayer.ModeChanged">
            <summary>
            Event that is fired when there is a change to the layer's mode.
            </summary>
        </member>
        <member name="E:Telogis.GeoBase.ShapeUI.ShapeLayer.RedrawRequired">
            <summary>
            Event that is fired when the layer needs to be redrawn.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.ShapeUI.ShapeLayer.State">
            <summary>
            Used to change the state, and fire any necessary events.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.ShapeUI.ShapeLayer.Map">
            <summary>
            Gets the map that the shaper layer is being rendered on.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.ShapeUI.ShapeLayer.Selection">
            <summary>
            Gets and sets the current selected entity.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.ShapeUI.ShapeLayer.CurrentMode">
            <summary>
            Determines the current layer's mode.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.ShapeUI.ShapeLayer.InvalidShape">
            <summary>
            Whether the current shape is invalid and needs to be removed (set when changing
            states).
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.ShapeUI.ShapeLayer.RequiredRendermodes">
            <summary>
            Determines when the entities will be rendered on the map.
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.ShapeUI.ShapeLayer.Mode">
            <summary>
            An enum representing the modes a layer may be in.
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.GeoStream.Server.Overlay">
            <summary>
            Tile Overlay base class.
            Override the Render(Graphics, IMap) method to generate your
            own tile overlays.
            </summary>
            <remarks>
            <para><b>Related articles</b>: <a href="716a13bd-a586-4062-ad0c-6d48b15b72da.htm">GeoStream</a>.</para>
            </remarks>
        </member>
        <member name="M:Telogis.GeoBase.GeoStream.Server.Overlay.DoRequest(Telogis.GeoBase.GeoStream.Authentication.AuthenticatedUser,Telogis.GeoBase.GeoStream.TileParams,System.Boolean)">
            <summary>
            Services the request for an overlay.
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.GeoStream.Server.Overlay.DoRequest(Telogis.GeoBase.GeoStream.Authentication.AuthenticatedUser,Telogis.GeoBase.GeoStream.TileParams,System.String,Telogis.GeoBase.IMapRenderer)">
            <summary>
            Services the request for an overlay.
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.GeoStream.Server.Overlay.Render(System.Drawing.Graphics,Telogis.GeoBase.IMap)">
            <summary>
            Render method. Override to generate a tile overlay.
            </summary>
            <param name="g"></param>
            <param name="m"></param>
        </member>
        <member name="M:Telogis.GeoBase.GeoStream.Server.Overlay.Render(System.Drawing.Graphics,Telogis.GeoBase.RenderContext)">
            <summary>
            Second render method, only render overlays if post-labelling is turned on.
            </summary>
            <param name="graphics"></param>
            <param name="rc"></param>
        </member>
        <member name="P:Telogis.GeoBase.GeoStream.Server.Overlay.RequiredRendermodes">
            <summary>
            Gets the <see cref="T:Telogis.GeoBase.RenderMode">RenderMode</see> required by this <b>Overlay</b>
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.GeoStream.Server.RouteOverlay">
            <summary>
            Implements an overlay for rendering a route.
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.GeoStream.Server.RouteOverlay.GetRouteByGuid(System.Guid)">
            <summary>
            Gets a route from a given GUID
            </summary>
            <param name="guid"></param>
            <returns></returns>
        </member>
        <member name="M:Telogis.GeoBase.GeoStream.Server.RouteOverlay.Render(System.Drawing.Graphics,Telogis.GeoBase.IMap)">
            <summary>
            We don't implement a tile overlay, so this method is non-functional.
            </summary>
            <param name="g"></param>
            <param name="m"></param>
        </member>
        <member name="M:Telogis.GeoBase.GeoStream.Server.RouteOverlay.Render(System.Drawing.Graphics,Telogis.GeoBase.RenderContext)">
            <summary>
            Render the route as an overlay.
            </summary>
            <param name="graphics"></param>
            <param name="rc"></param>
        </member>
        <member name="T:Telogis.GeoBase.GeoStream.Server.ServerData">
            <summary>
            Responsible for managing data sets referred to by repository.config
            
            Loading and unloading data as necessary
            
            Reloading repository.config when updated
            
            Making available repositories for requests
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.GeoStream.Server.ServerData.LoadSets(System.Collections.Generic.Dictionary{System.String,Telogis.GeoBase.GeoStream.Server.DataSet},System.Xml.XmlElement,System.String)">
            <summary>
            Load all the immediate datasets below the given element
            </summary>
            <param name="dataSets">The dictionary to populate.</param>
            <param name="root">The element to search.</param>
            <param name="basePath">The directory path in which the file is located.</param>
        </member>
        <member name="T:Telogis.GeoBase.GeoStream.Server.GeoStreamRenderer">
            <summary>
            Abstract base class for custom renderers that generate custom tile layers for GeoStream.
            </summary>
            <remarks><para>Override this class to define a custom GeoStream renderer. You must implement the abstract
            <see cref="M:Telogis.GeoBase.GeoStream.Server.GeoStreamRenderer.Render(System.Drawing.Graphics,Telogis.GeoBase.RenderContext)"/> method to draw
            the tiles of your custom layer and implement the abstract <see cref="P:Telogis.GeoBase.GeoStream.Server.GeoStreamRenderer.ExpiresAfter"/> property
            to indicate how long the tiles can remain in the GeoStream tile cache.</para>
            <para>Your GeoStreamRenderer class should be added to an aspx file which is placed in the
            renderers folder of the GeoStream server. (The renderers folder must be created at the root
            directory of your GeoStream tile server.)</para>
            <para><b>Related articles</b>: <a href="9c7aac60-98b1-4ff4-b3a0-be8b3d523823.htm">Geostream renderers</a>,
            <a href="91d71476-9dfd-4821-85ec-2a4dac028d77.htm">Rendering your own tiles</a>.</para>
            </remarks>
        </member>
        <member name="M:Telogis.GeoBase.GeoStream.Server.GeoStreamRenderer.Render(System.Drawing.Graphics,Telogis.GeoBase.RenderContext)">
            <summary>
            If the requested tile was not found in the tile-cache, this method is called to perform
            the drawing operation. Drawing is conducted on a supertile basis.
            </summary>
            <param name="graphics">The Graphics object representing the canvas on which to draw.</param>
            <param name="rc">The context of the drawing operation. Contains the Map member which
            can be used to determine geographical coordinates for the drawing area.</param>
        </member>
        <member name="P:Telogis.GeoBase.GeoStream.Server.GeoStreamRenderer.CacheId">
            <summary>
            A unique indentifier for the renderer. This is used by the geostream server as part of
            the serverside cache-key. If the tile being drawn was requested with some metadata e.g.
            request time, then that parameter must be manually appended here. May contain only
            filename-friendly characters. Defaults to string.Empty.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.GeoStream.Server.GeoStreamRenderer.ExpiresAfter">
            <summary>
            Indicates how long the rendered tiles are to stay in the GeoStream's tile-cache.
            This must be at least one minute.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.GeoStream.Server.GeoStreamRenderer.DataDependentCache">
            <summary>
            Indicates whether the generated tiles depend on the currently loaded gbfs files. If this
            is overridden to return true then the tiles will be cached with the current dataset as
            part of the cache-key. Defaults to false.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.GeoStream.Server.GeoStreamRenderer.RequiredRendermodes">
            <summary>
            Returns the stage when the custom renderer draws on tiles.
            </summary>
            <remarks>By default, custom renderers draw in the postlabelling stage.</remarks>
        </member>
        <member name="P:Telogis.GeoBase.GeoStream.Server.GeoStreamRenderer.Bounds">
            <summary>
            Returns the bounds for the area covered by the renderer. If a tile is requested outside
            this area a tile will not be generated, potentially increasing performance.
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.Internal.JSONSerializeAsInt">
            <summary>
            Tells the JSON Serializer to serialize this
            enum as int instead of string. This was created
            to work around a .NET CF 2.0 bug where Enum.Parse
            tried to convert the result of the parse into a
            UInt64
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.Internal.OptionalMemberAttribute">
             <summary>
            
             </summary>
        </member>
        <member name="M:Telogis.GeoBase.Internal.OptionalMemberAttribute.#ctor">
             <summary>
            
             </summary>
        </member>
        <member name="T:Telogis.GeoBase.Internal.SerializeAttribute">
             <summary>
            
             </summary>
        </member>
        <member name="F:Telogis.GeoBase.Internal.SerializeAttribute.SerializeAs">
            <summary>
            /
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.Internal.SerializeAttribute.#ctor">
             <summary>
            
             </summary>
        </member>
        <member name="M:Telogis.GeoBase.Internal.SerializeAttribute.#ctor(System.String)">
            <summary>
            /
            </summary>
            <param name="SerializeAs"></param>
        </member>
        <member name="F:Telogis.GeoBase.Internal.SerializeAttribute.MaxPossibleVersion">
            <summary>
            The way in which we represent the Max possible version of GeoBase. 
            This is the default for serialized fields that are not marked with a stop at version on the attribute.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Internal.SerializeAttribute.StartAtVersion">
            <summary>
            If set, the client version must be this version or greater for this
            member to serialize.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Internal.SerializeAttribute.StopAtVersion">
            <summary>
            If set, the client version must be less than this version for this
            member to serialize.
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.Internal.JSONSerializableAttribute">
             <summary>
            
             </summary>
        </member>
        <member name="M:Telogis.GeoBase.Internal.JSONSerializableAttribute.#ctor">
             <summary>
            
             </summary>
        </member>
        <member name="P:Telogis.GeoBase.Internal.JSONSerializableAttribute.UseAssembly">
            <summary>
            Used to deserialize the class from a different assembly
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.Internal.JSONSerializeVersionSpecific">
             <summary>
            
             </summary>
        </member>
        <member name="M:Telogis.GeoBase.Internal.JSONSerializeVersionSpecific.#ctor">
             <summary>
            
             </summary>
        </member>
        <member name="F:Telogis.GeoBase.Internal.GeoStreamMode.NotSpecified">
            <summary>
            Default mode.
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.Internal.JSONFormatter">
            <summary>
            Serializes and deserializes object graphs to and from JavaScript Object Notation.
            </summary>
            <remarks>
            Due to the weak typing in JSON, this formatter is not entirely symmetric. Some class information
            is conveyed by adding a "_class" member and value to each object, specifying the .NET assembly
            and type information for the object. However, in some situations, the deserializer cannot determine
            what the expected type of a member is. This occurs in the following situations:
             - The class implements ISerializable, or has an ISerializationSurrogate. In this case, the deserializer will
               try and determine the type by looking for a field on the object with the same name.
             - The class contains a weakly typed (object) member or array.
             - The top level object being deserialized is an array, an enum, or a numeric primitive.
            When the type cannot be determined due to one of these cases, numeric primitives are always deserialized as
            doubles, Enums are always deserialized as strings, and arrays are always deserialized as arrays of objects,
            regardless of their original typing.
            These caveats mean that you need to take special care in deserialization: If your class implements ISerializable,
            ensure it fetches any arrays from the SerializationInfo structure as arrays of objects, then uses Array.CopyTo()
            to copy them into a strongly typed array if neccessary. Attempting to use SerializationInfo.GetValue with the
            strongly typed array directly will fail. If your objects contain weakly typed members, bear in mind that
            primitives, arrays, and Enums assigned to these will be deserialized as above.
            </remarks>
        </member>
        <member name="F:Telogis.GeoBase.Internal.JSONFormatter.DefaultType">
             <summary>
            
             </summary>
        </member>
        <member name="F:Telogis.GeoBase.Internal.JSONFormatter.ReplaceUnknownWithDefault">
             <summary>
            
             </summary>
        </member>
        <member name="M:Telogis.GeoBase.Internal.JSONFormatter.#ctor(System.Runtime.Serialization.ISurrogateSelector,System.Runtime.Serialization.StreamingContext)">
             <summary>
            
             </summary>
             <param name="selector"></param>
             <param name="context"></param>
        </member>
        <member name="M:Telogis.GeoBase.Internal.JSONFormatter.#ctor">
             <summary>
            
             </summary>
        </member>
        <member name="M:Telogis.GeoBase.Internal.JSONFormatter.Tokenize(System.IO.Stream)">
             <summary>
            
             </summary>
             <param name="serializationStream"></param>
             <returns></returns>
        </member>
        <member name="M:Telogis.GeoBase.Internal.JSONFormatter.ParseNumber(System.String)">
            <summary>
            Reliably parse a number without using TryParse (doesn't exist on CE) or using Exceptions (slow).
            </summary>
            <param name="val">A string to parse.</param>
            <returns>The parsed number.</returns>
        </member>
        <member name="M:Telogis.GeoBase.Internal.JSONFormatter.StringIsNonFractionalNumber(System.String)">
            <summary>
            Match the Regex "^[\+\-]?[0-9]+$" but by hand so its faster.
            </summary>
            <param name="val">A string representation of a number.</param>
            <returns></returns>
        </member>
        <member name="M:Telogis.GeoBase.Internal.JSONFormatter.FindSurrogate(System.Type)">
            <summary>
            Searches for and returns a serialization surrogate for the given Type, or any 
            superclass of that Type. The client's version number must meet the minimum 
            version number required by the surrogate.
            </summary>
            <param name="objectType"></param>
            <returns></returns>
        </member>
        <member name="M:Telogis.GeoBase.Internal.JSONFormatter.HasSurrogate(System.Type)">
            <summary>
            Searches for a serialization surrogate for the given Type, or any 
            superclass of that Type. The client's version number must meet the 
            minimum version number required by the surrogate.
            </summary>
            <param name="objectType"></param>
        </member>
        <member name="M:Telogis.GeoBase.Internal.JSONFormatter.AddSurrogate(System.Type,Telogis.GeoBase.Internal.IJSONSerializationSurrogate)">
             <summary>
            
             </summary>
             <param name="t"></param>
             <param name="surrogate"></param>
        </member>
        <member name="M:Telogis.GeoBase.Internal.JSONFormatter.Serialize(System.IO.Stream,System.Object)">
             <summary>
            
             </summary>
             <param name="serializationStream"></param>
             <param name="graph"></param>
        </member>
        <member name="M:Telogis.GeoBase.Internal.JSONFormatter.PopulateHashtable(Telogis.GeoBase.Internal.JSONFormatter.SerializationContext,System.Object)">
            <summary>
            Recurse through the object graph, serializing objects to the hashtable.
            </summary>
            <param name="ctx"></param>
            <param name="graph"></param>
        </member>
        <member name="M:Telogis.GeoBase.Internal.JSONFormatter.IsArrayLikeTypeForClient(System.Type)">
            <summary>
            Whether the supplied type should be serialized as a JSON array. Considers whether
            the client can deserialize this type as a JSON array.
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Telogis.GeoBase.Internal.JSONFormatter.IsArrayLikeType(System.Type)">
            <summary>
            Determines whether the supplied type should be serialized to and deserialized from a
            JSON array, rather than an object encapsulating an array. This is true of all .NET
            types that implement <code>IList</code>; the test fails for types not from the
            <code>System</code> namespace because certain Telogis types (e.g.
            <code>GeoFenceCollection</code>) are <code>IList</code> implementers but need to be
            deserialized as an object (which specifies an explicit type) rather than an array.
            </summary>
            <param name="type">The type to test.</param>
            <returns>Whether <paramref name="type"/> should be serialized as an array.</returns>
        </member>
        <member name="M:Telogis.GeoBase.Internal.JSONFormatter.getFilteredAttributes(System.Reflection.MemberInfo,System.Boolean)">
            <summary>
            Filters invalid attributes.
            </summary>
            <param name="info"></param>
            <param name="inherited"></param>
            <returns></returns>
        </member>
        <member name="M:Telogis.GeoBase.Internal.JSONFormatter.IsFieldSerialized(System.Reflection.FieldInfo,System.String@)">
            <summary>
            A field is serializable if all of these conditions are met:
            	EIt must be marked with SerializeAttribute.
            	
            	EIf it is marked with a [Serialialize(OnlyIf=...)] the OnlyIf
            	  must match the current GeoStreamMode.
            	  
            	EIf it is marked with a [Serialialize(StartAtVersion=...)] 
            	  the ClientVersion must be equal to or greater than the 
            	  current specified version.
            	  
            	EIf it is marked with a [Serialialize(StopAtVersion=...)] 
            	  the ClientVersion must be less than the specified version.
            </summary>
            <param name="fi"></param>
            <param name="serializeAs"></param>
            <returns></returns>
        </member>
        <member name="M:Telogis.GeoBase.Internal.JSONFormatter.IsPropertySerialized(System.Reflection.PropertyInfo,System.String@)">
            <summary>
            A property is serializable if all of these conditions are met:
            	EIt must be marked with SerializeAttribute.
            	
            	EIt must have a getter.
            	
            	EIt must not be indexed
            	
            	EIf it is marked with a [Serialialize(OnlyIf=...)] the OnlyIf
            	  must match the current GeoStreamMode.
            	
            	EIf it is marked with a [Serialialize(StartAtVersion=...)] 
            	  the ClientVersion must be equal to or greater than the  
            	  current specified version.
            	
            	EIf it is marked with a [Serialialize(StopAtVersion=...)] 
            	  the ClientVersion must be less than the specified version.
            </summary>
            <param name="pi"></param>
            <param name="serializeAs"></param>
            <returns></returns>
        </member>
        <member name="M:Telogis.GeoBase.Internal.JSONFormatter.IsFieldDeserialized(System.Reflection.FieldInfo,System.String@,System.Boolean@)">
            <summary>
            A field is deserializable if all of these conditions are met:
            	EIt must be marked with SerializeAttribute.
            	
            	EIf it is marked with a [Serialialize(OnlyIf=...)] the OnlyIf
            	  must match the current GeoStreamMode.
            	
            	EIf it is marked with a [Serialialize(StartAtVersion=...)] 
            	  the ClientVersion must be equal to or greater than the  
            	  current specified version.
            	
            	EIf it is marked with a [Serialialize(StopAtVersion=...)] 
            	  the ClientVersion must be less than the specified version.
            </summary>
            <param name="fieldinfo"></param>
            <param name="deserializeFrom"></param>
            <param name="optional"></param>
            <returns></returns>		
        </member>
        <member name="M:Telogis.GeoBase.Internal.JSONFormatter.IsPropertyDeserialized(System.Reflection.PropertyInfo,System.String@)">
            <summary>
            A property is deserializable if all of these conditions are met:
            	EIt must be marked with SerializeAttribute.
            	
            	EIt must have a setter.
            	
            	EIt must not be indexed
            	
            	EIf it is marked with a [Serialialize(OnlyIf=...)] the OnlyIf
            	  must match the current GeoStreamMode.
            	
            	EIf it is marked with a [Serialialize(StartAtVersion=...)] 
            	  the ClientVersion must be equal to or greater than the  
            	  current specified version.
            	
            	EIf it is marked with a [Serialialize(StopAtVersion=...)] 
            	  the ClientVersion must be less than the specified version.
            </summary>		
            <param name="pi"></param>
            <param name="propertyName"></param>
            <returns></returns>
        </member>
        <member name="P:Telogis.GeoBase.Internal.JSONFormatter.Binder">
             <summary>
            
             </summary>
        </member>
        <member name="P:Telogis.GeoBase.Internal.JSONFormatter.Context">
             <summary>
            
             </summary>
        </member>
        <member name="P:Telogis.GeoBase.Internal.JSONFormatter.SurrogateSelector">
             <summary>
            
             </summary>
        </member>
        <member name="P:Telogis.GeoBase.Internal.JSONFormatter.ClientVersion">
            <summary>
            The Assembly version for the client using this JSON Formatter is serializing objects for
            and deserializing JSON from.
            <remarks>
            If this is being used in a .NET client, then this matches the Assembly version of this exact
            assembly. If this is being used in a GeoStream server, then this will be set to the reported
            assembly version of the client that we are communicating with.
            Note that <i>regardless</i> of use, this is initially populated with the local assembly 
            version. So upon initialization of an instance of JSONFormatter that is being used to 
            communicate with a remote client, this will possibly return an incorrect Version until this
            field has been populated. In such cases, this field is populated when a client makes a 
            request.
            </remarks>
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.Internal.JSONFormatter.JSONTokenizer">
             <summary>
            
             </summary>
        </member>
        <member name="M:Telogis.GeoBase.Internal.JSONFormatter.JSONTokenizer.Tokenize(System.IO.Stream)">
             <summary>
            
             </summary>
             <param name="serializationStream"></param>
             <returns></returns>
        </member>
        <member name="M:Telogis.GeoBase.Internal.JSONFormatter.JSONTokenizer.#ctor(System.IO.StreamReader)">
             <summary>
            
             </summary>
             <param name="r"></param>
        </member>
        <member name="T:Telogis.GeoBase.Internal.JSONFormatter.JSONTokenizer.Token">
             <summary>
            
             </summary>
        </member>
        <member name="F:Telogis.GeoBase.Internal.JSONFormatter.SerializationContext.objects">
             <summary>
            
             </summary>
        </member>
        <member name="F:Telogis.GeoBase.Internal.JSONFormatter.SerializationContext.classnames">
             <summary>
            
             </summary>
        </member>
        <member name="F:Telogis.GeoBase.Internal.JSONFormatter.SerializationContext.oidgen">
             <summary>
            
             </summary>
        </member>
        <member name="F:Telogis.GeoBase.Internal.JSONFormatter.SerializationContext.IDSeq">
             <summary>
            
             </summary>
        </member>
        <member name="M:Telogis.GeoBase.Internal.JSONFormatter.SerializationContext.GetId(System.Object)">
             <summary>
            
             </summary>
             <param name="o"></param>
             <returns></returns>
        </member>
        <member name="M:Telogis.GeoBase.GeoStream.Server.StackTile.GetCustomLayers(System.Collections.Generic.List{System.String}@,Telogis.GeoBase.GeoStream.Authentication.AuthenticatedUser,Telogis.GeoBase.GeoStream.TileParams)">
            <summary>
            Figure out what layers we are going to create, if any.
            </summary>
            <param name="requestedLayers">Populated with layers requested on the queryline, this 
            will be in the order requested. </param>
            <param name="user">Current user as per authtoken</param>
            <param name="tileparams">Needed to see if custom layer exists for the requested tile.</param>
            <returns>List of layers that were requested and exist in users config, in ther order 
            that they appear in the config file.</returns>
        </member>
        <member name="M:Telogis.GeoBase.GeoStream.Server.StackTile.CreateBaseTile(Telogis.GeoBase.GeoStream.TileParams,System.String@)">
            <summary>
            Create the underlying image. Depending on the queryline setting "nobasemap"
            This will either be a GeoStream tile fetched from a server specified in
            Web.config or a tranparent tile.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Telogis.GeoBase.Navigation.DrivingSide">
            <summary>
            References the driving side used in the country
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Navigation.DrivingSide.Unknown">
            <summary>
            Unsure of which system.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Navigation.DrivingSide.Left">
            <summary>
            Vehicles drive on the left-hand side of the road.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Navigation.DrivingSide.Right">
            <summary>
            Vehicles drive on the right-hand side of the road.
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.Routing.MultiThreadMatrix">
             <summary>                                  
             Provides functionality similar to <see cref="T:Telogis.GeoBase.Routing.RouteMatrix"/>, but with the added benefit of being able to 
             specify the number of threads to be used; ideal for multi-core systems working with large matrices. When the matrix is instantiated, the
             whole matrix is calculated in one go. Using persist provides the option to save the results to disk for faster, subsequent, data retrieval.
             </summary>
             <remarks>
             <para>
             When the MultiThreadMatrix is 'persistent' the calculation results are automatically saved and loaded from disk, as and when required.
             </para>
             <para>Related articles: <a href="60b7ec5d-a96d-4143-a76b-2231d01dd002.htm">Using a RouteMatrix</a>.</para>
             </remarks>
             <example>This example creates five RouteStops, and then displays the time and distance between the first one ('start'), 
             and each stop.<code lang="C#">
            {
                 //Create stops
                 RouteStop start = new RouteStop(33.84105, -117.91133);
                 RouteStop stop1 = new RouteStop(33.84123, -117.92153);
                 RouteStop stop2 = new RouteStop(33.83373, -117.91278);
                 RouteStop stop3 = new RouteStop(33.83818, -117.90488);
                 RouteStop stop4 = new RouteStop(33.82960, -117.90041);
            
                 //Create new MultiThreadMatrix
                 //	* RouteStop array
                 //	* strategy -> RoutingStrategyFastest
                 //	* number of threads -> 4
                 //	* persist -> true
                 MultiThreadMatrix myMTM = new MultiThreadMatrix(new RouteStop[] { start, stop1, stop2, stop3, stop4 }, new RoutingStrategyFastest(), 4, true);
            
                 //Get time and distances
                 double[] myMTMTimes = myMTM.Times(0); // seconds
                 double[] myMTMDistances = myMTM.Distances(0); // meters
            
                 //Output time and distance calculations to console
                 for (int i = 1; i &lt; myMTMTimes.Length; i++){
                     //Get distance (meters)
                     string distance = MathUtil.ConvertUnits(myMTMDistances[i], DistanceUnit.METERS, DistanceUnit.KILOMETERS).ToString(".##");
            
                     //Get time (seconds)
                     TimeSpan time = TimeSpan.FromSeconds(myMTMTimes[i]);
                 
                     //Output to console
                     Console.WriteLine("Distance to stop " + i + " is " + distance + "km, " + time + " minutes away" + Environment.NewLine);
                 }
            }
                </code></example>
        </member>
        <member name="M:Telogis.GeoBase.Routing.MultiThreadMatrix.#ctor(Telogis.GeoBase.RouteStop[],Telogis.GeoBase.Routing.RoutingStrategy)">
            <summary>
            Create a MultiThreadMatrix using an array of <see cref="T:Telogis.GeoBase.RouteStop"/>s, and a 
            <see cref="T:Telogis.GeoBase.Routing.RoutingStrategy"/>. The number of threads defaults to the 
            number of CPU cores available on the local machine.
            </summary>
            <param name="InitialStops">The array of <see cref="T:Telogis.GeoBase.RouteStop"/>s to be used for this calculation.</param>
            <param name="Strategy">The <see cref="T:Telogis.GeoBase.Routing.RoutingStrategy"/> to use for this calculation.</param>
            <example>See <see cref="T:Telogis.GeoBase.Routing.MultiThreadMatrix"/> for code example.</example>
        </member>
        <member name="M:Telogis.GeoBase.Routing.MultiThreadMatrix.#ctor(Telogis.GeoBase.RouteStop[])">
            <summary>
            Create a MultiThreadMatrix using an array of <see cref="T:Telogis.GeoBase.RouteStop"/>s. 
            The <see cref="T:Telogis.GeoBase.Routing.RoutingStrategy"/> defaults to <see cref="T:Telogis.GeoBase.Routing.RoutingStrategyFastest"/>.
            The number of threads defaults to the number of CPU cores available on the local machine.
            </summary>
            <param name="InitialStops">The array of <see cref="T:Telogis.GeoBase.RouteStop"/>s to be used for this calculation.</param>
            <example>See <see cref="T:Telogis.GeoBase.Routing.MultiThreadMatrix"/> for code example.</example>
        </member>
        <member name="M:Telogis.GeoBase.Routing.MultiThreadMatrix.#ctor(Telogis.GeoBase.RouteStop[],Telogis.GeoBase.Routing.LinkCost)">
            <summary>
            Create a MultiThreadMatrix using an array of <see cref="T:Telogis.GeoBase.RouteStop"/>s. 
            The <see cref="T:Telogis.GeoBase.Routing.RoutingStrategy"/> defaults to <see cref="T:Telogis.GeoBase.Routing.RoutingStrategyFastest"/>.
            The number of threads defaults to the number of CPU cores available on the local machine.
            </summary>
            <param name="InitialStops">The array of <see cref="T:Telogis.GeoBase.RouteStop"/>s to be used for this calculation.</param>
            <param name="MaxCost">The maximum allowable cost of any route - if this cost is exceeded, then a <see cref="T:Telogis.GeoBase.Routing.Exceptions.RouteExceedsCostException"/> is thrown.</param>
            <example>See <see cref="T:Telogis.GeoBase.Routing.MultiThreadMatrix"/> for code example.</example>
        </member>
        <member name="M:Telogis.GeoBase.Routing.MultiThreadMatrix.#ctor(Telogis.GeoBase.RouteStop[],Telogis.GeoBase.Routing.RoutingStrategy,System.Int32,System.Boolean)">
            <summary>
            Create a MultiThreadMatrix using an array of <see cref="T:Telogis.GeoBase.RouteStop"/>s, and a <see cref="T:Telogis.GeoBase.Routing.RoutingStrategy"/>. Define the number of threads to use (<paramref name="NumThreads"/>), and specify if the calculated data should be saved to disk (<paramref name="persist"/> = true) for quicker, subsequent data reading.
            </summary>
            <param name="InitialStops">The array of <see cref="T:Telogis.GeoBase.RouteStop"/>s to be used for this calculation.</param>
            <param name="Strategy">The <see cref="T:Telogis.GeoBase.Routing.RoutingStrategy"/> to use for this calculation.</param>
            <param name="NumThreads">The number of threads to use for this calculation.</param>
            <param name="persist">When <codeInline>true</codeInline>, the calculation results are automatically saved and loaded from disk, 
            as and when required, allowing for faster, subsequent, data retrieval.</param>
            <example>See <see cref="T:Telogis.GeoBase.Routing.MultiThreadMatrix"/> for code example.</example>
        </member>
        <member name="M:Telogis.GeoBase.Routing.MultiThreadMatrix.#ctor(Telogis.GeoBase.RouteStop[],Telogis.GeoBase.Routing.RoutingStrategy,System.Int32,System.Boolean,Telogis.GeoBase.Routing.LinkCost)">
            <summary>
            Create a MultiThreadMatrix using an array of <see cref="T:Telogis.GeoBase.RouteStop"/>s, and a <see cref="T:Telogis.GeoBase.Routing.RoutingStrategy"/>. Define the number of threads to use (<paramref name="NumThreads"/>), and specify if the calculated data should be saved to disk (<paramref name="persist"/> = true) for quicker, subsequent data reading.
            </summary>
            <param name="InitialStops">The array of <see cref="T:Telogis.GeoBase.RouteStop"/>s to be used for this calculation.</param>
            <param name="Strategy">The <see cref="T:Telogis.GeoBase.Routing.RoutingStrategy"/> to use for this calculation.</param>
            <param name="NumThreads">The number of threads to use for this calculation.</param>
            <param name="persist">When <codeInline>true</codeInline>, the calculation results are automatically saved and loaded from disk, 
            as and when required, allowing for faster, subsequent, data retrieval.</param>
            <param name="MaxCost">The maximum allowable cost of any route - if this cost is exceeded, then a <see cref="T:Telogis.GeoBase.Routing.Exceptions.RouteExceedsCostException"/> is thrown.</param>
            <example>See <see cref="T:Telogis.GeoBase.Routing.MultiThreadMatrix"/> for code example.</example>
        </member>
        <member name="M:Telogis.GeoBase.Routing.MultiThreadMatrix.GetSlot(Telogis.GeoBase.LatLon)">
             <summary>
             Returns the slot value (row index) for the specified <see cref="T:Telogis.GeoBase.LatLon"/> 
             </summary>
             <param name="location"></param>
             <example><code lang="C#">
                //Create stops
                RouteStop stop_A = new RouteStop(33.83818, -117.90488);
                RouteStop stop_B = new RouteStop(33.82960, -117.90041);
            
                //Create new MultiThreadMatrix
                //	* RouteStop array
                //	* strategy -&gt; RoutingStrategyFastest
                MultiThreadMatrix myMTM = new MultiThreadMatrix(new RouteStop[] {stop_A, stop_B }, new RoutingStrategyFastest());
            
                //Get slot
                string sSlot = (myMTM.GetSlot(stop_A.Location)).ToString();
                
                //Output to console
                Console.WriteLine("stop_A slot = " + sSlot);</code></example>
        </member>
        <member name="M:Telogis.GeoBase.Routing.MultiThreadMatrix.GetTime(Telogis.GeoBase.LatLon,Telogis.GeoBase.LatLon)">
             <summary>
             Get the time (in seconds) from point to point
             </summary>
             <param name="from"></param>
             <param name="to"></param>
             <example><code lang="C#">
                //Create stops
                RouteStop stop_A = new RouteStop(33.83818, -117.90488);
                RouteStop stop_B = new RouteStop(33.82960, -117.90041);
            
                //Create new MultiThreadMatrix
                //	* RouteStop array
                //	* strategy -> RoutingStrategyFastest
                MultiThreadMatrix myMTM = new MultiThreadMatrix(new RouteStop[] {stop_A, stop_B }, new RoutingStrategyFastest());
            
                //Get time
                string sTime = ((myMTM.GetTime(stop_A.Location, stop_B.Location)) / 60).ToString("0.##");
                
                //Output to console
                Console.WriteLine("Time between stop_A and stop_B = " + sTime);</code></example>
        </member>
        <member name="M:Telogis.GeoBase.Routing.MultiThreadMatrix.GetDistance(Telogis.GeoBase.LatLon,Telogis.GeoBase.LatLon)">
             <summary>
             Get the distance (in meters) between two points
             </summary>
             <param name="from"></param>
             <param name="to"></param>
             <example><code lang="C#">
                //Create stops
                RouteStop stop_A = new RouteStop(33.83818, -117.90488);
                RouteStop stop_B = new RouteStop(33.82960, -117.90041);
            
                //Create new MultiThreadMatrix
                //	* RouteStop array
                //	* strategy -> RoutingStrategyFastest
                MultiThreadMatrix myMTM = new MultiThreadMatrix(new RouteStop[] {stop_A, stop_B }, new RoutingStrategyFastest());
            
                //Get distance
                string sDist = ((myMTM.GetDistance(stop_A.Location, stop_B.Location)) / 1000).ToString("0.###");
                
                //Output to console
                Console.WriteLine("Distance between stop_A and stop_B = " + sDist + Environment.NewLine);</code></example>
        </member>
        <member name="M:Telogis.GeoBase.Routing.MultiThreadMatrix.Times(System.Int32)">
            <summary>
            Returns an array of times (in seconds) from the specified stop (LatLon) to all other stops.
            </summary>
            <example><code lang="C#"></code></example>
            <param name="slotNo"></param>
            <example>See <see cref="T:Telogis.GeoBase.Routing.MultiThreadMatrix"/> for code example.</example>
        </member>
        <member name="M:Telogis.GeoBase.Routing.MultiThreadMatrix.Distances(System.Int32)">
            <summary>
            Returns an array of distances (in meters) from the specified stop (LatLon) to all other stops.
            </summary>
            <param name="slotNo"></param>
            <example>See <see cref="T:Telogis.GeoBase.Routing.MultiThreadMatrix"/> for code example.</example>
        </member>
        <member name="F:Telogis.GeoBase.AddrFullInfo.LinkId">
            <summary>
            The street_info id (offser in the streets.gbd file)
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.AddrFullInfo.LinkNo">
            <summary>
            The number of the street_link in this street_info
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.AddrFullInfo.on_segment">
            <summary>
            The 0 based segment in the link that this address is on
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.AddrFullInfo.globalFallback">
            <summary>
            Whether the address was found using globalFallback, in which case only gcAddressPlain
            is valid.
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.GeoCodeFull">
            <summary>
            Detailed information returned from <see cref="M:Telogis.GeoBase.GeoCoder.ReverseGeoCodeFull(Telogis.GeoBase.LatLon)"/>:
            address, closest point on the nearest <see cref="T:Telogis.GeoBase.StreetLink"/> and the 
            nearest <see cref="T:Telogis.GeoBase.StreetLink"/>.
            </summary>
            <remarks><para><b>Related articles</b>: <a href="243b2474-98eb-4087-902d-c206207674b3.htm">Geocoding Concept</a>.</para></remarks>
        </member>
        <member name="F:Telogis.GeoBase.GeoCodeFull.Address">
            <summary>
            The <see cref="T:Telogis.GeoBase.Address"/>
            corresponding to the <see cref="M:Telogis.GeoBase.GeoCoder.ReverseGeoCodeFull(Telogis.GeoBase.LatLon)">reverse 
            GeoCoded</see> co-ordinate.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.GeoCodeFull.Intersection">
            <summary>
            The <see cref="T:Telogis.GeoBase.LatLon"/> point on the <see cref="T:Telogis.GeoBase.StreetLink"/> 
            closest to the GeoCoded point.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.GeoCodeFull.StreetLink">
            <summary>
            The <see cref="T:Telogis.GeoBase.StreetLink"/> representing the link closest
            to the geocoded point.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.GeoCodeFull.TimeZone">
            <summary>
            The TimeZone of this street link. May be null.
            </summary>		
        </member>
        <member name="P:Telogis.GeoBase.GeoCodeFull.CrossStreet">
            <summary>
            The name of the nearest cross street to the reverse geocoded point.
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.Address">
             <summary>
             <para>Represents a physical address retrieved from reverse geocoding. (Reverse geocoding is the
             process of resolving a <see cref="T:Telogis.GeoBase.LatLon">location</see> to an 
             <see cref="T:Telogis.GeoBase.Address"/>). An <see cref="T:Telogis.GeoBase.Address"/> may contain such
             information as street number, street name, city, county and state.</para>
             <para>See also <see cref="T:Telogis.GeoBase.GeocodeAddress"/> for the address type returned 
             from forward geocoding.</para>
             </summary>
             <remarks><para><b>Related articles</b>: <a href="243b2474-98eb-4087-902d-c206207674b3.htm">Geocoding Concept</a>, 
             <a href="00cee350-f9af-4050-8dcc-7baec54b4374.htm">Searching for a Location</a>, 
             <a href="4e9fdbe6-19b5-4339-abad-a39818d478ae.htm">Creating a Simple Web Application</a>, 
             <a href="4196f9ed-1abf-4780-887f-47b2b046e80e.htm">Drill-down Geocoder Tutorial</a>, 
             <a href="5943d805-4d29-4a0f-aa08-2f4034b5bdca.htm">Creating the Basic Project</a>, 
             <a href="f95ae961-f645-4c92-a609-ca5b873f1c48.htm">Using a Navigator</a>.</para>
             </remarks>
             <example>
             An <b>Address</b> is returned by a call to <see cref="M:Telogis.GeoBase.GeoCoder.ReverseGeoCode(Telogis.GeoBase.LatLon)"/>.
             Such a call may be made as follows. Imagine that a user has clicked on a point on 
             an <see cref="T:Telogis.GeoBase.IMap"/>, generating a mouse event which we have resolved 
             to a <see cref="T:Telogis.GeoBase.LatLon"/>, and we would like to retrieve the address as 
             a formatted string, in the form "Found [number] [street name] ([alternate name]) in [country]":
             
             <code lang="C#">
            	public string getFormattedAddress(LatLon location) {
             
            		// Use the location LatLon to lookup the Address.
            		Address addr = Telogis.GeoBase.GeoCoder.ReverseGeoCode(location);
             
            		string formattedAddress;
             
            		// "Found 654 Blenheim Road" or just "Found Blenheim Road"
            		formattedAddress += "Found " + addr.Line1;
             
            		// Add the first alternative name (if present) in parentheses
            		// NOTE: Alternate names aren't ranked
            		if (addr.Names.Length &gt; 1){
            		    formattedAddress += (" (" + addr.Names[1] + ")");
            		}	
            		
            		// Add the country, if not the USA
            		if (addr.Country != Country.USA){
            			formattedAddress += (" in " + CountryToString.ToString(addr.Country));
            		}
             
            		// "Found 654 Blenheim Road (State Highway 321) in New Zealand"
            		// or, if Blenheim Road was in the US, simply: "Found 654 Blenheim Road (State Highway 321)"
            		return formattedAddress;
             
            	}
            </code>
            </example>	
        </member>
        <member name="M:Telogis.GeoBase.Address.ToString">
            <summary>
            Returns a formatted string containing address information, such as may be printed
            on an envelope.
            </summary>
            <remarks>
            The string is formatted to return a maximum of
            "[street number] [street name], [city], [region], [post code], [country]".
            Any unavailable values are omitted.
            </remarks>
            <returns>A string containing address information.</returns>
        </member>
        <member name="P:Telogis.GeoBase.Address.Number">
            <summary>
            Number on street, -1 if no number.
            </summary>
            <remarks>In some instances the <see cref="T:Telogis.GeoBase.GeoCoder"/> may not be 
            able to return a street number for the location. In this instance, the Number 
            property will be set to -1.</remarks>
        </member>
        <member name="P:Telogis.GeoBase.Address.Names">
             <summary>
             Array of street names for the street (some streets may have more than one name).
             </summary>
             <remarks><para>The street may be identified by a number of different names, such as the
             I-405 which is also known as the San Diego Freeway. In this instance the most commonly
             used name will be the first value in the array. Alternate names are not ranked.</para>
             <para>Use the array.Length property to check if alternate names exist.</para>
             </remarks>
             <example>
             <code lang="C#">
             // a location on the San Diego Freeway
            	Address addr = GeoCoder.ReverseGeoCode(new LatLon(33.462080, -117.662400));
            
            	Console.WriteLine("Street name is '{0}'", addr.Names[0]);
            	Console.WriteLine("Other names for this street include:");
            	for (int i = 1; i &lt; addr.Names.Length; i++) {
            		Console.WriteLine("\t{0}", addr.Names[i]);
            	}
            
            	// Output:
            	// Street name is 'San Diego Fwy [I-5]'
            	// Other names for this street include:
            	//		I-5
            	//		San Diego Fwy
             </code>
             </example>
        </member>
        <member name="P:Telogis.GeoBase.Address.PrimaryNameWithNumber">
            <summary>
            The Primary name with the street number if it has one.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Address.PrimaryName">
            <summary>
            The primary name for the street.
            </summary>
            <remarks><para>The street may have multiple names, for example a Highway will have a 
            name of say US-19 but the name that interests us more is its actual street name as 
            rendered on the map.</para>
            </remarks>
        </member>
        <member name="P:Telogis.GeoBase.Address.ExtendedNameInfo">
            <summary>
            Array of street name information for the street (some streets may have more than one name).
            </summary>
            <remarks><para>The street may be identified by a number of different names, such as the
            I-405 which is also known as the San Diego Freeway. In this instance the most commonly
            used name will be the first value in the array. Alternate names are not ranked.</para>
            <para>Use the array.Length property to check if alternate names exist.</para>
            </remarks>
        </member>
        <member name="P:Telogis.GeoBase.Address.City">
            <summary>
            The name of the city. This value may be <b>null</b> if relevant city data is unavailable.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Address.County">
            <summary>
            The name of the county. This value may be <b>null</b> if relevant Country data
            is unavailable.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Address.SubRegions">
            <summary>
            Suburb and regions where this address is located that subdivide the city.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Address.Regions">
            <summary>
            Contains the list of regions for this address, with the
            most specific region (eg suburb or city) first.
            </summary>
            <remarks><para>Different countries have different levels of administrative
            regions.</para>
            <para>For example, Germany is divided into 16 <i>Bundesländer</i> (federal states),
            which are further divided into <i>Regierungsbezirke</i> (government regions), which 
            in turn are subdivided into <i>Kreise</i> (administrative districts), which may again
            comprise <i>Ämter</i> (offices) and <i>Gemeinden</i> (municipalities).</para>
            </remarks>
        </member>
        <member name="P:Telogis.GeoBase.Address.Region">
            <summary>
            Name of the largest administrative region (for example: State name in the USA,  
            Bundesländer name in Germany, or the Province name in Britain). Region may be 
            <b>null</b> if no data is available.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Address.PostalCode">
            <summary>
            The postal (ZIP) code associated with this address.
            </summary>
            <remarks>
            <para>Postcodes are formatted as they would be locally.</para>
            </remarks>
        </member>
        <member name="P:Telogis.GeoBase.Address.Country">
            <summary>
            The <see cref="T:Telogis.GeoBase.Country"/> in which this Address is located.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Address.Line1">
            <summary> Returns a formatted string representing the first line of a
            street address.
            </summary>
            <remarks>The string is comprised of the street number (if a number
            is present) followed by the primary street name. This method is used 
            by the <see cref="M:Telogis.GeoBase.Address.ToString"/> method to create 
            the first component of the full address.
            </remarks>
        </member>
        <member name="T:Telogis.GeoBase.Address.NameInfo">
            <summary>
            Provides a way to access additional information for a street name.
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.Address.NameInfo.#ctor(System.String)">
            <summary>
            Constructs a new NameInfo given a street name.
            All other fields have default values.
            </summary>
            <param name="name">The name of the street.</param>
        </member>
        <member name="M:Telogis.GeoBase.Address.NameInfo.#ctor">
            <summary>
            Parameterless constructor for deserialization.
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.Address.NameInfo.Clone">
            <summary>
            Returns a clone of this NameInfo.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Telogis.GeoBase.Address.NameInfo.Name">
            <summary>
            The name of the street.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Address.NameInfo.DirectionOnSign">
            <summary>
            The direction of travel for this street if one is specified.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Address.NameInfo.IsHighwayName">
            <summary>
            Whether this is the highway name of the street.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Address.NameInfo.IsPrimaryName">
            <summary>
            Whether this is a primary name.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Address.NameInfo.IsNumber">
            <summary>
            Returns true if the name of this street is a number.
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.Address.DirectionOnSign">
            <summary>
            Describes the direction property (North,East, West, South) of an address.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Address.DirectionOnSign.None">
            <summary>
            No direction specified
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Address.DirectionOnSign.North">
            <summary>
            North
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Address.DirectionOnSign.South">
            <summary>
            South
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Address.DirectionOnSign.West">
            <summary>
            West
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Address.DirectionOnSign.East">
            <summary>
            East
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.VenezuelaAddress">
            <summary>
            Represents a street address in Venezuela.
            </summary>
            <remarks>
            The Venezuelan address system makes heavy use of landmarks to identify locations.
            This address object supports the additional <see cref="F:Telogis.GeoBase.VenezuelaAddress.Building"/> field. This will
            store the name of the nearest landmark to the reverse geocode location.
            </remarks>
        </member>
        <member name="F:Telogis.GeoBase.VenezuelaAddress.Building">
            <summary>
            The name of the nearest landmark to the reverse geocode location.
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.AddressEx">
            <summary>
            Address returned from Reverse Geocoding. This is a special internal version
            that has more information, the downside is an unstable interface.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.AddressEx.Number">
            <summary>
            Number on street, -1 if no number 
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.AddressEx.Names">
            <summary>
            Array of street names for the street
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.AddressEx.City">
            <summary>
            City
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.AddressEx.Region">
            <summary>
            State
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.AddressEx.PostalCode">
            <summary>
            Zip
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.AddressEx.Country">
            <summary>
            Country
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.UKGeocodeAddress">
            <summary>
            Represents a United Kingdom (UK) specific form of <see cref="T:Telogis.GeoBase.GeocodeAddress"/>. It 
            contains no more than a street address, city, zip code and region.
            </summary>
            <remarks>
            At present this class is used solely for differentiation of address types, though in future it will likely differ from its
            <see cref="T:Telogis.GeoBase.GeocodeAddress">superclass</see>.
            </remarks>
        </member>
        <member name="M:Telogis.GeoBase.UKGeocodeAddress.GetFields(System.String)">
            <summary>
            Returns all fields defined for a <see cref="T:Telogis.GeoBase.UKGeocodeAddress"/>.
            </summary>
            <param name="lang"><i>Fields are always returned in English.</i></param>
            <returns>A string array containing the fields defined for a 
            <see cref="T:Telogis.GeoBase.UKGeocodeAddress"/>: street, city, post code and region.
            </returns>
        </member>
        <member name="P:Telogis.GeoBase.UKGeocodeAddress.Street">
            <summary>
            Street address.
            </summary>
            <remarks>The street address is of the format "123 Butler Road" (if a 
            street number is available) or "The Vicarige" if there is no number available.
            </remarks>
        </member>
        <member name="P:Telogis.GeoBase.UKGeocodeAddress.City">
            <summary>
            The name of the city.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.UKGeocodeAddress.Region">
            <summary>
            The name of the region.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.UKGeocodeAddress.PostalCode">
            <summary>
            The zip code of this address.
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.MexicoGeocodeAddress">
            <summary>
            Represents a Mexican specific form of <see cref="T:Telogis.GeoBase.GeocodeAddress"/>. It 
            contains no more than a street address, city, state and zip code.
            </summary>
            <remarks><para><b>Related articles</b>: <a href="243b2474-98eb-4087-902d-c206207674b3.htm">Geocoding Concept</a>.</para></remarks>
        </member>
        <member name="M:Telogis.GeoBase.MexicoGeocodeAddress.GetFields(System.String)">
            <summary>
            Returns all fields defined for a Mexican GeocodeAddress.
            </summary>
            <remarks>Depending on the given language the names of these fields may be
            returned in English or Spanish. These fields may or may not be populated,
            depending on how much the <see cref="T:Telogis.GeoBase.GeoCoder">GeoCoder</see>
            knows about this address.
            </remarks>
            <param name="lang">
            Language to return field names in: "SPA" (Spanish) or "ENG" (English).
            </param>
            <returns>An array of the fields defined for a Mexican GeocodeAddress.<br/>
            If <b>lang</b> is "SPA" fields are returned in Spanish ("calle", "ciduad" etc).<br/>
            If <b>lang</b> is "ENG" fields are returned in English ("street", "city" etc).
            </returns>
        </member>
        <member name="P:Telogis.GeoBase.MexicoGeocodeAddress.Street">
            <summary>
            The name of the street.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.MexicoGeocodeAddress.City">
            <summary>
            The name of the city.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.MexicoGeocodeAddress.Region">
            <summary>
            The name of the region.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.MexicoGeocodeAddress.PostalCode">
            <summary>
            The zip code of this address.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.MexicoGeocodeAddress.Line1">
            <summary>
            Gets the first line of the Mexican address.
            </summary>
            <remarks>Format: Street number (if available) followed by street name.
            </remarks>
        </member>
        <member name="T:Telogis.GeoBase.Street">
            <summary>
            Represents a physical street.
            </summary>
            <remarks>
            A street is a collection of <see cref="T:Telogis.GeoBase.StreetLink"/>s
            and points around which a bounding box may be drawn. Each street has a name and
            an array of points through which this street passes.
            <para><b>Related articles</b>: <a href="154a60d1-c146-49bc-a913-3e4c067ae8c6.htm">Data Query Concept</a>.</para>
            </remarks>
        </member>
        <member name="F:Telogis.GeoBase.Street.Flags">
            <summary>
            Internal GeoBase Flags for this street.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Street.Points">
            <summary>
            An array of <see cref="T:Telogis.GeoBase.LatLon">points</see> through which
            this street passes.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Street.m_links">
            <summary>
            For internal use. The collection of StreetLinks that comprise this street.
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.Street.Equals(System.Object)">
            <summary>
            Compares two <see cref="T:Telogis.GeoBase.Street"/>s for equality.
            </summary>
            <remarks>The equality test is based on a unique ID assigned to each street.</remarks>
            <param name="obj">A second <see cref="T:Telogis.GeoBase.Street"/> to compare with this <see cref="T:Telogis.GeoBase.Street"/>.</param>
            <returns><b>True</b> if the two <see cref="T:Telogis.GeoBase.Street"/>s are the same, otherwise <b>false</b>.</returns>
        </member>
        <member name="M:Telogis.GeoBase.Street.GetHashCode">
            <summary>
            Returns a hashcode for this street.
            </summary>
            <returns>An integer identifier for this <see cref="T:Telogis.GeoBase.Street"/>.</returns>
        </member>
        <member name="P:Telogis.GeoBase.Street.Name">
            <summary>
            The street name.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Street.BoundingBox">
            <summary>
            Gets a <see cref="T:Telogis.GeoBase.Rectangle"/> for this street.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Street.Links">
            <summary>
            Gets the <see cref="T:Telogis.GeoBase.StreetLink"/>s that make
            up this street.
            </summary>
            <remarks>
            Most streets are made up of a number of <see cref="T:Telogis.GeoBase.StreetLink"/>s that
            represent individual segments of street from, say, one intersection to the next.
            <seealso cref="T:Telogis.GeoBase.StreetLink"/>
            </remarks>
        </member>
        <member name="T:Telogis.GeoBase.StreetType">
            <summary>
            Enumeration of street types (such as highways, roads and streets) used in queries. See <see cref="T:Telogis.GeoBase.DataQuery"/>.
            </summary>
            <remarks><para><b>Related articles</b>: <a href="154a60d1-c146-49bc-a913-3e4c067ae8c6.htm">Data Query Concept</a>.</para></remarks>
        </member>
        <member name="F:Telogis.GeoBase.StreetType.SUPER_HWY">
            <summary>
            Super Highways
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.StreetType.MJR_HWY">
            <summary>
            Major Highways
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.StreetType.SEC_HWY">
            <summary>
            Secondary Highways
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.StreetType.ART_RDS">
            <summary>
            Arterial Roads
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.StreetType.STREETS">
            <summary>
            Streets
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.StreetType.ALL">
            <summary>
            Everything
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.PolygonType">
            <summary>
            Defining types of polygons (such as land/water/simple) used in a <see cref="T:Telogis.GeoBase.DataQuery"/>.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.PolygonType.LARGE_WATER">
            <summary>
            Large water masses
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.PolygonType.SMALL_WATER">
            <summary>
            Small water masses
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.PolygonType.LAND">
            <summary>
            Land masses
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.PolygonType.LARGE">
            <summary>
            Large polygons (eg national reserves, parks etc)
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.PolygonType.SMALL">
            <summary>
            Small Polygons
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.PolygonType.SIMPLE">
            <summary>
            Simplified Polygons
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.PolygonType.SUPER_SIMPLE">
            <summary>
            Very simplified Polygons
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.PolygonType.ALL">
            <summary>
            All polygons
            </summary>
        </member>
        <member name="T:Telogis.UI.RepeatButton">
            <summary>
            A RepeatButton will repeatedly fire the base object's <b>Click</b> event when depressed.
            </summary>
        </member>
        <member name="F:Telogis.UI.RepeatButton.ControlStyle">
            <summary>
            The <see cref="T:Telogis.UI.ControlStyle">ControlStyle</see> of this repeat button. 
            Defaults to a <see cref="T:Telogis.UI.GelButtonControlStyle">GelButtonControlStyle</see>
            </summary>
        </member>
        <member name="F:Telogis.UI.RepeatButton.bDown">
            <summary>
            Records whether the button is depressed or not.
            </summary>
        </member>
        <member name="M:Telogis.UI.RepeatButton.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <summary>
            Draws the RepeatButton
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Telogis.UI.RepeatButton.FireClick">
            <summary>
            Safely fire the click event for this button.
            </summary>
        </member>
        <member name="M:Telogis.UI.RepeatButton.OnMouseDown(System.Windows.Forms.MouseEventArgs)">
            <summary>
            MouseDown event for this RepeatButton.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Telogis.UI.RepeatButton.OnMouseUp(System.Windows.Forms.MouseEventArgs)">
            <summary>
            MouseUp event for this RepeatButton.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Telogis.UI.RepeatButton.OnClick(System.EventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="P:Telogis.UI.RepeatButton.ForeColor">
            <summary>
            Gets or sets the foreground color of this RepeatButton.
            </summary>
            <remarks><see cref="T:System.Drawing.Color"/></remarks>
        </member>
        <member name="T:Telogis.GeoBase.MapOverlay">
            <summary>
            A MapOverlay is a map object that draws only the renderers assigned to it, without rendering the map data
            beneath. Areas not drawn to are left transparent in the returned image.
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.MapOverlay.#ctor(Telogis.GeoBase.LatLon,System.Int32,System.Int32,System.Double)">
            <summary>
            Constructs a new MapOverlay.
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.MapOverlay.GetMap">
            <summary>
            Renders the MapOverlay.
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.DragBehavior">
            <summary>
            Defines the behavior of an <see cref="T:Telogis.GeoBase.IMap"/> when it is dragged with the mouse.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.DragBehavior.None">
            <summary>
            Don't do anything.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.DragBehavior.Box">
            <summary>
            Zoom in using a box dragged around the area.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.DragBehavior.Hand">
            <summary>
            Allow the hand tool to pan the map.
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.CustomEvents">
            <summary>
            Defines custom events for an <see cref="T:Telogis.GeoBase.IMap"/>. For
            use with COM applications.
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.CustomEvents.OnRedraw(System.Object,System.EventArgs)">
            <summary>
            Event called when the <see cref="T:Telogis.GeoBase.IMap"/> is redrawn.
            </summary>
            <param name="obj"></param>
            <param name="e"></param>
        </member>
        <member name="M:Telogis.GeoBase.CustomEvents.OnRenderComplete(System.Object,System.EventArgs)">
            <summary>
            Event called when the render of the <see cref="T:Telogis.GeoBase.IMap"/> completes.
            </summary>
            <param name="obj"></param>
            <param name="e"></param>
        </member>
        <member name="M:Telogis.GeoBase.CustomEvents.OnRenderStart(System.Object,System.EventArgs)">
            <summary>
            Event called when the render of the <see cref="T:Telogis.GeoBase.IMap"/> starts.
            </summary>
            <param name="obj"></param>
            <param name="e"></param>
        </member>
        <member name="T:Telogis.GeoBase.MapCtrl">
            <summary>
            Map Control Object for Windows Forms
            </summary>
            <remarks>
            <img src="Art/geobase_map.png"></img>
            <para>This object should be used for Windows Forms applications.
            For ASP.NET and other server applications you should use the Map Object
            or the <see cref="T:Telogis.GeoBase.Map"/> class.</para>
            <para>
            There are a number of functions common to most MapCtrl applications. These functions include:<br/>
            <list type="bullet">
            <item><description>Displaying custom objects on the map.</description></item>
            <item><description>Responding to mouse clicks.</description></item>
            </list>
            </para>
            <para>
            Custom objects can be displayed on the map by implementing the <see cref="T:Telogis.GeoBase.IMapRenderer"/>
            interface. An example of such an object is the <see cref="T:Telogis.GeoBase.PushPin"/> location marker.
            In order to display multiple objects it is necessary to use a <see cref="T:Telogis.GeoBase.RendererList"/>
            - essentially a collection of renderable objects. The <b>Tutorials</b> section contains a tutorial on
            <see cref="T:Telogis.GeoBase.IMapRenderer"/>s which also covers <see cref="T:Telogis.GeoBase.RendererList"/>s.
            </para>
            <para>
            Rendered objects that need to respond to mouse clicks should implement the <see cref="T:Telogis.GeoBase.IMapMouseHandler"/>
            interface. The <see cref="T:Telogis.GeoBase.MapMouseEventsHandler"/> may be used to simplify this procedure.
            The application example in the <b>Tutorials</b> section contains examples of mouse event handling.
            </para>
            <para>
            Two keyboard-modifiers affect mouse behavior in MapCtrl by default.
            <list>
            <item><description>When Shift is depressed, the selected mouse function temporarily inverts: The pan tool
            becomes the area selection tool, and the area selection tool becomes the pan tool.</description></item>
            <item><description>When Ctrl is depressed, mousewheel zoom intervals are temporarily decreased.</description></item>
            </list>
            </para>
            <para><b>Related articles</b>: <a href="ba99dd3e-b8bb-40e3-9e15-5aa9a6a2e6ff.htm">Common Concepts</a>, 
            <a href="9af7c41f-fabe-48be-9317-1e019cc19c33.htm">Map Concept</a>, 
            <a href="70746bb6-4c27-4ed5-a312-1faa1f86a3bf.htm">Map Control Tutorial</a>, 
            <a href="db780b3f-ffb3-496b-b36d-a068907e7244.htm">Using Notifications and Events</a>, 
            <a href="f44a61b0-05f9-464c-8816-f763993ae3ab.htm">Creating the Interface</a>.</para>
            </remarks>
        </member>
        <member name="F:Telogis.GeoBase.MapCtrl.DrawMaps">
            <summary>
            Set to false to prevent maps being drawn
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.MapCtrl.ClickToCenter">
            <summary>
            A left-click will center the map on the mouse location, if set to true and DragBehavior
            is set to Box.
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.MapCtrl.#ctor">
            <summary>
            Create a new Map Control
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.MapCtrl.SetRepository(Telogis.GeoBase.Repositories.Repository)">
            <summary>
            Set the repositiory to draw the maps with. If not set, then the default repository is used.
            </summary>
            <param name="repository"></param>
        </member>
        <member name="M:Telogis.GeoBase.MapCtrl.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.MapCtrl.OnDoubleClick(System.EventArgs)">
            <summary>
            DoubleClick event
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Telogis.GeoBase.MapCtrl.OnMouseDown(System.Windows.Forms.MouseEventArgs)">
            <summary>
            MouseDown event
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Telogis.GeoBase.MapCtrl.UpdateDefaultCursor">
            <summary>
            ensures that the map's default cursor is appropriate for its degree of UI responsiveness. If the map's drag behaviour
            is <see cref="F:Telogis.GeoBase.DragBehavior.Hand">DragBehavior.Hand</see>, then the cursor default cursor may be an
            open hand -- but this only makes sense if panning is enabled for the map.
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.MapCtrl.InvalidateBackBuffer">
            <summary>
            Clears the back buffer that is used for <see cref="P:Telogis.GeoBase.MapCtrl.DoubleBuffering"/>.
            </summary>
            <seealso cref="P:Telogis.GeoBase.MapCtrl.DoubleBuffering"/>
        </member>
        <member name="M:Telogis.GeoBase.MapCtrl.OnPaintBackground(System.Windows.Forms.PaintEventArgs)">
            <summary>
            Internal use
            </summary>
            <param name="pevent"></param>
        </member>
        <member name="M:Telogis.GeoBase.MapCtrl.GetLastError">
            <summary>
            Returns the error that occurred during the last attempt to draw the map. This will
            return null if the last map was successfully drawn.
            </summary>
            <returns>A string containing the last error to occur while drawing the map or null if the last
            map was successfully drawn.</returns>
        </member>
        <member name="M:Telogis.GeoBase.MapCtrl.GetBackgroundImage">
            <summary>
            Gets the background <see cref="T:System.Drawing.Image">image</see> of the current map.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Telogis.GeoBase.MapCtrl.IsSelected(Telogis.GeoBase.IMapMouseHandler)">
            <summary>
            Check if the given <see cref="T:Telogis.GeoBase.IMapMouseHandler"/> is selected.
            </summary>
            <remarks>
            Use this method to check if objects that implement <see cref="T:Telogis.GeoBase.IMapMouseHandler"/>
            are selected.
            </remarks>
            <param name="item">The item to be checked for selection.</param>
            <returns><b>true</b> if the item is selected, <b>false</b> if it is not.</returns>
        </member>
        <member name="M:Telogis.GeoBase.MapCtrl.SetSelection(Telogis.GeoBase.IMapMouseHandler)">
            <summary>
            Sets the current selection, and return the old selection.
            </summary>
            <param name="item">The new item that is selected, or <b>null</b></param>
            <returns>The item that was previously selected.</returns>
        </member>
        <member name="M:Telogis.GeoBase.MapCtrl.Invalidate">
            <summary>
            Invalidating the map causes it to be redrawn.
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.MapCtrl.Invalidate(System.Boolean)">
            <summary>
            Invalidate the map and specify whether the redraw should be carried out immediately.
            </summary>
            <remarks>
            Generally you should just use <b>Invalidate()</b>. If you know the redraw is going to be fast
            (you havn't changed the size, zoom or center) then you can do it immediately, during UI interaction.
            </remarks>
            <param name="bNow"><b>True</b> if the map is to be redrawn immediately, <b>false</b> if not.</param>
        </member>
        <member name="M:Telogis.GeoBase.MapCtrl.GetMap">
            <summary>
            Gets the current map <see cref="T:System.Drawing.Image"/>.
            </summary>
            <returns>32bpp <see cref="T:System.Drawing.Image"/>.</returns>
        </member>
        <member name="M:Telogis.GeoBase.MapCtrl.GetMap(System.Boolean,Telogis.GeoBase.MapProgress,System.Boolean@)">
             <summary>
             Gets an <see cref="T:System.Drawing.Image"/> of the current map.
             </summary>
             <param name="isAsync">True to request a map asynchronously (only useful for Geostream).</param>
             <param name="progressDelegate">When requesting an async map this will update the progres if done isn't returned as <b>true</b>.</param>
             <param name="done">When using GeoStream done will be <b>true</b> if a complete map is returned to an asynchronous request.</param>
             <returns>A 32bpp <see cref="T:System.Drawing.Image"/>.</returns>
                     /// <example>
             <code lang="C#">
             private static ManualResetEvent m_mre = new ManualResetEvent(false);
            
             private static int m_imageId = 0;
            
             public static void TestAsyncGSMap() {
                 // asynchronous maps are only used when fetching from GeoStream
                 Repository.Default = new GeoStreamRepository(...);
            
                 int imageId = m_imageId++;
                 bool done;
            
                 // call GetMap with isAsync set to true. MapProgress is our callback
                 Image image = new Bitmap(mapCtrl.GetMap(true, MapProgress, out done));
                 
                 // we are saving the map image, even if it is incomplete
                 image.Save(string.Format(@"C:\Users\User\Documents\AsyncMap\{0}.bmp", imageId));
            
                 // done indicates whether the entire map was returned.
                 // Block the current thread if we do not have a complete map.
                 if (!done) {
                     m_mre.WaitOne();
                 }
             }
            
             // MapProgress is our callback -- it is called whenever more tiles are available
             public static void MapProgress(IMap caller, bool isComplete) {
            
                 int imageId = m_imageId++;
                 bool done;
            
                 // Inside our callback, call GetMap again to fetch the updated map image.
                 // Pass in this callback so that we can be called recursively 
                 // when more tiles are available.
                 Image image = new Bitmap(caller.GetMap(true, MapProgress, out done));
            
                 image.Save(string.Format(@"C:\Users\User\Documents\AsyncMap\{0}.bmp", imageId));
            
                 // When we are finally called with all tiles, set the ManualResetEvent
                 // so that our waiting thread can continue.
                 if (done) {
                     m_mre.Set();
                 }     
             }        
             </code>
             </example>
        </member>
        <member name="M:Telogis.GeoBase.MapCtrl.CancelAsync">
            <summary>
            Cancels an asynchronous update, if one is in progress. <i>Non-functional.</i>
            </summary>
            <remarks>Defined only as a <see cref="T:Telogis.GeoBase.MapCtrl"/> is
            a derived class of <see cref="T:Telogis.GeoBase.IMap"/>.</remarks>
        </member>
        <member name="M:Telogis.GeoBase.MapCtrl.LatLontoXY(System.Int32@,System.Int32@,Telogis.GeoBase.LatLon)">
            <summary>
            Convert from a <see cref="T:Telogis.GeoBase.LatLon"/> to an X,Y location on the map
            </summary>
            <remarks>See <see cref="M:Telogis.GeoBase.IMap.LatLontoXY(System.Int32@,System.Int32@,Telogis.GeoBase.LatLon)"/>.</remarks>
            <param name="x">x coordinate.</param>
            <param name="y">y coordinate.</param>
            <param name="loc">The <see cref="T:Telogis.GeoBase.LatLon"/> to convert.</param>
        </member>
        <member name="M:Telogis.GeoBase.MapCtrl.XYtoLatLon(System.Int32,System.Int32)">
            <summary>
            Gets the <see cref="T:Telogis.GeoBase.LatLon"/> of a point on the map given by x &amp; y co-ordinates.
            </summary>
            <remarks>
            See <see cref="M:Telogis.GeoBase.IMap.XYtoLatLon(System.Int32,System.Int32)"/>.
            </remarks>
            <param name="x">x co-ordinate</param>
            <param name="y">y co-ordinate</param>
            <returns>A <see cref="T:Telogis.GeoBase.LatLon"/> representing the X,Y co-ordinates.</returns>
        </member>
        <member name="M:Telogis.GeoBase.MapCtrl.XYtoBoundingBox(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Gets the <see cref="T:Telogis.GeoBase.BoundingBox"/> of two pixel locations, x1,y1 and x2,y2
            </summary>
            <remarks>
            </remarks>
            <param name="x1">The x co-ordinate of the first point to translate.</param>
            <param name="y1">The y co-ordinate of the first point to translate.</param>
            <param name="x2">The x co-ordinate of the second point to translate.</param>
            <param name="y2">The y co-ordinate of the second point to translate.</param>
            <returns>A <see cref="T:Telogis.GeoBase.BoundingBox"/> representing the map co-ordinates of the given points.</returns>
        </member>
        <member name="M:Telogis.GeoBase.MapCtrl.Contains(Telogis.GeoBase.LatLon)">
            <summary>
            Check whether the <see cref="T:Telogis.GeoBase.LatLon"/> coordinates
            lie within this IMap.
            </summary>
            <remarks>
            See <see cref="M:Telogis.GeoBase.IMap.Contains(Telogis.GeoBase.LatLon)"/>.
            <para><b>Related articles</b>: <a href="70746bb6-4c27-4ed5-a312-1faa1f86a3bf.htm">Map Control Tutorial</a>.</para>
            </remarks>
            <param name="aPoint">The <see cref="T:Telogis.GeoBase.LatLon"/> to be checked.</param>
            <returns><b>True</b> if the map contains the point, otherwise <b>false</b>.</returns>
        </member>
        <member name="M:Telogis.GeoBase.MapCtrl.ZoomToBoundingBox(Telogis.GeoBase.BoundingBox,System.Int32)">
            <summary>
            Zooms the map and centers on the given <see cref="T:Telogis.GeoBase.BoundingBox"/>.
            </summary>
            <remarks>See <see cref="M:Telogis.GeoBase.IMap.ZoomToBoundingBox(Telogis.GeoBase.BoundingBox,System.Int32)"/> for further discussion of this method.</remarks>
            <param name="abox">The <see cref="T:Telogis.GeoBase.BoundingBox"/> to be centered and zoomed to.</param>
            <param name="buffer_pixels">The number of pixels between the edge of <b>abox</b> and the edge of the visible map area.
            See remarks.</param>
        </member>
        <member name="M:Telogis.GeoBase.MapCtrl.SetProperty(System.String,System.Object)">
            <summary>
            Allows map-specific (internal) properties to be set. For internal use.
            </summary>
            <remarks>
            This method returns true if <b>name</b> matches a recognized
            property, and that property was succesfully updated with
            <b>prop_value</b>.
            It will return <b>false</b> if the <b>name</b> specified
            is not recognized by the implementation.
            </remarks>
            <param name="name">Name of the property to set.</param>
            <param name="prop_value">Value to set the property to.</param>
            <returns>true if the property was set, false otherwise.</returns>
        </member>
        <member name="P:Telogis.GeoBase.MapCtrl.DefaultMapCtrlBehavior">
            <summary>
            The default behavior of this MapCtrl.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.MapCtrl.CustomMapBehavior">
            <summary>
            If any custom behavior is desired, handlers for the events can be assigned here. If 
            behavior for an event is added, default behavior will not be executed.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.MapCtrl.Warnings">
            <summary>
            The Warnings generated during the last map render.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.MapCtrl.Map">
            <summary>
            Gets the underlying <see cref="T:Telogis.GeoBase.IMap"/>.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.MapCtrl.CenterLat">
            <summary>
            Gets or sets the center latitude.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.MapCtrl.CenterLon">
            <summary>
            Gets or sets the center longitude.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.MapCtrl.PanEnable">
            <summary>
            Specifies whether the user should be able to pan the map with the mouse. If this is false, then all
            dragging behaviors for the map are disabled (including the zoom-to-rect action).
            </summary>
            <seealso cref="P:Telogis.GeoBase.MapCtrl.ZoomEnable"/>
            <seealso cref="P:Telogis.GeoBase.MapCtrl.UiEnable"/>
        </member>
        <member name="P:Telogis.GeoBase.MapCtrl.ZoomEnable">
            <summary>
            Specifies whether the user should be able to zoom the map in and out, either by scrolling the mouse wheel or by
            dragging out a zoom-box. If this is false, then the zoom-to-rect behavior will be disabled, and
            scrolling the mouse-wheel over the map will have no effect.
            </summary>
            <seealso cref="P:Telogis.GeoBase.MapCtrl.UiEnable"/>
            <seealso cref="P:Telogis.GeoBase.MapCtrl.PanEnable"/>
        </member>
        <member name="P:Telogis.GeoBase.MapCtrl.UiEnable">
            <summary>
            Specifies whether the user should be able to zoom and pan using the built-in map UI. This acts as an override for
            the individual settings of <see cref="P:Telogis.GeoBase.MapCtrl.PanEnable"/> and <see cref="P:Telogis.GeoBase.MapCtrl.ZoomEnable"/>: if <codeInline>UiEnable</codeInline> is
            false, both panning and zooming will be disabled, regardless of these more specific flags. If it is
            true, interactivity is determined by <see cref="P:Telogis.GeoBase.MapCtrl.PanEnable"/> and <see cref="P:Telogis.GeoBase.MapCtrl.ZoomEnable"/>.
            </summary>
            <seealso cref="P:Telogis.GeoBase.MapCtrl.ZoomEnable"/>
            <seealso cref="P:Telogis.GeoBase.MapCtrl.PanEnable"/>
        </member>
        <member name="P:Telogis.GeoBase.MapCtrl.DoubleBuffering">
            <summary>
            Double buffering allows <see cref="T:Telogis.GeoBase.IMapRenderer">Renderers</see> to
            redraw without incurring the cost of a complete map redraw. Renderers on a double
            buffered map cannot interact with labels.
            </summary>
            <remarks>
            <para>
            Double buffering only affects maps that have not changed zoom, size or center when a
            <see cref="T:Telogis.GeoBase.IMapRenderer">Renderer</see> is added.</para><para>
            When double buffering is off (<b>false</b>), a Renderer added to a map may cause the labelling
            to be redrawn around the Renderer, allowing the Renderer to reserve
            space for itself and resulting in nicer looking maps where labels
            are not partially obscured by Renderers.</para><para>
            When double buffering is on (<b>true</b>), a Renderer added to a map is simply drawn
            over the previously rendered image of the map. This is faster but can
            result in clutter caused by partially obscured labels.
            </para>
            <para>Also see <see cref="T:Telogis.GeoBase.RenderContext"/>.</para>
            </remarks>
        </member>
        <member name="P:Telogis.GeoBase.MapCtrl.AllowEdgePan">
            <summary>
            Gets or sets whether the edges of the map should act as hotspots for panning.
            </summary>
            <remarks>See also <see cref="P:Telogis.GeoBase.MapCtrl.UiEnable"/> and <see cref="P:Telogis.GeoBase.MapCtrl.PanEnable"/>.</remarks>
        </member>
        <member name="P:Telogis.GeoBase.MapCtrl.LastMapTime">
            <summary>
            Gets the time taken to render the last map.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.MapCtrl.LastMapCached">
            <summary>
            Get whether the last map was drawn from cache
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.MapCtrl.LastMapError">
            <summary>
            Gets the exception that occured last time the map was drawn, if any
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.MapCtrl.BackBufferRenderer">
            <summary>
            Gets or sets the back buffer's renderer
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.MapCtrl.HitHandler">
            <summary>
            Gets or sets the <see cref="T:Telogis.GeoBase.IMapMouseHandler"/> hit handler to use.
            </summary>
            <remarks>Generally you do not need to set this as the <see cref="T:Telogis.GeoBase.RendererList"/> will be used
            if this is <b>null</b>. In the case where you have many items to render
            performance can be increased by supplying a separate hit handler</remarks>
        </member>
        <member name="P:Telogis.GeoBase.MapCtrl.ActiveMouseHandler">
            <summary>
            Gets the active <see cref="T:Telogis.GeoBase.IMapMouseHandler"/>,
            or <b>null</b> if there is no handler under the cursor.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.MapCtrl.DragBehavior">
            <summary>
            Set the behavior of the left button on the map when dragging
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.MapCtrl.RightDragBehavior">
            <summary>
            Set the behavior of the right button on the map when dragging
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.MapCtrl.EdgePanPixels">
            <summary>
            The number of pixels around the border where the edge panning is active.
            </summary>
            <remarks>To control edge-panning see <see cref="P:Telogis.GeoBase.MapCtrl.AllowEdgePan"/>. See also
            <see cref="P:Telogis.GeoBase.MapCtrl.UiEnable"/>.</remarks>
        </member>
        <member name="P:Telogis.GeoBase.MapCtrl.MouseButton">
            <summary>
            Gets the <see cref="T:System.Windows.Forms.MouseButtons">mouse button</see>
            that was used to generate the event.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.MapCtrl.Zooms">
             <summary>
             Defines the set of zoom levels to use when the MapCtrl is operating in GeoStream mode.
             </summary>
             <remarks>
             This property is ignored when the current repository is not a
             <see cref="T:Telogis.GeoBase.Repositories.GeoStreamRepository"/>.
            
             In GeoStream mode a zoom level represents the number of supertiles required to cover
             the world (horizontally). Zoom levels should always be ordered from lowest (far, or least
             zoomed) to highest (close). Only the specified zoom levels will be used when rendering the map.
             </remarks>
        </member>
        <member name="P:Telogis.GeoBase.MapCtrl.TileSize">
             <summary>
             Gets or sets the size of a tile.
             </summary>
             <remarks>
             This property is ignored when the current repository is not a <see cref="T:Telogis.GeoBase.Repositories.GeoStreamRepository"/>.
            
             This value is the number of pixels wide and high each map tile should be.
             </remarks>
        </member>
        <member name="P:Telogis.GeoBase.MapCtrl.TilePerSuperTile">
            <summary>
            Gets or sets the number of tiles per supertile.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.MapCtrl.ZoomLevel">
            <summary>
            Defines the current zoom level for a MapCtrl operating in GeoStream mode. This differs from Zoom, in that
            ZoomLevel is expressed in terms of the array of Zooms; ZoomLevel is an index into the array.
            </summary>
            <remarks>
            <para>This property is ignored when the current repository is not a <see cref="T:Telogis.GeoBase.Repositories.GeoStreamRepository"/>.</para>
            <para>
            When in GeoStream mode this property corresponds to the index into the Zooms array that is
            currently set. In GeoStream mode this property is generally preferable to using Zoom
            as it sets the exact zoom level, while using Zoom will cause the map to zoom to the closest
            available ZoomLevel that is as big or larger than the requested Zoom.</para>
            </remarks>
        </member>
        <member name="E:Telogis.GeoBase.MapCtrl.OnRedraw">
            <summary>
            Called when the map has changed.
            </summary>
        </member>
        <member name="E:Telogis.GeoBase.MapCtrl.OnRenderStart">
            <summary>
            This EventHandler is called when rendering is begun.
            </summary>
        </member>
        <member name="E:Telogis.GeoBase.MapCtrl.OnRenderComplete">
            <summary>
            This EventHandler is called when rendering is complete.
            </summary>
        </member>
        <member name="E:Telogis.GeoBase.MapCtrl.OnRenderException">
            <summary>
            This EventHandler is called when an exception is encountered during rendering.
            </summary>
        </member>
        <member name="E:Telogis.GeoBase.MapCtrl.OnZoomLevelChanged">
            <summary>
            This EventHandler is called when the ZoomLevel has changed.
            Note that this is only valid if the current repository is a GeoStreamRepository
            </summary>
        </member>
        <member name="E:Telogis.GeoBase.MapCtrl.ZoomChanged">
            <summary>
            This event handler is called when the zoom level changes.
            </summary>
        </member>
        <member name="E:Telogis.GeoBase.MapCtrl.CenterChanged">
            <summary>
            This event handler is called when the map is panned, chaning the center location.
            </summary>
        </member>
        <member name="E:Telogis.GeoBase.MapCtrl.MapSizeChanged">
            <summary>
            This event handler is called when the map is resized.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.MapCtrl.BackgroundImage">
            <summary>
            Gets a copy of the <see cref="T:System.Drawing.Image"/> of the
            current map.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.MapCtrl.IsDisposedPlatformInvariant">
            <summary>
            Returns IsDisposed in a platform-invariant manner.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.MapCtrl.Perspective">
            <summary>
            Gets or sets the map's perspective (if supported by the map).
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.MapCtrl.Busy">
            <summary>
            Returns <b>true</b> if the map is busy (for example, during a render or update).
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.MapCtrl.Heading">
            <summary>
            Gets or sets the heading (orientation) of the map.
            </summary>
            <remarks>See <see cref="P:Telogis.GeoBase.IMap.Heading"/> and
            <see cref="T:Telogis.GeoBase.CompassRose"/>.
            </remarks>
        </member>
        <member name="P:Telogis.GeoBase.MapCtrl.RenderLabels">
            <summary>
            Gets or sets whether to render labels on the map.
            </summary>
            <remarks>If <b>true</b>, labels are rendered. Otherwise labels are not rendered.
            </remarks>
        </member>
        <member name="P:Telogis.GeoBase.MapCtrl.Center">
            <summary>
            Gets or sets the current <see cref="P:Telogis.GeoBase.IMap.Center"/> of the map.
            </summary>
            <remarks><para><b>Related articles</b>: <a href="70746bb6-4c27-4ed5-a312-1faa1f86a3bf.htm">Map Control Tutorial</a>.</para></remarks>
        </member>
        <member name="P:Telogis.GeoBase.MapCtrl.Progressive">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.MapCtrl.Projected">
            <summary>
            Gets or sets whether the map is projected.
            </summary>
            <remarks><para><b>Related articles</b>: <a href="9af7c41f-fabe-48be-9317-1e019cc19c33.htm">Map Concept</a>.</para></remarks>
        </member>
        <member name="P:Telogis.GeoBase.MapCtrl.PixelSizeMeters">
            <summary>
            Gets the <see cref="P:Telogis.GeoBase.IMap.PixelSizeMeters">pixel size in meters</see>.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.MapCtrl.Zoom">
            <summary>
            Gets or sets the current zoom level.
            </summary>
            <remarks>
            <seealso cref="T:Telogis.GeoBase.IMap"/>
            </remarks>
        </member>
        <member name="P:Telogis.GeoBase.MapCtrl.PixelSizeMiles">
            <summary>
            Gets the <see cref="P:Telogis.GeoBase.IMap.PixelSizeMiles">pixel size in miles</see>.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.MapCtrl.Renderer">
            <summary>
            The <see cref="T:Telogis.GeoBase.IMapRenderer"/> to use for this map.
            </summary>
            <remarks>
            <seealso cref="T:Telogis.GeoBase.IMap"/>
            </remarks>
        </member>
        <member name="P:Telogis.GeoBase.MapCtrl.Satellite">
            <summary>
            Switch satellite imagery on / off.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.MapCtrl.SatelliteLayerName">
            <summary>
            The name of the map layer that will be used to provide satellite imagery.  If 
            specified then the imagery will be taken from the appropriate WMS layer in the
            GeoStream's layers.config file.  Otherwise, standard Telogis GeoBase satellite imagery
            will be used.
            </summary>
            <remarks>
            <para>
            In order to get satellite imagery from a WMS layer, this property must be specified and
            Satellite must be true.
            </para>
            <para>
            "on", "off", "true" and "false" cannot be used as WMS satellite layer names.
            </para>
            </remarks>
        </member>
        <member name="P:Telogis.GeoBase.MapCtrl.MapQuality">
            <summary>
            Get or set the <see cref="T:Telogis.GeoBase.MapQuality">quality</see> at which the map will be rendered.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.MapCtrl.Style">
            <summary>
            The Map style used to draw the map.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.MapCtrl.MinZoom">
            <summary>
            Gets or sets the minimum zoom level when operating in local mode.
            </summary>
            <remarks>See <see cref="P:Telogis.GeoBase.IMap.Zoom"/>.
            </remarks>
        </member>
        <member name="P:Telogis.GeoBase.MapCtrl.MaxZoom">
            <summary>
            Gets or sets the maximum zoom level when operating in local mode.
            </summary>
            <remarks>See <see cref="P:Telogis.GeoBase.IMap.Zoom"/>.
            </remarks>
        </member>
        <member name="T:Telogis.GeoBase.MapCtrl.DefaultBehavior">
            <summary>
            Defines the behavior of the MapCtrl by default for mouse and key events.
            </summary>
            <remarks>
            Default behavior is 
            </remarks>
        </member>
        <member name="M:Telogis.GeoBase.MapCtrl.DefaultBehavior.MouseWheel(System.Object,System.Windows.Forms.MouseEventArgs)">
            <summary>
            The Default behavior of a <see cref="T:Telogis.GeoBase.MapCtrl">MapCtrl</see> when a 
            Mouse Wheel event is fired.
            </summary>
            <param name="sender">The sender of the event.</param>
            <param name="e">The mouse wheel event args for the event.</param>
        </member>
        <member name="M:Telogis.GeoBase.MapCtrl.DefaultBehavior.MouseLeave(System.Object,System.EventArgs)">
            <summary>
            The Default behavior of a <see cref="T:Telogis.GeoBase.MapCtrl">MapCtrl</see> when a 
            Mouse Leave event is fired.
            </summary>
            <param name="sender">The sender of the event.</param>
            <param name="e">The mouse leave event args for the event.</param>
        </member>
        <member name="M:Telogis.GeoBase.MapCtrl.DefaultBehavior.MouseUp(System.Object,System.Windows.Forms.MouseEventArgs)">
            <summary>
            The Default behavior of a <see cref="T:Telogis.GeoBase.MapCtrl">MapCtrl</see> when a 
            Mouse Up event is fired. If called, it is expected 
            <see cref="M:Telogis.GeoBase.MapCtrl.DefaultBehavior.MouseDown(System.Object,System.Windows.Forms.MouseEventArgs)">MouseDown</see> 
            had been called when the mouse button went down. 
            </summary>
            <param name="sender">The sender of the event.</param>
            <param name="e">The mouse up event args for the event.</param>
        </member>
        <member name="M:Telogis.GeoBase.MapCtrl.DefaultBehavior.MouseDown(System.Object,System.Windows.Forms.MouseEventArgs)">
            <summary>
            The Default behavior of a <see cref="T:Telogis.GeoBase.MapCtrl">MapCtrl</see> when a 
            Mouse Down event is fired. If called, it is expected 
            <see cref="M:Telogis.GeoBase.MapCtrl.DefaultBehavior.MouseUp(System.Object,System.Windows.Forms.MouseEventArgs)">MouseUp</see> 
            will be called on the MouseUp event.
            </summary>
            <param name="sender">The sender of the event.</param>
            <param name="e">The mouse down event args for the event.</param>
        </member>
        <member name="M:Telogis.GeoBase.MapCtrl.DefaultBehavior.MouseMove(System.Object,System.Windows.Forms.MouseEventArgs)">
            <summary>
            The Default behavior of a <see cref="T:Telogis.GeoBase.MapCtrl">MapCtrl</see> when a 
            Mouse Move event is fired.
            </summary>
            <param name="sender">The sender of the event.</param>
            <param name="e">The mouse move event args for the event.</param>
        </member>
        <member name="M:Telogis.GeoBase.MapCtrl.DefaultBehavior.KeyUp(System.Object,System.Windows.Forms.KeyEventArgs)">
            <summary>
            The Default behavior of a <see cref="T:Telogis.GeoBase.MapCtrl">MapCtrl</see> when a 
            Key up event is fired.
            </summary>
            <param name="sender">The sender of the event.</param>
            <param name="e">The key up event args for the event.</param>
        </member>
        <member name="M:Telogis.GeoBase.MapCtrl.DefaultBehavior.KeyDown(System.Object,System.Windows.Forms.KeyEventArgs)">
            <summary>
            The Default behavior of a <see cref="T:Telogis.GeoBase.MapCtrl">MapCtrl</see> when a 
            Key Down event is fired.
            </summary>
            <param name="sender">The sender of the event.</param>
            <param name="e">The key down event args for the event.</param>
        </member>
        <member name="M:Xheo.Licensing.RegistrationForm.#ctor">
            Initializes a new instance of the RegistrationForm class.
        </member>
        <member name="M:Xheo.Licensing.RegistrationForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:Xheo.Licensing.RegistrationForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:Xheo.Licensing.RegistrationForm.AddCustomField(System.String,System.String,Xheo.Licensing.CustomFieldType)">
            <summary>
            Adds a custom field to the ContactInfo section of the form.
            </summary>
            <param name="displayName">
            	The name display name of the field. If null or empty uses the fieldName.
            </param>
            <param name="fieldName">
            	The name of the field. This is used as the key in the values collection
            	sent to the registration server and included in the query string when
            	sending values to a web page. It should not contain any special characters
            	or spaces.
            </param>
            <param name="fieldType">
            	The type of field to display.
            </param>
        </member>
        <member name="M:Xheo.Licensing.RegistrationForm.OnLoad(System.EventArgs)">
            <summary>
            Overrides the OnLoad method.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Xheo.Licensing.RegistrationForm.InitializeFields(System.Collections.Specialized.NameValueCollection)">
            <summary>
            Initializes the fields on the registration form from the name value collection.
            </summary>
            <param name="values">
            	Collection of name value pairs used to initialize the form.
            </param>
            <remarks>
            	When setting values for a complex field that has child fields use dot
            	notation to indicate child fields. For example address.street.
            </remarks>
        </member>
        <member name="P:Xheo.Licensing.RegistrationForm.LogoBitmap">
            <summary>
            Gets or sets the image to display in the logo box.
            </summary>
        </member>
        <member name="P:Xheo.Licensing.RegistrationForm.License">
            <summary>
            Gets or sets the License being registered. Emtpy fields will be pre-filled
            with values from the license.
            </summary>
        </member>
        <member name="P:Xheo.Licensing.RegistrationForm.LicensedType">
            <summary>
            Gets or sets the Type of the class being registered.
            </summary>
        </member>
        <member name="P:Xheo.Licensing.RegistrationForm.PrivacyPolicyUrl">
            <summary>
            Gets or sets the URL where privacy information is available.
            </summary>
        </member>
        <member name="P:Xheo.Licensing.RegistrationForm.FirstName">
            <summary>
            Gets or sets the first name of the registrant.
            </summary>
        </member>
        <member name="P:Xheo.Licensing.RegistrationForm.LastName">
            <summary>
            Gets or sets the Last name of the registrant.
            </summary>
        </member>
        <member name="P:Xheo.Licensing.RegistrationForm.MiddleName">
            <summary>
            Gets or sets the Middle name of the registrant.
            </summary>
        </member>
        <member name="P:Xheo.Licensing.RegistrationForm.Organization">
            <summary>
            Gets or sets the organization of the registrant.
            </summary>
        </member>
        <member name="P:Xheo.Licensing.RegistrationForm.SerialNumber">
            <summary>
            Gets or sets the serial number of the license to be registered.
            </summary>
        </member>
        <member name="P:Xheo.Licensing.RegistrationForm.SerialNumberMask">
            <summary>
            Gets or sets the serial number mask used to provide a cleaner interface for
            the end user.
            </summary>
            <remarks>
            	The serial number mask identifies character placeholders and character
            	units (separated by dashes). The character pattern is then used to create
            	a set of input boxes that mimic pattern. A sample pattern would be
            	XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX for a GUID.
            </remarks>
        </member>
        <member name="P:Xheo.Licensing.RegistrationForm.SerialNumberRegex">
            <summary>
            Gets or sets a regular expression used to validate the format of the serial
            number. This is not used to secure the application, only to provide immediate
            feedback to the user if they have typed the number wrong.
            </summary>
        </member>
        <member name="P:Xheo.Licensing.RegistrationForm.SerialNumberIsAllCaps">
            <summary>
            Gets or sets a value that indicates if the serial number contains only capital
            letters.
            </summary>
        </member>
        <member name="P:Xheo.Licensing.RegistrationForm.GetLicense">
            <summary>
            Gets or sets a value that indicates if a license should be requested from the
            License server defined by <see cref="P:Xheo.Licensing.RegistrationForm.LicenseServerUrls"/>.
            </summary>
            <remarks>
            	When true the user can enter a serial number to register their product. When
            	the user selects OK, a request will be made to the license server to get
            	the license indicated by the serial number. There are no semantics placed
            	on the value of the serial number and developers are free to develop their
            	own numbering schemes.
            </remarks>
        </member>
        <member name="P:Xheo.Licensing.RegistrationForm.GotLicense">
            <summary>
            Gets or sets a value that indicates if a license was downloaded during the 
            registration process. <see cref="P:Xheo.Licensing.RegistrationForm.SaveLocation"/> contains the path where the
            license was saved.
            </summary>
            <remarks>
            	Even when GetLicense is false, if the license server returns an XML license
            	it will be saved. 
            </remarks>
        </member>
        <member name="P:Xheo.Licensing.RegistrationForm.SendToWebPage">
            <summary>
            Gets or sets a value that indicates if a license should be requested from the
            License server defined by <see cref="P:Xheo.Licensing.RegistrationForm.LicenseServerUrls"/>.
            </summary>
            <remarks>
            	When true the values of the form will be sent in a query string to the
            	web page defined by <see cref="P:Xheo.Licensing.RegistrationForm.FollowUpUrl"/>. When false the information
            	is sent directly to the license server.
            </remarks>
        </member>
        <member name="P:Xheo.Licensing.RegistrationForm.LicenseServerUrls">
            <summary>
            Gets a collection of License Server URLs where the license can be
            registered. Only the first valid server is used when registering.
            </summary>
        </member>
        <member name="P:Xheo.Licensing.RegistrationForm.FollowUpUrl">
            <summary>
            Gets or sets the URL to open after a successful registration. If <see cref="P:Xheo.Licensing.RegistrationForm.SendToWebPage"/>
            is true, the values of the form are included in the request.
            </summary>
        </member>
        <member name="P:Xheo.Licensing.RegistrationForm.ShowDetails">
            <summary>
            Gets or sets a value that indicates if the detailed contact information
            should be displayed.
            </summary>
        </member>
        <member name="P:Xheo.Licensing.RegistrationForm.DetailsToggleAvailable">
            <summary>
            Gets or sets a value that indicates if the Details toggle button is available.
            </summary>
        </member>
        <member name="P:Xheo.Licensing.RegistrationForm.RequiredFields">
            <summary>
            Gets or sets a comma separated list of required fields.
            </summary>
            <remarks>
            The available field names are: FirstName, LastName, MiddleName, Organization,
            SerialNumber, Email, Phone and Address. When the user selects OK any field
            in this list must be present or they receive a prompt. More sophisticated
            validation must be performed at the server.
            </remarks>
        </member>
        <member name="P:Xheo.Licensing.RegistrationForm.IsMandatory">
            <summary>
            Gets or sets a value indicating if they registration is mandatory. The cancel
            button is disabled and if they attempt to close they are warned that they
            must register.
            </summary>
        </member>
        <member name="P:Xheo.Licensing.RegistrationForm.SaveLocation">
            <summary>
            Gets or sets the location where the downloaded license should be saved.
            </summary>
            <remarks>
            When <see cref="P:Xheo.Licensing.RegistrationForm.GetLicense"/> is true, this specifies the location where
            the generated license pack should be saved to on success.7
            </remarks>
        </member>
        <member name="T:Xheo.Licensing.CustomFieldType">
            <summary>
            Custom field types for the contact info section of the form.
            </summary>
        </member>
        <member name="F:Xheo.Licensing.CustomFieldType.Text">
            <summary>
            Display a single line text box
            </summary>
        </member>
        <member name="F:Xheo.Licensing.CustomFieldType.MultiLine">
            <summary>
            Display a multi-line text box. Always uses 3 lines.
            </summary>
        </member>
        <member name="F:Xheo.Licensing.CustomFieldType.Checkbox">
            <summary>
            Display a check box.
            </summary>
        </member>
        <member name="F:Xheo.Licensing.CustomFieldType.Custom">
            <summary>
            Use a control that implements <see cref="T:Xheo.Licensing.ICustomFormControl"/>. The
            fieldName should be the assembly qualified name of the Type to load.
            </summary>
        </member>
        <member name="F:Xheo.Licensing.CustomFieldType.Header">
            <summary>
            Displays a section header that doesn not collect any data.
            </summary>
        </member>
        <member name="F:Xheo.Licensing.CustomFieldType.Address">
            <summary>
            Displays an address form for both international and US addresses.
            </summary>
        </member>
        <member name="F:Xheo.Licensing.CustomFieldType.Password">
            <summary>
            Displays a text box with the password field set.
            </summary>
        </member>
        <member name="T:Xheo.Licensing.Line">
            <summary>
            Draws a straight beveled or flat line.
            </summary>
        </member>
        <member name="M:Xheo.Licensing.Line.#ctor">
            <summary>
             Initializes a new instance of the Line class.
            </summary>
        </member>
        <member name="M:Xheo.Licensing.Line.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <summary>
            Overrides <see cref="M:System.Windows.Forms.Control.OnPaint(System.Windows.Forms.PaintEventArgs)"/>.
            </summary>
            <param name="pe"></param>
        </member>
        <member name="P:Xheo.Licensing.Line.Beveled">
            <summary>
            Gets or sets a value that indicates if the line should be drawn with a 
            beveled look. If false, only the <see cref="P:Xheo.Licensing.Line.Highlight"/> color is used.
            </summary>
        </member>
        <member name="P:Xheo.Licensing.Line.Highlight">
            <summary>
            Gets or sets the highlight color.
            </summary>
        </member>
        <member name="P:Xheo.Licensing.Line.Shadow">
            <summary>
            Gets or sets the shadow color.
            </summary>
        </member>
        <member name="P:Xheo.Licensing.Line.Orientation">
            <summary>
            Gets or sets the orientation of the line.
            </summary>
        </member>
        <member name="P:Xheo.Licensing.Line.LineWidth">
            <summary>
            Gets the width of the line.
            </summary>
        </member>
        <member name="T:Xheo.Licensing.BetaLimit">
            <summary>
            Indicates that the licensed assembly is in BETA.
            </summary>
        </member>
        <member name="M:Xheo.Licensing.BetaLimit.#ctor">
            <summary>
            Initializes a new instance of the BetaLimit class.
            </summary>
        </member>
        <member name="M:Xheo.Licensing.BetaLimit.#ctor(System.String,System.DateTime)">
            <summary>
            Initializes a new instance of the BetaLimit class.
            </summary>
            <param name="updateUrl">
            	URL where the latest version can be downloaded.
            </param>
            <param name="expires">
            	Date when the beta expires.
            </param>
        </member>
        <member name="M:Xheo.Licensing.BetaLimit.Validate(System.ComponentModel.LicenseContext,System.Type,System.Object)">
            <summary>
            Validates that the license being granted is within the limits enforced by
            this object.
            </summary>
            <param name="context">
            	The LicenseContext passed to <see cref="M:System.ComponentModel.LicenseProvider.GetLicense(System.ComponentModel.LicenseContext,System.Type,System.Object,System.Boolean)"/>.
            </param>
            <param name="type">
            	The Type of the object being licensed.
            </param>
            <param name="instance">
            	The instance of the object being licensed.
            </param>
            <returns>
            	Returns true if the limits are valid, otherwise false.
            </returns>
        </member>
        <member name="M:Xheo.Licensing.BetaLimit.Peek(System.ComponentModel.LicenseContext,System.Type,System.Object)">
            <summary>
            Determines if the beta has expired yet.
            </summary>
            <param name="context"></param>
            <param name="type"></param>
            <param name="instance"></param>
            <returns></returns>
        </member>
        <member name="M:Xheo.Licensing.BetaLimit.LoadFromXml(System.Xml.XmlNode)">
            <summary>
            Loads the contents of a Limit from an XML string.
            </summary>
            <param name="node">
            	The XML string to load from.
            </param>
            <returns>
            	Returns true if the load was successful, otherwise false.
            </returns>
        </member>
        <member name="M:Xheo.Licensing.BetaLimit.SaveToXml(System.Xml.XmlNode)">
            <summary>
            Saves the contents of the Limit as an XML string.
            </summary>
            <returns>
            	Returns the saved XML.
            </returns>
        </member>
        <member name="M:Xheo.Licensing.BetaLimit.GetDetailsDescription">
            <summary>
            Overrides <see cref="M:Xheo.Licensing.Limit.GetDetailsDescription"/>.
            </summary>
        </member>
        <member name="P:Xheo.Licensing.BetaLimit.UpdateUrl">
            <summary>
            Gets or sets the name of the Beta that the limit applies to.
            </summary>
        </member>
        <member name="P:Xheo.Licensing.BetaLimit.Expires">
            <summary>
            Gets or sets the date when the BETA expires.
            </summary>
        </member>
        <member name="P:Xheo.Licensing.BetaLimit.BrowseUpdate">
            <summary>
            Gets or sets a value that indicates if the notification window should browse directly to 
            the update url or simply display a notice.
            </summary>
        </member>
        <member name="P:Xheo.Licensing.BetaLimit.UseGui">
            <summary>
            Gets or sets a value that indicates if the user will be presented with a notice about the
            beta expiring or if the license will just fail.
            </summary>
        </member>
        <member name="P:Xheo.Licensing.BetaLimit.Description">
            <summary>
            Gets the description of the limit.
            </summary>
        </member>
        <member name="P:Xheo.Licensing.BetaLimit.Name">
            <summary>
            Gets the display name of the limit.
            </summary>
        </member>
        <member name="P:Xheo.Licensing.BetaLimit.IsTimeSensitive">
            <summary>
            Gets a value that indicates if the beta limit is time sensitive.
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.Internal.CountryFileStructure">
             <summary>
            
             </summary>
        </member>
        <member name="F:Telogis.GeoBase.Internal.CountryFileStructure.Default">
             <summary>
            
             </summary>
        </member>
        <member name="F:Telogis.GeoBase.Internal.CountryFileStructure.FullStateNames">
             <summary>
            
             </summary>
        </member>
        <member name="F:Telogis.GeoBase.Internal.CountryFileStructure.PCStringFollow">
             <summary>
            
             </summary>
        </member>
        <member name="F:Telogis.GeoBase.Internal.CountryFileStructure.HasRealZips">
             <summary>
            
             </summary>
        </member>
        <member name="F:Telogis.GeoBase.Internal.CountryFileStructure.PCIntFollow">
             <summary>
            
             </summary>
             <remarks></remarks>
        </member>
        <member name="F:Telogis.GeoBase.Internal.CountryFileStructure.NoStateNames">
             <summary>
            
             </summary>
        </member>
        <member name="F:Telogis.GeoBase.Internal.CountryFileStructure.HasRegionCount">
             <summary>
            
             </summary>
        </member>
        <member name="F:Telogis.GeoBase.Internal.CountryFileStructure.RegionCountPlus1">
             <summary>
            
             </summary>
        </member>
        <member name="F:Telogis.GeoBase.Internal.CountryFileStructure.RegionCountPlus2">
             <summary>
            
             </summary>
        </member>
        <member name="F:Telogis.GeoBase.Internal.CountryFileStructure.RegionCountPlus4">
             <summary>
            
             </summary>
        </member>
        <member name="F:Telogis.GeoBase.Internal.CountryFileStructure.PCFullLookaside">
             <summary>
            
             </summary>
        </member>
        <member name="F:Telogis.GeoBase.Internal.CountryFileStructure.HasPCSuffix">
            <summary>
            
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Internal.CountryFileStructure.HasSubregionCount">
            <summary>
            Has suburb data
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.Internal.IGeoCoder">
            <summary>
            Specifies an interface to a generic GeoCoder.
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.Internal.IGeoCoder.Parse(System.String,Telogis.GeoBase.Internal.gb_geocode_addr[]@,Telogis.GeoBase.Internal.StreetAddressMatch[]@)">
            <summary>
            Parses the address string.
            </summary>
            <param name="address"></param>
            <param name="search"></param>
            <param name="searchMatch"></param>
        </member>
        <member name="M:Telogis.GeoBase.Internal.IGeoCoder.CreateAddress(Telogis.GeoBase.Internal.gb_geocode_addr)">
            <summary>
            Creates an address.
            </summary>
            <param name="address"></param>
            <returns></returns>
        </member>
        <member name="P:Telogis.GeoBase.Internal.IGeoCoder.Country">
            <summary>
            Gets the <see cref="T:Telogis.GeoBase.Country"/> of the GeoCoder.
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.Internal.ITypeMapProvider">
             <summary>
            
             </summary>
        </member>
        <member name="M:Telogis.GeoBase.Internal.ITypeMapProvider.GetLong(System.String)">
             <summary>
            
             </summary>
             <param name="abbrev"></param>
             <returns></returns>
        </member>
        <member name="M:Telogis.GeoBase.Internal.ITypeMapProvider.GetAbbrev(System.String)">
             <summary>
            
             </summary>
             <param name="longT"></param>
             <returns></returns>
        </member>
        <member name="T:Telogis.GeoBase.Internal.HMMGeocodeAddress">
             <summary>
            
             </summary>
        </member>
        <member name="M:Telogis.GeoBase.Internal.HMMGeocodeAddress.GetFields(System.String)">
             <summary>
            
             </summary>
             <param name="lang"></param>
             <returns></returns>
        </member>
        <member name="M:Telogis.GeoBase.Internal.HMMGeocodeAddress.#ctor(Telogis.GeoBase.Internal.gb_geocode_addr)">
             <summary>
            
             </summary>
             <param name="address"></param>
        </member>
        <member name="M:Telogis.GeoBase.Internal.HMMGeocodeAddress.#ctor">
             <summary>
            
             </summary>
        </member>
        <member name="P:Telogis.GeoBase.Internal.HMMGeocodeAddress.Street">
             <summary>
            
             </summary>
        </member>
        <member name="P:Telogis.GeoBase.Internal.HMMGeocodeAddress.City">
            <summary>
            The name of the city.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Internal.HMMGeocodeAddress.Region">
            <summary>
            The name of the region.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Internal.HMMGeocodeAddress.PostalCode">
            <summary>
            The zip code of this address.
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.Internal.gb_geocode_addr">
             <summary>
            
             </summary>
             
        </member>
        <member name="F:Telogis.GeoBase.Internal.gb_geocode_addr.street_offset">
            <summary>
            If the address is a street, this will point to the street offset in the file. Otherwise
            all FeatureInfo fields will be zero.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Internal.gb_geocode_addr.file_no">
             <summary>
            
             </summary>
        </member>
        <member name="F:Telogis.GeoBase.Internal.gb_geocode_addr.number">
             <summary>
            
             </summary>
        </member>
        <member name="F:Telogis.GeoBase.Internal.gb_geocode_addr.min_number">
             <summary>
            
             </summary>
        </member>
        <member name="F:Telogis.GeoBase.Internal.gb_geocode_addr.max_number">
             <summary>
            
             </summary>
        </member>
        <member name="F:Telogis.GeoBase.Internal.gb_geocode_addr.match_type">
             <summary>
            
             </summary>
        </member>
        <member name="F:Telogis.GeoBase.Internal.gb_geocode_addr.subregion_count">
            <summary>
            
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Internal.gb_geocode_addr.street">
             <summary>
            
             </summary>
        </member>
        <member name="F:Telogis.GeoBase.Internal.gb_geocode_addr.parsing">
            <summary>
            Specifies the locations of the prefix, typ aft, typ bef and suffix
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Internal.gb_geocode_addr.basenameLen">
            <summary>
            Length of the basename
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Internal.gb_geocode_addr.basenameLoc">
            <summary>
            Location of the basename
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Internal.gb_geocode_addr.hasNameInfo">
            <summary>
            1 is yes, 0 is no
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Internal.gb_geocode_addr.city">
             <summary>
            
             </summary>
        </member>
        <member name="F:Telogis.GeoBase.Internal.gb_geocode_addr.state">
             <summary>
            
             </summary>
        </member>
        <member name="F:Telogis.GeoBase.Internal.gb_geocode_addr.state_short">
             <summary>
            
             </summary>
        </member>
        <member name="F:Telogis.GeoBase.Internal.gb_geocode_addr.county">
             <summary>
            
             </summary>
        </member>
        <member name="F:Telogis.GeoBase.Internal.gb_geocode_addr.subregions">
             <summary>
            
             </summary>
        </member>
        <member name="F:Telogis.GeoBase.Internal.gb_geocode_addr.post_code">
             <summary>
            
             </summary>
        </member>
        <member name="F:Telogis.GeoBase.Internal.gb_geocode_addr.post_code_suffix">
             <summary>
            
             </summary>
        </member>
        <member name="F:Telogis.GeoBase.Internal.gb_geocode_addr.zip">
             <summary>
            
             </summary>
        </member>
        <member name="F:Telogis.GeoBase.Internal.gb_geocode_addr.lat">
             <summary>
            
             </summary>
        </member>
        <member name="F:Telogis.GeoBase.Internal.gb_geocode_addr.lon">
             <summary>
            
             </summary>
        </member>
        <member name="F:Telogis.GeoBase.Internal.gb_geocode_addr.country">
             <summary>
            
             </summary>
        </member>
        <member name="F:Telogis.GeoBase.Internal.gb_geocode_addr.isShortState">
             <summary>
            
             </summary>
        </member>
        <member name="F:Telogis.GeoBase.Internal.gb_geocode_addr.file_type">
             <summary>
            
             </summary>
        </member>
        <member name="F:Telogis.GeoBase.Internal.gb_geocode_addr.hasBounds">
            <summary>
            Whether the result has a bounding box.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Internal.gb_geocode_addr.boundsBottom">
            <summary>
            The coordinates of the bounding box corners.  Note that the corners may straddle the 
            antimeridian, in which case boundsLeft will be greater than boundsRight.
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.Internal.gb_geocode_addr.Cleanup">
            <summary>
            Frees up the native resources associated with this address.
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Internal.gb_geocode_addr.LatLon">
             <summary>
            
             </summary>
        </member>
        <member name="T:Telogis.GeoBase.Internal.StreetAddressMatch">
            <summary>
            StreetAddressMatch
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Internal.StreetAddressMatch.confidence">
            <summary>
            confidence of the match
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Internal.StreetAddressMatch.original_name">
            <summary>
            original search string
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Internal.StreetAddressMatch.original_number">
            <summary>
            origin street number
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Internal.StreetAddressMatch.number">
            <summary>
            number
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Internal.StreetAddressMatch.prefix">
            <summary>
            n, s, e , w etc
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Internal.StreetAddressMatch.bf_type">
             <summary>
            
             </summary>
        </member>
        <member name="F:Telogis.GeoBase.Internal.StreetAddressMatch.name">
             <summary>
            
             </summary>
        </member>
        <member name="F:Telogis.GeoBase.Internal.StreetAddressMatch.af_type">
            <summary>
            st, rd, ave, ln etc
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Internal.StreetAddressMatch.suffix">
             <summary>
            
             </summary>
        </member>
        <member name="F:Telogis.GeoBase.Internal.StreetAddressMatch.postcode">
             <summary>
            
             </summary>
        </member>
        <member name="F:Telogis.GeoBase.Internal.StreetAddressMatch.city">
             <summary>
            
             </summary>
        </member>
        <member name="F:Telogis.GeoBase.Internal.StreetAddressMatch.region">
             <summary>
            
             </summary>
        </member>
        <member name="F:Telogis.GeoBase.Internal.StreetAddressMatch.subregion">
            <summary>
            
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Internal.StreetAddressMatch.probably_street">
             <summary>
            
             </summary>
        </member>
        <member name="F:Telogis.GeoBase.Internal.StreetAddressMatch.addr">
             <summary>
            
             </summary>
        </member>
        <member name="F:Telogis.GeoBase.Internal.StreetAddressMatch.dupe">
             <summary>
            
             </summary>
        </member>
        <member name="F:Telogis.GeoBase.Internal.StreetAddressMatch.cross_street">
             <summary>
            
             </summary>
        </member>
        <member name="F:Telogis.GeoBase.Internal.StreetAddressMatch.highway_type">
             <summary>
            
             </summary>
        </member>
        <member name="F:Telogis.GeoBase.Internal.StreetAddressMatch.highway_number">
             <summary>
            
             </summary>
        </member>
        <member name="F:Telogis.GeoBase.Internal.StreetAddressMatch.backup">
            <summary>
            Whether this is a backup match, for use only if the other matches failed to return any
            results.
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.Internal.StreetAddressMatch.#ctor">
            <summary>
            Initialize new instance of StreetAddressMatch
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.Internal.StreetAddressMatch.#ctor(Telogis.GeoBase.Internal.StreetAddressMatch)">
            <summary>
            Create new StreetAddressMatch from another StreetAddressMatch
            </summary>
            <param name="copy"></param>
        </member>
        <member name="F:Telogis.GeoBase.Internal.StreetAddressMatch.DistanceFromRequestedCity">
            <summary>
            The distance of the SAM from the centroid of the requested city in km (if the city is found, that is)
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.ImageUtils.RubberbandRectangle">
            <summary>
            Class to draw XOR rubber-band selection areas on a map.
            </summary>
            <remarks>
            Used to draw selection boxes on a map when (for example)
            click-dragging a mouse.
            </remarks>
        </member>
        <member name="M:Telogis.GeoBase.ImageUtils.RubberbandRectangle.#ctor">
            <summary>
            Construct a new (default) rubberband.
            </summary>
            <remarks>Defaults to PS_DOT <see cref="T:Telogis.GeoBase.ImageUtils.RubberbandRectangle.PenStyles">style</see>.
            </remarks>
        </member>
        <member name="M:Telogis.GeoBase.ImageUtils.RubberbandRectangle.DrawXORRectangle(System.Drawing.Graphics,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Draw/remove a rectangle at the specified co-ordinates.  This 
            uses GDI function, which isn't supported on Linux. 
            </summary>
            <param name="grp">The <see cref="T:System.Drawing.Graphics"/> to draw on.</param>
            <param name="X1">The top left x coordinate.</param>
            <param name="Y1">The top left y coordinate.</param>
            <param name="X2">The bottom right x coordinate.</param>
            <param name="Y2">The bottom right y coordinate.</param>
        </member>
        <member name="M:Telogis.GeoBase.ImageUtils.RubberbandRectangle.DrawXORRectangle(System.Windows.Forms.Control,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Draw/remove a rectangle at the specified coordinates. Only solid 
            and dashed rectangles are supported (other PenStyles are mapped to
            dashed rectangles), but this function is compatible with all 
            platforms. 
            </summary>
            <param name="control">The control to draw on.</param>
            <param name="X1">The top left x coordinate.</param>
            <param name="Y1">The top left y coordinate.</param>
            <param name="X2">The bottom right x coordinate.</param>
            <param name="Y2">The bottom right y coordinate.</param>
        </member>
        <member name="P:Telogis.GeoBase.ImageUtils.RubberbandRectangle.PenStyle">
            <summary>
            Gets or sets the <see cref="T:Telogis.GeoBase.ImageUtils.RubberbandRectangle.PenStyles">PenStyle</see> to use.
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.ImageUtils.RubberbandRectangle.PenStyles">
            <summary>
            Pen Styles for RubberbandRectangle
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.ImageUtils.RubberbandRectangle.PenStyles.PS_SOLID">
            <summary>
            A solid line.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.ImageUtils.RubberbandRectangle.PenStyles.PS_DASH">
            <summary>
            A dashed line.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.ImageUtils.RubberbandRectangle.PenStyles.PS_DOT">
            <summary>
            A dotted line.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.ImageUtils.RubberbandRectangle.PenStyles.PS_DASHDOT">
            <summary>
            A dash-dot-dash-dot line.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.ImageUtils.RubberbandRectangle.PenStyles.PS_DASHDOTDOT">
            <summary>
            A dash-dot-dot-dash-dot-dot line
            </summary>
        </member>
        <member name="T:Telogis.UI.ControlStyleStatus">
            <summary>
            Describes the state of a ControlStyle member.
            </summary>
        </member>
        <member name="F:Telogis.UI.ControlStyleStatus.Normal">
            <summary>
            The user is not pressing on the control.
            </summary>
        </member>
        <member name="F:Telogis.UI.ControlStyleStatus.Pressed">
            <summary>
            The control is being pressed (by the mouse or stylus).
            </summary>
        </member>
        <member name="T:Telogis.UI.ControlStyle">
            <summary>
            Abstract class that is implemented by all control styles.
            </summary>
        </member>
        <member name="M:Telogis.UI.ControlStyle.RenderBox(System.Drawing.Graphics,System.Single,System.Single,System.Single,System.Single,Telogis.UI.ControlStyleStatus)">
            <summary>
            Implemented by derived classes to render a box on a given graphics output with specified dimensions.
            </summary>
            <param name="graphics"><see cref="T:System.Drawing.Graphics"/></param>
            <param name="x">Distance (in pixels) from the left edge of <b>graphics</b>.</param>
            <param name="y">Distance (in pixels) from the top edge of <b>graphics</b>.</param>
            <param name="width">Width of box (pixels).</param>
            <param name="height">Height of box (pixels).</param>
            <param name="cca">The <see cref="T:Telogis.UI.ControlStyleStatus">ControlStyleStatus</see> of the the control: 'pressed' or 'normal'.</param>
        </member>
        <member name="T:Telogis.UI.FlatRoundControlStyle">
            <summary>
            A rounded control style, such as a <see cref="T:Telogis.GeoBase.Navigation.TurnBox"/>.
            </summary>
        </member>
        <member name="F:Telogis.UI.FlatRoundControlStyle.Background">
            <summary>
            The <see cref="T:System.Drawing.Brush"/> used to draw the background color, defaults to white.
            </summary>
        </member>
        <member name="F:Telogis.UI.FlatRoundControlStyle.BorderPen">
            <summary>
            The <see cref="T:System.Drawing.Pen"/> used to draw the border, defaults to 4px wide and gray.
            </summary>
        </member>
        <member name="F:Telogis.UI.FlatRoundControlStyle.CornerRadius">
            <summary>
            The size of the radius of each corner, defaults to 6px.
            </summary>
        </member>
        <member name="M:Telogis.UI.FlatRoundControlStyle.RenderBox(System.Drawing.Graphics,System.Single,System.Single,System.Single,System.Single,Telogis.UI.ControlStyleStatus)">
            <summary>
            Renders the box on a given graphics output with specified dimensions.
            </summary>
            <param name="graphics"><see cref="T:System.Drawing.Graphics"/></param>
            <param name="x">Distance (in pixels) from the left edge of <b>graphics</b>.</param>
            <param name="y">Distance (in pixels) from the top edge of <b>graphics</b>.</param>
            <param name="width">Width of box (pixels).</param>
            <param name="height">Height of box (pixels).</param>
            <param name="ccs">The <see cref="T:Telogis.UI.ControlStyleStatus">ControlStyleStatus</see> of the the control: 'pressed' or 'normal'.</param>
        </member>
        <member name="T:Telogis.UI.GelButtonControlStyle">
            <summary>
            A gel button control style; drawn as a modern-styled 'capsule'.
            </summary>
        </member>
        <member name="F:Telogis.UI.GelButtonControlStyle.Background">
            <summary>
            The <see cref="T:System.Drawing.Color">System.Drawing.Color</see> used to draw the background. Default is black.
            </summary>
        </member>
        <member name="F:Telogis.UI.GelButtonControlStyle.Border">
            <summary>
            The <see cref="T:System.Drawing.Color">System.Drawing.Color</see> used to draw the border, defaults to black.
            </summary>
        </member>
        <member name="F:Telogis.UI.GelButtonControlStyle.Light">
            <summary>
            The <see cref="T:System.Drawing.SolidBrush">System.Drawing.SolidBrush</see> used to draw the shadows. Default is a light alpha white.
            </summary>
        </member>
        <member name="F:Telogis.UI.GelButtonControlStyle.CornerRadius">
            <summary>
            The size of the radius of each corner. Default is 3px.
            </summary>
        </member>
        <member name="M:Telogis.UI.GelButtonControlStyle.RenderBox(System.Drawing.Graphics,System.Single,System.Single,System.Single,System.Single,Telogis.UI.ControlStyleStatus)">
            <summary>
            Renders the GelButtonControl on a given graphics output with specified dimensions.
            </summary>
            <param name="graphics"><see cref="T:System.Drawing.Graphics"/></param>
            <param name="x">Distance (in pixels) from the left edge of <b>graphics</b></param>
            <param name="y">Distance (in pixels) from the top edge of <b>graphics</b></param>
            <param name="width">Width of GelButtonControl (pixels)</param>
            <param name="height">Height of GelButtonControl (pixels)</param>
            /// <param name="ccs">The <see cref="T:Telogis.UI.ControlStyleStatus">ControlStyleStatus</see> of the the control: 'pressed' or 'normal'.</param>
        </member>
        <member name="T:Telogis.GeoBase.Statistics">
            <summary>
            Provides statistics on GeoBase activity
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.Statistics.Reset">
            <summary>
            Reset all statistics to zero
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.Statistics.TotalMapsDrawn">
            <summary>
            Get the total number of maps drawn since statistics were last reset
            </summary>
        </member>
        <member name="T:Telogis.NativeSerial.NativeFileAPI">
            <summary>
            wrapper containing static methods from core dll that allows Win32/Windows CE SDK file access
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.GeoStream.Server.MasterRequest`1">
            <summary>
            A MasterRequest represents a group of IRequests that can/have to be done at the same time. Each
            subrequest in a MasterRequest must produce a key (implement IHasKey) that is the same as every
            other subrequest that should belong in the same MasterRequest.
            </summary>
            <typeparam name="T">The type of the subrequest</typeparam>
        </member>
        <member name="F:Telogis.GeoBase.GeoStream.Server.MasterRequest`1.ActiveRequests">
            <summary>
            A registry of active master requests
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.GeoStream.Server.MasterRequest`1.GetMasterRequest(`0,System.Action{Telogis.GeoBase.GeoStream.Server.MasterRequest{`0}},System.Guid,Telogis.GeoBase.Diagnostics.ILogger)">
            <summary>
            MasterRequest factory. When you have a subrequest, you call this method to obtain the MasterRequest which
            you can insert into a WorkerPool. This method exists to group all subrequests under one master request
            so that they can be processed at the same time.
            </summary>
            <param name="request">The request</param>
            <param name="serviceRequestProc">The method that is called to service the master request.
            NOTE: THIS IS ONLY HERE BECAUSE THE TileRequest TYPE IS GENERAL FOR ALL SATELLITE, WMS AND MAP REQUESTS
            WILL REMOVE THIS WHEN EACH Type T HAS ITS OWN PROCESS ROUTINE THAT THE MASTER REQUEST CAN CALL
            TODO TODO TODO
            </param>
            <param name="requestId">
            The requestId of the request to be added
            </param>
            <param name="logger">The logger to use for this request.</param>
            <returns>The master request</returns>
        </member>
        <member name="M:Telogis.GeoBase.GeoStream.Server.MasterRequest`1.RequestIsCompleted(Telogis.GeoBase.GeoStream.Server.MasterRequest{`0},System.Action{`0})">
            <summary>
            Declare that a MasterRequest has been completed. Usually called in the process method of a subrequest.
            </summary>
            <param name="request">The master request that has been completed</param>
            <param name="doForeachSubrequest">An action to perform on each of the subrequests on completion,
            usually to make each subrequest respond to the pages/Http requests that created them
            </param>
        </member>
        <member name="M:Telogis.GeoBase.GeoStream.Server.MasterRequest`1.IsRequestIncomplete(System.String)">
            <summary>
            Returns true if the given master request is still being serviced
            </summary>
            <param name="requestkey"></param>
            <returns></returns>
        </member>
        <member name="M:Telogis.GeoBase.GeoStream.Server.MasterRequest`1.#ctor(`0,System.Action{Telogis.GeoBase.GeoStream.Server.MasterRequest{`0}},Telogis.GeoBase.Diagnostics.ILogger)">
            <summary>
            Private constructor for the master request. Please use GetMasterRequest if operating
            from outside this class
            </summary>
            <param name="request">The subrequest</param>
            <param name="serviceRequestProc">The process method</param>
            <param name="logger">The logger to use.</param>
        </member>
        <member name="M:Telogis.GeoBase.GeoStream.Server.MasterRequest`1.AddRequest(`0)">
            <summary>
            Add a request to this master request
            </summary>
            <param name="req"></param>
        </member>
        <member name="M:Telogis.GeoBase.GeoStream.Server.MasterRequest`1.ForeachSubRequest(System.Action{`0})">
            <summary>
            Do something on each subrequest
            </summary>
            <param name="action"></param>
        </member>
        <member name="P:Telogis.GeoBase.GeoStream.Server.MasterRequest`1.AllMasterRequests">
            <summary>
            Get a list of all currently pending/processing master requests
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.GeoStream.Server.MasterRequest`1.MasterRequestCount">
            <summary>
            Get the number of currently pending/processing master requests
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.GeoStream.Server.MasterRequest`1.StartTime">
            <summary>
            The time the master request was created
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.GeoStream.Server.MasterRequest`1.TimeInCurrentStatus">
            <summary>
            The time when the master request switched to this status
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.GeoStream.Server.MasterRequest`1.FirstRequest">
            <summary>
            Get the first subrequest on this master request
            </summary>
        </member>
        <member name="P:Telogis.GeoBase.GeoStream.Server.MasterRequest`1.RequestCount">
            <summary>
            Count the number of subrequests in this master request
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.GeoStream.Server.LayersConfig.Load(System.String)">
            <summary>
            If filename exists, loads from file else return null.
            </summary>
            <param name="userDataFileName"></param>
            <returns></returns>
        </member>
        <member name="T:Telogis.GeoBase.GeoStream.Server.SRS">
            <summary>
            The "Spatial Reference System" is used to specify the coordinate system that is used for
            requests on a Layer.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.GeoStream.Server.SRS.None">
            <summary>
            Default case, geobase will not return tiles on this layer if the SRS has not been set.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.GeoStream.Server.SRS.EPSG4326">
            <summary>
            Commonly known as WGS84.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.GeoStream.Server.SRS.EPSG3857">
            <summary>
            Web Mercator
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.GeoStream.Server.SRS.EPSG3395">
            <summary>
            World Mercator Spatial Reference System EPSG:3395. 
            </summary>
        </member>
        <member name="T:Telogis.GeoBase.Clustering.ClusterPage">
            <summary>
            The ClusterPage class can be used on an ASP.NET server to supply cluster
            information to a <see cref="T:Telogis.GeoBase.Clustering.RemoteClusterLayer"/>
            object on the client.
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.Clustering.ClusterPage.ServeRequest(Telogis.GeoBase.Clustering.IClusterLayer,Telogis.GeoBase.Serialization.JSONObject,System.Web.HttpContext)">
            <summary>
            Synchronously calculates the clusters for a given cluster layer.
            </summary>
            <param name="layer">The cluster layer.</param>
            <param name="userObject">User-specific information associated with the set of clusters
            in the layer, that will be set on the
            <see cref="T:Telogis.GeoBase.Clustering.ClusterSet"/>'s UserObject property.</param>
            <param name="context">The HttpContext for the request and response.</param>
        </member>
        <member name="M:Telogis.GeoBase.Clustering.ClusterPage.ServeRequest(Telogis.GeoBase.Clustering.IClusterLayer,Telogis.GeoBase.Serialization.JSONObject,System.Web.UI.Page)">
            <summary>
            Registers beginning and ending event handler delegates on an asynchronous page that
            will calculate the clusters for a given cluster layer.
            </summary>
            <param name="layer">The cluster layer.</param>
            <param name="userObject">User-specific information associated with the set of clusters
            in the layer, that will be set on the
            <see cref="T:Telogis.GeoBase.Clustering.ClusterSet"/>'s UserObject property.</param>
            <param name="page">The Page that has been requested by the client.</param>
        </member>
        <member name="M:Telogis.GeoBase.Clustering.ClusterPage.BeginServeRequest(Telogis.GeoBase.Clustering.IClusterLayer,Telogis.GeoBase.Serialization.JSONObject,System.Web.HttpContext,System.AsyncCallback,System.Object)">
            <summary>
            Starts asynchronously calculating the clusters for a cluster layer.
            </summary>
            <param name="layer">The cluster layer.</param>
            <param name="userObject">User-specific information associated with the set of clusters
            in the layer, that will be set on the
            <see cref="T:Telogis.GeoBase.Clustering.ClusterSet"/>'s UserObject property.</param>
            <param name="context">The HttpContext for the request and response.</param>
            <param name="callback">Callback that will be set on the returned IAsyncResult.</param>
            <param name="state">State object that will be set on the returned IAsyncResult.</param>
            <returns>An IAsyncResult that will be passed to EndServeRequest.</returns>
        </member>
        <member name="M:Telogis.GeoBase.Clustering.ClusterPage.BeginServeRequest(Telogis.GeoBase.Clustering.IClusterLayer,Telogis.GeoBase.Serialization.JSONObject,System.Web.HttpRequest,System.Web.HttpResponse,System.AsyncCallback,System.Object)">
            <summary>
            Starts asynchronously calculating the clusters for a cluster layer.
            </summary>
            <param name="layer">The cluster layer.</param>
            <param name="userObject">User-specific information associated with the set of clusters
            in the layer, that will be set on the
            <see cref="T:Telogis.GeoBase.Clustering.ClusterSet"/>'s UserObject property.</param>
            <param name="request">The HttpRequest from the client.</param>
            <param name="response">The HttpResponse that will be sent to the client.</param>
            <param name="callback">Callback that will be set on the returned IAsyncResult.</param>
            <param name="state">State object that will be set on the returned IAsyncResult.</param>
            <returns>An IAsyncResult that will be passed to EndServeRequest.</returns>
        </member>
        <member name="M:Telogis.GeoBase.Clustering.ClusterPage.EndServeRequest(System.IAsyncResult)">
            <summary>
            Completes asynchronous calculation of the clusters on a cluster layer.
            </summary>
            <param name="result">The IAsyncResult that was returned by BeginServeRequest.</param>
        </member>
        <member name="M:Telogis.GeoBase.Clustering.ClusterPage.QuoteJSON(System.String)">
            <summary>
            Places single-quotes and parens around a JSON string and escapes the necessary
            characters in the JSON to ensure that it is preserved even once its containing
            string is evaluated.
            </summary>
            <param name="json">The raw JSON to quote.</param>
            <returns>A quoted string containing <paramref name="json"/>.</returns>
        </member>
        <member name="M:Telogis.GeoBase.Clustering.ClusterPage.IsCompressionRequested(System.Web.HttpRequest,System.String)">
            <summary>
            Determines if a compression algorithm is requested by the client
            </summary>
            <param name="request">The request being served.</param>
            <param name="name">The name of a compression algorithm (e.g. "gzip")</param>
            <returns>True, if the name of the compression algorithm given in name has been
            requested by the client in the Accept-Encoding header, otherwise false.</returns>
        </member>
        <member name="T:Telogis.GeoBase.Navigation.SchematicTurnBox">
             <summary>
             SchematicTurnBox draws a visual aid when navigating a turn or, more generally, a <see cref="T:Telogis.GeoBase.Navigation.NavigationEvent"/>.
             </summary>
             <remarks>SchematicTurnBox uses predefined images for each possible
             type of navigation event, as well as a progress bar to indicate the
             approach to the point where the navigation event takes place.
            </remarks>
        </member>
        <member name="M:Telogis.GeoBase.Navigation.SchematicTurnBox.#ctor">
            <summary>
            Creates a SchematicTurnBox that uses the default images. Images should be 
            available in your TurnIcons folder.
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.Navigation.SchematicTurnBox.#ctor(System.String)">
             <summary>
             Creates a SchematicTurnBox that uses images from a specified folder.
             </summary>
             <param name="imagesPath">The path for the folder that contains the
             images for displaying different movements.</param>
             <remarks><para>The images folder should contain the following images (in png, bmp,
             gif, or jpeg format):</para>
             <list type="table">
             <listheader>
             <term>File</term>
             <description>Represents</description>
             </listheader>
             <item>
             <term>around_round_lhd.png</term>
             <description>Uturn by going around a traffic circle in left-hand traffic.</description>
             </item>
             <item>
             <term>around_round_rhd.png</term>
             <description>Uturn by going around a traffic circle in right-hand traffic.</description>
             </item>
             <item>
             <term>blank.png</term>
             <description>background/blank image.</description>
             </item>
             <item>
             <term>destination.png</term>
             <description>Arrival at destination</description>
             </item>
             <item>
             <term>fwy_change.png</term>
             <description>Change freeways.</description>
             </item>
             <item>
             <term>fwy_enter_lhd.png</term>
             <description>Enter freeway on the left.</description>
             </item>
             <item>
             <term>fwy_enter_rhd.png</term>
             <description>Enter freeway on the right.</description>
             </item>
             <item>
             <term>fwy_exit_lhd.png</term>
             <description>Exit freeway on the left.</description>
             </item>
             <item>
             <term>fwy_exit.rhd.png</term>
             <description>Exit freeway on the right.</description>
             </item>
             <item>
             <term>left.png</term>
             <description>Turn left.</description>
             </item>
             <item>
             <term>left_bear.png</term>
             <description>Bear to the left.</description>
             </item>
             <item>
             <term>left_lane.png</term>
             <description>Use the left lane.</description>
             </item>
             <item>
             <term>left_round_lhd.png</term>
             <description>Turn left at the traffic circle in left-hand traffic.</description>
             </item>
             <item>
             <term>left_round_rhd.png</term>
             <description>Turn left at the traffic circle in right-hand traffic.</description>
             </item>
             <item>
             <term>left_sharp.png</term>
             <description>Take a sharp left</description>
             </item>
             <item>
             <term>right.png</term>
             <description>Turn right.</description>
             </item>
             <item>
             <term>right_bear.png</term>
             <description>Bear to the right.</description>
             </item>
             <item>
             <term>right_lane.png</term>
             <description>Use the right lane.</description>
             </item>
             <item>
             <term>right_round_lhd.png</term>
             <description>Turn right at the traffic circle in left-hand traffic.</description>
             </item>
             <item>
             <term>right_round_rhd.png</term>
             <description>Turn right at the traffic circle in right-hand traffic.</description>
             </item>
             <item>
             <term>right_sharp.png</term>
             <description>Take a sharp right.</description>
             </item>
             <item>
             <term>straight.png</term>
             <description>Go straight ahead.</description>
             </item>
             <item>
             <term>straight_round_lhd.png</term>
             <description>Go straight through the traffic circle in left-hand traffic.</description>
             </item>
             <item>
             <term>straight_round_rhd.png</term>
             <description>Go straight through the traffic circle in right-hand traffic.</description>
             </item>
             <item>
             <term>uturn_lhd.png</term>
             <description>Make a uturn in left-hand traffic (by turning right).</description>
             </item>
             <item>
             <term>uturn_rhd.png</term>
             <description>Make a uturn in right-hand traffic (by turning left).</description>
             </item>
             </list>
            </remarks>
        </member>
        <member name="F:Telogis.GeoBase.Navigation.SchematicTurnBox.Event">
            <summary>
            The current navigation event, about which the schematic turn box shows information.
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.Navigation.SchematicTurnBox.Render(System.Drawing.Graphics,Telogis.GeoBase.RenderContext)">
            <summary>
            Draws the schematic turn box to represent the current navigation event.
            </summary>
            <param name="graphics">The <see cref="T:System.Drawing.Graphics"/> object to use for drawing</param>
            <param name="rc">The <see cref="T:Telogis.GeoBase.RenderContext"/> that provides the
            context of the drawing operation.</param>
        </member>
        <member name="M:Telogis.GeoBase.Navigation.SchematicTurnBox.GetFilename(Telogis.GeoBase.Navigation.NavigationEvent)">
            <summary>
            Returns the name of the file to use when rendering a specified navigation event.
            </summary>
            <param name="ev">The navigation event.</param>
            <returns>The file name for the image that corresponds to that event.</returns>
        </member>
        <member name="P:Telogis.GeoBase.Navigation.SchematicTurnBox.RequiredRendermodes">
            <summary>
            Gets the <see cref="T:Telogis.GeoBase.RenderMode"/> for when this
            schematic turnbox is rendered.
            </summary>
            <remarks>Schematic turnbox is rendered in the post-labelling stage.</remarks>
        </member>
        <member name="T:Telogis.GeoBase.Compiler.Assembler.Emitter">
            <summary>
            Class that adds statements' emissions to a compiled map style, checking state as it goes.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Compiler.Assembler.Emitter._emit">
            <summary>
            The array of statement emissions.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Compiler.Assembler.Emitter._programSuffixOrder">
            <summary>
            A list of op codes that, if they are present, must be present at the end of the program
            and in the order that they appear in the list.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Compiler.Assembler.Emitter._previousCheckedStatement">
            <summary>
            The most recent statement that produced emissions.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Compiler.Assembler.Emitter._previousSuffixIndex">
            <summary>
            The index of _previousCheckedStatement in _programSuffixOrder.
            </summary>
        </member>
        <member name="F:Telogis.GeoBase.Compiler.Assembler.Emitter._emitSizeWords">
            <summary>
            The number of words in _emit.
            </summary>
        </member>
        <member name="M:Telogis.GeoBase.Compiler.Assembler.Emitter.#ctor(System.Collections.ArrayList)">
            <summary>
            Creates an Emitter that will append to the supplied list of emissions.
            </summary>
            <param name="emit">The list of emissions</param>
        </member>
        <member name="M:Telogis.GeoBase.Compiler.Assembler.Emitter.Emit(Telogis.GeoBase.Compiler.Assembler.Statement)">
            <summary>
            Adds a statement's emissions to the program, checking the state of the program
            afterwards.
            </summary>
            <param name="stmt">The statement whose emissions are to be added.</param>
        </member>
        <member name="M:Telogis.GeoBase.Internal.RStarTree.Dump">
            <summary>
            For debug purposes, dump the r-tree to a file 'level.text' in the current directory
            </summary>
        </member>
    </members>
</doc>
